language: rs
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut i = 0;\n    while i < prime_numbers.len() {\n        let\
    \ mut j = i + 1;\n        while j < prime_numbers.len() {\n            let mut\
    \ k = j + 1;\n            while k < prime_numbers.len() {\n                if\
    \ a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k] {\n            \
    \        result = true;\n                }\n                k += 1;\n        \
    \    }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz3jiv5ha.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = false;\n\
    \    while i <= a {\n        if a % i == 0 {\n            count += 1;\n      \
    \      if count == 3 {\n                result = true;\n                break;\n\
    \            }\n            a /= i;\n        } else {\n            i += 1;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpz8_40fq3.rs:17:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n17 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut a = a;\n    let mut primes = vec![2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let mut i = 0;\n    while a > 1 && i < primes.len() {\n\
    \        if a % primes[i] == 0 {\n            a /= primes[i];\n            result\
    \ = true;\n        } else {\n            i += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1joo9lls.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_prime = true;\n    let mut a = a;\n    let mut i = 2;\n  \
    \  let mut count = 0;\n    while i < a && count < 3 {\n        if a % i == 0 {\n\
    \            a = a / i;\n            count += 1;\n        } else {\n         \
    \   i += 1;\n        }\n    }\n    if count == 3 {\n        is_prime = true;\n\
    \    } else {\n        is_prime = false;\n    }\n    is_prime\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7oa9vew9.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        if a % primes[i] ==\
    \ 0 {\n            result = true;\n            let mut tmp = a / primes[i];\n\
    \            let mut j = 0;\n            while j < primes.len() {\n          \
    \      if tmp % primes[j] == 0 {\n                    result = true;\n       \
    \             tmp = tmp / primes[j];\n                    j = 0;\n           \
    \     } else {\n                    j += 1;\n                }\n            }\n\
    \            if tmp == 1 {\n                break;\n            } else {\n   \
    \             result = false;\n            }\n        }\n        i += 1;\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpemh_ce6i.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    for i in 0..primes.len()\
    \ {\n        for j in 0..primes.len() {\n            for k in 0..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut count = 0;\n    for i in 2..a {\n       \
    \ if a % i == 0 {\n            a = a / i;\n            count += 1;\n        }\n\
    \        if count == 3 {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvs06i56h.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![];\n    for i in 2..a\
    \ {\n        if is_prime(i) {\n            primes.push(i);\n        }\n    }\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp4g6ursw3.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    while i <= a {\n        if\
    \ a % i == 0 {\n            count += 1;\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    count == 3\n}\n\nfn main() {\n   \
    \ let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n \
    \   assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n  \
    \  assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpc6434t5s.rs:12:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n12 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers: Vec<isize> = Vec::new();\n    let mut i = 2;\n\
    \    while i <= a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \        }\n        i += 1;\n    }\n    let mut result = false;\n    for i in\
    \ 0..prime_numbers.len() {\n        for j in i..prime_numbers.len() {\n      \
    \      for k in j..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp94v52_su.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = false;\n\
    \    while i <= a {\n        if a % i == 0 {\n            if is_prime(i) {\n \
    \               count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpf00jpr9n.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_prime = true;\n    let mut i = 2;\n    while i < a {\n   \
    \     if a % i == 0 {\n            is_prime = false;\n            break;\n   \
    \     }\n        i += 1;\n    }\n    is_prime\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqta7la5e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfcg2yoz8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n                k += 1;\n            }\n            j += 1;\n    \
    \    }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu8n_z7n2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![];\n    for i in 2..a\
    \ {\n        if is_prime(i) {\n            primes.push(i);\n        }\n    }\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp4g6ursw3.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfcg2yoz8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                }\n                k\
    \ += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz1_hlrk_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i < a {\n        if a % i == 0 {\n            if is_prime(i) {\n  \
    \              count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp46rfkreb.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp33_1pcjf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                }\n                k\
    \ += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz1_hlrk_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                }\n                k\
    \ += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz1_hlrk_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = Vec::new();\n    let mut i = 2;\n    while\
    \ i <= a {\n        if is_prime(i) {\n            primes.push(i);\n        }\n\
    \        i += 1;\n    }\n    let mut j = 0;\n    let mut k = primes.len() - 1;\n\
    \    while j < k {\n        let sum = primes[j] + primes[k];\n        if sum ==\
    \ a {\n            return true;\n        } else if sum < a {\n            j +=\
    \ 1;\n        } else {\n            k -= 1;\n        }\n    }\n    false\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpdt3grki6.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut tmp = a;\n    let mut primes = vec![];\n\
    \    let mut i = 2;\n    while tmp > 1 {\n        if tmp % i == 0 {\n        \
    \    primes.push(i);\n            tmp /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if primes.len() == 3 {\n        result = true;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    while i <= a {\n        if\
    \ a % i == 0 {\n            count += 1;\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    count == 3\n}\n\nfn main() {\n   \
    \ let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n \
    \   assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n  \
    \  assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpc6434t5s.rs:12:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n12 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let primes: Vec<isize> = (2..a).filter(|x| is_prime(*x)).collect();\n\
    \    let mut result = false;\n    for i in 0..primes.len() {\n        for j in\
    \ i..primes.len() {\n            for k in j..primes.len() {\n                if\
    \ primes[i] * primes[j] * primes[k] == a {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmplfcee95c.rs:7:48\n\
    \  |\n7 |     let primes: Vec<isize> = (2..a).filter(|x| is_prime(*x)).collect();\n\
    \  |                                                ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    while i < a {\n        if\
    \ a % i == 0 && is_prime(i) {\n            count += 1;\n        }\n        i +=\
    \ 1;\n    }\n    count == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpcpf1lk1l.rs:10:26\n\
    \   |\n10 |         if a % i == 0 && is_prime(i) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut prime_numbers: Vec<isize> = Vec::new();\n\
    \    for i in 2..a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \        }\n    }\n    for i in 0..prime_numbers.len() {\n        for j in i..prime_numbers.len()\
    \ {\n            for k in j..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpfx6223ff.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = false;\n\
    \    while i <= a {\n        if a % i == 0 {\n            count += 1;\n      \
    \      a /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if\
    \ count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpwxoozufk.rs:13:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n13 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i <= a {\n        if a % i == 0 {\n            if is_prime(i) {\n \
    \               count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmgfxi5m5.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    while i < a {\n        if\
    \ a % i == 0 && is_prime(i) {\n            count += 1;\n        }\n        i +=\
    \ 1;\n    }\n    count == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpcpf1lk1l.rs:10:26\n\
    \   |\n10 |         if a % i == 0 && is_prime(i) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < primes.len()\
    \ {\n        while j < primes.len() {\n            while k < primes.len() {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true;\n                }\n                k += 1;\n           \
    \ }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxhc8x36f.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut prime_numbers = Vec::new();\n\
    \    while i <= a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \            count += 1;\n        }\n        i += 1;\n    }\n    let mut result\
    \ = false;\n    for i in 0..count {\n        for j in i..count {\n           \
    \ for k in j..count {\n                if prime_numbers[i] * prime_numbers[j]\
    \ * prime_numbers[k] == a {\n                    result = true;\n            \
    \    }\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpwcnmw56h.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = Vec::new();\n    let mut i = 2;\n    while\
    \ i <= a {\n        if is_prime(i) {\n            primes.push(i);\n        }\n\
    \        i += 1;\n    }\n    let mut result = false;\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk26ay6t3.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![];\n    let mut i\
    \ = 2;\n    while i < a {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..primes.len() {\n        for\
    \ j in 0..primes.len() {\n            for k in 0..primes.len() {\n           \
    \     if primes[i] * primes[j] * primes[k] == a {\n                    result\
    \ = true;\n                }\n            }\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpdft50p4z.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfcg2yoz8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut a = a;\n    let mut i = 2;\n   \
    \ let mut count = 0;\n    while a > 1 && count < 3 {\n        if a % i == 0 {\n\
    \            count += 1;\n            a /= i;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    if count == 3 {\n        result = true;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzmbvpsu9.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = Vec::new();\n    let mut i = 2;\n\
    \    while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n   \
    \         a /= i;\n        } else {\n            i += 1;\n        }\n    }\n \
    \   primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_prime = true;\n    let mut i = 2;\n    while i < a {\n   \
    \     if a % i == 0 {\n            is_prime = false;\n            break;\n   \
    \     }\n        i += 1;\n    }\n    is_prime\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqta7la5e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut a = a;\n    let\
    \ mut result = true;\n    while a > 1 {\n        let mut found = false;\n    \
    \    for i in 0..primes.len() {\n            if a % primes[i] == 0 {\n       \
    \         a /= primes[i];\n                primes.remove(i);\n               \
    \ found = true;\n                break;\n            }\n        }\n        if\
    \ !found {\n            result = false;\n            break;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx5aeuiug.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                }\n                k\
    \ += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz1_hlrk_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = Vec::new();\n    for i in 2..a {\n     \
    \   if is_prime(i) {\n            primes.push(i);\n        }\n    }\n    for i\
    \ in 0..primes.len() {\n        for j in i..primes.len() {\n            for k\
    \ in j..primes.len() {\n                if primes[i] * primes[j] * primes[k] ==\
    \ a {\n                    return true;\n                }\n            }\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpwic215lj.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e\
    \ = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let\
    \ mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n   \
    \ let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut ab =\
    \ 0;\n    let mut ac = 0;\n    let mut ad = 0;\n    let mut ae = 0;\n    let mut\
    \ af = 0;\n    let mut ag = 0;\n    let mut ah = 0;\n    let mut ai = 0;\n   \
    \ let mut aj = 0;\n    let mut ak = 0;\n    let mut al = 0;\n    let mut am =\
    \ 0;\n    let mut an = 0;\n    let mut ao = 0;\n    let mut ap = 0;\n    let mut\
    \ aq = 0;\n    let mut ar = 0;\n    let mut as_ = 0;\n    let mut at = 0;\n  \
    \  let mut au = 0;\n    let mut av = 0;\n    let mut aw = 0;\n    let mut ax =\
    \ 0;\n    let mut ay = 0;\n    let mut az = 0;\n    let mut ba = 0;\n    let mut\
    \ bb = 0;\n    let mut bc = 0;\n    let mut bd = 0;\n    let mut be = 0;\n   \
    \ let mut bf = 0;\n    let mut bg = 0;\n    let mut bh = 0;\n    let mut bi =\
    \ 0;\n    let mut bj = 0;\n    let mut bk = 0;\n   \n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfb8tl7b5.rs:6:35\n  |\n6 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e\
    \ = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let\
    \ mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n   \
    \ let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut ab =\
    \ 0;\n    let mut ac = 0;\n    let mut ad = 0;\n    let mut ae = 0;\n    let mut\
    \ af = 0;\n    let mut ag = 0;\n    let mut ah = 0;\n    let mut ai = 0;\n   \
    \ let mut aj = 0;\n    let mut ak = 0;\n    let mut al = 0;\n    let mut am =\
    \ 0;\n    let mut an = 0;\n    let mut ao = 0;\n    let mut ap = 0;\n    let mut\
    \ aq = 0;\n    let mut ar = 0;\n    let mut as_ = 0;\n    let mut at = 0;\n  \
    \  let mut au = 0;\n    let mut av = 0;\n    let mut aw = 0;\n    let mut ax =\
    \ 0;\n    let mut ay = 0;\n    let mut az = 0;\n    let mut ba = 0;\n    let mut\
    \ bb = 0;\n    let mut bc = 0;\n    let mut bd = 0;\n    let mut be = 0;\n   \
    \ let mut bf = 0;\n    let mut bg = 0;\n    let mut bh = 0;\n    let mut bi =\
    \ 0;\n    let mut bj = 0;\n    let mut bk = 0;\n   \n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfb8tl7b5.rs:6:35\n  |\n6 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut num = a;\n    while\
    \ i <= num {\n        if num % i == 0 {\n            num /= i;\n            count\
    \ += 1;\n        } else {\n            i += 1;\n        }\n    }\n    count ==\
    \ 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut j = 2;\n   \
    \ let mut k = 2;\n    while i < 100 {\n        while j < 100 {\n            while\
    \ k < 100 {\n                if i * j * k == a {\n                    result =\
    \ true;\n                }\n                k += 1;\n            }\n         \
    \   j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp_fwmu0bd.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut sum = 0;\n    let mut count\
    \ = 0;\n    let mut temp = 0;\n    let mut temp2 = 0;\n    let mut temp3 = 0;\n\
    \    let mut temp4 = 0;\n    let mut temp5 = 0;\n    let mut temp6 = 0;\n    let\
    \ mut temp7 = 0;\n    let mut temp8 = 0;\n    let mut temp9 = 0;\n    let mut\
    \ temp10 = 0;\n    let mut temp11 = 0;\n    let mut temp12 = 0;\n    let mut temp13\
    \ = 0;\n    let mut temp14 = 0;\n    let mut temp15 = 0;\n    let mut temp16 =\
    \ 0;\n    let mut temp17 = 0;\n    let mut temp18 = 0;\n    let mut temp19 = 0;\n\
    \    let mut temp20 = 0;\n    let mut temp21 = 0;\n    let mut temp22 = 0;\n \
    \   let mut temp23 = 0;\n    let mut temp24 = 0;\n    let mut temp25 = 0;\n  \
    \  let mut temp26 = 0;\n    let mut temp27 = 0;\n    let mut temp28 = 0;\n   \
    \ let mut temp29 = 0;\n    let mut temp30 = 0;\n    let mut temp31 = 0;\n    let\
    \ mut temp32 = 0;\n    let mut temp33 = 0;\n    let mut temp34 = 0;\n    let mut\
    \ temp35 = 0;\n    let mut temp36 = 0;\n    let mut temp37 = 0;\n    let mut temp38\
    \ = 0;\n    let mut temp39 = 0;\n    let mut temp40 = 0;\n    let mut temp41 =\
    \ 0;\n    let mut temp42 = 0;\n    let\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp0shx2ofa.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let\
    \ mut count = 0;\n    while i < primes.len() {\n        if a % primes[i] == 0\
    \ {\n            count += 1;\n        }\n        i += 1;\n    }\n    if count\
    \ == 3 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n \
    \   let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpau11scfy.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb =\
    \ 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut\
    \ ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n   \
    \ let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm =\
    \ 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut\
    \ qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n   \
    \ let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx =\
    \ 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let\
    \ mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee =\
    \ 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpmeys0n1s.rs:62:1\n  \
    \ |\n62 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e\
    \ = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let\
    \ mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n   \
    \ let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut ab =\
    \ 0;\n    let mut ac = 0;\n    let mut ad = 0;\n    let mut ae = 0;\n    let mut\
    \ af = 0;\n    let mut ag = 0;\n    let mut ah = 0;\n    let mut ai = 0;\n   \
    \ let mut aj = 0;\n    let mut ak = 0;\n    let mut al = 0;\n    let mut am =\
    \ 0;\n    let mut an = 0;\n    let mut ao = 0;\n    let mut ap = 0;\n    let mut\
    \ aq = 0;\n    let mut ar = 0;\n    let mut as_ = 0;\n    let mut at = 0;\n  \
    \  let mut au = 0;\n    let mut av = 0;\n    let mut aw = 0;\n    let mut ax =\
    \ 0;\n    let mut ay = 0;\n    let mut az = 0;\n    let mut ba = 0;\n    let mut\
    \ bb = 0;\n    let mut bc = 0;\n    let mut bd = 0;\n    let mut be = 0;\n   \
    \ let mut bf = 0;\n    let mut bg = 0;\n    let mut bh = 0;\n    let mut bi =\
    \ 0;\n    let mut bj = 0;\n    let mut bk = 0;\n   \n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfb8tl7b5.rs:6:35\n  |\n6 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    while i < a {\n        if\
    \ a % i == 0 && is_prime(i) {\n            count += 1;\n        }\n        i +=\
    \ 1;\n    }\n    count == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpcpf1lk1l.rs:10:26\n\
    \   |\n10 |         if a % i == 0 && is_prime(i) {\n   |                     \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = Vec::new();\n    let mut i = 2;\n    while\
    \ i <= a {\n        if is_prime(i) {\n            primes.push(i);\n        }\n\
    \        i += 1;\n    }\n    let mut result = false;\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk26ay6t3.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb =\
    \ 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut\
    \ ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n   \
    \ let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm =\
    \ 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut\
    \ qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n   \
    \ let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx =\
    \ 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let\
    \ mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee =\
    \ 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpvl7xmden.rs:62:1\n  \
    \ |\n62 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut a = a;\n    let\
    \ mut result = true;\n    for i in 0..primes.len() {\n        if a % primes[i]\
    \ == 0 {\n            a = a / primes[i];\n            if a == 1 {\n          \
    \      break;\n            }\n        }\n    }\n    if a != 1 {\n        result\
    \ = false;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp1nib29ay.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            a /= i;\n            primes.push(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    primes.len() ==\
    \ 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut i = 0;\n    while i < prime_numbers.len() {\n        let\
    \ mut j = i + 1;\n        while j < prime_numbers.len() {\n            let mut\
    \ k = j + 1;\n            while k < prime_numbers.len() {\n                if\
    \ a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k] {\n            \
    \        result = true;\n                }\n                k += 1;\n        \
    \    }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz3jiv5ha.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    for i in 2..a {\n        if a % i == 0 {\n\
    \            for j in 2..a {\n                if a % j == 0 {\n              \
    \      for k in 2..a {\n                        if a % k == 0 {\n            \
    \                if a == i * j * k {\n                                result =\
    \ true;\n                            }\n                        }\n          \
    \          }\n                }\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy2_oge_9.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp33_1pcjf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut i = 0;\n    while i < prime_numbers.len() {\n        let\
    \ mut j = i + 1;\n        while j < prime_numbers.len() {\n            let mut\
    \ k = j + 1;\n            while k < prime_numbers.len() {\n                if\
    \ a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k] {\n            \
    \        result = true;\n                }\n                k += 1;\n        \
    \    }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz3jiv5ha.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![];\n    for i in 2..a {\n        if is_prime(i)\
    \ {\n            primes.push(i);\n        }\n    }\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmplw8yjo1r.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i <= a {\n        if a % i == 0 {\n            if is_prime(i) {\n \
    \               count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmgfxi5m5.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut i = 0;\n    while i < prime_numbers.len() {\n        if\
    \ a % prime_numbers[i] == 0 {\n            result = true;\n            break;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnjgnl5tu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = false;\n\
    \    while i <= a {\n        if a % i == 0 {\n            count += 1;\n      \
    \      if count == 3 {\n                result = true;\n                break;\n\
    \            }\n            a /= i;\n        } else {\n            i += 1;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpz8_40fq3.rs:17:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n17 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = false;\n\
    \    while i <= a {\n        if a % i == 0 {\n            count += 1;\n      \
    \      a /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if\
    \ count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpwxoozufk.rs:13:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n13 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let\
    \ mut a_copy = a;\n    while a_copy > 1 {\n        if a_copy % primes[i] == 0\
    \ {\n            a_copy /= primes[i];\n        } else {\n            i += 1;\n\
    \        }\n    }\n    a_copy == 1\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpr7a42256.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    for\
    \ i in 0..prime_numbers.len() {\n        for j in 0..prime_numbers.len() {\n \
    \           for k in 0..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    for i in 0..primes.len()\
    \ {\n        for j in 0..primes.len() {\n            for k in 0..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e\
    \ = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let\
    \ mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n   \
    \ let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut ab =\
    \ 0;\n    let mut ac = 0;\n    let mut ad = 0;\n    let mut ae = 0;\n    let mut\
    \ af = 0;\n    let mut ag = 0;\n    let mut ah = 0;\n    let mut ai = 0;\n   \
    \ let mut aj = 0;\n    let mut ak = 0;\n    let mut al = 0;\n    let mut am =\
    \ 0;\n    let mut an = 0;\n    let mut ao = 0;\n    let mut ap = 0;\n    let mut\
    \ aq = 0;\n    let mut ar = 0;\n    let mut as_ = 0;\n    let mut at = 0;\n  \
    \  let mut au = 0;\n    let mut av = 0;\n    let mut aw = 0;\n    let mut ax =\
    \ 0;\n    let mut ay = 0;\n    let mut az = 0;\n    let mut ba = 0;\n    let mut\
    \ bb = 0;\n    let mut bc = 0;\n    let mut bd = 0;\n    let mut be = 0;\n   \
    \ let mut bf = 0;\n    let mut bg = 0;\n    let mut bh = 0;\n    let mut bi =\
    \ 0;\n    let mut bj = 0;\n    let mut bk = 0;\n   \n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfb8tl7b5.rs:6:35\n  |\n6 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2];\n    let mut i\
    \ = 3;\n    while primes.len() < 3 {\n        if is_prime(i) {\n            primes.push(i);\n\
    \        }\n        i += 1;\n    }\n    let mut j = 0;\n    while j < primes.len()\
    \ {\n        let mut k = 0;\n        while k < primes.len() {\n            let\
    \ mut l = 0;\n            while l < primes.len() {\n                if primes[j]\
    \ * primes[k] * primes[l] == a {\n                    result = true;\n       \
    \         }\n                l += 1;\n            }\n            k += 1;\n   \
    \     }\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp0dpyparg.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut i = 0;\n    while i < prime_numbers.len() {\n        if\
    \ a % prime_numbers[i] == 0 {\n            result = true;\n            break;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpnjgnl5tu.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut j = 2;\n   \
    \ let mut k = 2;\n    while i < a {\n        while j < a {\n            while\
    \ k < a {\n                if i * j * k == a {\n                    result = true;\n\
    \                }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphob12t8n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = false;\n\
    \    while i <= a {\n        if a % i == 0 {\n            if is_prime(i) {\n \
    \               count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpf00jpr9n.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = Vec::new();\n    let mut num = a;\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            while num % i == 0 {\n  \
    \              primes.push(i);\n                num /= i;\n            }\n   \
    \     }\n    }\n    primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpvfhuq3jm.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         return true;\n                }\n            }\n        }\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let\
    \ mut result = false;\n    while i < primes.len() {\n        if a % primes[i]\
    \ == 0 {\n            result = true;\n            break;\n        }\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn16buw1h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let\
    \ mut result = 1;\n    while i < primes.len() && result < a {\n        if a %\
    \ primes[i] == 0 {\n            result *= primes[i];\n        }\n        i +=\
    \ 1;\n    }\n    result == a\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpx6_yjci_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut j = 2;\n   \
    \ let mut k = 2;\n    while i < a {\n        while j < a {\n            while\
    \ k < a {\n                if i * j * k == a {\n                    result = true;\n\
    \                }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphob12t8n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers: Vec<isize> = Vec::new();\n    for i in 2..a {\n\
    \        if is_prime(i) {\n            prime_numbers.push(i);\n        }\n   \
    \ }\n    for i in 0..prime_numbers.len() {\n        for j in 0..prime_numbers.len()\
    \ {\n            for k in 0..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp2gy3x768.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    for i in 2..a {\n \
    \       if is_prime(i) {\n            while a % i == 0 {\n                a /=\
    \ i;\n                primes.push(i);\n            }\n        }\n    }\n    primes.len()\
    \ == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmprj_g9dyb.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers: Vec<isize> = Vec::new();\n    for i in 2..a {\n\
    \        if is_prime(i) {\n            prime_numbers.push(i);\n        }\n   \
    \ }\n    for i in 0..prime_numbers.len() {\n        for j in 0..prime_numbers.len()\
    \ {\n            for k in 0..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp2gy3x768.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut count = 0;\n    let mut i = 0;\n    while i < prime_numbers.len()\
    \ {\n        if a % prime_numbers[i] == 0 {\n            count += 1;\n       \
    \ }\n        i += 1;\n    }\n    if count == 3 {\n        result = true;\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpechd3bxh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut a = a;\n    while\
    \ i <= a {\n        if a % i == 0 {\n            count += 1;\n            a /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    count == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_prime = true;\n    let mut i = 2;\n    let mut a = a;\n  \
    \  let mut count = 0;\n    while i < a {\n        if a % i == 0 {\n          \
    \  a = a / i;\n            count += 1;\n            if count == 3 {\n        \
    \        break;\n            }\n        } else {\n            i += 1;\n      \
    \  }\n    }\n    if a == 1 {\n        is_prime = false;\n    }\n    is_prime\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7saqfben.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i <= a {\n        if a % i == 0 {\n            if is_prime(i) {\n \
    \               count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmgfxi5m5.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut sum =\
    \ 0;\n    while i < primes.len() {\n        while j < primes.len() {\n       \
    \     while k < primes.len() {\n                sum = primes[i] * primes[j] *\
    \ primes[k];\n                if sum == a {\n                    result = true;\n\
    \                    break;\n                }\n                k += 1;\n    \
    \        }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwuniu_gc.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp33_1pcjf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i < a {\n        if a % i == 0 {\n            if is_prime(i) {\n  \
    \              count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp46rfkreb.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        if a % primes[i] ==\
    \ 0 {\n            let b = a / primes[i];\n            let mut j = 0;\n      \
    \      while j < primes.len() {\n                if b % primes[j] == 0 {\n   \
    \                 let c = b / primes[j];\n                    let mut k = 0;\n\
    \                    while k < primes.len() {\n                        if c %\
    \ primes[k] == 0 {\n                            result = true;\n             \
    \               break;\n                        }\n                        k +=\
    \ 1;\n                    }\n                    break;\n                }\n \
    \               j += 1;\n            }\n            break;\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpdznh1mdn.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i <= a {\n        if a % i == 0 {\n            if is_prime(i) {\n \
    \               count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmgfxi5m5.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = true;\n\
    \    while i < a {\n        if a % i == 0 {\n            if is_prime(i) {\n  \
    \              count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count != 3 {\n        result = false;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp49edgb55.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut a = a;\n    let mut count = 0;\n    while\
    \ i <= a {\n        if a % i == 0 {\n            a /= i;\n            count +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    count == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i < a {\n        if a % i == 0 {\n            if is_prime(i) {\n  \
    \              count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp46rfkreb.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e\
    \ = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let\
    \ mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n   \
    \ let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut ab =\
    \ 0;\n    let mut ac = 0;\n    let mut ad = 0;\n    let mut ae = 0;\n    let mut\
    \ af = 0;\n    let mut ag = 0;\n    let mut ah = 0;\n    let mut ai = 0;\n   \
    \ let mut aj = 0;\n    let mut ak = 0;\n    let mut al = 0;\n    let mut am =\
    \ 0;\n    let mut an = 0;\n    let mut ao = 0;\n    let mut ap = 0;\n    let mut\
    \ aq = 0;\n    let mut ar = 0;\n    let mut as_ = 0;\n    let mut at = 0;\n  \
    \  let mut au = 0;\n    let mut av = 0;\n    let mut aw = 0;\n    let mut ax =\
    \ 0;\n    let mut ay = 0;\n    let mut az = 0;\n    let mut ba = 0;\n    let mut\
    \ bb = 0;\n    let mut bc = 0;\n    let mut bd = 0;\n    let mut be = 0;\n   \
    \ let mut bf = 0;\n    let mut bg = 0;\n    let mut bh = 0;\n    let mut bi =\
    \ 0;\n    let mut bj = 0;\n    let mut bk = 0;\n   \n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfb8tl7b5.rs:6:35\n  |\n6 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let\
    \ mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n   \
    \ let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n\
    \    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n\
    \    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa =\
    \ 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut\
    \ ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n   \
    \ let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll =\
    \ 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut\
    \ pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n   \
    \ let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww =\
    \ 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut\
    \ aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n\
    \    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut\
    \ hhh = 0;\n\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzlf5dipb.rs:6:35\n  |\n6 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut prime_numbers = vec![];\n    let\
    \ mut i = 2;\n    while i <= a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..prime_numbers.len() {\n  \
    \      for j in 0..prime_numbers.len() {\n            for k in 0..prime_numbers.len()\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpev9j3ife.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        while a % i == 0 {\n            primes.push(i);\n  \
    \          a /= i;\n        }\n        i += 1;\n    }\n    primes.len() == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ if primes.len() == 3 {\n        return true;\n    }\n    false\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = false;\n\
    \    while i <= a {\n        if a % i == 0 {\n            count += 1;\n      \
    \      a /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if\
    \ count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpwxoozufk.rs:13:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n13 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n                k += 1;\n            }\n            j += 1;\n    \
    \    }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu8n_z7n2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < primes.len()\
    \ {\n        j = i + 1;\n        while j < primes.len() {\n            k = j +\
    \ 1;\n            while k < primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                   \
    \ break;\n                }\n                k += 1;\n            }\n        \
    \    j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcsuecv7u.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp33_1pcjf.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut count = 0;\n    let mut i = 2;\n    while\
    \ a > 1 {\n        while a % i == 0 {\n            a /= i;\n            count\
    \ += 1;\n        }\n        i += 1;\n    }\n    count == 3\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfcg2yoz8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_prime = true;\n    let mut i = 2;\n    while i < a {\n   \
    \     if a % i == 0 {\n            is_prime = false;\n            break;\n   \
    \     }\n        i += 1;\n    }\n    is_prime\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpqta7la5e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = Vec::new();\n    for i\
    \ in 2..a {\n        if is_prime(i) {\n            primes.push(i);\n        }\n\
    \    }\n    for i in 0..primes.len() {\n        for j in i..primes.len() {\n \
    \           for k in j..primes.len() {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp74r80otk.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let\
    \ mut result = false;\n    while i < primes.len() {\n        if a % primes[i]\
    \ == 0 {\n            result = true;\n            a /= primes[i];\n          \
    \  i = 0;\n        } else {\n            i += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmp6w1bigd3.rs:7:9\n\
    \  |\n7 |     let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  |         ----^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0384]: cannot assign to immutable argument `a`\n  -->\
    \ /tmp/tmp6w1bigd3.rs:13:13\n   |\n6  | fn is_multiply_prime(a: isize) -> bool\
    \ {\n   |                      - help: consider making this binding mutable: `mut\
    \ a`\n...\n13 |             a /= primes[i];\n   |             ^^^^^^^^^^^^^^ cannot\
    \ assign to immutable argument\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    let mut temp = a;\n    while i <= a {\n        if temp % i == 0 {\n     \
    \       temp = temp / i;\n            count += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    if count == 3 {\n        result = true;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut j = 2;\n   \
    \ let mut k = 2;\n    while i < a {\n        while j < a {\n            while\
    \ k < a {\n                if i * j * k == a {\n                    result = true;\n\
    \                }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphob12t8n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut prime_factors\
    \ = vec![];\n    let mut a_copy = a;\n    while a_copy > 1 {\n        for prime\
    \ in primes.iter() {\n            if a_copy % prime == 0 {\n                prime_factors.push(prime);\n\
    \                a_copy /= prime;\n                break;\n            }\n   \
    \     }\n    }\n    if prime_factors.len() == 3 {\n        return true;\n    }\n\
    \    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = Vec::new();\n    for i in 2..a {\n     \
    \   if is_prime(i) {\n            primes.push(i);\n        }\n    }\n    for i\
    \ in 0..primes.len() {\n        for j in i..primes.len() {\n            for k\
    \ in j..primes.len() {\n                if primes[i] * primes[j] * primes[k] ==\
    \ a {\n                    return true;\n                }\n            }\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmpwic215lj.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let\
    \ mut n = a;\n    let mut result = true;\n    while n != 1 && i < primes.len()\
    \ {\n        if n % primes[i] == 0 {\n            n /= primes[i];\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    if n != 1 {\n        result =\
    \ false;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp3o6yab1_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if a == primes[i] * primes[j]\
    \ * primes[k] {\n                    result = true;\n                }\n     \
    \       }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i <= a {\n        if a % i == 0 {\n            if is_prime(i) {\n \
    \               count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmgfxi5m5.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut prime_numbers = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut i = 0;\n    while i < prime_numbers.len() {\n        let\
    \ mut j = i + 1;\n        while j < prime_numbers.len() {\n            let mut\
    \ k = j + 1;\n            while k < prime_numbers.len() {\n                if\
    \ a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k] {\n            \
    \        result = true;\n                }\n                k += 1;\n        \
    \    }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyij4t5tz.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfcg2yoz8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    for i in 2..a {\n        if a % i == 0 {\n\
    \            let mut j = a / i;\n            for k in 2..j {\n               \
    \ if j % k == 0 {\n                    j = j / k;\n                    break;\n\
    \                }\n            }\n            if j == 1 {\n                result\
    \ = true;\n                break;\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpxz9nqnro.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut sum =\
    \ 0;\n    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n   \
    \         for k in 0..primes.len() {\n                sum = primes[i] * primes[j]\
    \ * primes[k];\n                if sum == a {\n                    result = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = vec![];\n    for i in 2..a {\n        if\
    \ is_prime(i) {\n            primes.push(i);\n        }\n    }\n    for i in 0..primes.len()\
    \ {\n        for j in 0..primes.len() {\n            for k in 0..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         return true;\n                }\n            }\n        }\n    }\n \
    \   false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n --> /tmp/tmp7k5ft5oe.rs:9:12\n\
    \  |\n9 |         if is_prime(i) {\n  |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    for i in 2..a {\n        if a % i == 0 {\n\
    \            let mut is_prime = true;\n            for j in 2..i {\n         \
    \       if i % j == 0 {\n                    is_prime = false;\n             \
    \       break;\n                }\n            }\n            if is_prime {\n\
    \                let mut is_prime2 = true;\n                for j in 2..(a / i)\
    \ {\n                    if (a / i) % j == 0 {\n                        is_prime2\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if is_prime2 {\n                    result = true;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphji934ll.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_prime = true;\n    let mut i = 2;\n    while i < a {\n   \
    \     if a % i == 0 {\n            if is_prime(i) {\n                is_prime\
    \ = is_prime(a / i);\n            } else {\n                is_prime = false;\n\
    \            }\n        }\n        i += 1;\n    }\n    is_prime\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0618]: expected function, found `bool`\n  --> /tmp/tmp00kitrf9.rs:11:16\n\
    \   |\n7  |     let mut is_prime = true;\n   |         ------------ `is_prime`\
    \ has type `bool`\n...\n11 |             if is_prime(i) {\n   |              \
    \  ^^^^^^^^---\n   |                |\n   |                call expression requires\
    \ function\n\nerror[E0618]: expected function, found `bool`\n  --> /tmp/tmp00kitrf9.rs:12:28\n\
    \   |\n7  |     let mut is_prime = true;\n   |         ------------ `is_prime`\
    \ has type `bool`\n...\n12 |                 is_prime = is_prime(a / i);\n   |\
    \                            ^^^^^^^^-------\n   |                           \
    \ |\n   |                            call expression requires function\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0618`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfcg2yoz8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut prime_numbers = vec![];\n    for\
    \ i in 2..a {\n        if is_prime(i) {\n            prime_numbers.push(i);\n\
    \        }\n    }\n    for i in 0..prime_numbers.len() {\n        for j in i..prime_numbers.len()\
    \ {\n            for k in j..prime_numbers.len() {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpe0aolo79.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        while a % i == 0 {\n            primes.push(i);\n  \
    \          a /= i;\n        }\n        i += 1;\n    }\n    primes.len() == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if a == primes[i] * primes[j]\
    \ * primes[k] {\n                    result = true;\n                }\n     \
    \       }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                }\n                k\
    \ += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz1_hlrk_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i <= a {\n        if a % i == 0 {\n            if is_prime(i) {\n \
    \               count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpmgfxi5m5.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                }\n                k\
    \ += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz1_hlrk_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    while i <= a {\n        if\
    \ a % i == 0 {\n            if is_prime(i) {\n                count += 1;\n  \
    \          }\n        }\n        i += 1;\n    }\n    if count == 3 {\n       \
    \ return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpx9vvn4c_.rs:11:16\n\
    \   |\n11 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let\
    \ mut result = false;\n    while i < primes.len() {\n        if a % primes[i]\
    \ == 0 {\n            result = true;\n            break;\n        }\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpn16buw1h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut b = a;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e\
    \ = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let\
    \ mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n   \
    \ let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut ab =\
    \ 0;\n    let mut ac = 0;\n    let mut ad = 0;\n    let mut ae = 0;\n    let mut\
    \ af = 0;\n    let mut ag = 0;\n    let mut ah = 0;\n    let mut ai = 0;\n   \
    \ let mut aj = 0;\n    let mut ak = 0;\n    let mut al = 0;\n    let mut am =\
    \ 0;\n    let mut an = 0;\n    let mut ao = 0;\n    let mut ap = 0;\n    let mut\
    \ aq = 0;\n    let mut ar = 0;\n    let mut as_ = 0;\n    let mut at = 0;\n  \
    \  let mut au = 0;\n    let mut av = 0;\n    let mut aw = 0;\n    let mut ax =\
    \ 0;\n    let mut ay = 0;\n    let mut az = 0;\n    let mut ba = 0;\n    let mut\
    \ bb = 0;\n    let mut bc = 0;\n    let mut bd = 0;\n    let mut be = 0;\n   \
    \ let mut bf = 0;\n    let mut bg = 0;\n    let mut bh = 0;\n    let mut bi =\
    \ 0;\n    let mut bj = 0;\n    let mut bk = 0;\n   \n}\n\nfn main() {\n    let\
    \ candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfb8tl7b5.rs:6:35\n  |\n6 |\
    \ fn is_multiply_prime(a: isize) -> bool {\n  |    -----------------         \
    \     ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut prime_numbers: Vec<isize> = Vec::new();\n\
    \    let mut i = 2;\n    while a > 1 {\n        if a % i == 0 {\n            prime_numbers.push(i);\n\
    \            a /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    prime_numbers.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut a = a;\n    while\
    \ i <= a {\n        if a % i == 0 {\n            count += 1;\n            a /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    count == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut found\
    \ = false;\n    while i < primes.len() && !found {\n        j = 0;\n        while\
    \ j < primes.len() && !found {\n            k = 0;\n            while k < primes.len()\
    \ && !found {\n                if primes[i] * primes[j] * primes[k] == a {\n \
    \                   found = true;\n                    result = true;\n      \
    \          }\n                k += 1;\n            }\n            j += 1;\n  \
    \      }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut i = 0;\n    while i < prime_numbers.len() {\n        let\
    \ mut j = i + 1;\n        while j < prime_numbers.len() {\n            let mut\
    \ k = j + 1;\n            while k < prime_numbers.len() {\n                if\
    \ a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k] {\n            \
    \        result = true;\n                }\n                k += 1;\n        \
    \    }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz3jiv5ha.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = false;\n\
    \    while i <= a {\n        if a % i == 0 {\n            count += 1;\n      \
    \      a /= i;\n        } else {\n            i += 1;\n        }\n    }\n    if\
    \ count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpwxoozufk.rs:13:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n13 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        while a % i == 0 {\n            primes.push(i);\n  \
    \          a /= i;\n        }\n        i += 1;\n    }\n    primes.len() == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut prime_numbers = vec![2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n    let mut i = 0;\n    while i < prime_numbers.len() {\n        let\
    \ mut j = i + 1;\n        while j < prime_numbers.len() {\n            let mut\
    \ k = j + 1;\n            while k < prime_numbers.len() {\n                if\
    \ a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k] {\n            \
    \        result = true;\n                }\n                k += 1;\n        \
    \    }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpyij4t5tz.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        if a % primes[i] ==\
    \ 0 {\n            let b = a / primes[i];\n            let mut j = 0;\n      \
    \      while j < primes.len() {\n                if b % primes[j] == 0 {\n   \
    \                 let c = b / primes[j];\n                    let mut k = 0;\n\
    \                    while k < primes.len() {\n                        if c %\
    \ primes[k] == 0 {\n                            result = true;\n             \
    \               break;\n                        }\n                        k +=\
    \ 1;\n                    }\n                    break;\n                }\n \
    \               j += 1;\n            }\n            break;\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpys6lwk21.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut j = 2;\n   \
    \ let mut k = 2;\n    while i < a {\n        while j < a {\n            while\
    \ k < a {\n                if i * j * k == a {\n                    result = true;\n\
    \                }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmphob12t8n.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut prime_numbers: Vec<isize> = Vec::new();\n\
    \    let mut i = 2;\n    while prime_numbers.len() < 3 {\n        if is_prime(i)\
    \ {\n            prime_numbers.push(i);\n        }\n        i += 1;\n    }\n \
    \   let mut j = 0;\n    while j < prime_numbers.len() {\n        let mut k = j\
    \ + 1;\n        while k < prime_numbers.len() {\n            let mut l = k + 1;\n\
    \            while l < prime_numbers.len() {\n                if prime_numbers[j]\
    \ * prime_numbers[k] * prime_numbers[l] == a {\n                    result = true;\n\
    \                }\n                l += 1;\n            }\n            k += 1;\n\
    \        }\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpb7e5stmx.rs:11:12\n\
    \   |\n11 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb =\
    \ 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut\
    \ ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n   \
    \ let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm =\
    \ 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut\
    \ qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n   \
    \ let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx =\
    \ 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let\
    \ mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee =\
    \ 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpvl7xmden.rs:62:1\n  \
    \ |\n62 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    let mut result = false;\n\
    \    while i < a {\n        if a % i == 0 {\n            count += 1;\n       \
    \ }\n        i += 1;\n    }\n    if count == 3 {\n        result = true;\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n  \
    \  assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n  \
    \  assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n  \
    \  assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpj6i5znjx.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747372
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = Vec::new();\n    let mut i = 2;\n    while\
    \ i <= a {\n        if is_prime(i) {\n            primes.push(i);\n        }\n\
    \        i += 1;\n    }\n    let mut result = false;\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk26ay6t3.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut i = 2;\n    let mut count = 0;\n\
    \    while i < a {\n        if a % i == 0 {\n            if is_prime(i) {\n  \
    \              count += 1;\n            }\n        }\n        i += 1;\n    }\n\
    \    if count == 3 {\n        result = true;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmp46rfkreb.rs:12:16\n\
    \   |\n12 |             if is_prime(i) {\n   |                ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut i = 0;\n    let\
    \ mut result = 1;\n    while i < primes.len() && result < a {\n        result\
    \ *= primes[i];\n        i += 1;\n    }\n    result == a\n}\n\nfn main() {\n \
    \   let candidate = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n\
    \    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8), true);\n \
    \   assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125), true);\n\
    \    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126), false);\n\
    \    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891), false);\n\
    \    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfzidd0jq.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747372
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                }\n                k\
    \ += 1;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz1_hlrk_.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747372
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut a = a;\n    let mut i = 2;\n   \
    \ let mut count = 0;\n    while a > 1 && count < 3 {\n        if a % i == 0 {\n\
    \            a /= i;\n            count += 1;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    if count == 3 {\n        result = true;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpwll6keiw.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747372
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        if a % primes[i] ==\
    \ 0 {\n            let b = a / primes[i];\n            let mut j = 0;\n      \
    \      while j < primes.len() {\n                if b % primes[j] == 0 {\n   \
    \                 let c = b / primes[j];\n                    let mut k = 0;\n\
    \                    while k < primes.len() {\n                        if c %\
    \ primes[k] == 0 {\n                            result = true;\n             \
    \               break;\n                        }\n                        k +=\
    \ 1;\n                    }\n                    break;\n                }\n \
    \               j += 1;\n            }\n            break;\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpys6lwk21.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut is_prime = true;\n    let mut num = a;\n    let mut count = 0;\n\
    \    while num > 1 {\n        for i in 2..num {\n            if num % i == 0 {\n\
    \                is_prime = false;\n                break;\n            }\n  \
    \      }\n        if is_prime {\n            count += 1;\n            if count\
    \ == 3 {\n                return true;\n            }\n            num = a / num;\n\
    \        } else {\n            is_prime = true;\n            num = a / i;\n  \
    \      }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpbwjc1r9o.rs:25:23\n\
    \   |\n25 |             num = a / i;\n   |                       ^ help: a local\
    \ variable with a similar name exists: `a`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in 0..primes.len() {\n        \
    \    for k in 0..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        if a % primes[i] ==\
    \ 0 {\n            let mut b = a / primes[i];\n            let mut j = 0;\n  \
    \          while j < primes.len() {\n                if b % primes[j] == 0 {\n\
    \                    let c = b / primes[j];\n                    let mut k = 0;\n\
    \                    while k < primes.len() {\n                        if c %\
    \ primes[k] == 0 {\n                            result = true;\n             \
    \               break;\n                        }\n                        k +=\
    \ 1;\n                    }\n                    break;\n                }\n \
    \               j += 1;\n            }\n            break;\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpzu5flse6.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747372
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = Vec::new();\n    while a % 2 ==\
    \ 0 {\n        primes.push(2);\n        a /= 2;\n    }\n    let mut i = 3;\n \
    \   while i <= a {\n        while a % i == 0 {\n            primes.push(i);\n\
    \            a /= i;\n        }\n        i += 2;\n    }\n    primes.len() == 3\n\
    }\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747372
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        if a % primes[i] ==\
    \ 0 {\n            let mut temp = a / primes[i];\n            let mut j = 0;\n\
    \            while j < primes.len() {\n                if temp % primes[j] ==\
    \ 0 {\n                    let temp2 = temp / primes[j];\n                   \
    \ let mut k = 0;\n                    while k < primes.len() {\n             \
    \           if temp2 % primes[k] == 0 {\n                            result =\
    \ true;\n                            break;\n                        }\n     \
    \                   k += 1;\n                    }\n                    break;\n\
    \                }\n                j += 1;\n            }\n            break;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpf0ew_5h3.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747372
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    for i in 0..primes.len()\
    \ {\n        for j in 0..primes.len() {\n            for k in 0..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes: Vec<isize> = Vec::new();\n    let mut i = 2;\n    while\
    \ i <= a {\n        if is_prime(i) {\n            primes.push(i);\n        }\n\
    \        i += 1;\n    }\n    let mut result = false;\n    for i in 0..primes.len()\
    \ {\n        for j in i..primes.len() {\n            for k in j..primes.len()\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true;\n                }\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_prime` in this scope\n  --> /tmp/tmpk26ay6t3.rs:10:12\n\
    \   |\n10 |         if is_prime(i) {\n   |            ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    for i in 0..primes.len() {\n        for j in i..primes.len() {\n        \
    \    for k in j..primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                }\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut prime_numbers = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result\
    \ = false;\n    let mut i = 0;\n    while i < prime_numbers.len() {\n        let\
    \ mut j = i + 1;\n        while j < prime_numbers.len() {\n            let mut\
    \ k = j + 1;\n            while k < prime_numbers.len() {\n                if\
    \ a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k] {\n            \
    \        result = true;\n                }\n                k += 1;\n        \
    \    }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = is_multiply_prime;\n    assert_eq!(candidate(5),\
    \ false);\n    assert_eq!(candidate(30), true);\n    assert_eq!(candidate(8),\
    \ true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(125),\
    \ true);\n    assert_eq!(candidate(105), true);\n    assert_eq!(candidate(126),\
    \ false);\n    assert_eq!(candidate(729), false);\n    assert_eq!(candidate(891),\
    \ false);\n    assert_eq!(candidate(1001), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpz3jiv5ha.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 0
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut a = a;\n    let mut primes = vec![];\n    let mut i = 2;\n  \
    \  while a > 1 {\n        if a % i == 0 {\n            primes.push(i);\n     \
    \       a /= i;\n        } else {\n            i += 1;\n        }\n    }\n   \
    \ primes.len() == 3\n}\n\nfn main() {\n    let candidate = is_multiply_prime;\n\
    \    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30), true);\n\
    \    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747370
- exit_code: 1
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut i = 2;\n    let mut count = 0;\n    while i <= a {\n        if\
    \ a % i == 0 {\n            count += 1;\n            if count == 3 {\n       \
    \         return true;\n            }\n            a /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `a`\n  --> /tmp/tmpdjezt3uk.rs:15:13\n\
    \   |\n6  | fn is_multiply_prime(a: isize) -> bool {\n   |                   \
    \   - help: consider making this binding mutable: `mut a`\n...\n15 |         \
    \    a /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let mut result = false;\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true;\n                    break;\n   \
    \             }\n                k += 1;\n            }\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpfcg2yoz8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
- exit_code: 101
  program: "/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// 30 = 2 * 3 * 5\nfn is_multiply_prime(a: isize) -> bool\
    \ {\n    let mut result = false;\n    let mut primes = vec![2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    let mut i = 0;\n    while i < primes.len() {\n        let mut j = i + 1;\n\
    \        while j < primes.len() {\n            let mut k = j + 1;\n          \
    \  while k < primes.len() {\n                if a == primes[i] * primes[j] * primes[k]\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n                k += 1;\n            }\n            j += 1;\n    \
    \    }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = is_multiply_prime;\n    assert_eq!(candidate(5), false);\n    assert_eq!(candidate(30),\
    \ true);\n    assert_eq!(candidate(8), true);\n    assert_eq!(candidate(10), false);\n\
    \    assert_eq!(candidate(125), true);\n    assert_eq!(candidate(105), true);\n\
    \    assert_eq!(candidate(126), false);\n    assert_eq!(candidate(729), false);\n\
    \    assert_eq!(candidate(891), false);\n    assert_eq!(candidate(1001), true);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu8n_z7n2.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747370
