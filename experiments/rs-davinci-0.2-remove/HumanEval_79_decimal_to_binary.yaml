name: HumanEval_79_decimal_to_binary
language: rs
prompt: "/// You will be given a number in decimal form and your task is to convert\
  \ it to\n/// binary format. The function should return a string, with each character\
  \ representing a binary\n/// number. Each character in the string will be '0' or\
  \ '1'.\n/// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n/// The extra characters are there to help with the\
  \ format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
  \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
  ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
  \ String::from(\"db1111db\"));\n}\n"
completions: ["    let mut binary = String::new();\n    let mut decimal = decimal;\n\
    \    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut number = decimal;\n    while number\
    \ > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number /=\
    \ 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())",
  "    let mut binary = String::new();\n    let mut n = decimal;\n    while n > 0\
    \ {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut number = decimal;\n    while number\
    \ > 0 {\n        binary.push_str(&format!(\"{}\", number % 2));\n        number\
    \ /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut number = decimal;\n    while number\
    \ > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number /=\
    \ 2;\n    }\n    binary.chars().rev().collect::<String>()", '    format!("db{}db",
    decimal.to_string(2))', "    let mut binary = String::new();\n    let mut num\
    \ = decimal;\n    let mut remainder = 0;\n    while num > 0 {\n        remainder\
    \ = num % 2;\n        num = num / 2;\n        binary.push_str(&remainder.to_string());\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&format!(\"\
    {}\", decimal % 2));\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::from(\"db\");\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push(if n % 2 == 0 { '0' } else { '1' });\n        n /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  '    format!("db{}db", decimal.to_string(2))', "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    binary.push_str(\"db\");\n    let mut n = decimal;\n\
    \    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n\
    \ /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut num = decimal;\n    while num > 0 {\n\
    \        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", '    format!("db{}db",
    format!("{:b}", decimal))', '    format!("db{}db", decimal.to_string(2))', " \
    \   let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", '    format!("db{}db",
    decimal.to_string(2))', "    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut num = decimal;\n    while num > 0 {\n        binary.push_str(&(num\
    \ % 2).to_string());\n        num /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", '    format!("db{}db",
    decimal.to_string(2))', "    let mut binary = String::from(\"db\");\n    let mut\
    \ n = decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut num = decimal;\n    while num > 0 {\n\
    \        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut number = decimal;\n    while number\
    \ > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number /=\
    \ 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&format!(\"\
    {}\", n % 2));\n        n /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n\
    \ % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut dec = decimal;\n    while dec > 0 {\n\
    \        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&format!(\"\
    {}\", decimal % 2));\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&format!(\"{}\", dec % 2));\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  '    format!("db{}db", decimal.to_string(2))', "    let mut binary = String::new();\n\
    \    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut temp = decimal;\n    while temp > 0 {\n      \
    \  binary.push_str(&(temp % 2).to_string());\n        temp /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  '    format!("db{}db", decimal.to_string(2))', "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::from(\"db\");\n    let mut dec = decimal;\n    while dec > 0 {\n \
    \       binary.push_str(&format!(\"{}\", dec % 2));\n        dec /= 2;\n    }\n\
    \    binary.push_str(\"db\");\n    binary.chars().rev().collect()", "    let mut\
    \ binary = String::new();\n    let mut decimal = decimal;\n    while decimal >\
    \ 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal /=\
    \ 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut dec = decimal;\n    while dec > 0 {\n\
    \        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut n = decimal;\n    while n > 0\
    \ {\n        binary.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n\
    \    format!(\"db{}db\", binary.chars().rev().collect::<String>())", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n\
    \ % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut num = decimal;\n    while num > 0 {\n\
    \        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", '    format!("db{}db",
    decimal.to_string(2))', "    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::from(\"db\");\n    let mut decimal = decimal;\n  \
    \  while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut number = decimal;\n    while number > 0 {\n  \
    \      binary.push_str(&(number % 2).to_string());\n        number /= 2;\n   \
    \ }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut number = decimal;\n    while number\
    \ > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number /=\
    \ 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut result = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        result.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    result.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal != 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut n = decimal;\n    while n > 0 {\n \
    \       binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut number = decimal;\n    while number\
    \ > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number /=\
    \ 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut result\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        result.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    result.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    binary.push_str(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n\
    \        num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&format!(\"{}\", decimal % 2));\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&format!(\"{}\", decimal % 2));\n   \
    \     decimal /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut num = decimal;\n    while num > 0 {\n\
    \        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::from(\"\
    db\");\n    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&((dec\
    \ % 2).to_string()));\n        dec /= 2;\n    }\n    binary.push_str(\"db\");\n\
    \    binary.chars().rev().collect()", "    let mut binary = String::new();\n \
    \   let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&((dec % 2).to_string()));\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut dec = decimal;\n    while dec > 0 {\n\
    \        binary.push(std::char::from_digit((dec % 2) as u32, 10).unwrap());\n\
    \        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()", '    format!("db{}db",
    decimal.to_string(2))', "    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::from(\"db\");\n    let mut dec = decimal;\n    while dec != 0 {\n\
    \        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n    }\n\
    \    binary.push_str(\"db\");\n    binary.chars().rev().collect()", "    let mut\
    \ binary = String::new();\n    let mut n = decimal;\n    while n > 0 {\n     \
    \   binary.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n    format!(\"\
    db{}db\", binary.chars().rev().collect::<String>())", "    let mut binary = String::new();\n\
    \    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut n = decimal;\n    while n > 0 {\n        binary.push_str(&(n\
    \ % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&format!(\"{}\", dec % 2));\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::from(\"db\");\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()", " \
    \   let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut n = decimal;\n    while n > 0 {\n \
    \       binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal != 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut dec = decimal;\n    while dec > 0 {\n        binary.push_str(&(dec\
    \ % 2).to_string());\n        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut n = decimal;\n    while n > 0 {\n \
    \       binary.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n    }\n  \
    \  format!(\"db{}db\", binary.chars().rev().collect::<String>())", "    let mut\
    \ binary = String::new();\n    let mut decimal = decimal;\n    while decimal >\
    \ 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal /=\
    \ 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut decimal = decimal;\n    while decimal > 0 {\n\
    \        binary.push_str(&(decimal % 2).to_string());\n        decimal /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::new();\n    let mut num = decimal;\n    while num > 0 {\n        binary.push_str(&(num\
    \ % 2).to_string());\n        num /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut n = decimal;\n    while n > 0 {\n \
    \       binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ != 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", '    format!("db{}db",
    decimal.to_string(2))', "    let mut binary = String::new();\n    let mut decimal\
    \ = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut n = decimal;\n    while n > 0\
    \ {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", '    format!("db{}db",
    decimal.to_string(2))', "    let mut binary = String::new();\n    let mut n =\
    \ decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let\
    \ mut binary = String::new();\n    let mut n = decimal;\n    while n > 0 {\n \
    \       binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal != 0 {\n        binary.push_str(&(decimal % 2).to_string());\n     \
    \   decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "   \
    \ let mut binary = String::new();\n    let mut decimal = decimal;\n    while decimal\
    \ > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()", "    let mut binary\
    \ = String::from(\"db\");\n    let mut decimal = decimal;\n    while decimal >\
    \ 0 {\n        binary.push_str(&(decimal % 2).to_string());\n        decimal /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()",
  "    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()", '    format!("db{}db",
    decimal.to_string(2))', '    format!("db{}db", decimal.to_string(2))', "    let\
    \ mut binary = String::new();\n    let mut num = decimal;\n    while num != 0\
    \ {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n   \
    \ }\n    binary.chars().rev().collect::<String>()", "    let mut binary = String::new();\n\
    \    let mut decimal = decimal;\n    while decimal > 0 {\n        binary.push_str(&(decimal\
    \ % 2).to_string());\n        decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()",
  "    let mut binary = String::new();\n    let mut number = decimal;\n    while number\
    \ > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number /=\
    \ 2;\n    }\n    binary.chars().rev().collect::<String>()"]
stop_tokens:
- "\n}"
