name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a list of all words from string s that contain exactly\
  \ \n/// n consonants, in order these words appear in the string s.\n/// If the string\
  \ s is empty then the function should return an empty list.\n/// Note: you may assume\
  \ the input string contains only letters and spaces.\n/// Examples:\nfn select_words(s:\
  \ String, n: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\"\
  )]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), String::new());\n\
  \    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"\
  world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"\
  Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), String::new());\n\
  \    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"\
  b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n"
completions: ["    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut consonants = 0;\n\
    \        for c in word.chars() {\n            if !c.is_vowel() {\n           \
    \     consonants += 1;\n            }\n        }\n        if consonants == n {\n\
    \            result.push_str(word);\n            result.push(' ');\n        }\n\
    \    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            word.push(c);\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count += 1;\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if word.len() > 0 {\n                count = 0;\n\
    \                for c in word.chars() {\n                    if !c.is_vowel()\
    \ {\n                        count += 1;\n                    }\n            \
    \    }\n                if count == n as usize {\n                    result.push_str(&word);\n\
    \                    result.push(' ');\n                }\n                word.clear();\n\
    \            }\n        }\n    }\n    if word.len() > 0 {\n        count = 0;\n\
    \        for c in word.chars() {\n            if !c.is_vowel() {\n           \
    \     count += 1;\n            }\n        }\n        if count == n as usize {\n\
    \            result.push_str(&word);\n            result.push(' ');\n        }\n\
    \    }\n    if result.len() > 0 {\n        result.pop();\n    }\n    result",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n        } else {\n            if count == n {\n   \
    \             result.push_str(&word);\n                result.push(' ');\n   \
    \         }\n            count = 0;\n            word = String::new();\n     \
    \   }\n        if c.is_ascii_lowercase() && c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' {\n            count += 1;\n        }\n    }\n    if count\
    \ == n {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        let\
    \ mut count = 0;\n        for c in word.chars() {\n            if !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            word.push(c);\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count += 1;\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        }\n        if c.is_ascii_lowercase()\
    \ && !c.is_ascii_vowel() {\n            count += 1;\n        }\n    }\n    if\
    \ count == n {\n        result.push_str(&word);\n    }\n    result", "    let\
    \ mut res = String::new();\n    for word in s.split_whitespace() {\n        if\
    \ count_consonants(word) == n {\n            res.push_str(word);\n           \
    \ res.push(' ');\n        }\n    }\n    res.trim().to_string()", "    let mut\
    \ result = String::new();\n    let mut words = s.split_whitespace();\n    while\
    \ let Some(word) = words.next() {\n        let mut count = 0;\n        for c in\
    \ word.chars() {\n            if !c.is_vowel() {\n                count += 1;\n\
    \            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            if !is_vowel(c) {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut consonants = 0;\n        for c in word.chars()\
    \ {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n\
    \                consonants += 1;\n            }\n        }\n        if consonants\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut consonants = 0;\n        for c in word.chars() {\n      \
    \      if !c.is_vowel() {\n                consonants += 1;\n            }\n \
    \       }\n        if consonants == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n            if !is_vowel(c) {\n\
    \                count += 1;\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result.push_str(&word);\n    }\n    result", "    let mut res =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if !c.is_vowel() {\n                count += 1;\n           \
    \ }\n        }\n        if count == n {\n            res.push_str(word);\n   \
    \         res.push(' ');\n        }\n    }\n    res.trim().to_string()", "   \
    \ let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_alphabetic() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !c.is_vowel() {\n                count += 1;\n            }\n        }\n\
    \        if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if c.is_ascii_lowercase() && !c.is_ascii_vowel() {\n        \
    \        count += 1;\n            }\n        }\n        if count == n {\n    \
    \        result.push_str(word);\n            result.push(' ');\n        }\n  \
    \  }\n    result.trim().to_string()", "    let mut result = String::new();\n \
    \   let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut consonants = 0;\n        for c in word.chars() {\n      \
    \      if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n       \
    \         consonants += 1;\n            }\n        }\n        if consonants ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !is_vowel(c) {\n                count += 1;\n            }\n        }\n \
    \       if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c == ' ' {\n            if count == n {\n                if !result.is_empty()\
    \ {\n                    result.push(' ');\n                }\n              \
    \  result.push_str(&word);\n            }\n            count = 0;\n          \
    \  word.clear();\n        } else {\n            word.push(c);\n            if\
    \ c.is_ascii_lowercase() && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c\
    \ != 'u' {\n                count += 1;\n            }\n        }\n    }\n   \
    \ if count == n {\n        if !result.is_empty() {\n            result.push('\
    \ ');\n        }\n        result.push_str(&word);\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ while let Some(word) = words.next() {\n        let mut count = 0;\n        for\
    \ c in word.chars() {\n            if c.is_ascii_alphabetic() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n        } else\
    \ {\n            if count == n {\n                result.push_str(&word);\n  \
    \              result.push(' ');\n            }\n            count = 0;\n    \
    \        word = String::new();\n        }\n        if c.is_ascii_lowercase() &&\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        }\n        if c.is_ascii_lowercase()\
    \ && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            word.push(c);\n        } else {\n         \
    \   if count == n {\n                result.push_str(&word);\n               \
    \ result.push(' ');\n            }\n            count = 0;\n            word =\
    \ String::new();\n        }\n        if c.is_ascii_lowercase() && c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count += 1;\n  \
    \      }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut consonants = 0;\n\
    \        for c in word.chars() {\n            if !is_vowel(c) {\n            \
    \    consonants += 1;\n            }\n        }\n        if consonants == n {\n\
    \            result.push_str(word);\n            result.push(' ');\n        }\n\
    \    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut word = String::new();\n    let mut count = 0;\n    let mut is_word\
    \ = false;\n    for c in s.chars() {\n        if c.is_alphabetic() {\n       \
    \     word.push(c);\n            is_word = true;\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        } else {\n          \
    \  if is_word && count == n {\n                result.push_str(&word);\n     \
    \           result.push(' ');\n            }\n            word.clear();\n    \
    \        count = 0;\n            is_word = false;\n        }\n    }\n    if is_word\
    \ && count == n {\n        result.push_str(&word);\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ while let Some(word) = words.next() {\n        let mut count = 0;\n        for\
    \ c in word.chars() {\n            if !c.is_vowel() {\n                count +=\
    \ 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n        } else {\n            if count == n {\n   \
    \             result.push_str(&word);\n                result.push(' ');\n   \
    \         }\n            count = 0;\n            word = String::new();\n     \
    \   }\n        if c.is_ascii_lowercase() {\n            match c {\n          \
    \      'a' | 'e' | 'i' | 'o' | 'u' => {},\n                _ => count += 1,\n\
    \            }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            word.push(c);\n        } else {\n         \
    \   if count == n {\n                result.push_str(&word);\n               \
    \ result.push(' ');\n            }\n            count = 0;\n            word =\
    \ String::new();\n        }\n        if c.is_lowercase() && c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n            count += 1;\n        }\n\
    \    }\n    if count == n {\n        result.push_str(&word);\n    }\n    result",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    let mut word = words.next();\n    while word != None {\n        let mut consonants\
    \ = 0;\n        for c in word.unwrap().chars() {\n            if !c.is_vowel()\
    \ {\n                consonants += 1;\n            }\n        }\n        if consonants\
    \ == n {\n            result.push_str(word.unwrap());\n            result.push('\
    \ ');\n        }\n        word = words.next();\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' {\n                count += 1;\n            }\n       \
    \ }\n        if count == n {\n            result.push_str(word);\n           \
    \ result.push(' ');\n        }\n    }\n    result.trim().to_string()", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ while let Some(word) = words.next() {\n        let mut count = 0;\n        for\
    \ c in word.chars() {\n            if !c.is_vowel() {\n                count +=\
    \ 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_whitespace() {\n \
    \           if count == n {\n                result.push_str(&word);\n       \
    \         result.push(' ');\n            }\n            count = 0;\n         \
    \   word = String::new();\n        } else if c.is_alphabetic() {\n           \
    \ word.push(c);\n            if !c.is_vowel() {\n                count += 1;\n\
    \            }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut words: Vec<String> = vec![];\n    let mut word:\
    \ String = String::new();\n    for c in s.chars() {\n        if c == ' ' {\n \
    \           if word.len() > 0 {\n                words.push(word);\n         \
    \       word = String::new();\n            }\n        } else {\n            word.push(c);\n\
    \        }\n    }\n    if word.len() > 0 {\n        words.push(word);\n    }\n\
    \    let mut result: Vec<String> = vec![];\n    for w in words {\n        let\
    \ mut count: isize = 0;\n        for c in w.chars() {\n            if c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count +=\
    \ 1;\n            }\n        }\n        if count == n {\n            result.push(w);\n\
    \        }\n    }\n    let mut result_string: String = String::new();\n    for\
    \ w in result {\n        result_string.push_str(&w);\n        result_string.push('\
    \ ');\n    }\n    if result_string.len() > 0 {\n        result_string.pop();\n\
    \    }\n    result_string", "    let mut result = String::new();\n    let mut\
    \ words = s.split_whitespace();\n    while let Some(word) = words.next() {\n \
    \       let mut count = 0;\n        for c in word.chars() {\n            if !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result\
    \ += &word;\n                result += \" \";\n            }\n            count\
    \ = 0;\n            word = String::new();\n        } else {\n            word.push(c);\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count += 1;\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result += &word;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !c.is_vowel() {\n                count += 1;\n            }\n        }\n\
    \        if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            word.push(c);\n            if c.is_ascii_lowercase()\
    \ && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            \
    \    count += 1;\n            }\n        }\n    }\n    if count == n {\n     \
    \   result.push_str(&word);\n    }\n    result", "    let mut words = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n            if\
    \ c.is_ascii_lowercase() {\n                if c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u' {\n                    count += 1;\n               \
    \ }\n            }\n        } else {\n            if count == n {\n          \
    \      words.push_str(&word);\n                words.push(' ');\n            }\n\
    \            count = 0;\n            word.clear();\n        }\n    }\n    if count\
    \ == n {\n        words.push_str(&word);\n    }\n    words.trim().to_string()",
  "    let mut result = String::new();\n    let mut is_first = true;\n    for word\
    \ in s.split_whitespace() {\n        let count = word.chars().filter(|c| !is_vowel(*c)).count()\
    \ as isize;\n        if count == n {\n            if is_first {\n            \
    \    is_first = false;\n            } else {\n                result.push(' ');\n\
    \            }\n            result.push_str(word);\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    let mut word = words.next();\n    while word != None {\n        let mut count\
    \ = 0;\n        for c in word.unwrap().chars() {\n            if !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word.unwrap());\n            result.push('\
    \ ');\n        }\n        word = words.next();\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n            if c.is_ascii_lowercase()\
    \ && !is_vowel(c) {\n                count += 1;\n            }\n        }\n \
    \   }\n    if count == n {\n        result.push_str(&word);\n    }\n    result",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u' {\n                count += 1;\n            }\n       \
    \ }\n        if count == n {\n            result.push_str(word);\n           \
    \ result.push(' ');\n        }\n    }\n    result.trim().to_string()", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ while let Some(word) = words.next() {\n        let mut count = 0;\n        for\
    \ c in word.chars() {\n            if !is_vowel(c) {\n                count +=\
    \ 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if !is_vowel(c) {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            \
    \    count += 1;\n            }\n        }\n        if count == n {\n        \
    \    result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        let mut count = 0;\n        for c in word.chars() {\n            if c.is_ascii_alphabetic()\
    \ && !c.is_ascii_vowel() {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result.push_str(word);\n         \
    \   result.push(' ');\n        }\n    }\n    result.trim().to_string()", "   \
    \ let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n        } else {\n            if count == n {\n   \
    \             result.push_str(&word);\n                result.push(' ');\n   \
    \         }\n            count = 0;\n            word = String::new();\n     \
    \   }\n        if c.is_ascii_lowercase() {\n            match c {\n          \
    \      'a' | 'e' | 'i' | 'o' | 'u' => {},\n                _ => count += 1,\n\
    \            }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut words = s.split_whitespace();\n    let mut result\
    \ = String::new();\n    while let Some(word) = words.next() {\n        let mut\
    \ count = 0;\n        for c in word.chars() {\n            if !c.is_vowel() {\n\
    \                count += 1;\n            }\n        }\n        if count == n\
    \ {\n            result.push_str(word);\n            result.push(' ');\n     \
    \   }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !c.is_vowel() {\n                count += 1;\n            }\n        }\n\
    \        if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        }\n        if c.is_ascii_lowercase()\
    \ && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                result += &word;\n\
    \                result += \" \";\n            }\n            count = 0;\n   \
    \         word = String::new();\n        } else {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n               \
    \ count += 1;\n            }\n            word += &c.to_string();\n        }\n\
    \    }\n    if count == n {\n        result += &word;\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if count == n {\n                result.push_str(word.as_str());\n\
    \                result.push_str(\" \");\n            }\n            count = 0;\n\
    \            word = String::new();\n        }\n        if c.is_ascii_lowercase()\
    \ && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(word.as_str());\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    let mut word = words.next();\n    while word != None\
    \ {\n        let mut count = 0;\n        for c in word.unwrap().chars() {\n  \
    \          if c.is_ascii_alphabetic() && !c.is_ascii_vowel() {\n             \
    \   count += 1;\n            }\n        }\n        if count == n {\n         \
    \   result.push_str(word.unwrap());\n            result.push(' ');\n        }\n\
    \        word = words.next();\n    }\n    result.trim().to_string()", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ while let Some(word) = words.next() {\n        let mut count = 0;\n        for\
    \ c in word.chars() {\n            if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut words = String::new();\n\
    \    let mut consonants = 0;\n    let mut word = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n   \
    \         if !c.is_vowel() {\n                consonants += 1;\n            }\n\
    \        } else {\n            if consonants == n {\n                words.push_str(&word);\n\
    \                words.push(' ');\n            }\n            consonants = 0;\n\
    \            word = String::new();\n        }\n    }\n    if consonants == n {\n\
    \        words.push_str(&word);\n    }\n    words.trim().to_string()", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ for word in words {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if !is_vowel(c) {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n            if c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n                count\
    \ += 1;\n            }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                if !result.is_empty()\
    \ {\n                    result.push(' ');\n                }\n              \
    \  result.push_str(&word);\n            }\n            count = 0;\n          \
    \  word = String::new();\n        } else {\n            word.push(c);\n      \
    \      if !c.is_vowel() {\n                count += 1;\n            }\n      \
    \  }\n    }\n    if count == n {\n        if !result.is_empty() {\n          \
    \  result.push(' ');\n        }\n        result.push_str(&word);\n    }\n    result",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if !c.is_vowel() {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            word.push(c);\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count += 1;\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if !is_vowel(c) {\n                count += 1;\n            }\n\
    \        }\n        if count == n {\n            result.push_str(word);\n    \
    \        result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    let mut word = words.next();\n    while word != None {\n        let mut consonants\
    \ = 0;\n        for c in word.unwrap().chars() {\n            match c {\n    \
    \            'a' | 'e' | 'i' | 'o' | 'u' | 'y' => (),\n                _ => consonants\
    \ += 1,\n            }\n        }\n        if consonants == n {\n            result.push_str(word.unwrap());\n\
    \            result.push(' ');\n        }\n        word = words.next();\n    }\n\
    \    result.trim().to_string()", "    let mut words: Vec<String> = Vec::new();\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c ==\
    \ ' ' {\n            if word.len() > 0 {\n                words.push(word);\n\
    \                word = String::new();\n            }\n        } else {\n    \
    \        word.push(c);\n        }\n    }\n    if word.len() > 0 {\n        words.push(word);\n\
    \    }\n    let mut result = String::new();\n    for word in words {\n       \
    \ if count_consonants(&word) == n {\n            result.push_str(&word);\n   \
    \         result.push(' ');\n        }\n    }\n    if result.len() > 0 {\n   \
    \     result.pop();\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !is_vowel(c) {\n                count += 1;\n            }\n        }\n \
    \       if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut res = String::new();\n    let mut count = 0;\n\
    \    let mut word = String::new();\n    for c in s.chars() {\n        if c ==\
    \ ' ' {\n            if count == n {\n                res.push_str(&word);\n \
    \               res.push(' ');\n            }\n            count = 0;\n      \
    \      word = String::new();\n        } else {\n            if c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n   \
    \         }\n            word.push(c);\n        }\n    }\n    if count == n {\n\
    \        res.push_str(&word);\n    }\n    res.trim().to_string()", "    let mut\
    \ result = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n                count +=\
    \ 1;\n            }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        let\
    \ mut count = 0;\n        for c in word.chars() {\n            if c.is_ascii_lowercase()\
    \ && !c.is_ascii_vowel() {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result.push_str(word);\n         \
    \   result.push(' ');\n        }\n    }\n    result.trim().to_string()", "   \
    \ let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n        } else {\n            if count == n {\n   \
    \             result.push_str(&word);\n                result.push(' ');\n   \
    \         }\n            count = 0;\n            word = String::new();\n     \
    \   }\n        if c.is_alphabetic() && !c.is_vowel() {\n            count += 1;\n\
    \        }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut consonants = 0;\n\
    \        for c in word.chars() {\n            if c.is_ascii_alphabetic() && !c.is_ascii_vowel()\
    \ {\n                consonants += 1;\n            }\n        }\n        if consonants\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c.is_ascii_alphabetic() && !c.is_ascii_vowel() {\n                count +=\
    \ 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    while let Some(w)\
    \ = words.next() {\n        word = w.to_string();\n        count = 0;\n      \
    \  for c in word.chars() {\n            if c.is_ascii_lowercase() && !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(&word);\n            result.push(' ');\n  \
    \      }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if is_consonant(c) {\n                count += 1;\n         \
    \   }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split(\" \");\n    for\
    \ word in words {\n        let mut count = 0;\n        for c in word.chars() {\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count += 1;\n            }\n        }\n        if count == n {\n\
    \            result.push_str(word);\n            result.push(' ');\n        }\n\
    \    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !is_vowel(c) {\n                count += 1;\n            }\n        }\n \
    \       if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_lowercase() && !\"aeiou\"\
    .contains(c) {\n                count += 1;\n            }\n        }\n      \
    \  if count == n as usize {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut word = String::new();\n    let mut count = 0;\n\
    \    let mut is_word = false;\n    for c in s.chars() {\n        if c == ' ' {\n\
    \            if is_word {\n                if count == n {\n                 \
    \   result.push_str(&word);\n                    result.push(' ');\n         \
    \       }\n                word.clear();\n                count = 0;\n       \
    \         is_word = false;\n            }\n        } else {\n            is_word\
    \ = true;\n            if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if is_word {\n        if count == n {\n            result.push_str(&word);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if count == n {\n                result.push_str(&word);\n      \
    \          result.push(' ');\n            }\n            count = 0;\n        \
    \    word = String::new();\n        }\n        if c.is_ascii_lowercase() && c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    for word in s.split_whitespace()\
    \ {\n        if word.chars().filter(|c| !is_vowel(*c)).count() as isize == n {\n\
    \            result.push_str(word);\n            result.push(' ');\n        }\n\
    \    }\n    if result.is_empty() {\n        result\n    } else {\n        result.pop();\n\
    \        result\n    }", "    let mut res = String::new();\n    let mut words\
    \ = s.split_whitespace();\n    while let Some(word) = words.next() {\n       \
    \ let mut cnt = 0;\n        for c in word.chars() {\n            if c.is_ascii_lowercase()\
    \ && !c.is_ascii_vowel() {\n                cnt += 1;\n            }\n       \
    \ }\n        if cnt == n {\n            res.push_str(word);\n            res.push('\
    \ ');\n        }\n    }\n    res.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !c.is_vowel() {\n                count += 1;\n            }\n        }\n\
    \        if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        }\n        if c.is_ascii_lowercase()\
    \ && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        let\
    \ mut count = 0;\n        for c in word.chars() {\n            if c.is_ascii_alphabetic()\
    \ && !c.is_ascii_vowel() {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result.push_str(word);\n         \
    \   result.push(' ');\n        }\n    }\n    result.trim().to_string()", "   \
    \ let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_alphabetic() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if !is_vowel(c) {\n                count += 1;\n            }\n\
    \        }\n        if count == n {\n            result.push_str(word);\n    \
    \        result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n        } else {\n            if count == n {\n   \
    \             result.push_str(&word);\n                result.push(' ');\n   \
    \         }\n            count = 0;\n            word = String::new();\n     \
    \   }\n        if c.is_ascii_lowercase() {\n            match c {\n          \
    \      'a' | 'e' | 'i' | 'o' | 'u' => {},\n                _ => count += 1,\n\
    \            }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            word.push(c);\n        } else {\n         \
    \   if count == n {\n                result.push_str(&word);\n               \
    \ result.push(' ');\n            }\n            count = 0;\n            word =\
    \ String::new();\n        }\n        if c.is_ascii_lowercase() && c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count += 1;\n  \
    \      }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut count = 0;\n \
    \   let mut word = String::new();\n    for c in s.chars() {\n        if c == '\
    \ ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    let mut count\
    \ = 0;\n    while let Some(word) = words.next() {\n        let mut consonants\
    \ = 0;\n        for c in word.chars() {\n            if !is_vowel(c) {\n     \
    \           consonants += 1;\n            }\n        }\n        if consonants\
    \ == n {\n            if count > 0 {\n                result.push_str(\" \");\n\
    \            }\n            result.push_str(word);\n            count += 1;\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if count == n {\n                result.push_str(&word);\n      \
    \          result.push(' ');\n            }\n            count = 0;\n        \
    \    word = String::new();\n        }\n        if c.is_ascii_lowercase() && c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    s.split(\" \")\n        .filter(|x| count_consonants(x)\
    \ == n)\n        .collect::<Vec<&str>>()\n        .join(\" \")", "    let mut\
    \ result = String::new();\n    let mut words = s.split_whitespace();\n    while\
    \ let Some(word) = words.next() {\n        let mut count = 0;\n        for c in\
    \ word.chars() {\n            if c.is_ascii_alphabetic() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            \
    \    count += 1;\n            }\n        }\n        if count == n {\n        \
    \    result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if !is_vowel(c)\
    \ {\n                count += 1;\n            }\n            word.push(c);\n \
    \       }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if count == n {\n                result.push_str(&word);\n      \
    \          result.push(' ');\n            }\n            count = 0;\n        \
    \    word = String::new();\n        }\n        if c.is_ascii_lowercase() && c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut consonants\
    \ = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            if c.is_ascii_lowercase() {\n             \
    \   if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n          \
    \          consonants += 1;\n                }\n            } else {\n       \
    \         if c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U' {\n    \
    \                consonants += 1;\n                }\n            }\n        \
    \    word.push(c);\n        } else {\n            if consonants == n {\n     \
    \           if result.len() > 0 {\n                    result.push(' ');\n   \
    \             }\n                result.push_str(&word);\n            }\n    \
    \        consonants = 0;\n            word = String::new();\n        }\n    }\n\
    \    if consonants == n {\n        if result.len() > 0 {\n            result.push('\
    \ ');\n        }\n        result.push_str(&word);\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ while let Some(word) = words.next() {\n        let mut count = 0;\n        for\
    \ c in word.chars() {\n            if !c.is_vowel() {\n                count +=\
    \ 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n            if c.is_ascii_lowercase()\
    \ && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            \
    \    count += 1;\n            }\n        }\n    }\n    if count == n {\n     \
    \   result.push_str(&word);\n    }\n    result", "    let mut res = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !is_vowel(c) {\n                count += 1;\n            }\n        }\n \
    \       if count == n {\n            res.push_str(word);\n            res.push('\
    \ ');\n        }\n    }\n    res.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n        } else\
    \ {\n            if count == n {\n                result.push_str(&word);\n  \
    \              result.push(' ');\n            }\n            count = 0;\n    \
    \        word = String::new();\n        }\n        if c.is_ascii_lowercase() &&\
    \ !c.is_ascii_vowel() {\n            count += 1;\n        }\n    }\n    if count\
    \ == n {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut consonants = 0;\n        for c in word.chars()\
    \ {\n            if !c.is_vowel() {\n                consonants += 1;\n      \
    \      }\n        }\n        if consonants == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n            if c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n   \
    \         }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            word.push(c);\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count += 1;\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut consonants = 0;\n        for c in word.chars()\
    \ {\n            if !is_vowel(c) {\n                consonants += 1;\n       \
    \     }\n        }\n        if consonants == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n            if !is_vowel(c) {\n\
    \                count += 1;\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result.push_str(&word);\n    }\n    result", "    let mut res =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if !is_vowel(c) {\n                count += 1;\n            }\n\
    \        }\n        if count == n {\n            res.push_str(word);\n       \
    \     res.push(' ');\n        }\n    }\n    res.trim().to_string()", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ for word in words {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n            if c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n                count\
    \ += 1;\n            }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut counter\
    \ = 0;\n    let mut is_word = false;\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            if !is_word {\n                is_word = true;\n            \
    \    if counter == n {\n                    result.push(' ');\n              \
    \  }\n            }\n            if counter == n {\n                result.push(c);\n\
    \            }\n            if c.is_lowercase() {\n                match c {\n\
    \                    'a' | 'e' | 'i' | 'o' | 'u' => counter -= 1,\n          \
    \          _ => counter += 1,\n                }\n            }\n        } else\
    \ {\n            if is_word {\n                is_word = false;\n            \
    \    if counter == n {\n                    counter = 0;\n                } else\
    \ {\n                    counter = 0;\n                    result.clear();\n \
    \               }\n            }\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n                count +=\
    \ 1;\n            }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        let\
    \ mut count = 0;\n        for c in word.chars() {\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !c.is_vowel() {\n                count += 1;\n            }\n        }\n\
    \        if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    let mut count\
    \ = 0;\n    while let Some(word) = words.next() {\n        let mut consonants\
    \ = 0;\n        for c in word.chars() {\n            if c.is_ascii_alphabetic()\
    \ && !c.is_ascii_vowel() {\n                consonants += 1;\n            }\n\
    \        }\n        if consonants == n {\n            if count > 0 {\n       \
    \         result.push_str(\" \");\n            }\n            result.push_str(word);\n\
    \            count += 1;\n        }\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if !is_vowel(c) {\n                count += 1;\n            }\n\
    \        }\n        if count == n {\n            result.push_str(word);\n    \
    \        result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                if !result.is_empty()\
    \ {\n                    result.push(' ');\n                }\n              \
    \  result.push_str(&word);\n            }\n            count = 0;\n          \
    \  word = String::new();\n        } else {\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n            word.push(c);\n        }\n    }\n    if count == n {\n  \
    \      if !result.is_empty() {\n            result.push(' ');\n        }\n   \
    \     result.push_str(&word);\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut consonants = 0;\n        for c in word.chars() {\n      \
    \      if !c.is_vowel() {\n                consonants += 1;\n            }\n \
    \       }\n        if consonants == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut count = 0;\n \
    \   let mut word = String::new();\n    for c in s.chars() {\n        if c == '\
    \ ' {\n            if count == n {\n                result += &word;\n       \
    \         result += \" \";\n            }\n            count = 0;\n          \
    \  word = String::new();\n        } else {\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n            word.push(c);\n        }\n    }\n    if count == n {\n  \
    \      result += &word;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            word.push(c);\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c\
    \ != 'y' {\n                count += 1;\n            }\n        }\n    }\n   \
    \ if count == n {\n        result.push_str(&word);\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut words = s.split_whitespace();\n   \
    \ while let Some(word) = words.next() {\n        let mut count = 0;\n        for\
    \ c in word.chars() {\n            if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            word.push(c);\n\
    \            if !is_vowel(c) {\n                count += 1;\n            }\n \
    \       }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if !is_vowel(c) {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if !is_vowel(c) {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                if !result.is_empty() {\n                \
    \    result.push(' ');\n                }\n                result.push_str(&word);\n\
    \            }\n            count = 0;\n            word.clear();\n        } else\
    \ {\n            word.push(c);\n            if is_consonant(c) {\n           \
    \     count += 1;\n            }\n        }\n    }\n    if count == n {\n    \
    \    if !result.is_empty() {\n            result.push(' ');\n        }\n     \
    \   result.push_str(&word);\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n        } else\
    \ {\n            if count == n {\n                result.push_str(&word);\n  \
    \              result.push(' ');\n            }\n            count = 0;\n    \
    \        word = String::new();\n        }\n        if c.is_ascii_lowercase() &&\
    \ c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            word.push(c);\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               count += 1;\n            }\n        }\n    }\n    if count ==\
    \ n {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            word.push(c);\n            if !is_vowel(c) {\n  \
    \              count += 1;\n            }\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        let\
    \ mut count = 0;\n        for c in word.chars() {\n            if c.is_ascii_alphabetic()\
    \ && !c.is_ascii_vowel() {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result.push_str(word);\n         \
    \   result.push(' ');\n        }\n    }\n    result.trim().to_string()", "   \
    \ let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n        } else {\n            if count == n {\n   \
    \             result.push_str(&word);\n                result.push(' ');\n   \
    \         }\n            count = 0;\n            word = String::new();\n     \
    \   }\n        if c.is_ascii_lowercase() && !c.is_ascii_vowel() {\n          \
    \  count += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    let mut word = words.next();\n    while word != None {\n        let mut count\
    \ = 0;\n        for c in word.unwrap().chars() {\n            if c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n\
    \            }\n        }\n        if count == n {\n            result.push_str(word.unwrap());\n\
    \            result.push(' ');\n        }\n        word = words.next();\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if count == n {\n                result.push_str(&word);\n      \
    \          result.push(' ');\n            }\n            count = 0;\n        \
    \    word = String::new();\n        }\n        if c.is_ascii_lowercase() {\n \
    \           match c {\n                'a' | 'e' | 'i' | 'o' | 'u' => {},\n  \
    \              _ => count += 1,\n            }\n        }\n    }\n    if count\
    \ == n {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            word.push(c);\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n       \
    \     }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        let\
    \ mut count = 0;\n        for c in word.chars() {\n            if !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            if !is_vowel(c) {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            word.push(c);\n            if !is_vowel(c) {\n  \
    \              count += 1;\n            }\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    let mut count\
    \ = 0;\n    while let Some(word) = words.next() {\n        let mut consonants\
    \ = 0;\n        for c in word.chars() {\n            if c.is_ascii_alphabetic()\
    \ && !c.is_ascii_vowel() {\n                consonants += 1;\n            }\n\
    \        }\n        if consonants == n {\n            if count > 0 {\n       \
    \         result.push_str(\" \");\n            }\n            result.push_str(word);\n\
    \            count += 1;\n        }\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut count = 0;\n        for c in word.chars()\
    \ {\n            if !c.is_vowel() {\n                count += 1;\n           \
    \ }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut res = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c.is_ascii_lowercase() && !c.is_ascii_vowel() {\n                count +=\
    \ 1;\n            }\n        }\n        if count == n {\n            res.push_str(word);\n\
    \            res.push(' ');\n        }\n    }\n    res.trim().to_string()", " \
    \   s.split_whitespace()\n        .filter(|word| word.chars().filter(|c| !is_vowel(*c)).count()\
    \ as isize == n)\n        .collect::<Vec<&str>>()\n        .join(\" \")", "  \
    \  let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            word.push(c);\n            if c != 'a' && c !=\
    \ 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n                count\
    \ += 1;\n            }\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            word.push(c);\n        } else {\n         \
    \   if count == n {\n                result.push_str(&word);\n               \
    \ result.push(' ');\n            }\n            count = 0;\n            word =\
    \ String::new();\n        }\n        if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n            count += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut word = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_alphabetic() {\n            word.push(c);\n        } else {\n         \
    \   if count == n {\n                result.push_str(&word);\n               \
    \ result.push(' ');\n            }\n            count = 0;\n            word =\
    \ String::new();\n        }\n        if c.is_ascii_lowercase() && c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count += 1;\n  \
    \      }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut count = 0;\n \
    \   let mut word = String::new();\n    for c in s.chars() {\n        if c == '\
    \ ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c == ' ' {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      } else {\n            if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut count = 0;\n \
    \   let mut word = String::new();\n    for c in s.chars() {\n        if c.is_alphabetic()\
    \ {\n            word.push(c);\n        } else {\n            if count == n {\n\
    \                result.push_str(&word);\n                result.push(' ');\n\
    \            }\n            count = 0;\n            word = String::new();\n  \
    \      }\n        if c.is_ascii_lowercase() {\n            match c {\n       \
    \         'a' | 'e' | 'i' | 'o' | 'u' => {}\n                _ => count += 1,\n\
    \            }\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_alphabetic() {\n            word.push(c);\n        } else\
    \ {\n            if count == n {\n                result.push_str(&word);\n  \
    \              result.push(' ');\n            }\n            count = 0;\n    \
    \        word = String::new();\n        }\n        if c.is_alphabetic() && !c.is_vowel()\
    \ {\n            count += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut words = String::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                words.push_str(&word);\n          \
    \      words.push(' ');\n            }\n            word.clear();\n          \
    \  count = 0;\n        } else {\n            word.push(c);\n            if !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n    }\n    if count\
    \ == n {\n        words.push_str(&word);\n    }\n    words.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if !c.is_vowel() {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut count = 0;\n    let mut word = String::new();\n    for c in s.chars() {\n\
    \        if c.is_alphabetic() {\n            word.push(c);\n        } else {\n\
    \            if count == n {\n                result.push_str(&word);\n      \
    \          result.push(' ');\n            }\n            count = 0;\n        \
    \    word = String::new();\n        }\n        if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n            count += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    for word in words {\n        if count_consonants(word)\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word)\
    \ = words.next() {\n        let mut consonants = 0;\n        for c in word.chars()\
    \ {\n            if !c.is_vowel() {\n                consonants += 1;\n      \
    \      }\n        }\n        if consonants == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' && c != 'y' {\n                count += 1;\n            }\n    \
    \        word.push(c);\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        let\
    \ mut consonants = 0;\n        for c in word.chars() {\n            if !is_vowel(c)\
    \ {\n                consonants += 1;\n            }\n        }\n        if consonants\
    \ == n {\n            result.push_str(word);\n            result.push(' ');\n\
    \        }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut words = s.split_whitespace();\n    for word in\
    \ words {\n        if count_consonants(word) == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    for word in s.split_whitespace() {\n \
    \       if word.chars().filter(|c| !c.is_vowel()).count() as isize == n {\n  \
    \          result.push_str(word);\n            result.push(' ');\n        }\n\
    \    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if !is_vowel(c) {\n                count += 1;\n            }\n        }\n \
    \       if count == n {\n            result.push_str(word);\n            result.push('\
    \ ');\n        }\n    }\n    result.trim().to_string()", "    let mut result =\
    \ String::new();\n    let mut words = s.split_whitespace();\n    let mut word\
    \ = words.next();\n    while word != None {\n        let mut count = 0;\n    \
    \    for c in word.unwrap().chars() {\n            if c.is_ascii_alphabetic()\
    \ && !c.is_ascii_vowel() {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result.push_str(word.unwrap());\n\
    \            result.push(' ');\n        }\n        word = words.next();\n    }\n\
    \    result.trim().to_string()", "    let mut words = String::new();\n    let\
    \ mut word = String::new();\n    let mut count = 0;\n    for c in s.chars() {\n\
    \        if c == ' ' {\n            if count == n {\n                words.push_str(&word);\n\
    \                words.push(' ');\n            }\n            word.clear();\n\
    \            count = 0;\n        } else {\n            word.push(c);\n       \
    \     if c.is_ascii_lowercase() && c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                count += 1;\n            }\n        }\n    }\n\
    \    if count == n {\n        words.push_str(&word);\n    }\n    words.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    for word in words {\n        if count_consonants(word) == n {\n         \
    \   result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        let mut count = 0;\n        for c in word.chars() {\n            if !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut words = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                words.push_str(&word);\n\
    \                words.push(' ');\n            }\n            count = 0;\n   \
    \         word = String::new();\n        } else {\n            if c.is_ascii_lowercase()\
    \ && !is_vowel(c) {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        words.push_str(&word);\n    }\n\
    \    words.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        let mut count = 0;\n        for c in word.chars() {\n            if !is_vowel(c)\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        } else {\n            if c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count += 1;\n\
    \            }\n            word.push(c);\n        }\n    }\n    if count == n\
    \ {\n        result.push_str(&word);\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut count = 0;\n    let mut word = String::new();\n\
    \    for c in s.chars() {\n        if c.is_alphabetic() {\n            word.push(c);\n\
    \        } else {\n            if count == n {\n                result.push_str(&word);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          word = String::new();\n        }\n        if c.is_ascii_lowercase()\
    \ && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            count\
    \ += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut words =\
    \ s.split_whitespace();\n    while let Some(word) = words.next() {\n        let\
    \ mut count = 0;\n        for c in word.chars() {\n            if c.is_ascii_lowercase()\
    \ && !c.is_ascii_vowel() {\n                count += 1;\n            }\n     \
    \   }\n        if count == n {\n            result.push_str(word);\n         \
    \   result.push(' ');\n        }\n    }\n    result.trim().to_string()", "   \
    \ let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    let mut words = Vec::new();\n    let mut chars = s.chars();\n\
    \    while let Some(c) = chars.next() {\n        if c == ' ' {\n            if\
    \ count == n {\n                words.push(word.clone());\n            }\n   \
    \         word.clear();\n            count = 0;\n        } else {\n          \
    \  word.push(c);\n            if !is_vowel(c) {\n                count += 1;\n\
    \            }\n        }\n    }\n    if count == n {\n        words.push(word.clone());\n\
    \    }\n    for word in words {\n        result.push_str(&word);\n        result.push('\
    \ ');\n    }\n    if result.len() > 0 {\n        result.pop();\n    }\n    result",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c == ' ' {\n          \
    \  if count == n {\n                result.push_str(&word);\n                result.push('\
    \ ');\n            }\n            count = 0;\n            word = String::new();\n\
    \        } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                count += 1;\n            }\n            word.push(c);\n\
    \        }\n    }\n    if count == n {\n        result.push_str(&word);\n    }\n\
    \    result", "    let mut words = String::new();\n    let mut word = String::new();\n\
    \    let mut count = 0;\n    for c in s.chars() {\n        if c == ' ' {\n   \
    \         if count == n {\n                words.push_str(&word);\n          \
    \      words.push(' ');\n            }\n            word.clear();\n          \
    \  count = 0;\n        } else {\n            word.push(c);\n            if c !=\
    \ 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count\
    \ += 1;\n            }\n        }\n    }\n    if count == n {\n        words.push_str(&word);\n\
    \    }\n    words.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut words = s.split_whitespace();\n    while let Some(word) = words.next()\
    \ {\n        let mut count = 0;\n        for c in word.chars() {\n           \
    \ if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n            \
    \    count += 1;\n            }\n        }\n        if count == n {\n        \
    \    result.push_str(word);\n            result.push(' ');\n        }\n    }\n\
    \    result.trim().to_string()", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        let mut count = 0;\n        for c in word.chars() {\n            if c\
    \ != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                count\
    \ += 1;\n            }\n        }\n        if count == n {\n            result.push_str(word);\n\
    \            result.push(' ');\n        }\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut word =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_alphabetic() {\n \
    \           word.push(c);\n        } else {\n            if count == n {\n   \
    \             result.push_str(&word);\n                result.push(' ');\n   \
    \         }\n            count = 0;\n            word = String::new();\n     \
    \   }\n        if c.is_ascii_lowercase() && !c.is_ascii_vowel() {\n          \
    \  count += 1;\n        }\n    }\n    if count == n {\n        result.push_str(&word);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut count =\
    \ 0;\n    let mut temp = String::new();\n    for c in s.chars() {\n        if\
    \ c == ' ' {\n            if count == n {\n                result.push_str(&temp);\n\
    \                result.push(' ');\n            }\n            count = 0;\n  \
    \          temp.clear();\n        } else {\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'y' {\n                count +=\
    \ 1;\n            }\n            temp.push(c);\n        }\n    }\n    if count\
    \ == n {\n        result.push_str(&temp);\n    }\n    result.trim().to_string()",
  "    let mut result = String::new();\n    let mut words = s.split_whitespace();\n\
    \    while let Some(word) = words.next() {\n        let mut count = 0;\n     \
    \   for c in word.chars() {\n            if c.is_ascii_lowercase() && !c.is_ascii_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut words = s.split_whitespace().collect::<Vec<&str>>();\n\
    \    words.retain(|&word| count_consonants(word) == n);\n    words.join(\" \")",
  "    let mut result = String::new();\n    let mut count = 0;\n    let mut start\
    \ = 0;\n    let mut end = 0;\n    let mut is_word = false;\n    let mut is_consonant\
    \ = false;\n    let mut is_first = true;\n    for (i, c) in s.chars().enumerate()\
    \ {\n        if c.is_alphabetic() {\n            if is_consonant(c) {\n      \
    \          count += 1;\n            }\n            if !is_word {\n           \
    \     start = i;\n                is_word = true;\n            }\n        } else\
    \ {\n            if is_word {\n                end = i;\n                if count\
    \ == n {\n                    if !is_first {\n                        result.push('\
    \ ');\n                    }\n                    result.push_str(&s[start..end]);\n\
    \                    is_first = false;\n                }\n                is_word\
    \ = false;\n                count = 0;\n            }\n        }\n    }\n    if\
    \ is_word {\n        end = s.len();\n        if count == n {\n            if !is_first\
    \ {\n                result.push(' ');\n            }\n            result.push_str(&s[start..end]);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n\
    \        let mut count = 0;\n        for c in word.chars() {\n            if !c.is_vowel()\
    \ {\n                count += 1;\n            }\n        }\n        if count ==\
    \ n {\n            result.push_str(word);\n            result.push(' ');\n   \
    \     }\n    }\n    result.trim().to_string()", "    let mut result = String::new();\n\
    \    let mut count = 0;\n    let mut word = String::new();\n    for c in s.chars()\
    \ {\n        if c == ' ' {\n            if count == n {\n                if !result.is_empty()\
    \ {\n                    result.push(' ');\n                }\n              \
    \  result.push_str(&word);\n            }\n            count = 0;\n          \
    \  word.clear();\n        } else {\n            word.push(c);\n            if\
    \ !c.is_vowel() {\n                count += 1;\n            }\n        }\n   \
    \ }\n    if count == n {\n        if !result.is_empty() {\n            result.push('\
    \ ');\n        }\n        result.push_str(&word);\n    }\n    result"]
stop_tokens:
- "\n}"
