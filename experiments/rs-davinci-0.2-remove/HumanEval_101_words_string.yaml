name: HumanEval_101_words_string
language: rs
prompt: "/// You will be given a string of words separated by commas or spaces. Your\
  \ task is\n/// to split the string into words and return an array of the words.\n\
  /// For example:\nfn words_string(s: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
  Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
  name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
  One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
  two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"),\
  \ String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
  )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
  \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\")),\
  \ vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"\
  four\"), String::from(\"five\"), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"ahmed    \
  \ , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n}\n"
completions: ['    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c:\
    \ char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n\
    \        .filter(|s| !s.is_empty())\n        .map(|s| s.to_string())\n       \
    \ .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()', '    s.split_whitespace().map(|word|
    word.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n \
    \       .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char| c\
    \ == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|x|
    x.to_string()).collect()', '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  '    s.split_whitespace().map(|s| s.to_string()).collect()', '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n\
    \        .filter(|w| !w.is_empty())\n        .map(|w| w.to_string())\n       \
    \ .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s|\
    \ !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s|\
    \ !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n        .map(|s|\
    \ s.to_string())\n        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s|\
    \ !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n\
    \        .filter(|s| !s.is_empty())\n        .map(|s| s.to_string())\n       \
    \ .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()', " \
    \   s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char| c ==\
    \ ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()", "  \
    \  s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| !c.is_alphanumeric())\n    \
    \    .filter(|s| !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| !c.is_alphanumeric())\n    \
    \    .filter(|s| !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s|\
    \ !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| !c.is_alphanumeric())\n    \
    \    .filter(|s| !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char| c ==\
    \ ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char| c ==\
    \ ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()", "  \
    \  s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n\
    \        .filter(|s| !s.is_empty())\n        .map(|s| s.to_string())\n       \
    \ .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n        .map(|s|\
    \ s.to_string())\n        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n\
    \        .filter(|s| !s.is_empty())\n        .map(|s| s.to_string())\n       \
    \ .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", "    s.split(|c:\
    \ char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n        .map(|s|\
    \ s.to_string())\n        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| c == ' ' || c ==\
    \ ',')\n        .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| !c.is_alphanumeric())\n    \
    \    .filter(|s| !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char| c ==\
    \ ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()", "  \
    \  s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s|\
    \ !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', '    s.split_whitespace().map(|s| s.to_string()).collect()',
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  '    s.split_whitespace().map(|s| s.to_string()).collect()', "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|w| !w.is_empty())\n\
    \        .map(|w| w.to_string())\n        .collect()", "    s.split(|c: char|\
    \ !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n        .map(|s|\
    \ s.to_string())\n        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n\
    \        .filter(|s| !s.is_empty())\n        .map(|s| s.to_string())\n       \
    \ .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()', " \
    \   s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s| !s.is_empty())\n\
    \        .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char|\
    \ c == ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()",
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s|\
    \ s.to_string())\n        .collect()", '    s.split_whitespace().map(|s| s.to_string()).collect()',
  "    s.split(|c: char| c == ' ' || c == ',')\n        .map(|s| s.to_string())\n\
    \        .collect()", "    s.split(|c: char| !c.is_alphanumeric())\n        .filter(|s|\
    \ !s.is_empty())\n        .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|s|
    s.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", '    s.split_whitespace().map(|x|
    x.to_string()).collect()', "    s.split(|c: char| c == ' ' || c == ',')\n    \
    \    .map(|s| s.to_string())\n        .collect()", "    s.split(|c: char| c ==\
    \ ' ' || c == ',')\n        .map(|s| s.to_string())\n        .collect()"]
stop_tokens:
- "\n}"
