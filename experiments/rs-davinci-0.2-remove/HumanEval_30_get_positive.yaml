name: HumanEval_30_get_positive
language: rs
prompt: "/// Return only positive numbers in the list.\nfn get_positive(l: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
  \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
  \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
  \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  }\n"
completions: ['    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut v = Vec::new();\n    for i in l {\n        if\
    \ i > 0 {\n            v.push(i);\n        }\n    }\n    v", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', "    let\
    \ mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n           \
    \ result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', "    let\
    \ mut res = Vec::new();\n    for i in l {\n        if i > 0 {\n            res.push(i);\n\
    \        }\n    }\n    res", '    l.into_iter().filter(|x| *x > 0).collect()',
  '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut result = Vec::new();\n    for i in l {\n    \
    \    if i > 0 {\n            result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut result = Vec::new();\n    for i in l {\n     \
    \   if i > 0 {\n            result.push(i);\n        }\n    }\n    result", " \
    \   let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n     \
    \       result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut result = Vec::new();\n    for i in l {\n    \
    \    if i > 0 {\n            result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', "    let mut result = Vec::new();\n    for i in l {\n    \
    \    if i > 0 {\n            result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|x| *x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|x|
    *x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()', '    l.into_iter().filter(|&x|
    x > 0).collect()', "    let mut result = Vec::new();\n    for i in l {\n     \
    \   if i > 0 {\n            result.push(i);\n        }\n    }\n    result", '    l.into_iter().filter(|&x|
    x > 0).collect()', '    l.into_iter().filter(|&x| x > 0).collect()']
stop_tokens:
- "\n}"
