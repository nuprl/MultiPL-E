name: HumanEval_159_eat
language: rs
prompt: "/// You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n\
  /// you should return an array of [ total number of eaten carrots after your meals,\n\
  /// the number of carrots left after your meals ]\n/// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n\
  /// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n\
  /// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining\
  \ : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n\
  /// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n\
  /// Have fun :)\nfn eat(number: isize, need: isize, remaining: isize) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = eat;\n    assert_eq!(candidate(5, 6,\
  \ 10), vec![11, 4]);\n    assert_eq!(candidate(4, 8, 9), vec![12, 1]);\n    assert_eq!(candidate(1,\
  \ 10, 10), vec![11, 0]);\n    assert_eq!(candidate(2, 11, 5), vec![7, 0]);\n   \
  \ assert_eq!(candidate(4, 5, 7), vec![9, 2]);\n    assert_eq!(candidate(4, 5, 1),\
  \ vec![5, 0]);\n}\n"
completions: ["    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left < need {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left + eaten >= need {\n  \
    \      eaten += need;\n        left -= need;\n    } else {\n        eaten += left;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut total = number\
    \ + remaining;\n    let mut eaten = 0;\n    if total >= need {\n        eaten\
    \ = need;\n        total -= need;\n    } else {\n        eaten = total;\n    \
    \    total = 0;\n    }\n    vec![eaten, total]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut result = Vec::new();\n    if remaining\
    \ >= need {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut result = Vec::new();\n    if number + remaining < need {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    } else {\n        result.push(need);\n\
    \        result.push(number + remaining - need);\n    }\n    result", "    let\
    \ mut total = number + remaining;\n    if total >= need {\n        total = need;\n\
    \    }\n    vec![total, remaining - (total - number)]", "    let mut result =\
    \ vec![number, remaining];\n    if result[1] >= result[0] + result[1] {\n    \
    \    result[0] += result[1];\n        result[1] = 0;\n    } else {\n        result[1]\
    \ -= result[0];\n    }\n    result", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if eaten + left >= need {\n        eaten += need;\n \
    \       left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut result = vec![];\n    if number >=\
    \ need {\n        result.push(number);\n        result.push(remaining);\n    }\
    \ else if number + remaining >= need {\n        result.push(need);\n        result.push(remaining\
    \ - (need - number));\n    } else {\n        result.push(number + remaining);\n\
    \        result.push(0);\n    }\n    result", "    let mut eaten = number;\n \
    \   let mut left = remaining;\n    if need > left {\n        eaten += left;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left < need {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut result = vec![number, remaining];\n    if result[1] >=\
    \ result[0] + result[1] {\n        result[0] += result[1];\n        result[1]\
    \ = 0;\n    } else {\n        result[1] -= result[0];\n    }\n    result", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left < need {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let\
    \ mut left = remaining;\n    if left >= need {\n        eaten += need;\n     \
    \   left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n \
    \   }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut remaining\
    \ = remaining;\n    if remaining >= need {\n        eaten += need;\n        remaining\
    \ -= need;\n    } else {\n        eaten += remaining;\n        remaining = 0;\n\
    \    }\n    vec![eaten, remaining]", "    let mut result = vec![number, remaining];\n\
    \    if result[1] >= result[0] + result[1] {\n        result[0] += result[1];\n\
    \        result[1] = 0;\n    } else {\n        result[1] -= result[0];\n    }\n\
    \    result", "    let mut eaten = number;\n    let mut remaining = remaining;\n\
    \    if remaining < need {\n        eaten += remaining;\n        remaining = 0;\n\
    \    } else {\n        eaten += need;\n        remaining -= need;\n    }\n   \
    \ vec![eaten, remaining]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left > 0 {\n        if left >= need {\n\
    \            eaten += need;\n            left -= need;\n        } else {\n   \
    \         eaten += left;\n            left = 0;\n        }\n    }\n    vec![eaten,\
    \ left]", "    let mut result = vec![];\n    if number + remaining >= need {\n\
    \        result.push(need);\n        result.push(remaining - (need - number));\n\
    \    } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut remaining = remaining;\n    if need >\
    \ remaining {\n        eaten += remaining;\n        remaining = 0;\n    } else\
    \ {\n        eaten += need;\n        remaining -= need;\n    }\n    vec![eaten,\
    \ remaining]", "    let mut eaten = number;\n    let mut left = remaining;\n \
    \   if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left < need {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let\
    \ mut left = remaining;\n    if left >= need {\n        eaten += need;\n     \
    \   left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n \
    \   }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut remaining\
    \ = remaining;\n    if need > remaining {\n        eaten += remaining;\n     \
    \   remaining = 0;\n    } else {\n        eaten += need;\n        remaining -=\
    \ need;\n    }\n    vec![eaten, remaining]", "    let mut result = vec![number,\
    \ remaining];\n    if result[1] >= result[0] + result[1] {\n        result[0]\
    \ += result[1];\n        result[1] = 0;\n    } else {\n        result[1] -= result[0];\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left + eaten >= need {\n        eaten += need;\n        left -= need;\n\
    \    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left < need {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if need > left\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut remaining = remaining;\n    if eaten >= need {\n        return vec![eaten,\
    \ remaining];\n    }\n    if remaining >= need - eaten {\n        eaten += need\
    \ - eaten;\n        remaining -= need - eaten;\n    } else {\n        eaten +=\
    \ remaining;\n        remaining = 0;\n    }\n    vec![eaten, remaining]", "  \
    \  let eaten = if remaining >= need {\n        number + need\n    } else {\n \
    \       number + remaining\n    };\n    let left = if remaining >= need {\n  \
    \      remaining - need\n    } else {\n        0\n    };\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = vec![number, remaining];\n    if need > remaining {\n        result[0] +=\
    \ remaining;\n        result[1] = 0;\n    } else {\n        result[0] += need;\n\
    \        result[1] -= need;\n    }\n    result", "    let mut result = Vec::new();\n\
    \    if remaining < need {\n        result.push(number + remaining);\n       \
    \ result.push(0);\n    } else {\n        result.push(number + need);\n       \
    \ result.push(remaining - need);\n    }\n    result", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need + number > remaining {\n        eaten\
    \ += remaining;\n        left = 0;\n    } else {\n        eaten += need;\n   \
    \     left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut remaining\
    \ = remaining;\n    if remaining >= need {\n        eaten += need;\n        remaining\
    \ -= need;\n    } else {\n        eaten += remaining;\n        remaining = 0;\n\
    \    }\n    vec![eaten, remaining]", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left < need {\n        eaten += left;\n        left\
    \ = 0;\n    } else {\n        eaten += need;\n        left -= need;\n    }\n \
    \   vec![eaten, left]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if need > remaining {\n        eaten += remaining;\n        left = 0;\n \
    \   } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ need > remaining {\n        eaten += remaining;\n        left = 0;\n    } else\
    \ {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut remaining = remaining;\n    if need >\
    \ remaining {\n        eaten += remaining;\n        remaining = 0;\n    } else\
    \ {\n        eaten += need;\n        remaining -= need;\n    }\n    vec![eaten,\
    \ remaining]", "    let mut eaten = number;\n    let mut remaining = remaining;\n\
    \    if need > remaining {\n        eaten += remaining;\n        remaining = 0;\n\
    \    } else {\n        eaten += need;\n        remaining -= need;\n    }\n   \
    \ vec![eaten, remaining]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if need > left\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > remaining {\n      \
    \  eaten += remaining;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left < need {\n        eaten += left;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if need > left {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left < need {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut remaining = remaining;\n    if need >\
    \ remaining {\n        eaten += remaining;\n        remaining = 0;\n    } else\
    \ {\n        eaten += need;\n        remaining -= need;\n    }\n    vec![eaten,\
    \ remaining]", "    let mut eaten = number;\n    let mut left = remaining;\n \
    \   if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left > need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left < need {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let\
    \ mut left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left < need {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut result = vec![number];\n    if remaining >= need {\n  \
    \      result.push(remaining - need);\n    } else {\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut remaining = remaining;\n    if remaining >= need {\n\
    \        eaten += need;\n        remaining -= need;\n    } else {\n        eaten\
    \ += remaining;\n        remaining = 0;\n    }\n    vec![eaten, remaining]", " \
    \   let mut result = Vec::new();\n    if number + remaining >= need {\n      \
    \  result.push(need);\n        result.push(remaining - (need - number));\n   \
    \ } else {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut remaining = remaining;\n\
    \    if remaining >= need {\n        eaten += need;\n        remaining -= need;\n\
    \    } else {\n        eaten += remaining;\n        remaining = 0;\n    }\n  \
    \  vec![eaten, remaining]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if eaten + left < need {\n        eaten +=\
    \ left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let\
    \ mut left = remaining;\n    if number + remaining < need {\n        eaten +=\
    \ remaining;\n        left = 0;\n    } else {\n        eaten += need;\n      \
    \  left -= need;\n    }\n    vec![eaten, left]", "    let mut result = vec![number,\
    \ remaining];\n    if need > remaining {\n        result[0] += remaining;\n  \
    \      result[1] = 0;\n    } else {\n        result[0] += need;\n        result[1]\
    \ -= need;\n    }\n    result", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut result = vec![];\n    if remaining >= need {\n        result.push(number\
    \ + need);\n        result.push(remaining - need);\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if eaten + left < need {\n   \
    \     eaten += left;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if need > remaining {\n        eaten += remaining;\n     \
    \   left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n \
    \   }\n    vec![eaten, left]", "    let mut result = vec![number, remaining];\n\
    \    if result[1] >= result[0] + result[1] {\n        result[0] += result[1];\n\
    \        result[1] = 0;\n    } else {\n        result[1] -= result[0];\n    }\n\
    \    result", "    let mut eaten = number;\n    let mut left = remaining;\n  \
    \  if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut remaining = remaining;\n    if remaining >= need {\n\
    \        eaten += need;\n        remaining -= need;\n    } else {\n        eaten\
    \ += remaining;\n        remaining = 0;\n    }\n    vec![eaten, remaining]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > remaining {\n      \
    \  eaten += remaining;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut result = Vec::new();\n\
    \    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ -= need;\n        result.push(need);\n        result.push(total);\n    } else\
    \ {\n        result.push(total);\n        result.push(0);\n    }\n    result",
  "    let mut total = number + remaining;\n    if total >= need {\n        total\
    \ = need;\n    }\n    vec![total, remaining - (total - number)]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if eaten + left < need {\n\
    \        eaten += left;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut result = Vec::new();\n\
    \    if number + remaining >= need {\n        result.push(need);\n        result.push(remaining\
    \ - (need - number));\n    } else {\n        result.push(number + remaining);\n\
    \        result.push(0);\n    }\n    result", "    let mut result = vec![number,\
    \ remaining];\n    if number + remaining >= need {\n        result[0] += need;\n\
    \        result[1] -= need;\n    } else {\n        result[0] += remaining;\n \
    \       result[1] = 0;\n    }\n    result", "    let mut eaten = number;\n   \
    \ let mut left = remaining;\n    if left >= need {\n        eaten += need;\n \
    \       left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n   \
    \ if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left + eaten < need {\n        eaten += left;\n        left = 0;\n   \
    \ } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if eaten + left < need {\n   \
    \     eaten += left;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left < need {\n        eaten += left;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left < need {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut remaining = remaining;\n \
    \   if remaining < need {\n        eaten += remaining;\n        remaining = 0;\n\
    \    } else {\n        eaten += need;\n        remaining -= need;\n    }\n   \
    \ vec![eaten, remaining]", "    let mut eaten = number;\n    let mut remaining\
    \ = remaining;\n    if remaining < need {\n        eaten += remaining;\n     \
    \   remaining = 0;\n    } else {\n        eaten += need;\n        remaining -=\
    \ need;\n    }\n    vec![eaten, remaining]", "    let mut eaten = number;\n  \
    \  let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left < need {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left + eaten\
    \ >= need {\n        eaten += need;\n        left -= need;\n    } else {\n   \
    \     eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let\
    \ mut eaten = number;\n    let mut left = remaining;\n    if need > left {\n \
    \       eaten += left;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n   \
    \ if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need > left {\n        eaten += left;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if number < need {\n        if remaining < need - number {\n\
    \            eaten += remaining;\n            left = 0;\n        } else {\n  \
    \          eaten += need - number;\n            left -= need - number;\n     \
    \   }\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if need > left\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > remaining {\n      \
    \  eaten += remaining;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut remaining = remaining;\n    if remaining < need {\n        eaten\
    \ += remaining;\n        remaining = 0;\n    } else {\n        eaten += need;\n\
    \        remaining -= need;\n    }\n    vec![eaten, remaining]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if left >= need {\n    \
    \    eaten += need;\n        left -= need;\n    } else {\n        eaten += left;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut total = number\
    \ + remaining;\n    let mut left = 0;\n    if total < need {\n        total =\
    \ remaining;\n        left = 0;\n    } else {\n        total = need;\n       \
    \ left = remaining - (need - number);\n    }\n    vec![total, left]", "    let\
    \ mut eaten = number;\n    let mut left = remaining;\n    if left >= need {\n\
    \        eaten += need;\n        left -= need;\n    } else {\n        eaten +=\
    \ left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = vec![number, remaining];\n    if result[1] >= result[0] + result[1] {\n  \
    \      result[0] += result[1];\n        result[1] = 0;\n    } else {\n       \
    \ result[1] -= result[0];\n    }\n    result", "    let mut total = number + remaining;\n\
    \    if total >= need {\n        total = need;\n    }\n    vec![total, remaining\
    \ - (total - number)]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut total\
    \ = number + remaining;\n    if total < need {\n        total = remaining;\n \
    \   } else {\n        total -= need;\n    }\n    vec![number + remaining - total,\
    \ total]", "    let mut eaten = number;\n    let mut remaining = remaining;\n\
    \    if remaining < need {\n        eaten += remaining;\n        remaining = 0;\n\
    \    } else {\n        eaten += need;\n        remaining -= need;\n    }\n   \
    \ vec![eaten, remaining]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if need > remaining {\n        eaten += remaining;\n        left = 0;\n \
    \   } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left < need {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut result = vec![];\n   \
    \ if number < 0 || need < 0 || remaining < 0 {\n        result.push(0);\n    \
    \    result.push(0);\n    } else if number + remaining < need {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    } else {\n        result.push(need);\n\
    \        result.push(number + remaining - need);\n    }\n    result", "    let\
    \ mut eaten = number;\n    let mut left = remaining;\n    if left < need {\n \
    \       eaten += left;\n        left = 0;\n    } else {\n        eaten += need;\n\
    \        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut remaining = remaining;\n    if remaining >= need {\n        eaten\
    \ += need;\n        remaining -= need;\n    } else {\n        eaten += remaining;\n\
    \        remaining = 0;\n    }\n    vec![eaten, remaining]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left < need {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let\
    \ mut left = remaining;\n    if left < need {\n        eaten += left;\n      \
    \  left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n  \
    \  }\n    vec![eaten, left]", "    let mut result = vec![];\n    let mut total\
    \ = number + remaining;\n    if total >= need {\n        result.push(need);\n\
    \        result.push(total - need);\n    } else {\n        result.push(total);\n\
    \        result.push(0);\n    }\n    result", "    let mut eaten = number;\n \
    \   let mut left = remaining;\n    if left < need {\n        eaten += left;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut remaining\
    \ = remaining;\n    if remaining >= need {\n        eaten += need;\n        remaining\
    \ -= need;\n    } else {\n        eaten += remaining;\n        remaining = 0;\n\
    \    }\n    vec![eaten, remaining]", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if need > remaining {\n        eaten += remaining;\n        left = 0;\n \
    \   } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut result = vec![];\n    let mut total = number + remaining;\n\
    \    if total >= need {\n        result.push(need);\n        result.push(total\
    \ - need);\n    } else {\n        result.push(total);\n        result.push(0);\n\
    \    }\n    result", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if need > left\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = vec![number, remaining];\n    if result[1] >= result[0] + result[1] {\n  \
    \      result[0] += result[1];\n        result[1] = 0;\n    } else {\n       \
    \ result[1] -= result[0];\n    }\n    result", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need > left {\n        eaten += left;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if need > remaining {\n        eaten += remaining;\n     \
    \   left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n \
    \   }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left < need {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left < need {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut remaining = remaining;\n    let mut number = number;\n    let mut\
    \ need = need;\n    if number + remaining < need {\n        need -= number + remaining;\n\
    \        remaining = 0;\n        number += remaining;\n    } else {\n        remaining\
    \ -= need - number;\n        number += need - number;\n        need = 0;\n   \
    \ }\n    vec![number, need, remaining]", "    let mut eaten = number;\n    let\
    \ mut left = remaining;\n    if left >= need {\n        eaten += need;\n     \
    \   left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n \
    \   }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left >= need {\n        eaten += need;\n        left -= need;\n    } else {\n\
    \        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut result\
    \ = vec![];\n    if number + remaining >= need {\n        result.push(need);\n\
    \        result.push(remaining - (need - number));\n    } else {\n        result.push(number\
    \ + remaining);\n        result.push(0);\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    result.push(eaten);\n\
    \    result.push(left);\n    result", "    let mut result = Vec::new();\n    let\
    \ mut remaining = remaining;\n    let mut number = number;\n    if remaining <\
    \ need {\n        result.push(number + remaining);\n        result.push(0);\n\
    \    } else {\n        result.push(number + need);\n        result.push(remaining\
    \ - need);\n    }\n    result", "    let mut result = Vec::new();\n    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if need > remaining {\n\
    \        eaten += remaining;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    result.push(eaten);\n    result.push(left);\n\
    \    result", "    let mut eaten = number;\n    let mut left = remaining;\n  \
    \  if left >= need {\n        eaten += need;\n        left -= need;\n    } else\
    \ {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if need > remaining\
    \ {\n        eaten += remaining;\n        left = 0;\n    } else {\n        eaten\
    \ += need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if left >= need {\n    \
    \    eaten += need;\n        left -= need;\n    } else {\n        eaten += left;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need <= remaining {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += remaining;\n        left\
    \ = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if need > remaining {\n        eaten += remaining;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut result = vec![];\n    if number >=\
    \ need {\n        result.push(number);\n        result.push(remaining);\n    }\
    \ else if number + remaining >= need {\n        result.push(need);\n        result.push(remaining\
    \ - (need - number));\n    } else {\n        result.push(number + remaining);\n\
    \        result.push(0);\n    }\n    result", "    let mut eaten = number;\n \
    \   let mut left = remaining;\n    if left >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += left;\n        left = 0;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left >= need {\n        eaten += need;\n        left -=\
    \ need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left < need {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left >= need {\n        eaten\
    \ += need;\n        left -= need;\n    } else {\n        eaten += left;\n    \
    \    left = 0;\n    }\n    vec![eaten, left]", "    let mut total = number + remaining;\n\
    \    if total < need {\n        total = remaining;\n    } else {\n        total\
    \ -= need;\n    }\n    vec![number + remaining - total, total]", "    let mut\
    \ eaten = number;\n    let mut left = remaining;\n    if left >= need {\n    \
    \    eaten += need;\n        left -= need;\n    } else {\n        eaten += left;\n\
    \        left = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if need > left {\n        eaten += left;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut remaining\
    \ = remaining;\n    if remaining < need {\n        eaten += remaining;\n     \
    \   remaining = 0;\n    } else {\n        eaten += need;\n        remaining -=\
    \ need;\n    }\n    vec![eaten, remaining]", "    let mut eaten = number;\n  \
    \  let mut left = remaining;\n    if remaining >= need {\n        eaten += need;\n\
    \        left -= need;\n    } else {\n        eaten += remaining;\n        left\
    \ = 0;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]", "    let mut eaten = number;\n    let mut left = remaining;\n\
    \    if left < need {\n        eaten += left;\n        left = 0;\n    } else {\n\
    \        eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut total\
    \ = number + remaining;\n    let mut left = 0;\n    if total < need {\n      \
    \  total = remaining;\n        left = 0;\n    } else {\n        total = number\
    \ + remaining;\n        left = total - need;\n    }\n    vec![total, left]", " \
    \   let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if need > left {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let\
    \ mut remaining = remaining;\n    if remaining < need {\n        eaten += remaining;\n\
    \        remaining = 0;\n    } else {\n        eaten += need;\n        remaining\
    \ -= need;\n    }\n    vec![eaten, remaining]", "    let mut eaten = number;\n\
    \    let mut left = remaining;\n    if left < need {\n        eaten += left;\n\
    \        left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n\
    \    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut left\
    \ = remaining;\n    if left < need {\n        eaten += left;\n        left = 0;\n\
    \    } else {\n        eaten += need;\n        left -= need;\n    }\n    vec![eaten,\
    \ left]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left < need {\n        eaten += left;\n        left = 0;\n    } else {\n   \
    \     eaten += need;\n        left -= need;\n    }\n    vec![eaten, left]", " \
    \   let mut eaten = number;\n    let mut remaining = remaining;\n    if remaining\
    \ >= need {\n        eaten += need;\n        remaining -= need;\n    } else {\n\
    \        eaten += remaining;\n        remaining = 0;\n    }\n    vec![eaten, remaining]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if left < need\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    if remaining >= need {\n        eaten += need;\n    } else {\n\
    \        eaten += remaining;\n    }\n    vec![eaten, remaining - need]", "   \
    \ let mut eaten = number;\n    let mut left = remaining;\n    if left >= need\
    \ {\n        eaten += need;\n        left -= need;\n    } else {\n        eaten\
    \ += left;\n        left = 0;\n    }\n    vec![eaten, left]", "    let mut total\
    \ = number + remaining;\n    if total < need {\n        total = remaining;\n \
    \   } else {\n        total -= need;\n    }\n    vec![number + remaining - total,\
    \ total]", "    let mut eaten = number;\n    let mut left = remaining;\n    if\
    \ left + eaten >= need {\n        eaten += need;\n        left -= need;\n    }\
    \ else {\n        eaten += left;\n        left = 0;\n    }\n    vec![eaten, left]",
  "    let mut eaten = number;\n    let mut left = remaining;\n    if need > left\
    \ {\n        eaten += left;\n        left = 0;\n    } else {\n        eaten +=\
    \ need;\n        left -= need;\n    }\n    vec![eaten, left]", "    let mut eaten\
    \ = number;\n    let mut left = remaining;\n    if left < need {\n        eaten\
    \ += left;\n        left = 0;\n    } else {\n        eaten += need;\n        left\
    \ -= need;\n    }\n    vec![eaten, left]", "    let mut eaten = number;\n    let\
    \ mut left = remaining;\n    if need > left {\n        eaten += left;\n      \
    \  left = 0;\n    } else {\n        eaten += need;\n        left -= need;\n  \
    \  }\n    vec![eaten, left]", "    let mut eaten = number;\n    let mut remaining\
    \ = remaining;\n    if remaining >= need {\n        eaten += need;\n        remaining\
    \ -= need;\n    } else {\n        eaten += remaining;\n        remaining = 0;\n\
    \    }\n    vec![eaten, remaining]", "    let mut eaten = number;\n    let mut\
    \ left = remaining;\n    if left >= need {\n        eaten += need;\n        left\
    \ -= need;\n    } else {\n        eaten += left;\n        left = 0;\n    }\n \
    \   vec![eaten, left]"]
stop_tokens:
- "\n}"
