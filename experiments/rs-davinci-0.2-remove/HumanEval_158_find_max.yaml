name: HumanEval_158_find_max
language: rs
prompt: "/// Write a function that accepts a list of strings.\n/// The list contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\nfn find_max(words: Vec<String>)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = find_max;\n    assert_eq!(candidate(vec![String::from(\"\
  name\"), String::from(\"of\"), String::from(\"string\")]), String::from(\"string\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"name\"), String::from(\"enam\"\
  ), String::from(\"game\")]), String::from(\"enam\"));\n    assert_eq!(candidate(vec![String::from(\"\
  aaaaaaa\"), String::from(\"bb\"), String::from(\"cc\")]), String::from(\"aaaaaaa\"\
  ));\n    assert_eq!(candidate(vec![String::from(\"abc\"), String::from(\"cba\")]),\
  \ String::from(\"abc\"));\n    assert_eq!(candidate(vec![String::from(\"play\"),\
  \ String::from(\"this\"), String::from(\"game\"), String::from(\"of\"), String::from(\"\
  footbott\")]), String::from(\"footbott\"));\n    assert_eq!(candidate(vec![String::from(\"\
  we\"), String::from(\"are\"), String::from(\"gonna\"), String::from(\"rock\")]),\
  \ String::from(\"gonna\"));\n    assert_eq!(candidate(vec![String::from(\"we\"),\
  \ String::from(\"are\"), String::from(\"a\"), String::from(\"mad\"), String::from(\"\
  nation\")]), String::from(\"nation\"));\n    assert_eq!(candidate(vec![String::from(\"\
  this\"), String::from(\"is\"), String::from(\"a\"), String::from(\"prrk\")]), String::from(\"\
  this\"));\n    assert_eq!(candidate(vec![String::from(\"b\")]), String::from(\"\
  b\"));\n    assert_eq!(candidate(vec![String::from(\"play\"), String::from(\"play\"\
  ), String::from(\"play\")]), String::from(\"play\"));\n}\n"
completions: ["    let mut max_word = String::new();\n    let mut max_count = 0;\n\
    \    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        } else if count == max_count {\n            if word < max_word\
    \ {\n                max_word = word;\n            }\n        }\n    }\n    max_word",
  "    let mut max = String::new();\n    let mut max_len = 0;\n    for word in words\
    \ {\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            chars.insert(c);\n        }\n        if chars.len() > max_len {\n\
    \            max = word;\n            max_len = chars.len();\n        }\n    }\n\
    \    max", "    let mut max = String::new();\n    let mut max_count = 0;\n   \
    \ for word in words {\n        let mut chars: HashSet<char> = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max_word = \"\".to_string();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut count = 0;\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            if !chars.contains(&c)\
    \ {\n                count += 1;\n                chars.insert(c);\n         \
    \   }\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max = word;\n            max_count = count;\n   \
    \     }\n    }\n    max", "    let mut max_word = String::new();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = \"\".to_string();\n    let mut max_count = 0;\n    for word in words {\n \
    \       let count = word.chars().collect::<HashSet<char>>().len();\n        if\
    \ count > max_count {\n            max_count = count;\n            max_word =\
    \ word;\n        } else if count == max_count {\n            if word < max_word\
    \ {\n                max_word = word;\n            }\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max = String::new();\n  \
    \  let mut max_unique = 0;\n    for word in words {\n        let mut unique =\
    \ 0;\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            if !chars.contains(&c) {\n                unique += 1;\n        \
    \        chars.insert(c);\n            }\n        }\n        if unique > max_unique\
    \ {\n            max = word;\n            max_unique = unique;\n        }\n  \
    \  }\n    max", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        } else if count == max_count {\n            if word < max_word\
    \ {\n                max_word = word;\n            }\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = \"\".to_string();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        } else if count == max_count {\n            if word < max_word {\n  \
    \              max_word = word;\n            }\n        }\n    }\n    max_word",
  "    let mut max = String::new();\n    let mut max_chars = 0;\n    for word in words\
    \ {\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            chars.insert(c);\n        }\n        if chars.len() > max_chars {\n\
    \            max = word;\n            max_chars = chars.len();\n        }\n  \
    \  }\n    max", "    let mut max = String::new();\n    let mut max_chars = 0;\n\
    \    for word in words {\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            chars.insert(c);\n        }\n        if chars.len()\
    \ > max_chars {\n            max = word;\n            max_chars = chars.len();\n\
    \        }\n    }\n    max", "    let mut max_word = words[0].clone();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        } else if count == max_count {\n            max_word = min(max_word,\
    \ word);\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        } else if count == max_count {\n            max_word = if word\
    \ < max_word { word } else { max_word };\n        }\n    }\n    max_word", " \
    \   let mut max_word = String::new();\n    let mut max_unique = 0;\n    for word\
    \ in words {\n        let unique = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique > max_unique {\n            max_unique = unique;\n        \
    \    max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        } else if count == max_count {\n            if word < max_word {\n  \
    \              max_word = word;\n            }\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        } else if count == max_count {\n            max_word = std::cmp::min(max_word,\
    \ word);\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_len = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_len {\n            max_len = chars.len();\n      \
    \      max_word = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max = String::new();\n  \
    \  let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max = 0;\n    let mut max_word = \"\".to_string();\n    for word in words {\n\
    \        let mut chars = HashSet::new();\n        for c in word.chars() {\n  \
    \          chars.insert(c);\n        }\n        if chars.len() > max {\n     \
    \       max = chars.len();\n            max_word = word;\n        }\n    }\n \
    \   max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n\n    for word in words {\n        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique_chars > max_unique_chars {\n            max_unique_chars =\
    \ unique_chars;\n            max_word = word;\n        }\n    }\n\n    max_word",
  "    let mut max = String::new();\n    let mut max_count = 0;\n    for word in words\
    \ {\n        let count = word.chars().collect::<HashSet<char>>().len();\n    \
    \    if count > max_count {\n            max = word;\n            max_count =\
    \ count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max = String::new();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = 0;\n    let mut\
    \ max_word = \"\".to_string();\n    for word in words {\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max {\n            max = chars.len();\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max = 0;\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max {\n            max = chars.len();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max_word = String::new();\n    let mut max_count = 0;\n    for word in words\
    \ {\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            chars.insert(c);\n        }\n        if chars.len() > max_count {\n\
    \            max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut count =\
    \ 0;\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            if !chars.contains(&c) {\n                count += 1;\n         \
    \       chars.insert(c);\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_len = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_len {\n            max_len = chars.len();\n      \
    \      max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max_word = String::new();\n    let mut max_count = 0;\n    for word in words\
    \ {\n        let count = word.chars().collect::<HashSet<char>>().len();\n    \
    \    if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max_word = String::new();\n    let mut max_count = 0;\n    for word in words\
    \ {\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            chars.insert(c);\n        }\n        if chars.len() > max_count {\n\
    \            max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = count_unique_chars(&word);\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = 0;\n    let mut max_word = String::new();\n    for word in words {\n     \
    \   let mut chars = HashSet::new();\n        for c in word.chars() {\n       \
    \     chars.insert(c);\n        }\n        if chars.len() > max {\n          \
    \  max = chars.len();\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max_word = String::new();\n    let mut max_unique_chars = 0;\n\n    for word\
    \ in words {\n        let mut unique_chars = 0;\n        let mut chars = HashSet::new();\n\
    \n        for c in word.chars() {\n            if !chars.contains(&c) {\n    \
    \            unique_chars += 1;\n                chars.insert(c);\n          \
    \  }\n        }\n\n        if unique_chars > max_unique_chars {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max = word;\n            max_count = chars.len();\n        }\n    }\n\
    \    max", "    let mut max = String::new();\n    let mut max_count = 0;\n   \
    \ for word in words {\n        let mut chars = HashSet::new();\n        for c\
    \ in word.chars() {\n            chars.insert(c);\n        }\n        if chars.len()\
    \ > max_count {\n            max = word;\n            max_count = chars.len();\n\
    \        }\n    }\n    max", "    let mut max_word = String::new();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = 0;\n    let mut max_word = String::new();\n\
    \    for word in words {\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            chars.insert(c);\n        }\n        if chars.len()\
    \ > max {\n            max = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max = word;\n            max_count = chars.len();\n        }\n    }\n\
    \    max", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n\n    for word in words {\n        let mut unique_chars = 0;\n       \
    \ let mut chars = HashSet::new();\n\n        for c in word.chars() {\n       \
    \     if !chars.contains(&c) {\n                unique_chars += 1;\n         \
    \       chars.insert(c);\n            }\n        }\n\n        if unique_chars\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars;\n       \
    \     max_word = word;\n        }\n    }\n\n    max_word", "    let mut max =\
    \ String::new();\n    let mut max_count = 0;\n    for word in words {\n      \
    \  let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max = word;\n            max_count = count;\n   \
    \     }\n    }\n    max", "    let mut max_word = String::new();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_unique_chars = 0;\n\n    for word in words {\n        let unique_chars\
    \ = word.chars().collect::<HashSet<char>>().len();\n        if unique_chars >\
    \ max_unique_chars {\n            max_unique_chars = unique_chars;\n         \
    \   max_word = word;\n        }\n    }\n\n    max_word", "    let mut max_word\
    \ = words[0].clone();\n    let mut max_count = 0;\n    for word in words {\n \
    \       let mut chars = HashSet::new();\n        for c in word.chars() {\n   \
    \         chars.insert(c);\n        }\n        if chars.len() > max_count {\n\
    \            max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = 0;\n    let mut max_word = \"\".to_string();\n\
    \    for word in words {\n        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique_chars > max {\n            max = unique_chars;\n          \
    \  max_word = word;\n        }\n    }\n    max_word", "    let mut max_word =\
    \ String::new();\n    let mut max_count = 0;\n    for word in words {\n      \
    \  let mut chars = HashSet::new();\n        for c in word.chars() {\n        \
    \    chars.insert(c);\n        }\n        if chars.len() > max_count {\n     \
    \       max_count = chars.len();\n            max_word = word;\n        }\n  \
    \  }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_word = String::new();\n   \
    \ let mut max_unique_chars = 0;\n\n    for word in words {\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_unique_chars {\n            max_unique_chars\
    \ = chars.len();\n            max_word = word;\n        }\n    }\n\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for ch in word.chars()\
    \ {\n            chars.insert(ch);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = words[0].clone();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = 0;\n    let mut max_word = String::new();\n    for word in words {\n     \
    \   let mut chars = HashSet::new();\n        for c in word.chars() {\n       \
    \     chars.insert(c);\n        }\n        if chars.len() > max {\n          \
    \  max = chars.len();\n            max_word = word;\n        }\n    }\n    max_word",
  "    let mut max_word = \"\".to_string();\n    let mut max_unique = 0;\n    for\
    \ word in words {\n        let unique = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique > max_unique {\n            max_unique = unique;\n        \
    \    max_word = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max = String::new();\n    let mut max_count = 0;\n    for word in words {\n\
    \        let mut set = HashSet::new();\n        for c in word.chars() {\n    \
    \        set.insert(c);\n        }\n        if set.len() > max_count {\n     \
    \       max = word;\n            max_count = set.len();\n        }\n    }\n  \
    \  max", "    let mut max = String::new();\n    let mut max_count = 0;\n    for\
    \ word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max = String::new();\n  \
    \  let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max = String::new();\n  \
    \  let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max = 0;\n    let mut max_word\
    \ = String::new();\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max {\n            max = chars.len();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max = String::new();\n    let mut max_count = 0;\n    for word in words {\n\
    \        let mut count = 0;\n        let mut chars = HashSet::new();\n       \
    \ for c in word.chars() {\n            if !chars.contains(&c) {\n            \
    \    count += 1;\n                chars.insert(c);\n            }\n        }\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = count_unique_chars(&word);\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max = word;\n            max_count = chars.len();\n        }\n    }\n\
    \    max", "    let mut max_word = String::new();\n    let mut max_count = 0;\n\
    \    for word in words {\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            chars.insert(c);\n        }\n        if chars.len()\
    \ > max_count {\n            max_count = chars.len();\n            max_word =\
    \ word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_unique\
    \ = 0;\n    for word in words {\n        let mut unique = 0;\n        let mut\
    \ chars = HashSet::new();\n        for c in word.chars() {\n            if !chars.contains(&c)\
    \ {\n                unique += 1;\n                chars.insert(c);\n        \
    \    }\n        }\n        if unique > max_unique {\n            max = word;\n\
    \            max_unique = unique;\n        }\n    }\n    max", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = count_unique_chars(&word);\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max = word;\n            max_count = chars.len();\n        }\n    }\n\
    \    max", "    let mut max_word = String::new();\n    let mut max_count = 0;\n\
    \    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max_word = String::new();\n    let mut max_count = 0;\n    for word in words\
    \ {\n        let count = word.chars().collect::<HashSet<char>>().len();\n    \
    \    if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = words[0].clone();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for ch in word.chars() {\n     \
    \       chars.insert(ch);\n        }\n        if chars.len() > max_count {\n \
    \           max = word;\n            max_count = chars.len();\n        }\n   \
    \ }\n    max", "    let mut max = String::new();\n    let mut max_count = 0;\n\
    \    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max_word = \"\".to_string();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max = word;\n            max_count = chars.len();\n        }\n    }\n\
    \    max", "    let mut max = String::new();\n    let mut max_count = 0;\n   \
    \ for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max = String::new();\n  \
    \  let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max_word = String::new();\n    let mut max_count = 0;\n    for word in words\
    \ {\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            chars.insert(c);\n        }\n        if chars.len() > max_count {\n\
    \            max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        } else if count == max_count {\n            if word < max_word\
    \ {\n                max_word = word;\n            }\n        }\n    }\n    max_word",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = 0;\n    let mut\
    \ max_word = \"\".to_string();\n    for word in words {\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max {\n            max = chars.len();\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max = word;\n            max_count = count;\n   \
    \     }\n    }\n    max", '    words.iter().max_by_key(|w| w.chars().collect::<HashSet<_>>().len()).unwrap().to_string()',
  "    let mut max = 0;\n    let mut max_word = \"\".to_string();\n    for word in\
    \ words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max {\n\
    \            max = chars.len();\n            max_word = word;\n        }\n   \
    \ }\n    max_word", "    let mut max = String::new();\n    let mut max_count =\
    \ 0;\n    for word in words {\n        let mut count = 0;\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            if !chars.contains(&c)\
    \ {\n                count += 1;\n                chars.insert(c);\n         \
    \   }\n        }\n        if count > max_count {\n            max = word;\n  \
    \          max_count = count;\n        }\n    }\n    max", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for ch in word.chars() {\n            chars.insert(ch);\n        }\n   \
    \     if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max = word;\n            max_count = chars.len();\n        }\n    }\n\
    \    max", "    let mut max_word = String::new();\n    let mut max_count = 0;\n\
    \    for word in words {\n        let mut count = 0;\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            if !chars.contains(&c)\
    \ {\n                count += 1;\n                chars.insert(c);\n         \
    \   }\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = (0, String::new());\n    for word in words {\n        let mut letters = HashSet::new();\n\
    \        for ch in word.chars() {\n            letters.insert(ch);\n        }\n\
    \        if letters.len() > max.0 {\n            max = (letters.len(), word);\n\
    \        }\n    }\n    max.1", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_unique = 0;\n    for word in words {\n   \
    \     let mut unique = 0;\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            if !chars.contains(&c) {\n                unique\
    \ += 1;\n                chars.insert(c);\n            }\n        }\n        if\
    \ unique > max_unique {\n            max = word;\n            max_unique = unique;\n\
    \        }\n    }\n    max", "    let mut max_word = String::new();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_len = 0;\n    for word in words {\n      \
    \  let len = word.chars().collect::<HashSet<char>>().len();\n        if len >\
    \ max_len {\n            max = word;\n            max_len = len;\n        }\n\
    \    }\n    max", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n\n    for word in words {\n        let mut unique_chars = 0;\n       \
    \ let mut chars = HashSet::new();\n\n        for c in word.chars() {\n       \
    \     if !chars.contains(&c) {\n                unique_chars += 1;\n         \
    \       chars.insert(c);\n            }\n        }\n\n        if unique_chars\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars;\n       \
    \     max_word = word;\n        }\n    }\n\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_unique_chars\
    \ = 0;\n\n    for word in words {\n        let unique_chars = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique_chars > max_unique_chars {\n            max_unique_chars =\
    \ unique_chars;\n            max_word = word;\n        }\n    }\n\n    max_word",
  "    let mut max = words[0].clone();\n    let mut max_unique = 0;\n    for word\
    \ in words {\n        let mut unique = 0;\n        for c in word.chars() {\n \
    \           if word.matches(c).count() == 1 {\n                unique += 1;\n\
    \            }\n        }\n        if unique > max_unique {\n            max =\
    \ word.clone();\n            max_unique = unique;\n        }\n    }\n    max",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut chars = HashSet::new();\n        for c in word.chars()\
    \ {\n            chars.insert(c);\n        }\n        if chars.len() > max_count\
    \ {\n            max_count = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max_word = String::new();\n    let\
    \ mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_unique = 0;\n    for word in words {\n        let unique = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique > max_unique {\n            max = word;\n            max_unique\
    \ = unique;\n        }\n    }\n    max", "    let mut max = String::new();\n \
    \   let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = 0;\n    let mut\
    \ max_word = String::new();\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max {\n            max = chars.len();\n \
    \           max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word", "    let mut max_word = String::new();\n   \
    \ let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = 0;\n    let mut max_word = \"\".to_string();\n\
    \    for word in words {\n        let mut chars = HashSet::new();\n        for\
    \ c in word.chars() {\n            chars.insert(c);\n        }\n        if chars.len()\
    \ > max {\n            max = chars.len();\n            max_word = word;\n    \
    \    }\n    }\n    max_word", "    let mut max = words[0].clone();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word.clone();\n           \
    \ max_count = count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = String::new();\n    let mut max_len = 0;\n    for word in words {\n      \
    \  let mut chars = HashSet::new();\n        for c in word.chars() {\n        \
    \    chars.insert(c);\n        }\n        if chars.len() > max_len {\n       \
    \     max = word;\n            max_len = chars.len();\n        }\n    }\n    max",
  "    let mut max_word = String::new();\n    let mut max_count = 0;\n    for word\
    \ in words {\n        let mut set = HashSet::new();\n        for c in word.chars()\
    \ {\n            set.insert(c);\n        }\n        if set.len() > max_count {\n\
    \            max_count = set.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut set = HashSet::new();\n     \
    \   for c in word.chars() {\n            set.insert(c);\n        }\n        if\
    \ set.len() > max_count {\n            max_count = set.len();\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_unique = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_unique {\n            max_unique = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_unique = 0;\n    for word in words {\n   \
    \     let unique = word.chars().collect::<HashSet<char>>().len();\n        if\
    \ unique > max_unique {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    max", "    let mut max = String::new();\n  \
    \  let mut max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max_word = \"\".to_string();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut count =\
    \ 0;\n        let mut chars = HashSet::new();\n        for c in word.chars() {\n\
    \            if !chars.contains(&c) {\n                count += 1;\n         \
    \       chars.insert(c);\n            }\n        }\n        if count > max_count\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut count = 0;\n        let mut chars\
    \ = HashSet::new();\n        for c in word.chars() {\n            if !chars.contains(&c)\
    \ {\n                count += 1;\n                chars.insert(c);\n         \
    \   }\n        }\n        if count > max_count {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", '    words.iter().max_by_key(|word|
    (word.len(), word)).unwrap().to_string()', "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max = String::new();\n    let mut max_count = 0;\n    for word in words {\n\
    \        let count = word.chars().collect::<HashSet<char>>().len();\n        if\
    \ count > max_count {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    max", "    let mut max_word = String::new();\n    let mut\
    \ max_count = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n\
    \        for c in word.chars() {\n            chars.insert(c);\n        }\n  \
    \      if chars.len() > max_count {\n            max_count = chars.len();\n  \
    \          max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let mut chars = HashSet::new();\n        for c in word.chars() {\n      \
    \      chars.insert(c);\n        }\n        if chars.len() > max_count {\n   \
    \         max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = \"\".to_string();\n    let mut max_count = 0;\n    for word in words {\n \
    \       let mut chars = HashSet::new();\n        for c in word.chars() {\n   \
    \         chars.insert(c);\n        }\n        if chars.len() > max_count {\n\
    \            max_count = chars.len();\n            max_word = word;\n        }\n\
    \    }\n    max_word", "    let mut max = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max = word;\n            max_count\
    \ = chars.len();\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max_count = chars.len();\n\
    \            max_word = word;\n        }\n    }\n    max_word", "    let mut max\
    \ = 0;\n    let mut max_word = \"\".to_string();\n    for word in words {\n  \
    \      let mut chars = HashSet::new();\n        for c in word.chars() {\n    \
    \        chars.insert(c);\n        }\n        if chars.len() > max {\n       \
    \     max = chars.len();\n            max_word = word;\n        }\n    }\n   \
    \ max_word", "    let mut max = String::new();\n    let mut max_unique = 0;\n\
    \    for word in words {\n        let unique = word.chars().collect::<HashSet<char>>().len();\n\
    \        if unique > max_unique {\n            max = word;\n            max_unique\
    \ = unique;\n        }\n    }\n    max", "    let mut max_word = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let count = word.chars().collect::<HashSet<char>>().len();\n\
    \        if count > max_count {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    max_word", "    let mut max = String::new();\n\
    \    let mut max_count = 0;\n    for word in words {\n        let mut chars =\
    \ HashSet::new();\n        for c in word.chars() {\n            chars.insert(c);\n\
    \        }\n        if chars.len() > max_count {\n            max = word;\n  \
    \          max_count = chars.len();\n        }\n    }\n    max", "    let mut\
    \ max = String::new();\n    let mut max_count = 0;\n    for word in words {\n\
    \        let mut chars = HashSet::new();\n        for c in word.chars() {\n  \
    \          chars.insert(c);\n        }\n        if chars.len() > max_count {\n\
    \            max = word;\n            max_count = chars.len();\n        }\n  \
    \  }\n    max", "    let mut max_word = String::new();\n    let mut max_count\
    \ = 0;\n    for word in words {\n        let mut chars = HashSet::new();\n   \
    \     for c in word.chars() {\n            chars.insert(c);\n        }\n     \
    \   if chars.len() > max_count {\n            max_count = chars.len();\n     \
    \       max_word = word;\n        }\n    }\n    max_word", "    let mut max_word\
    \ = String::new();\n    let mut max_count = 0;\n    for word in words {\n    \
    \    let count = word.chars().collect::<HashSet<char>>().len();\n        if count\
    \ > max_count {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    max_word"]
stop_tokens:
- "\n}"
