language: rs
name: HumanEval_130_tri
results:
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        if i % 2 ==\
    \ 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpb3fq0ddw.rs:24:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    let mut v = vec![3];\n    for i in 1..n {\n        v.push(if i % 2 ==\
    \ 0 { 1 + i / 2 } else { v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ + 1] });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp2_a78mvw.rs:21:73

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n \
    \       });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp15dhqm1g.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut res = vec![3, 2, 1];\n    if n <\
    \ 3 {\n        return res[0..n as usize + 1].to_vec();\n    }\n    for i in 3..n\
    \ + 1 {\n        let mut sum = 0;\n        if i % 2 == 0 {\n            sum =\
    \ 1 + i / 2;\n        } else {\n            sum = res[(i - 1) as usize] + res[(i\
    \ - 2) as usize] + res[(i + 1) as usize];\n        }\n        res.push(sum);\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpwt7gtnte.rs:25:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v: Vec<isize> = vec![3];\n    for\
    \ i in 1..n+1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n   \
    \     } else {\n            v.push(v[i as usize - 2] + v[i as usize - 1] + v[i\
    \ as usize]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmptqtn7wfk.rs:21:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp4mscwxmt.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n+1 {\n        let mut\
    \ sum = 0;\n        if i % 2 == 0 {\n            sum = 1 + i / 2;\n        } else\
    \ {\n            sum = v[i as usize - 1] + v[i as usize - 2] + v[i as usize -\
    \ 3];\n        }\n        v.push(sum);\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmptrrbomfi.rs:43:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for _ in\
    \ 3..n {\n        let x = v[0] + v[1] + v[2];\n        v.push(x);\n        v.remove(0);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpbzj2ky6s.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..(n as usize + 1)].to_vec();\n    }\n    for i in 3..(n\
    \ + 1) {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as usize]\n\
    \        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp5g_6ypm7.rs:24:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 3 {\n        v.truncate(n as usize);\n        return v;\n    }\n    for i in\
    \ 4..n + 1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n       \
    \ } else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]\n        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmphcbse1jk.rs:34:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n + 1 {\n        let mut\
    \ x = v[v.len() - 1] + v[v.len() - 2] + v[v.len() - 3];\n        if i % 2 == 0\
    \ {\n            x = 1 + i / 2;\n        }\n        v.push(x);\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpy31iucrv.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(v[i-1] + v[i-2] + v[i-3]);\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpihubk8ga.rs:18:16\n   |\n18 |         v.push(v[i-1] + v[i-2] + v[i-3]);\n\
    \   |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpihubk8ga.rs:18:25\n\
    \   |\n18 |         v.push(v[i-1] + v[i-2] + v[i-3]);\n   |                  \
    \       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpihubk8ga.rs:18:34\n\
    \   |\n18 |         v.push(v[i-1] + v[i-2] + v[i-3]);\n   |                  \
    \                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut res = vec![3, 1, 2];\n    if n <=\
    \ 2 {\n        return res;\n    }\n    for i in 3..n + 1 {\n        let v = if\
    \ i % 2 == 0 {\n            1 + i / 2\n        } else {\n            res[i as\
    \ usize - 1] + res[i as usize - 2] + res[i as usize - 3]\n        };\n       \
    \ res.push(v);\n    }\n    res\n}\n\nfn main() {\n    let candidate = tri;\n \
    \   assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp1npq194g.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        v.truncate(n as usize + 1);\n        return v;\n    }\n    for\
    \ i in 3..n + 1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n  \
    \      } else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i\
    \ + 1) as usize]\n        };\n        v.push(x);\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpv___rrcg.rs:25:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp4mscwxmt.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(v[i-1] + v[i-2] + v[i-3]);\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpihubk8ga.rs:18:16\n   |\n18 |         v.push(v[i-1] + v[i-2] + v[i-3]);\n\
    \   |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpihubk8ga.rs:18:25\n\
    \   |\n18 |         v.push(v[i-1] + v[i-2] + v[i-3]);\n   |                  \
    \       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpihubk8ga.rs:18:34\n\
    \   |\n18 |         v.push(v[i-1] + v[i-2] + v[i-3]);\n   |                  \
    \                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    for i in 3..n\
    \ + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize -\
    \ 3]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpiocni_z7.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut result = vec![3];\n    for i in\
    \ 1..n {\n        if i % 2 == 0 {\n            result.push(1 + i / 2);\n     \
    \   } else {\n            result.push(result[i as usize - 1] + result[i as usize\
    \ - 2] + result[i as usize + 1]);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpz4ygurcu.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        v.truncate(n as usize + 1);\n        return v;\n    }\n    for\
    \ i in 3..n + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n \
    \       } else {\n            v.push(v[(i - 1) as usize] + v[(i - 2) as usize]\
    \ + v[(i + 1) as usize]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpw3xbaehy.rs:25:64

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v.into_iter().take(n as usize).collect();\n    }\n    for\
    \ i in 3..n {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n      \
    \  } else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]\n        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp7ualjzxn.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        v.truncate(n as usize);\n        return v;\n    }\n    for i in 3..n\
    \ + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpg9ibkaop.rs:25:64

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ - 3]);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpx0frnp16.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    let mut v = vec![3];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            v.push(1 + i / 2);\n        } else {\n            v.push(v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize + 1]);\n        }\n    }\n    v\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_6swyugx.rs:24:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![3];\n    }\n    if n == 1 {\n        return vec![3,\
    \ 2];\n    }\n    if n == 2 {\n        return vec![3, 2, 1];\n    }\n    for i\
    \ in 3..n + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n   \
    \     } else {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i\
    \ as usize - 3]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpu2oha0si.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n + 1 {\n        if i %\
    \ 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 3]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpfg6g4lo5.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for _ in\
    \ 3..n {\n        let x = v[v.len() - 1] + v[v.len() - 2] + v[v.len() - 3];\n\
    \        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp4u0an81j.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 3 {\n        return v[0..n as usize].to_vec();\n    }\n    for i in 3..n {\n\
    \        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n \
    \           v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpc8j21xwv.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..(n + 1)].to_vec();\n    }\n    for i in 3..(n + 1) {\n\
    \        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n \
    \           v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp4e9ixl8i.rs:18:16\n   |\n18 |         return v[0..(n + 1)].to_vec();\n\
    \   |                ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `std::ops::Range<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<{integer}>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n \
    \       });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp15dhqm1g.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![0];\n \
    \   }\n    let mut v = vec![0, 3, 2];\n    for i in 3..n + 1 {\n        let x\
    \ = if i % 2 == 0 {\n            1 + i / 2\n        } else {\n            v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n        };\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpa4qf2w6x.rs:24:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n < 3\
    \ {\n        return v[0..n as usize + 1].to_vec();\n    }\n    for i in 3..n +\
    \ 1 {\n        let mut x = v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ - 3];\n        if i % 2 == 0 {\n            x += i / 2;\n        }\n       \
    \ v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpl48bdug2.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3];\n    for i in 1..n\
    \ {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n        } else {\n\
    \            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n     \
    \   };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp3f59nr4x.rs:21:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        let x = if i\
    \ % 2 == 0 {\n            1 + i / 2\n        } else {\n            v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize - 3]\n        };\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpnod0xwy1.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        let t = if i\
    \ % 2 == 0 {\n            1 + i / 2\n        } else {\n            v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize - 3]\n        };\n        v.push(t);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp6ztfusem.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n+1 {\n        let x =\
    \ v[i as usize - 2] + v[i as usize - 3] + v[i as usize - 4];\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpibldtuek.rs:38:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        let x = v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 3];\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp86a3nnp_.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        let x = v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ - 3];\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpv43nt1_a.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 3 {\n        return v;\n    }\n    for i in 3..n {\n        if i % 2 == 0 {\n\
    \            v.push(1 + i / 2);\n        } else {\n            v.push(v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize + 1]);\n        }\n    }\n    v\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp7fu3u3c5.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n \
    \       });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp15dhqm1g.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n + 1 {\n        if i %\
    \ 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 3]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpfg6g4lo5.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n + 1 {\n        if i %\
    \ 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 3]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpfg6g4lo5.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 3..n {\n        if i % 2 ==\
    \ 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpbg4xr4l6.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..n as usize + 1].to_vec();\n    }\n    for i in 3..n +\
    \ 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize +\
    \ 1]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp5ozd5__g.rs:24:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    let mut v = vec![3];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            v.push(1 + i / 2);\n        } else {\n            v.push(v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize + 1]);\n        }\n    }\n    v\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_6swyugx.rs:24:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![0];\n \
    \   }\n    if n == 1 {\n        return vec![0, 1];\n    }\n    if n == 2 {\n \
    \       return vec![0, 1, 1];\n    }\n    let mut v = vec![0, 1, 1];\n    for\
    \ i in 3..n + 1 {\n        let mut sum = 0;\n        if i % 2 == 0 {\n       \
    \     sum = 1 + i / 2;\n        } else {\n            sum = v[i as usize - 1]\
    \ + v[i as usize - 2] + v[i as usize + 1];\n        }\n        v.push(sum);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmphjqcdum2.rs:31:59

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n < 3\
    \ {\n        return v[0..n as usize + 1].to_vec();\n    }\n    for i in 3..n +\
    \ 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpooz4odvr.rs:24:64

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(v[i - 1] + v[i - 2] + v[i - 3]);\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmp0htctrnw.rs:18:16\n   |\n18 |         v.push(v[i - 1] + v[i - 2] + v[i\
    \ - 3]);\n   |                ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp0htctrnw.rs:18:27\n   |\n18 |         v.push(v[i -\
    \ 1] + v[i - 2] + v[i - 3]);\n   |                           ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0htctrnw.rs:18:38\n   |\n18 |  \
    \       v.push(v[i - 1] + v[i - 2] + v[i - 3]);\n   |                        \
    \              ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n       \
    \ } else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]\n        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpsrsx7xd4.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpclfm6eg1.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    if n == 1 {\n        return vec![3];\n    }\n    let mut v = vec![3,\
    \ 2, 8];\n    for i in 3..n {\n        let x = if i % 2 == 0 {\n            1\
    \ + i / 2\n        } else {\n            v[i as usize - 1] + v[i as usize - 2]\
    \ + v[i as usize + 1]\n        };\n        v.push(x);\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 8]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpy0vvi4tk.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n + 1 {\n        if i %\
    \ 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 2] + v[i as usize - 3] + v[i as usize - 4]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpzik9_uqx.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 3 {\n        return v[0..(n as usize)].to_vec();\n    }\n    for _ in 4..(n\
    \ + 1) {\n        let x = v[0] + v[1] + v[2];\n        v.push(x);\n        v.remove(0);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpoa_f22zk.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for _ in\
    \ 3..n {\n        let x = v[v.len() - 1] + v[v.len() - 2] + v[v.len() - 3];\n\
    \        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp4u0an81j.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n \
    \       });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpgjp72tad.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    let mut\
    \ i = 3;\n    while i <= n {\n        if i % 2 == 0 {\n            v.push(1 +\
    \ i / 2);\n        } else {\n            v.push(v[i as usize - 1] + v[i as usize\
    \ - 2] + v[i as usize + 1]);\n        }\n        i += 1;\n    }\n    v\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpd1r80ghu.rs:22:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        v.push(if i\
    \ % 2 == 0 {\n            1 + i / 2\n        } else {\n            v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize + 1]\n        });\n    }\n    v\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyut14uj5.rs:24:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..n as usize + 1].to_vec();\n    }\n    for i in 3..n +\
    \ 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe0q6q9x_.rs:24:64

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for _ in\
    \ 0..n {\n        let x = v[v.len() - 3] + v[v.len() - 2] + v[v.len() - 1];\n\
    \        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6, 9, 16]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpoghbxk56.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize - 1]\
    \ + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpb0gr9ohp.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n+1 {\n        let mut t = v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 3];\n        if i % 2 ==\
    \ 0 {\n            t = 1 + i / 2;\n        }\n        v.push(t);\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp_x8o54cc.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n \
    \       });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpgjp72tad.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for _ in\
    \ 3..n {\n        let last = v.len() - 1;\n        v.push(v[last - 2] + v[last\
    \ - 1] + v[last]);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmphmrsmjeq.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![0, 3, 2, 8];\n    if n\
    \ < 4 {\n        return v[0..n as usize + 1].to_vec();\n    }\n    for i in 4..n\
    \ + 1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n \
    \       };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 3, 2, 8]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpchs58wnl.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        let x = v[i\
    \ as usize - 3] + v[i as usize - 2] + v[i as usize - 1];\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp3xsz6p4x.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    let mut v = vec![3];\n    for i in 1..n {\n        if i % 2 == 0 {\n\
    \            v.push(1 + i / 2);\n        } else {\n            v.push(v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize + 1]);\n        }\n    }\n    v\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_6swyugx.rs:24:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n+1 {\n        if i % 2 == 0\
    \ {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpgcleh3by.rs:24:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3];\n    let mut i = 1;\n\
    \    while i <= n {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n\
    \        } else {\n            v.push(v[i as usize - 1] + v[i as usize - 2] +\
    \ v[i as usize + 1]);\n        }\n        i += 1;\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp5c8zp2wx.rs:22:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        v.truncate(n as usize);\n        return v;\n    }\n    for i in 3..n\
    \ + 1 {\n        let mut x = v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ - 3];\n        if i % 2 == 0 {\n            x += i / 2;\n        }\n       \
    \ v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp62b4qvld.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        let x = if i % 2 == 0 { 1 + i / 2 } else { v[(i - 1) as\
    \ usize] + v[(i - 2) as usize] + v[(i + 1) as usize] };\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpnoz8hal0.rs:18:96

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n <=\
    \ 2 {\n        return v[0..(n + 1) as usize].to_vec();\n    }\n    for i in 3..n\
    \ + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp_ps3l1vg.rs:24:64

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        let x = if i\
    \ % 2 == 0 {\n            1 + i / 2\n        } else {\n            v[(i - 1) as\
    \ usize] + v[(i - 2) as usize] + v[(i + 1) as usize]\n        };\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbs45dqln.rs:24:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n+1 {\n        let x = if i %\
    \ 2 == 0 {\n            1 + i / 2\n        } else {\n            v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize + 1]\n        };\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpai3t5zil.rs:24:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n   \
    \ let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpdwovzvu_.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n <=\
    \ 3 {\n        return v[0..n as usize].to_vec();\n    }\n    for i in 3..n {\n\
    \        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n \
    \           v.push(v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as usize]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpcisux0k5.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![0];\n \
    \   }\n    if n == 1 {\n        return vec![0, 3];\n    }\n    let mut v = vec![0,\
    \ 3, 2];\n    for i in 3..n + 1 {\n        let x = if i % 2 == 0 {\n         \
    \   1 + i / 2\n        } else {\n            v[i as usize - 1] + v[i as usize\
    \ - 2] + v[i as usize + 1]\n        };\n        v.push(x);\n    }\n    v\n}\n\n\
    fn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3,\
    \ 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpjrveixeo.rs:27:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n       \
    \ } else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]\n        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpsrsx7xd4.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        if i % 2 ==\
    \ 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpb3fq0ddw.rs:24:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n+1 {\n        let mut\
    \ val = v[i as usize - 4] + v[i as usize - 3] + v[i as usize - 2];\n        if\
    \ i % 2 == 0 {\n            val = 1 + i / 2;\n        }\n        v.push(val);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp727ow1e3.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { i / 2 } else { v[i as usize - 1]\
    \ + v[i as usize - 2] + v[i as usize - 3] });\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp3jp9rw6w.rs:25:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n + 1 {\n        let mut\
    \ t = 0;\n        if i % 2 == 0 {\n            t = 1 + i / 2;\n        } else\
    \ {\n            t = v[i as usize - 1] + v[i as usize - 2] + v[i as usize - 3];\n\
    \        }\n        v.push(t);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpwsrz_btx.rs:43:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n + 1 {\n        if i %\
    \ 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 3]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpfg6g4lo5.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            i / 2 + 1\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp75oz10kp.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as usize]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp0igbeyvf.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n\
    \            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp48gamukd.rs:21:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            i / 2 + 1\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp75oz10kp.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3];\n    for i in 1..n\
    \ {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else {\n\
    \            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n     \
    \   });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmppbmwnrfj.rs:21:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    let mut v = vec![3, 2, 1];\n    for i in 3..n+1 {\n        v.push(if\
    \ i % 2 == 0 {\n            1 + i / 2\n        } else {\n            v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize + 1]\n        });\n    }\n    v\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpfxtfl785.rs:24:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n       \
    \ } else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]\n        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpsrsx7xd4.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 3 {\n        return v[0..(n as usize)].to_vec();\n    }\n    for i in 3..n {\n\
    \        v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize - 3]);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmph71yyqla.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n <=\
    \ 3 {\n        return v[0..n as usize].to_vec();\n    }\n    for i in 3..n {\n\
    \        let x = if i % 2 == 0 {\n            1 + i / 2\n        } else {\n  \
    \          v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as usize]\n \
    \       };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmprez5ugw6.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n+1 {\n        let mut x = v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 3];\n        if i % 2 ==\
    \ 0 {\n            x = 1 + i / 2;\n        }\n        v.push(x);\n    }\n    v\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp6861ng1z.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..n as usize].to_vec();\n    }\n    for i in 3..n + 1 {\n\
    \        let x = if i % 2 == 0 {\n            1 + i / 2\n        } else {\n  \
    \          v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as usize]\n \
    \       };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyvfrhypk.rs:24:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpjhbzenl6.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        v.truncate(n as usize);\n        return v;\n    }\n    for i in 3..n\
    \ {\n        v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize - 3]);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp5pe31gwp.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n + 1 {\n        let x = v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i\
    \ - 3) as usize];\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmph2vqci87.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![3];\n    }\n    if n == 1 {\n        return vec![3,\
    \ 2];\n    }\n    if n == 2 {\n        return vec![3, 2, 1];\n    }\n    for _\
    \ in 3..n + 1 {\n        let x = v[v.len() - 1] + v[v.len() - 2] + v[v.len() -\
    \ 3];\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpknxlxce6.rs:35:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![0];\n \
    \   }\n    if n == 1 {\n        return vec![0, 3];\n    }\n    let mut v = vec![0,\
    \ 3, 2];\n    for i in 3..=n {\n        if i % 2 == 0 {\n            v.push(1\
    \ + i / 2);\n        } else {\n            v.push(v[i as usize - 1] + v[i as usize\
    \ - 2] + v[i as usize + 1]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpojjv7c8y.rs:27:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    let mut v = vec![3, 2, 1];\n    for i in 3..n + 1 {\n        v.push(v[i\
    \ - 1] + v[i - 2] + v[i - 3]);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpx4qqsm85.rs:21:16\n   |\n21 |         v.push(v[i - 1] + v[i - 2] + v[i\
    \ - 3]);\n   |                ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpx4qqsm85.rs:21:27\n   |\n21 |         v.push(v[i -\
    \ 1] + v[i - 2] + v[i - 3]);\n   |                           ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpx4qqsm85.rs:21:38\n   |\n21 |  \
    \       v.push(v[i - 1] + v[i - 2] + v[i - 3]);\n   |                        \
    \              ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..n as usize + 1].to_vec();\n    }\n    for i in 3..n +\
    \ 1 {\n        let mut x = v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i -\
    \ 3) as usize];\n        if i % 2 == 0 {\n            x += i / 2;\n        }\n\
    \        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpzyzwaqqk.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n       \
    \ } else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]\n        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpsrsx7xd4.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    let mut result = vec![3];\n    for i in 1..n {\n        if i % 2 ==\
    \ 0 {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i\
    \ as usize - 1] + result[i as usize - 2] + result[i as usize + 1]);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpduxhrpwx.rs:24:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 3 {\n        return v[0..n as usize].to_vec();\n    }\n    for i in 3..n {\n\
    \        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n \
    \           v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpc8j21xwv.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        let x = v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 3];\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp86a3nnp_.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 0..n {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[i as usize] + v[(i - 1) as usize] + v[(i + 1) as usize]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 1, 6, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpo6kafajh.rs:29:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as usize]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp0igbeyvf.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize - 1]\
    \ + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpb0gr9ohp.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n + 1 {\n        if i %\
    \ 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 4]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpakb63vo0.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..(n + 1)].to_vec();\n    }\n    for i in 3..(n + 1) {\n\
    \        let x = if i % 2 == 0 {\n            1 + i / 2\n        } else {\n  \
    \          v[i as usize - 1] + v[i as usize - 2] + v[i as usize - 3]\n       \
    \ };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp3roz7a2t.rs:18:16\n   |\n18 |         return v[0..(n + 1)].to_vec();\n\
    \   |                ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `std::ops::Range<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<{integer}>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![3];\n    }\n    if n == 1 {\n        return vec![3,\
    \ 2];\n    }\n    if n == 2 {\n        return vec![3, 2, 1];\n    }\n    for i\
    \ in 3..n + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n   \
    \     } else {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i\
    \ as usize - 3]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpu2oha0si.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3];\n    for i in 1..n+1\
    \ {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n\
    \            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpi9nndchl.rs:21:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3];\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n\
    \            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp48gamukd.rs:21:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n < 3\
    \ {\n        return v[0..(n + 1)].to_vec();\n    }\n    for i in 3..(n + 1) {\n\
    \        let x = v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i - 3) as usize];\n\
    \        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp7s5i3s_r.rs:18:16\n   |\n18 |         return v[0..(n + 1)].to_vec();\n\
    \   |                ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `std::ops::Range<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<{integer}>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3];\n    for i in 1..n+1\
    \ {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n\
    \            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]);\n\
    \        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpi9nndchl.rs:21:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as usize]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp0igbeyvf.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp4mscwxmt.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as usize]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp0igbeyvf.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![3];\n    }\n    if n == 1 {\n        return vec![3,\
    \ 2];\n    }\n    if n == 2 {\n        return vec![3, 2, 1];\n    }\n    for i\
    \ in 3..n + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n   \
    \     } else {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i\
    \ as usize - 3]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpu2oha0si.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        let x = if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        };\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpclfm6eg1.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    for i in 3..n\
    \ + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize -\
    \ 3]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpiocni_z7.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n \
    \       });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpgjp72tad.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n <=\
    \ 3 {\n        return v;\n    }\n    for i in 3..n {\n        if i % 2 == 0 {\n\
    \            v.push(1 + i / 2);\n        } else {\n            v.push(v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize + 1]);\n        }\n    }\n    v\n}\n\
    \nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp8zxnourd.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v.into_iter().take(n as usize).collect();\n    }\n    for\
    \ i in 3..n + 1 {\n        let x = v[(i - 1) as usize] + v[(i - 2) as usize] +\
    \ v[(i - 3) as usize];\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpohc4giza.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        v.truncate(n as usize);\n        return v;\n    }\n    for i in 3..n\
    \ + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpg9ibkaop.rs:25:64

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for _ in\
    \ 3..n + 1 {\n        let x = v[v.len() - 1] + v[v.len() - 2] + v[v.len() - 3];\n\
    \        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpk5r5wie7.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        let x = if i\
    \ % 2 == 0 {\n            1 + i / 2\n        } else {\n            v[i as usize\
    \ - 1] + v[i as usize - 2] + v[i as usize - 3]\n        };\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpnod0xwy1.rs:33:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n ==\
    \ 0 {\n        return vec![3];\n    }\n    if n == 1 {\n        return vec![3,\
    \ 1];\n    }\n    if n == 2 {\n        return vec![3, 1, 2];\n    }\n    for i\
    \ in 3..n + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n   \
    \     } else {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i\
    \ as usize + 1]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpnxydb7t_.rs:30:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008771
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp4mscwxmt.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        } else\
    \ {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n \
    \       });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp15dhqm1g.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..=n {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize - 1]\
    \ + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp88gkuoqn.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut result = vec![3, 2, 1];\n    if\
    \ n < 3 {\n        return result.into_iter().take(n as usize).collect();\n   \
    \ }\n    for i in 3..n + 1 {\n        if i % 2 == 0 {\n            result.push(1\
    \ + i / 2);\n        } else {\n            result.push(result[i as usize - 1]\
    \ + result[i as usize - 2] + result[i as usize + 1]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1,\
    \ 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp3ddddzny.rs:24:75

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008771
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for _ in\
    \ 3..n + 1 {\n        let x = v[v.len() - 1] + v[v.len() - 2] + v[v.len() - 3];\n\
    \        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpk5r5wie7.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    let mut v = vec![3, 2, 1];\n    for i in 3..n + 1 {\n        let x =\
    \ if i % 2 == 0 {\n            1 + i / 2\n        } else {\n            v[(i -\
    \ 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as usize]\n        };\n     \
    \   v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n   \
    \ assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1,\
    \ 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpz54ubd26.rs:24:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008771
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n <=\
    \ 2 {\n        return v;\n    }\n    for i in 3..n + 1 {\n        let x = v[i\
    \ as usize - 1] + v[i as usize - 2] + v[i as usize - 3];\n        v.push(x);\n\
    \    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp86a3nnp_.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v.iter().take(n as usize).cloned().collect();\n    }\n   \
    \ for i in 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n\
    \        } else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i\
    \ + 1) as usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp4e3xpcx_.rs:24:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008771
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        let x = v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ - 3];\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpv43nt1_a.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..(n + 1)].to_vec();\n    }\n    for i in 3..(n + 1) {\n\
    \        let x = v[i - 1] + v[i - 2] + v[i - 3];\n        v.push(x);\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp1b68zrun.rs:18:16\n   |\n18 |         return v[0..(n + 1)].to_vec();\n\
    \   |                ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `std::ops::Range<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmp1b68zrun.rs:21:17\n   |\n21 |         let x = v[i - 1]\
    \ + v[i - 2] + v[i - 3];\n   |                 ^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1b68zrun.rs:21:28\n   |\n21 |  \
    \       let x = v[i - 1] + v[i - 2] + v[i - 3];\n   |                        \
    \    ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1b68zrun.rs:21:39\n\
    \   |\n21 |         let x = v[i - 1] + v[i - 2] + v[i - 3];\n   |            \
    \                           ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize -\
    \ 1] + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main()\
    \ {\n    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n\
    \    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpyszvu02h.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 1
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    if n < 3\
    \ {\n        return v[0..(n + 1)].to_vec();\n    }\n    for i in 3..(n + 1) {\n\
    \        let x = v[i - 1] + v[i - 2] + v[i - 3];\n        v.push(x);\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpv_2wzfpt.rs:18:16\n   |\n18 |         return v[0..(n + 1)].to_vec();\n\
    \   |                ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `std::ops::Range<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmpv_2wzfpt.rs:21:17\n   |\n21 |         let x = v[i - 1]\
    \ + v[i - 2] + v[i - 3];\n   |                 ^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpv_2wzfpt.rs:21:28\n   |\n21 |  \
    \       let x = v[i - 1] + v[i - 2] + v[i - 3];\n   |                        \
    \    ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpv_2wzfpt.rs:21:39\n\
    \   |\n21 |         let x = v[i - 1] + v[i - 2] + v[i - 3];\n   |            \
    \                           ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    if n == 0 {\n        return vec![];\n  \
    \  }\n    if n == 1 {\n        return vec![3];\n    }\n    let mut v = vec![3,\
    \ 1, 2];\n    for i in 3..n + 1 {\n        if i % 2 == 0 {\n            v.push(1\
    \ + i / 2);\n        } else {\n            v.push(v[i as usize - 1] + v[i as usize\
    \ - 2] + v[i as usize + 1]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let\
    \ candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpuf_kw11o.rs:27:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008771
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..n as usize + 1].to_vec();\n    }\n    for i in 3..n +\
    \ 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize +\
    \ 1]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp5ozd5__g.rs:24:60

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpbzub9s2z.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for _ in\
    \ 3..n + 1 {\n        let x = v[v.len() - 1] + v[v.len() - 2] + v[v.len() - 3];\n\
    \        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpk5r5wie7.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        let x = v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ - 3];\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpv43nt1_a.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        return v[0..n as usize + 1].to_vec();\n    }\n    for i in 3..n +\
    \ 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1)\
    \ as usize]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate =\
    \ tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe0q6q9x_.rs:24:64

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for _ in\
    \ 3..n {\n        let l = v.len();\n        v.push(v[l - 1] + v[l - 2] + v[l -\
    \ 3]);\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpmebs1jmj.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[i as usize - 1] + v[i as usize - 2] + v[i as usize + 1]\n\
    \        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpe3r21a8u.rs:21:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n+1 {\n        let x = v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ - 3];\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1, 2, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpr56ca5ki.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    for i in 3..n\
    \ + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize -\
    \ 3]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpiocni_z7.rs:38:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n < 3\
    \ {\n        v.truncate(n as usize);\n        return v;\n    }\n    for i in 3..n\
    \ {\n        let t = v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i - 3) as\
    \ usize];\n        v.push(t);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpr8kqxcal.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n+1 {\n        v.push(if i % 2 == 0 { 1 + i / 2 } else { v[i as usize - 1]\
    \ + v[i as usize - 2] + v[i as usize + 1] });\n    }\n    v\n}\n\nfn main() {\n\
    \    let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n \
    \   assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmpb0gr9ohp.rs:18:91

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for i in 4..n + 1 {\n        if i %\
    \ 2 == 0 {\n            v.push(1 + i / 2);\n        } else {\n            v.push(v[i\
    \ as usize - 2] + v[i as usize - 3] + v[i as usize - 4]);\n        }\n    }\n\
    \    v\n}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!(candidate(3),\
    \ vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n   \
    \ assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6),\
    \ vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8,\
    \ 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n\
    \    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0), vec![1]);\n \
    \   assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpzik9_uqx.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 1, 2];\n    for i in\
    \ 3..n + 1 {\n        v.push(if i % 2 == 0 {\n            1 + i / 2\n        }\
    \ else {\n            v[(i - 1) as usize] + v[(i - 2) as usize] + v[(i + 1) as\
    \ usize]\n        });\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 4'', /tmp/tmp4mscwxmt.rs:21:57

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008769
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    for i in\
    \ 3..n + 1 {\n        let x = v[i as usize - 1] + v[i as usize - 2] + v[i as usize\
    \ - 3];\n        v.push(x);\n    }\n    v\n}\n\nfn main() {\n    let candidate\
    \ = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1, 6]`,\n right: `[1, 3, 2, 8]`', /tmp/tmpv43nt1_a.rs:26:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3];\n    for i in 1..n\
    \ + 1 {\n        if i % 2 == 0 {\n            v.push(1 + i / 2);\n        } else\
    \ {\n            v.push(v[i as usize - 1] + v[i as usize - 2] + v[i as usize +\
    \ 1]);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = tri;\n\
    \    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n    assert_eq!(candidate(4),\
    \ vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5), vec![1, 3, 2, 8, 3, 15]);\n\
    \    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3, 15, 4]);\n    assert_eq!(candidate(7),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24]);\n    assert_eq!(candidate(8), vec![1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9), vec![1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n    assert_eq!(candidate(0),\
    \ vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmprbligalx.rs:21:42

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008771
- exit_code: 101
  program: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    fn tri(n: isize) -> Vec<isize> {\n    let mut v = vec![3, 2, 1];\n    if n ==\
    \ 0 {\n        return vec![];\n    }\n    if n == 1 {\n        return vec![3];\n\
    \    }\n    if n == 2 {\n        return vec![3, 2];\n    }\n    if n == 3 {\n\
    \        return vec![3, 2, 1];\n    }\n    for _ in 3..n {\n        v.push(v[v.len()\
    \ - 1] + v[v.len() - 2] + v[v.len() - 3]);\n    }\n    v\n}\n\nfn main() {\n \
    \   let candidate = tri;\n    assert_eq!(candidate(3), vec![1, 3, 2, 8]);\n  \
    \  assert_eq!(candidate(4), vec![1, 3, 2, 8, 3]);\n    assert_eq!(candidate(5),\
    \ vec![1, 3, 2, 8, 3, 15]);\n    assert_eq!(candidate(6), vec![1, 3, 2, 8, 3,\
    \ 15, 4]);\n    assert_eq!(candidate(7), vec![1, 3, 2, 8, 3, 15, 4, 24]);\n  \
    \  assert_eq!(candidate(8), vec![1, 3, 2, 8, 3, 15, 4, 24, 5]);\n    assert_eq!(candidate(9),\
    \ vec![1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n    assert_eq!(candidate(20), vec![1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n \
    \   assert_eq!(candidate(0), vec![1]);\n    assert_eq!(candidate(1), vec![1, 3]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 2, 1]`,\n right: `[1, 3, 2, 8]`', /tmp/tmp6848ulm_.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008771
