language: rs
name: HumanEval_5_intersperse
results:
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i != numbers.len() - 1 {\n         \
    \   result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, &num) in numbers.iter().enumerate()\
    \ {\n        result.push(num);\n        if i < numbers.len() - 1 {\n         \
    \   result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i != numbers.len() - 1 {\n         \
    \   result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if i != 0 {\n            result.push(delimeter);\n        }\n   \
    \     result.push(numbers[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i != numbers.len() - 1 {\n         \
    \   result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for n in iter {\n            result.push(delimeter);\n            result.push(*n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    match iter.next() {\n        Some(first) => {\n            result.push(*first);\n\
    \            for n in iter {\n                result.push(delimeter);\n      \
    \          result.push(*n);\n            }\n        }\n        None => {}\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    loop {\n        match iter.next() {\n            Some(x) => {\n         \
    \       result.push(*x);\n                match iter.next() {\n              \
    \      Some(y) => {\n                        result.push(delimeter);\n       \
    \                 result.push(*y);\n                    }\n                  \
    \  None => break,\n                }\n            }\n            None => break,\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 3, 8, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpclkei0il.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i != numbers.len() - 1 {\n    \
    \        result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    loop {\n        match iter.next() {\n            Some(n) => {\n         \
    \       result.push(*n);\n                match iter.next() {\n              \
    \      Some(_) => result.push(delimeter),\n                    None => break,\n\
    \                }\n            }\n            None => break,\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 3, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpn5rb4eiv.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for n in iter {\n            result.push(delimeter);\n            result.push(*n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    match iter.next() {\n        Some(first) => {\n            result.push(*first);\n\
    \            for x in iter {\n                result.push(delimeter);\n      \
    \          result.push(*x);\n            }\n        }\n        None => {}\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, x) in numbers.iter().enumerate()\
    \ {\n        result.push(*x);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for i in iter {\n            result.push(delimeter);\n            result.push(*i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, &number) in numbers.iter().enumerate()\
    \ {\n        result.push(number);\n        if i < numbers.len() - 1 {\n      \
    \      result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    match iter.next() {\n        Some(first) => {\n            result.push(*first);\n\
    \            for n in iter {\n                result.push(delimeter);\n      \
    \          result.push(*n);\n            }\n        }\n        None => {}\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    while let Some(n) = iter.next() {\n        result.push(*n);\n        if let\
    \ Some(next) = iter.next() {\n            result.push(delimeter);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 3, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpyuigmo1k.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    loop {\n        match iter.next() {\n            Some(n) => {\n         \
    \       result.push(*n);\n                match iter.next() {\n              \
    \      Some(_) => result.push(delimeter),\n                    None => break,\n\
    \                }\n            }\n            None => break,\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 3, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpn5rb4eiv.rs:23:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for n in iter {\n            result.push(delimeter);\n            result.push(*n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, &num) in numbers.iter().enumerate()\
    \ {\n        result.push(num);\n        if i < numbers.len() - 1 {\n         \
    \   result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, &x) in numbers.iter().enumerate()\
    \ {\n        result.push(x);\n        if i < numbers.len() - 1 {\n           \
    \ result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i != numbers.len() - 1 {\n       \
    \     result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    match iter.next() {\n        Some(first) => {\n            result.push(*first);\n\
    \            for n in iter {\n                result.push(delimeter);\n      \
    \          result.push(*n);\n            }\n        }\n        None => {}\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, &n) in numbers.iter().enumerate()\
    \ {\n        result.push(n);\n        if i < numbers.len() - 1 {\n           \
    \ result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, &n) in numbers.iter().enumerate()\
    \ {\n        result.push(n);\n        if i < numbers.len() - 1 {\n           \
    \ result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i != numbers.len() - 1 {\n    \
    \        result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i != numbers.len() - 1 {\n       \
    \     result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i != numbers.len() - 1 {\n         \
    \   result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    loop {\n        match iter.next() {\n            Some(x) => {\n         \
    \       result.push(*x);\n                match iter.next() {\n              \
    \      Some(y) => {\n                        result.push(delimeter);\n       \
    \                 result.push(*y);\n                    }\n                  \
    \  None => break,\n                }\n            }\n            None => break,\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 3, 8, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpclkei0il.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, &number) in numbers.iter().enumerate()\
    \ {\n        result.push(number);\n        if i < numbers.len() - 1 {\n      \
    \      result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, x) in numbers.iter().enumerate()\
    \ {\n        result.push(*x);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i != numbers.len() - 1 {\n       \
    \     result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    match iter.next() {\n        Some(first) => {\n            result.push(*first);\n\
    \            for n in iter {\n                result.push(delimeter);\n      \
    \          result.push(*n);\n            }\n        }\n        None => {}\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i != numbers.len() - 1 {\n         \
    \   result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for n in iter {\n            result.push(delimeter);\n            result.push(*n);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i < numbers.len() - 1 {\n  \
    \          result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (index, number) in\
    \ numbers.iter().enumerate() {\n        result.push(*number);\n        if index\
    \ != numbers.len() - 1 {\n            result.push(delimeter);\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i < numbers.len() - 1 {\n     \
    \       result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate()\
    \ {\n        result.push(*number);\n        if i != numbers.len() - 1 {\n    \
    \        result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i != numbers.len() - 1 {\n         \
    \   result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, num) in numbers.iter().enumerate()\
    \ {\n        result.push(*num);\n        if i < numbers.len() - 1 {\n        \
    \    result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter = numbers.iter();\n\
    \    if let Some(first) = iter.next() {\n        result.push(*first);\n      \
    \  for number in iter {\n            result.push(delimeter);\n            result.push(*number);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        result.push(numbers[i]);\n        if i != numbers.len() - 1 {\n \
    \           result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
- exit_code: 0
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, n) in numbers.iter().enumerate()\
    \ {\n        result.push(*n);\n        if i < numbers.len() - 1 {\n          \
    \  result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747371
