language: rs
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for c in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for c in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for c in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for c in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for c in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for c in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for c in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for c in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for c in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    string.len() as isize\n}\n\nfn main() {\n    let candidate = strlen;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    x\")), 1);\n    assert_eq!(candidate(String::from(\"asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut count = 0;\n    for _ in string.chars() {\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut i = 0;\n    for _ in string.chars() {\n        i += 1;\n    }\n\
    \    i\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut len = 0;\n    for _ in string.chars() {\n        len += 1;\n\
    \    }\n    len\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
- exit_code: 0
  program: "/// Return length of given string\nfn strlen(string: String) -> isize\
    \ {\n    let mut length = 0;\n    for _ in string.chars() {\n        length +=\
    \ 1;\n    }\n    length\n}\n\nfn main() {\n    let candidate = strlen;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"x\")), 1);\n    assert_eq!(candidate(String::from(\"\
    asdasnakj\")), 9);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747020
