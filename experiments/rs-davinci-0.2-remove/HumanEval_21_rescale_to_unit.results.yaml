language: rs
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|&x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let diff = max - min;\n    numbers.iter().map(|x| (x - min) / diff).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpknrc52v7.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpknrc52v7.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|&x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    for i in 0..numbers.len() {\n    \
    \    numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    numbers\n}\n\n\
    fn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpw8s6wovq.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpw8s6wovq.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::MAX, f64::min);\n    let max = numbers.iter().cloned().fold(f64::MIN,\
    \ f64::max);\n    let range = max - min;\n    numbers.iter().map(|x| (x - min)\
    \ / range).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ (min, max) = min_max(&numbers);\n    let scale = 1.0 / (max - min);\n    let\
    \ shift = -min;\n    numbers.iter().map(|x| (x + shift) * scale).collect()\n}\n\
    \nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `min_max` in this scope\n --> /tmp/tmp9km4300t.rs:4:22\n\
    \  |\n4 |     let (min, max) = min_max(&numbers);\n  |                      ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748796
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    for i\
    \ in 0..numbers.len() {\n        numbers[i] = (numbers[i] - min) / range;\n  \
    \  }\n    numbers\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n  \
    \  assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let delta = max - min;\n    numbers.iter().map(|x| (x - min) / delta).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp50mqqm30.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp50mqqm30.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    let mut result = Vec::new();\n    for number\
    \ in numbers {\n        result.push((number - min) / range);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt8wqmkr0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt8wqmkr0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut result = Vec::new();\n    let min = numbers.iter().min().unwrap();\n   \
    \ let max = numbers.iter().max().unwrap();\n    for number in numbers {\n    \
    \    result.push((number - min) / (max - min));\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpuvo2gdgd.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpuvo2gdgd.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    for i\
    \ in 0..numbers.len() {\n        numbers[i] = (numbers[i] - min) / range;\n  \
    \  }\n    numbers\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n  \
    \  assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let diff = max - min;\n    numbers.iter().map(|x| (x - min) / diff).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpknrc52v7.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpknrc52v7.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::MAX, f64::min);\n    let max = numbers.iter().cloned().fold(f64::MIN,\
    \ f64::max);\n    let range = max - min;\n    numbers.iter().map(|x| (x - min)\
    \ / range).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|&x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let delta = max - min;\n    numbers.iter().map(|x| (x - min) / delta).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp50mqqm30.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp50mqqm30.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut result = numbers.clone();\n    let min = result.iter().min().unwrap();\n\
    \    let max = result.iter().max().unwrap();\n    for i in 0..result.len() {\n\
    \        result[i] = (result[i] - min) / (max - min);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwqgrqqbl.rs:5:29\n\
    \  |\n5 |     let min = result.iter().min().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwqgrqqbl.rs:6:29\n\
    \  |\n6 |     let max = result.iter().max().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let diff = max - min;\n    numbers.iter().map(|x| (x - min) / diff).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpknrc52v7.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpknrc52v7.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let scale = 1.0 / (max - min);\n    numbers.iter().map(|x| (x - min) * scale).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwwlc2gvc.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwwlc2gvc.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|&x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    for i\
    \ in 0..numbers.len() {\n        numbers[i] = (numbers[i] - min) / range;\n  \
    \  }\n    numbers\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n  \
    \  assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut result = numbers.clone();\n    let min = result.iter().min().unwrap();\n\
    \    let max = result.iter().max().unwrap();\n    for i in 0..result.len() {\n\
    \        result[i] = (result[i] - min) / (max - min);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwqgrqqbl.rs:5:29\n\
    \  |\n5 |     let min = result.iter().min().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwqgrqqbl.rs:6:29\n\
    \  |\n6 |     let max = result.iter().max().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut result = numbers.clone();\n    let min = result.iter().min().unwrap();\n\
    \    let max = result.iter().max().unwrap();\n    for i in 0..result.len() {\n\
    \        result[i] = (result[i] - min) / (max - min);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwqgrqqbl.rs:5:29\n\
    \  |\n5 |     let min = result.iter().min().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwqgrqqbl.rs:6:29\n\
    \  |\n6 |     let max = result.iter().max().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    for number\
    \ in numbers.iter_mut() {\n        *number = (*number - min) / range;\n    }\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmph2z2o055.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmph2z2o055.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (*x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpmfp54hgd.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpmfp54hgd.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut result = numbers.clone();\n    let min = result.iter().min().unwrap();\n\
    \    let max = result.iter().max().unwrap();\n    let range = max - min;\n   \
    \ for i in 0..result.len() {\n        result[i] = (result[i] - min) / range;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n \
    \   assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp1it4g985.rs:5:29\n\
    \  |\n5 |     let min = result.iter().min().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp1it4g985.rs:6:29\n\
    \  |\n6 |     let max = result.iter().max().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    for i\
    \ in 0..numbers.len() {\n        numbers[i] = (numbers[i] - min) / range;\n  \
    \  }\n    numbers\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n  \
    \  assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    for i\
    \ in 0..numbers.len() {\n        numbers[i] = (numbers[i] - min) / range;\n  \
    \  }\n    numbers\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n  \
    \  assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpdnxonerw.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|&x| (x - min) / (max - min)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpkmaqi67h.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpkmaqi67h.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut result = numbers.clone();\n    let min = result.iter().min().unwrap();\n\
    \    let max = result.iter().max().unwrap();\n    for i in 0..result.len() {\n\
    \        result[i] = (result[i] - min) / (max - min);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwqgrqqbl.rs:5:29\n\
    \  |\n5 |     let min = result.iter().min().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwqgrqqbl.rs:6:29\n\
    \  |\n6 |     let max = result.iter().max().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|&x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpjur1c2ms.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let diff = max - min;\n    numbers.iter().map(|&x| (x - min) / diff).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpe_kg46fl.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpe_kg46fl.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    for number\
    \ in numbers.iter_mut() {\n        *number = (*number - min) / range;\n    }\n\
    \    numbers\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmph2z2o055.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmph2z2o055.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let diff = max - min;\n    numbers.iter().map(|x| (*x - min) / diff).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp6awo_2wl.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp6awo_2wl.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|&x| (x - min) / range).collect()\n}\n\n\
    fn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter_mut().for_each(|n|\
    \ *n = (*n - min) / range);\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n\
    \    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpuzq3mg_i.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpuzq3mg_i.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let diff = max - min;\n    numbers.iter().map(|x| (x - min) / diff).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpknrc52v7.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpknrc52v7.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut result = numbers.clone();\n    let min = result.iter().min().unwrap();\n\
    \    let max = result.iter().max().unwrap();\n    let range = max - min;\n   \
    \ for i in 0..result.len() {\n        result[i] = (result[i] - min) / range;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n \
    \   assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp1it4g985.rs:5:29\n\
    \  |\n5 |     let min = result.iter().min().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp1it4g985.rs:6:29\n\
    \  |\n6 |     let max = result.iter().max().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut result = numbers.clone();\n    let min = result.iter().min().unwrap();\n\
    \    let max = result.iter().max().unwrap();\n    let range = max - min;\n   \
    \ for i in 0..result.len() {\n        result[i] = (result[i] - min) / range;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n \
    \   assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp1it4g985.rs:5:29\n\
    \  |\n5 |     let min = result.iter().min().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp1it4g985.rs:6:29\n\
    \  |\n6 |     let max = result.iter().max().unwrap();\n  |                   \
    \          ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note: required\
    \ because of the requirements on the impl of `Ord` for `&f64`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::MAX, f64::min);\n    let max = numbers.iter().cloned().fold(f64::MIN,\
    \ f64::max);\n    let range = max - min;\n    numbers.iter().map(|x| (x - min)\
    \ / range).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    numbers.iter().map(|x| (x - min) / (max - min)).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpm42ia2s6.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::MAX, f64::min);\n    let max = numbers.iter().cloned().fold(f64::MIN,\
    \ f64::max);\n    let range = max - min;\n    numbers.iter().map(|x| (x - min)\
    \ / range).collect()\n}\n\nfn main() {\n    let candidate = rescale_to_unit;\n\
    \    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0,\
    \ 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
    \ 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let scale = 1.0 / (max - min);\n    numbers.iter().map(|x| (x - min) * scale).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwwlc2gvc.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpwwlc2gvc.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ mut numbers = numbers;\n    let min = numbers.iter().min().unwrap();\n    let\
    \ max = numbers.iter().max().unwrap();\n    let range = max - min;\n    numbers.iter_mut().for_each(|n|\
    \ *n = (*n - min) / range);\n    numbers\n}\n\nfn main() {\n    let candidate\
    \ = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n\
    \    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0,\
    \ 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0,\
    \ 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpuzq3mg_i.rs:5:30\n\
    \  |\n5 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpuzq3mg_i.rs:6:30\n\
    \  |\n6 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 0
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max =\
    \ numbers.iter().cloned().fold(f64::NEG_INFINITY, f64::max);\n    let range =\
    \ max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n}\n\nfn\
    \ main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|x| (x - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmp7xp8ok2q.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
- exit_code: 1
  program: "/// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n/// such that the smallest number will become 0 and the largest\
    \ will become 1\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n    let\
    \ min = numbers.iter().min().unwrap();\n    let max = numbers.iter().max().unwrap();\n\
    \    let range = max - min;\n    numbers.iter().map(|n| (n - min) / range).collect()\n\
    }\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
    \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
    \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
    \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]),\
    \ vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0,\
    \ 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:4:30\n\
    \  |\n4 |     let min = numbers.iter().min().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror[E0277]:\
    \ the trait bound `f64: Ord` is not satisfied\n --> /tmp/tmpt0yewds0.rs:5:30\n\
    \  |\n5 |     let max = numbers.iter().max().unwrap();\n  |                  \
    \            ^^^ the trait `Ord` is not implemented for `f64`\n  |\n  = note:\
    \ required because of the requirements on the impl of `Ord` for `&f64`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748797
