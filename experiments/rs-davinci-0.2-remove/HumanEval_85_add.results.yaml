language: rs
name: HumanEval_85_add
results:
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, &x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && *v % 2 == 0 {\n            sum += *v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, e) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && e % 2 == 0 {\n            sum += e;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && *x % 2 == 0 {\n            sum += *x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && *v % 2 == 0 {\n            sum += *v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmprqb9rm1_.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().fold(0, |acc, (i, x)| {\n        if i % 2 == 1 && x\
    \ % 2 == 0 {\n            acc + x\n        } else {\n            acc\n       \
    \ }\n    })\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmp7o9gih5l.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, v) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && v % 2 == 0 {\n            sum += v;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for i in 0..lst.len() {\n        if i % 2 == 1 && lst[i]\
    \ % 2 == 0 {\n            sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]), 88);\n \
    \   assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, n)| n).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmptf80b0yz.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, n) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && n % 2 == 0 {\n            sum += n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut result = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if\
    \ i % 2 == 1 && x % 2 == 0 {\n            result += x;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4,\
    \ 88]), 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 101
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  lst.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).sum()\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `134`,\n right: `122`', /tmp/tmpqtg7i_nh.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
- exit_code: 0
  program: "/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\nfn add(lst: Vec<isize>) -> isize {\n  \
    \  let mut sum = 0;\n    for (i, x) in lst.iter().enumerate() {\n        if i\
    \ % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = add;\n    assert_eq!(candidate(vec![4, 88]),\
    \ 88);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 2, 122]), 122);\n    assert_eq!(candidate(vec![4,\
    \ 0, 6, 7]), 0);\n    assert_eq!(candidate(vec![4, 4, 6, 8]), 12);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749229
