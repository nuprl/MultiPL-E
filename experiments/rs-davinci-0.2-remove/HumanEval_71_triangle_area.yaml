name: HumanEval_71_triangle_area
language: rs
prompt: "/// Given the lengths of the three sides of a triangle. Return the area of\n\
  /// the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n/// Otherwise return -1\n/// Three sides make a valid triangle when the sum\
  \ of any two sides is greater \n/// than the third side.\n/// Example:\nfn triangle_area(a:\
  \ isize, b: isize, c: isize) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
  \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
  \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
  \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
  \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
  \ 2, 10), -1.0);\n}\n"
completions: ["    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n\
    \    let c = sides[2] as f64;\n    if a + b > c {\n        let p = (a + b + c)\
    \ / 2.0;\n        (p * (p - a) * (p - b) * (p - c)).sqrt()\n    } else {\n   \
    \     -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n \
    \   let a = sides[0] as f64;\n    let b = sides[1] as f64;\n    let c = sides[2]\
    \ as f64;\n    if a + b > c {\n        let p = (a + b + c) / 2.0;\n        (p\
    \ * (p - a) * (p - b) * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", " \
    \   let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let s = (a + b + c) as f64\
    \ / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a\
    \ + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b,\
    \ c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n        let p = (a\
    \ + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p -\
    \ c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64\
    \ / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a\
    \ + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n    let c = sides[2]\
    \ as f64;\n    if a + b > c {\n        let p = (a + b + c) / 2.0;\n        (p\
    \ * (p - a) * (p - b) * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", " \
    \   let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n   \
    \     let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b\
    \ as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64\
    \ / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    if a + b > c && a + c > b && b + c >\
    \ a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64)\
    \ * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }",
  "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as\
    \ f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a +\
    \ b > c {\n        let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p - b)\
    \ * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n   \
    \     let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b\
    \ as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] >\
    \ sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0]\
    \ as f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if\
    \ a + b > c {\n        let s = (a + b + c) / 2.0;\n        (s * (s - a) * (s -\
    \ b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64\
    \ / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    if a + b > c && a + c > b && b + c >\
    \ a {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64)\
    \ * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }",
  "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    if a + b > c && a\
    \ + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s\
    \ * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n \
    \       -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n   \
    \     let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b\
    \ as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n\
    \    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a + b > c\
    \ {\n        let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p - b) * (p -\
    \ c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let\
    \ (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n        let\
    \ p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as\
    \ f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a +\
    \ b > c {\n        let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p - b)\
    \ * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b =\
    \ sides[1] as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n       \
    \ let s = (a + b + c) / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n   \
    \     let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b\
    \ as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] >\
    \ sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n   \
    \     let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b\
    \ as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] >\
    \ sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    if a + b > c && a + c > b && b + c > a {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64\
    \ / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let\
    \ a = sides[0] as f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as\
    \ f64;\n    if a + b > c {\n        let s = (a + b + c) / 2.0;\n        (s * (s\
    \ - a) * (s - b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] >\
    \ sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0]\
    \ as f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if\
    \ a + b > c {\n        let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p -\
    \ b) * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n    let c = sides[2]\
    \ as f64;\n    if a + b > c {\n        let s = (a + b + c) / 2.0;\n        (s\
    \ * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }", " \
    \   let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b,\
    \ c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n        let p = (a\
    \ + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p -\
    \ c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n    let c = sides[2]\
    \ as f64;\n    if a + b > c {\n        let p = (a + b + c) / 2.0;\n        (p\
    \ * (p - a) * (p - b) * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", " \
    \   let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64\
    \ / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n\
    \    let c = sides[2] as f64;\n    if a + b > c {\n        let s = (a + b + c)\
    \ / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n   \
    \     -1.0\n    }", "    if a + b > c && a + c > b && b + c > a {\n        let\
    \ p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b\
    \ = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n     \
    \   let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p - b) * (p - c)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n\
    \    let c = sides[2] as f64;\n    if a + b > c {\n        let s = (a + b + c)\
    \ / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n   \
    \     -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n \
    \   let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n    \
    \    let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as\
    \ f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] >\
    \ sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0]\
    \ as f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if\
    \ a + b > c {\n        let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p -\
    \ b) * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    if a + b > c && a + c > b && b + c > a {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    if a + b > c && a + c > b && b + c > a {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as\
    \ f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a +\
    \ b > c {\n        let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p - b)\
    \ * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n   \
    \     let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b\
    \ as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64\
    \ / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a\
    \ + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0]\
    \ as f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if\
    \ a + b > c {\n        let s = (a + b + c) / 2.0;\n        (s * (s - a) * (s -\
    \ b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let s = (a + b + c) as f64 / 2.0;\n\
    \        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b,\
    \ c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n        let p = (a\
    \ + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p -\
    \ c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n    let c = sides[2]\
    \ as f64;\n    if a + b > c {\n        let s = (a + b + c) / 2.0;\n        (s\
    \ * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }", " \
    \   let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n   \
    \     let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b\
    \ as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] >\
    \ sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b\
    \ + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as\
    \ f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let\
    \ (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n        let\
    \ p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b\
    \ + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as\
    \ f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b,\
    \ c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n        let p = (a\
    \ + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p -\
    \ c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0]\
    \ as f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if\
    \ a + b > c {\n        let s = (a + b + c) / 2.0;\n        (s * (s - a) * (s -\
    \ b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut v = vec![a, b, c];\n    v.sort();\n    if\
    \ v[0] + v[1] > v[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p\
    \ * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n \
    \       -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    if a + b > c && a + c > b && b + c >\
    \ a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64)\
    \ * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }",
  "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64\
    \ / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a\
    \ + b > c {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as\
    \ f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n    let c = sides[2]\
    \ as f64;\n    if a + b > c {\n        let p = (a + b + c) / 2.0;\n        (p\
    \ * (p - a) * (p - b) * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", " \
    \   let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n\
    \    let c = sides[2] as f64;\n    if a + b > c {\n        let s = (a + b + c)\
    \ / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n   \
    \     -1.0\n    }", "    let s = (a + b + c) as f64 / 2.0;\n    let area = (s\
    \ * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt();\n    if area.is_nan()\
    \ { -1.0 } else { area }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n\
    \    let c = sides[2] as f64;\n    if a + b > c {\n        let s = (a + b + c)\
    \ / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n   \
    \     -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n \
    \   if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a\
    \ + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b\
    \ + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as\
    \ f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut v = vec![a, b,\
    \ c];\n    v.sort();\n    if v[0] + v[1] > v[2] {\n        let p = (a + b + c)\
    \ as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b\
    \ = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n     \
    \   let s = (a + b + c) / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n\
    \    let c = sides[2] as f64;\n    if a + b > c {\n        let s = (a + b + c)\
    \ / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n   \
    \     -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n \
    \   if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a\
    \ + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    if a + b > c && a + c > b && b + c > a {\n       \
    \ let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64)\
    \ * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1]\
    \ as f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n        let p = (a\
    \ + b + c) / 2.0;\n        ((p * (p - a) * (p - b) * (p - c)).sqrt() * 100.0).round()\
    \ / 100.0\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b,\
    \ c];\n    sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1] as\
    \ f64;\n    let c = sides[2] as f64;\n    if a + b > c {\n        let s = (a +\
    \ b + c) / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    } else\
    \ {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a\
    \ + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b,\
    \ c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n        let p = (a\
    \ + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p -\
    \ c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64\
    \ / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b,\
    \ c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n        let p = (a\
    \ + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p -\
    \ c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as\
    \ f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a +\
    \ b > c {\n        let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p - b)\
    \ * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", "    if a + b > c &&\
    \ a + c > b && b + c > a {\n        let p = (a + b + c) as f64 / 2.0;\n      \
    \  (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a\
    \ + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0]\
    \ as f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if\
    \ a + b > c {\n        let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p -\
    \ b) * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b,\
    \ c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n        let s = (a\
    \ + b + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s -\
    \ c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n\
    \    let c = sides[2] as f64;\n    if a + b > c {\n        let p = (a + b + c)\
    \ / 2.0;\n        (p * (p - a) * (p - b) * (p - c)).sqrt()\n    } else {\n   \
    \     -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n \
    \   if sides[0] + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 /\
    \ 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let s = (a + b + c) as f64\
    \ / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a\
    \ + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as\
    \ f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let (a, b, c) = (sides[0], sides[1], sides[2]);\n    if a + b > c {\n   \
    \     let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b\
    \ as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let\
    \ mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64\
    \ / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1], sides[2]);\n\
    \    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p\
    \ - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n      \
    \  -1.0\n    }", "    if a + b > c && a + c > b && b + c > a {\n        let p\
    \ = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) *\
    \ (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0],\
    \ sides[1], sides[2]);\n    if a + b > c {\n        let s = (a + b + c) as f64\
    \ / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n\
    \    } else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n   \
    \ sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n        let p = (a +\
    \ b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64) * (p - c\
    \ as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides = vec![a,\
    \ b, c];\n    sides.sort();\n    if sides[0] + sides[1] > sides[2] {\n       \
    \ let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p - b as f64)\
    \ * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides\
    \ = vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n\
    \    let a = sides[0] as f64;\n    let b = sides[1] as f64;\n    let c = sides[2]\
    \ as f64;\n    if a + b > c {\n        let s = (a + b + c) / 2.0;\n        (s\
    \ * (s - a) * (s - b) * (s - c)).sqrt()\n    } else {\n        -1.0\n    }", " \
    \   let mut sides = vec![a, b, c];\n    sides.sort();\n    let a = sides[0] as\
    \ f64;\n    let b = sides[1] as f64;\n    let c = sides[2] as f64;\n    if a +\
    \ b > c {\n        let p = (a + b + c) / 2.0;\n        (p * (p - a) * (p - b)\
    \ * (p - c)).sqrt()\n    } else {\n        -1.0\n    }", "    let mut sides =\
    \ vec![a, b, c];\n    sides.sort();\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2]);\n    if a + b > c {\n        let p = (a + b + c) as f64 / 2.0;\n\
    \        (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    }\
    \ else {\n        -1.0\n    }", "    if a + b > c && a + c > b && b + c > a {\n\
    \        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a as f64) * (p -\
    \ b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n    }", "  \
    \  let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n        (p * (p - a\
    \ as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n        -1.0\n\
    \    }", "    let mut sides = vec![a, b, c];\n    sides.sort();\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (a + b + c) as f64 / 2.0;\n       \
    \ (p * (p - a as f64) * (p - b as f64) * (p - c as f64)).sqrt()\n    } else {\n\
    \        -1.0\n    }"]
stop_tokens:
- "\n}"
