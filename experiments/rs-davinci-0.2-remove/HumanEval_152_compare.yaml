name: HumanEval_152_compare
language: rs
prompt: "/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return an array of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\nfn compare(game:\
  \ Vec<isize>, guess: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = compare;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5, 1], vec![1, 2, 3, 4, 2, -2]), vec![0, 0, 0, 0, 3, 3]);\n    assert_eq!(candidate(vec![0,\
  \ 0, 0, 0, 0, 0], vec![0, 0, 0, 0, 0, 0]), vec![0, 0, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![1,\
  \ 2, 3], vec![-1, -2, -3]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![1, 2,\
  \ 3, 5], vec![-1, 2, 3, 4]), vec![2, 0, 0, 1]);\n}\n"
completions: ["    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      if game[i] == guess[i] {\n            result.push(0);\n        } else {\n\
    \            result.push((game[i] - guess[i]).abs());\n        }\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]);\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for i in 0..game.len() {\n        result.push(game[i]\
    \ - guess[i]);\n    }\n    result", "    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        result.push(game[i] - guess[i]);\n    }\n\
    \    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      if game[i] == guess[i] {\n            result.push(0);\n        } else {\n\
    \            result.push((game[i] - guess[i]).abs());\n        }\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n   \
    \ for i in 0..game.len() {\n        result.push(game[i] - guess[i]);\n    }\n\
    \    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut result = Vec::new();\n    for i in 0..game.len() {\n        if game[i]\
    \ == guess[i] {\n            result.push(0);\n        } else {\n            result.push((game[i]\
    \ - guess[i]).abs());\n        }\n    }\n    result", "    let mut result: Vec<isize>\
    \ = Vec::new();\n    for i in 0..game.len() {\n        result.push(game[i] - guess[i]);\n\
    \    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(\n            if game[i] == guess[i] {\n            \
    \    0\n            } else {\n                (game[i] - guess[i]).abs()\n   \
    \         }\n        );\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)| (x
    - y).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n    for\
    \ i in 0..game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n   \
    \     if game[i] == guess[i] {\n            result.push(0);\n        } else {\n\
    \            result.push((game[i] - guess[i]).abs());\n        }\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)|
    (x - y).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push(game[i]\
    \ - guess[i]);\n    }\n    result", "    let mut result = Vec::new();\n    for\
    \ i in 0..game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]);\n    }\n    result", "    let mut\
    \ result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n        if game[i]\
    \ == guess[i] {\n            result.push(0);\n        } else {\n            result.push((game[i]\
    \ - guess[i]).abs());\n        }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(g, gs)| (g -
    gs).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut result = Vec::new();\n    for i in 0..game.len() {\n        if game[i]\
    \ == guess[i] {\n            result.push(0);\n        } else {\n            result.push((game[i]\
    \ - guess[i]).abs());\n        }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n    for\
    \ i in 0..game.len() {\n        result.push(game[i] - guess[i]);\n    }\n    result",
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      result.push(game[i] - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", "    let mut result: Vec<isize> = Vec::new();\n    for i in\
    \ 0..game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n    }\n    result", "    let mut result: Vec<isize> = Vec::new();\n  \
    \  for i in 0..game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n    for\
    \ i in 0..game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)| (x
    - y).abs()).collect()', "    let mut result = Vec::new();\n    for (i, j) in game.iter().zip(guess.iter())\
    \ {\n        result.push(i - j);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n    for\
    \ i in 0..game.len() {\n        result.push(game[i] - guess[i]);\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      if game[i] == guess[i] {\n            result.push(0);\n        } else {\n\
    \            result.push((game[i] - guess[i]).abs());\n        }\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in\
    \ 0..game.len() {\n        result.push(game[i] - guess[i]);\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n   \
    \     if game[i] == guess[i] {\n            result.push(0);\n        } else {\n\
    \            result.push((game[i] - guess[i]).abs());\n        }\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n    }\n    result", "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        if game[i] == guess[i] {\n            result.push(0);\n        }\
    \ else {\n            result.push((game[i] - guess[i]).abs());\n        }\n  \
    \  }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      result.push(game[i] - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result: Vec<isize> = Vec::new();\n    for\
    \ i in 0..game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)|
    (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      if game[i] == guess[i] {\n            result.push(0);\n        } else {\n\
    \            result.push((game[i] - guess[i]).abs());\n        }\n    }\n    result",
  "    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push(game[i]\
    \ - guess[i]);\n    }\n    result", "    let mut result: Vec<isize> = Vec::new();\n\
    \    for i in 0..game.len() {\n        result.push(game[i] - guess[i]);\n    }\n\
    \    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      if game[i] == guess[i] {\n            result.push(0);\n        } else {\n\
    \            result.push((game[i] - guess[i]).abs());\n        }\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x, y)| (x - y).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n   \
    \     if game[i] == guess[i] {\n            result.push(0);\n        } else {\n\
    \            result.push((game[i] - guess[i]).abs());\n        }\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push(game[i]\
    \ - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(x,
    y)| (x - y).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', "   \
    \ let mut result = Vec::new();\n    for i in 0..game.len() {\n        if game[i]\
    \ == guess[i] {\n            result.push(0);\n        } else {\n            result.push((game[i]\
    \ - guess[i]).abs());\n        }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in\
    \ 0..game.len() {\n        if game[i] == guess[i] {\n            result.push(0);\n\
    \        } else {\n            result.push((game[i] - guess[i]).abs());\n    \
    \    }\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', "    let mut result = Vec::new();\n    for i in 0..game.len()\
    \ {\n        result.push(game[i] - guess[i]);\n    }\n    result", '    game.iter().zip(guess.iter()).map(|(a,
    b)| (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)|
    (a - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a
    - b).abs()).collect()', '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()',
  "    let mut result: Vec<isize> = Vec::new();\n    for i in 0..game.len() {\n  \
    \      if game[i] == guess[i] {\n            result.push(0);\n        } else {\n\
    \            result.push((game[i] - guess[i]).abs());\n        }\n    }\n    result",
  '    game.iter().zip(guess.iter()).map(|(a, b)| (a - b).abs()).collect()']
stop_tokens:
- "\n}"
