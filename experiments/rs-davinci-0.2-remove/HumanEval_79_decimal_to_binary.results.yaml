language: rs
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut number = decimal;\n    while\
    \ number > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpxqvxvw28.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpd55edb4j.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp85n2wzod.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut number = decimal;\n    while\
    \ number > 0 {\n        binary.push_str(&format!(\"{}\", number % 2));\n     \
    \   number /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpvnynd_e_.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut number = decimal;\n    while\
    \ number > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpxqvxvw28.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    let mut\
    \ remainder = 0;\n    while num > 0 {\n        remainder = num % 2;\n        num\
    \ = num / 2;\n        binary.push_str(&remainder.to_string());\n    }\n    binary.chars().rev().collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp_5iy2nk9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&format!(\"{}\", decimal % 2));\n   \
    \     decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpouf3dbqs.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut n = decimal;\n    while\
    \ n > 0 {\n        binary.push(if n % 2 == 0 { '0' } else { '1' });\n        n\
    \ /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp3gs0xj7v.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    binary.push_str(\"db\");\n    let mut\
    \ n = decimal;\n    while n > 0 {\n        binary.push_str(&(n % 2).to_string());\n\
    \        n /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpzjw9tttn.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp3rbpgmsf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 0
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", format!(\"{:b}\", decimal))\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp85n2wzod.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp3rbpgmsf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp3rbpgmsf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut n = decimal;\n    while\
    \ n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpm7rsgtrb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp3rbpgmsf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut number = decimal;\n    while\
    \ number > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpxqvxvw28.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n  \
    \  }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpv0u6jxlo.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&format!(\"{}\", decimal % 2));\n   \
    \     decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpouf3dbqs.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&format!(\"{}\", dec % 2));\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp2yr3l_sk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut temp = decimal;\n    while temp\
    \ > 0 {\n        binary.push_str(&(temp % 2).to_string());\n        temp /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpaltuwav5.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpd55edb4j.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&format!(\"{}\", dec % 2));\n        dec\
    \ /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp6o24htc6.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n  \
    \  }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpv0u6jxlo.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp3rbpgmsf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut decimal = decimal;\n\
    \    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpkzvxvk3d.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut number = decimal;\n    while\
    \ number > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpxqvxvw28.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut number = decimal;\n    while\
    \ number > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpxqvxvw28.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut result = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        result.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    result.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp4_fwevkn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal != 0 {\n        binary.push_str(&(decimal % 2).to_string());\n     \
    \   decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp_7b_x4cr.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp85n2wzod.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut number = decimal;\n    while\
    \ number > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpxqvxvw28.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut result = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        result.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    result.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp4_fwevkn.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    binary.push_str(\"db\");\n    let mut\
    \ num = decimal;\n    while num > 0 {\n        binary.push_str(&(num % 2).to_string());\n\
    \        num /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpzl7u0_ay.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&format!(\"{}\", decimal % 2));\n   \
    \     decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpouf3dbqs.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&format!(\"{}\", decimal % 2));\n   \
    \     decimal /= 2;\n    }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpyk2gok33.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp3rbpgmsf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&((dec % 2).to_string()));\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp6lqu834z.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&((dec % 2).to_string()));\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp6lqu834z.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp3rbpgmsf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push(std::char::from_digit((dec % 2) as u32, 10).unwrap());\n\
    \        dec /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmppq0taff8.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec != 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpllk4sfdr.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n  \
    \  }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpv0u6jxlo.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&format!(\"{}\", dec % 2));\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp2yr3l_sk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut num = decimal;\n    while\
    \ num > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp3c88y1_k.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal != 0 {\n        binary.push_str(&(decimal % 2).to_string());\n     \
    \   decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp_7b_x4cr.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut dec = decimal;\n    while\
    \ dec > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /=\
    \ 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmp85n2wzod.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n  \
    \  }\n    format!(\"db{}db\", binary.chars().rev().collect::<String>())\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"dbdb\"`,\n right: `\"db0db\"`', /tmp/tmpv0u6jxlo.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ > 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp3rbpgmsf.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ != 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp5y5ywfc7.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut n = decimal;\n    while n >\
    \ 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp6rhunpib.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal != 0 {\n        binary.push_str(&(decimal % 2).to_string());\n     \
    \   decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp_7b_x4cr.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::from(\"db\");\n    let mut decimal = decimal;\n\
    \    while decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n\
    \        decimal /= 2;\n    }\n    binary.push_str(\"db\");\n    binary.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"bdbd\"`,\n right: `\"db0db\"`', /tmp/tmpkzvxvk3d.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut dec = decimal;\n    while dec\
    \ > 0 {\n        binary.push_str(&(dec % 2).to_string());\n        dec /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp34zgkpb9.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 1
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    format!(\"db{}db\", decimal.to_string(2))\n}\n\nfn main() {\n    let candidate\
    \ = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"db0db\"));\n\
    \    assert_eq!(candidate(32), String::from(\"db100000db\"));\n    assert_eq!(candidate(103),\
    \ String::from(\"db1100111db\"));\n    assert_eq!(candidate(15), String::from(\"\
    db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpdooqi4q4.rs:8:31\n     |\n8    |     format!(\"db{}db\", decimal.to_string(2))\n\
    \     |                               ^^^^^^^^^ - supplied 1 argument\n     |\
    \                               |\n     |                               expected\
    \ 0 arguments\n     |\nnote: associated function defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659748423
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut num = decimal;\n    while num\
    \ != 0 {\n        binary.push_str(&(num % 2).to_string());\n        num /= 2;\n\
    \    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n    let\
    \ candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmp826uwq6a.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut decimal = decimal;\n    while\
    \ decimal > 0 {\n        binary.push_str(&(decimal % 2).to_string());\n      \
    \  decimal /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
    \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
    ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpdys9w61v.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
- exit_code: 101
  program: "/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\nfn decimal_to_binary(decimal: isize) -> String {\n\
    \    let mut binary = String::new();\n    let mut number = decimal;\n    while\
    \ number > 0 {\n        binary.push_str(&(number % 2).to_string());\n        number\
    \ /= 2;\n    }\n    binary.chars().rev().collect::<String>()\n}\n\nfn main() {\n\
    \    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0), String::from(\"\
    db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"));\n   \
    \ assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
    \ String::from(\"db1111db\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"db0db\"`', /tmp/tmpxqvxvw28.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748424
