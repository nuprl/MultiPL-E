language: rs
name: HumanEval_14_all_prefixes
results:
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        result.push(prefix.clone());\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        result.push(prefix.clone());\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        result.push(prefix.clone());\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        prefixes.push(prefix.clone());\n    }\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        prefixes.push(prefix.clone());\n    }\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        prefixes.push(prefix.clone());\n    }\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        current_prefix.push(c);\n        prefixes.push(current_prefix.clone());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 0
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        prefix.push(c);\n        result.push(prefix.clone());\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    for i in 0..string.len() {\n        prefixes.push(string[0..i].to_string());\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp1odpowkq.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut result\
    \ = Vec::new();\n    for i in 0..string.len() {\n        result.push(string[0..i].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpmxuhih1h.rs:13:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805202
