language: rs
name: HumanEval_84_solve
results:
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut sum = 0;\n    let mut N = N;\n    while N > 0 {\n \
    \       sum += N % 2;\n        N /= 2;\n    }\n    sum.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpylpnbwuk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        let remainder = N % 2;\n        N = N / 2;\n        result.push_str(&remainder.to_string());\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpitdj3sxe.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut N = N;\n    while\
    \ N > 0 {\n        let r = N % 2;\n        result.push_str(&r.to_string());\n\
    \        N = N / 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpg3jvdloq.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push(if n % 2 == 0 { '0' } else { '1' });\n        n\
    \ /= 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let\
    \ candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n\
    \    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3npffat8.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmph9uumy6l.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpp8cd3cym.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpczzw2yzo.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut binary = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgzlhjlg2.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpp8cd3cym.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpczzw2yzo.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpczzw2yzo.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&format!(\"{}\", N % 2));\n        N /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp84u264ud.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        let r = n % 2;\n        result.push_str(&r.to_string());\n\
    \        n = n / 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpql3tv8mj.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        let remainder = N % 2;\n        result.push_str(&remainder.to_string());\n\
    \        N = N / 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpeauieaaq.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut s = String::new();\n    let mut n = N;\n    while n\
    \ > 0 {\n        s.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n \
    \   s.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp7h3vi0ld.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut binary = String::new();\n    while\
    \ n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpq6drdr89.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut res = String::new();\n    while\
    \ n > 0 {\n        res.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmplul0v8ql.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpczzw2yzo.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut N = N;\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp0m9hx6kn.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n \
    \       sum += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpqpny23cx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpczzw2yzo.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut N = N;\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp0m9hx6kn.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&((N % 2).to_string()));\n        N /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6_78gy_e.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut binary = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgzlhjlg2.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        let remainder = N % 2;\n        N = N / 2;\n        result.push_str(&remainder.to_string());\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpitdj3sxe.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut binary = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgzlhjlg2.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmph9uumy6l.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmph9uumy6l.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut binary = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgzlhjlg2.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut res = String::new();\n    while\
    \ n > 0 {\n        res.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n\
    \    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate = solve;\n\
    \    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmplul0v8ql.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut N = N;\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp0m9hx6kn.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut N = N;\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp0m9hx6kn.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut res = String::new();\n    while\
    \ n > 0 {\n        res.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n \
    \   }\n    res.chars().rev().collect()\n}\n\nfn main() {\n    let candidate =\
    \ solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp0hlmk2ek.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut sum = 0;\n    let mut N = N;\n    while N > 0 {\n \
    \       sum += N % 2;\n        N /= 2;\n    }\n    sum.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpylpnbwuk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpp8cd3cym.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        let rem = N % 2;\n        result.push_str(&rem.to_string());\n\
    \        N = N / 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpkdydon9e.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        let remainder = N % 2;\n        N = N / 2;\n        result.push_str(&remainder.to_string());\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpitdj3sxe.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpczzw2yzo.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut sum = 0;\n    let mut n = N;\n    while n > 0 {\n \
    \       sum += n % 2;\n        n /= 2;\n    }\n    sum.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpqpny23cx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        let r = n % 2;\n        result.push_str(&r.to_string());\n\
    \        n = n / 2;\n    }\n    result.chars().rev().collect()\n}\n\nfn main()\
    \ {\n    let candidate = solve;\n    assert_eq!(candidate(1000), String::from(\"\
    1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n    assert_eq!(candidate(147),\
    \ String::from(\"1100\"));\n    assert_eq!(candidate(333), String::from(\"1001\"\
    ));\n    assert_eq!(candidate(963), String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpql3tv8mj.rs:21:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpp8cd3cym.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut n = N;\n    let mut result = String::new();\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp3ibr54rq.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut binary = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgzlhjlg2.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut N = N;\n    let mut result = String::new();\n    while\
    \ N > 0 {\n        result.push_str(&(N % 2).to_string());\n        N /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpvo5b9wmb.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    format!(\"{:b}\", N).chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>().to_string()\n\
    }\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(1000),\
    \ String::from(\"1\"));\n    assert_eq!(candidate(150), String::from(\"110\"));\n\
    \    assert_eq!(candidate(147), String::from(\"1100\"));\n    assert_eq!(candidate(333),\
    \ String::from(\"1001\"));\n    assert_eq!(candidate(963), String::from(\"10010\"\
    ));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"6\"`,\n right: `\"1\"`', /tmp/tmpp8cd3cym.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut binary = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        binary.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    binary.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgzlhjlg2.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&format!(\"{}\", n % 2));\n        n /= 2;\n\
    \    }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmpgc4nefvg.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
- exit_code: 101
  program: "/// Given a positive integer N, return the total sum of its digits in\
    \ binary.\n/// Example\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264\
    \ N \u2264 10000.\n/// Output:\n/// a string of binary number\nfn solve(N: isize)\
    \ -> String {\n    let mut result = String::new();\n    let mut n = N;\n    while\
    \ n > 0 {\n        result.push_str(&(n % 2).to_string());\n        n /= 2;\n \
    \   }\n    result.chars().rev().collect()\n}\n\nfn main() {\n    let candidate\
    \ = solve;\n    assert_eq!(candidate(1000), String::from(\"1\"));\n    assert_eq!(candidate(150),\
    \ String::from(\"110\"));\n    assert_eq!(candidate(147), String::from(\"1100\"\
    ));\n    assert_eq!(candidate(333), String::from(\"1001\"));\n    assert_eq!(candidate(963),\
    \ String::from(\"10010\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"1111101000\"`,\n right: `\"1\"`', /tmp/tmp6b0xcpew.rs:20:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749600
