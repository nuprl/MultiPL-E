language: rs
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    let\
    \ symbols = vec![\n        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"\
    d\", 500),\n        (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n\
    \        (\"l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"\
    ix\", 9),\n        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n  \
    \  ];\n    while i < symbols.len() {\n        let (symbol, value) = symbols[i];\n\
    \        while number >= value {\n            result.push_str(symbol);\n     \
    \       number -= value;\n        }\n        i += 1;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    let roman = match digit {\n            1 => \"i\",\n            2 => \"ii\"\
    ,\n            3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\"\
    ,\n            6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\"\
    ,\n            9 => \"ix\",\n            _ => \"\",\n        };\n        result\
    \ = format!(\"{}{}\", roman, result);\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmph0fdtms9.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut num_to_roman = [\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    while\
    \ number > 0 {\n        for (roman, arabic) in num_to_roman.iter() {\n       \
    \     if number >= *arabic {\n                result.push_str(roman);\n      \
    \          number -= *arabic;\n                break;\n            }\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut symbols = vec![\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n\n  \
    \  while number > 0 {\n        let (symbol, value) = symbols.pop().unwrap();\n\
    \        while number >= value {\n            result.push_str(symbol);\n     \
    \       number -= value;\n        }\n    }\n\n    result\n}\n\nfn main() {\n \
    \   let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iiiiiiiiiiiiiiiiiii\"`,\n right: `\"xix\"`', /tmp/tmpy07_hbg4.rs:37:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut roman\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            roman.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            roman.push_str(\"cm\");\n       \
    \     num -= 900;\n        } else if num >= 500 {\n            roman.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            roman.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            roman.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            roman.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            roman.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            roman.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            roman.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            roman.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            roman.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            roman.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            roman.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    roman\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    let mut i = 0;\n    let\
    \ mut current_numeral = String::new();\n    let mut current_value = 0;\n    let\
    \ mut next_numeral = String::new();\n    let mut next_value = 0;\n    let mut\
    \ next_next_numeral = String::new();\n    let mut next_next_value = 0;\n    while\
    \ number > 0 {\n        current_numeral = String::new();\n        current_value\
    \ = 0;\n        next_numeral = String::new();\n        next_value = 0;\n     \
    \   next_next_numeral = String::new();\n        next_next_value = 0;\n       \
    \ if i == 0 {\n            current_numeral = \"m\".to_string();\n            current_value\
    \ = 1000;\n            next_numeral = \"c\".to_string();\n            next_value\
    \ = 100;\n            next_next_numeral = \"x\".to_string();\n            next_next_value\
    \ = 10;\n        } else if i == 1 {\n            current_numeral = \"c\".to_string();\n\
    \            current_value = 100;\n            next_numeral = \"x\".to_string();\n\
    \            next_value = 10;\n            next_next_numeral = \"i\".to_string();\n\
    \            next_next_value = 1;\n        } else if i == 2 {\n            current_numeral\
    \ = \"x\".to_string();\n            current_value = 10;\n            next_numeral\
    \ = \"i\".to_string();\n            next_value = 1;\n        } else if i == 3\
    \ {\n            current_numeral = \"i\".to_string();\n            current_value\
    \ = 1;\n        }\n        if number >= current_value {\n            result.push_str(&current_numeral);\n\
    \            number -= current_value;\n        } else if number >= current_value\
    \ - next_value {\n            result.push_str(&next_numeral);\n            result.push_str(&current_numeral);\n\
    \            number -= current_value - next_value;\n        } else if number >=\
    \ current_value - next_next_value {\n           \n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpltxnuos9.rs:72:3\n\
    \   |\n5  | fn int_to_mini_roman(number: isize) -> String {\n   |            \
    \                                   - unclosed delimiter\n...\n15 |     while\
    \ number > 0 {\n   |                      - unclosed delimiter\n...\n52 |    \
    \     } else if number >= current_value - next_next_value {\n   |            \
    \                                                 - this delimiter might not be\
    \ properly closed...\n53 |            \n54 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n72 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpltxnuos9.rs:15:5\n   |\n5  |   fn int_to_mini_roman(number:\
    \ isize) -> String {\n   |                                          ------ expected\
    \ `String` because of return type\n...\n15 | /     while number > 0 {\n16 | |\
    \         current_numeral = String::new();\n17 | |         current_value = 0;\n\
    18 | |         next_numeral = String::new();\n...  |\n71 | |     assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n72 | | }\n   | |__^ expected struct `String`, found `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let roman_numerals = vec![\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for\
    \ (numeral, value) in roman_numerals {\n        while number >= *value {\n   \
    \         result.push_str(numeral);\n            number -= value;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmpjhrxp5au.rs:24:25\n\
    \   |\n24 |         while number >= *value {\n   |                         ^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let roman\
    \ = match digit {\n            1 => \"i\",\n            2 => \"ii\",\n       \
    \     3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\",\n     \
    \       6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\",\n\
    \            9 => \"ix\",\n            _ => \"\",\n        };\n        result\
    \ = format!(\"{}{}\", roman, result);\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpt90jsdy4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut numeral_map = vec![\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n\n  \
    \  while number > 0 {\n        let (numeral, value) = numeral_map.pop().unwrap();\n\
    \        while number >= value {\n            result.push_str(numeral);\n    \
    \        number -= value;\n        }\n    }\n\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iiiiiiiiiiiiiiiiiii\"`,\n right: `\"xix\"`', /tmp/tmpjbzyc2gi.rs:37:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let (ones,\
    \ fives, tens) = match i {\n            0 => ('i', 'v', 'x'),\n            1 =>\
    \ ('x', 'l', 'c'),\n            2 => ('c', 'd', 'm'),\n            3 => ('m',\
    \ ' ', ' '),\n            _ => (' ', ' ', ' '),\n        };\n        match digit\
    \ {\n            1 => result.insert(0, ones),\n            2 => {\n          \
    \      result.insert(0, ones);\n                result.insert(0, ones);\n    \
    \        }\n            3 => {\n                result.insert(0, ones);\n    \
    \            result.insert(0, ones);\n                result.insert(0, ones);\n\
    \            }\n            4 => {\n                result.insert(0, ones);\n\
    \                result.insert(0, fives);\n            }\n            5 => result.insert(0,\
    \ fives),\n            6 => {\n                result.insert(0, ones);\n     \
    \           result.insert(0, fives);\n            }\n            7 => {\n    \
    \            result.insert(0, ones);\n                result.insert(0, ones);\n\
    \                result.insert(0, fives);\n            }\n            8 => {\n\
    \                result.insert(0, ones);\n                result.insert(0, ones);\n\
    \                result.insert(0, ones);\n                result.insert(0, fives);\n\
    \            }\n            9 => {\n                result.insert(0, ones);\n\
    \                result.insert(0, tens);\n            }\n            _ => (),\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xxi\"`,\n right: `\"xix\"`', /tmp/tmpa80l4lqf.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut remaining = number;\n    while remaining >= 1000\
    \ {\n        result.push_str(\"m\");\n        remaining -= 1000;\n    }\n    if\
    \ remaining >= 900 {\n        result.push_str(\"cm\");\n        remaining -= 900;\n\
    \    }\n    if remaining >= 500 {\n        result.push_str(\"d\");\n        remaining\
    \ -= 500;\n    }\n    if remaining >= 400 {\n        result.push_str(\"cd\");\n\
    \        remaining -= 400;\n    }\n    while remaining >= 100 {\n        result.push_str(\"\
    c\");\n        remaining -= 100;\n    }\n    if remaining >= 90 {\n        result.push_str(\"\
    xc\");\n        remaining -= 90;\n    }\n    if remaining >= 50 {\n        result.push_str(\"\
    l\");\n        remaining -= 50;\n    }\n    if remaining >= 40 {\n        result.push_str(\"\
    xl\");\n        remaining -= 40;\n    }\n    while remaining >= 10 {\n       \
    \ result.push_str(\"x\");\n        remaining -= 10;\n    }\n    if remaining >=\
    \ 9 {\n        result.push_str(\"ix\");\n        remaining -= 9;\n    }\n    if\
    \ remaining >= 5 {\n        result.push_str(\"v\");\n        remaining -= 5;\n\
    \    }\n    if remaining >= 4 {\n        result.push_str(\"iv\");\n        remaining\
    \ -= 4;\n    }\n    while remaining >= 1 {\n        result.push_str(\"i\");\n\
    \        remaining -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        result = match\
    \ digit {\n            1 => format!(\"{}{}\", \"i\", result),\n            2 =>\
    \ format!(\"{}{}\", \"ii\", result),\n            3 => format!(\"{}{}\", \"iii\"\
    , result),\n            4 => format!(\"{}{}\", \"iv\", result),\n            5\
    \ => format!(\"{}{}\", \"v\", result),\n            6 => format!(\"{}{}\", \"\
    vi\", result),\n            7 => format!(\"{}{}\", \"vii\", result),\n       \
    \     8 => format!(\"{}{}\", \"viii\", result),\n            9 => format!(\"{}{}\"\
    , \"ix\", result),\n            _ => result,\n        };\n        i += 1;\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n \
    \   assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmp5hi9l2zm.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let roman_numerals = [\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for\
    \ (numeral, value) in roman_numerals.iter() {\n        while number >= *value\
    \ {\n            result.push_str(numeral);\n            number -= *value;\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let roman\
    \ = match digit {\n            1 => \"i\",\n            2 => \"ii\",\n       \
    \     3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\",\n     \
    \       6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\",\n\
    \            9 => \"ix\",\n            _ => \"\",\n        };\n        result\
    \ = roman.to_string() + &result;\n        i += 1;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmps6_gy30f.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut num\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ num > 0 {\n        let digit = num % 10;\n        num /= 10;\n        match\
    \ digit {\n            1 => result.insert(i, 'i'),\n            2 => result.insert(i,\
    \ 'i'),\n            3 => result.insert(i, 'i'),\n            4 => result.insert(i,\
    \ 'v'),\n            5 => result.insert(i, 'v'),\n            6 => result.insert(i,\
    \ 'v'),\n            7 => result.insert(i, 'v'),\n            8 => result.insert(i,\
    \ 'v'),\n            9 => result.insert(i, 'x'),\n            _ => (),\n     \
    \   }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xi\"`,\n right: `\"xix\"`', /tmp/tmppysu1a3j.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let (one,\
    \ five, ten) = match i {\n            0 => ('i', 'v', 'x'),\n            1 =>\
    \ ('x', 'l', 'c'),\n            2 => ('c', 'd', 'm'),\n            3 => ('m',\
    \ 'v', 'x'),\n            _ => (' ', ' ', ' '),\n        };\n        match digit\
    \ {\n            1 => result.insert(0, one),\n            2 => {\n           \
    \     result.insert(0, one);\n                result.insert(0, one);\n       \
    \     }\n            3 => {\n                result.insert(0, one);\n        \
    \        result.insert(0, one);\n                result.insert(0, one);\n    \
    \        }\n            4 => {\n                result.insert(0, one);\n     \
    \           result.insert(0, five);\n            }\n            5 => result.insert(0,\
    \ five),\n            6 => {\n                result.insert(0, one);\n       \
    \         result.insert(0, five);\n            }\n            7 => {\n       \
    \         result.insert(0, one);\n                result.insert(0, one);\n   \
    \             result.insert(0, five);\n            }\n            8 => {\n   \
    \             result.insert(0, one);\n                result.insert(0, one);\n\
    \                result.insert(0, one);\n                result.insert(0, five);\n\
    \            }\n            9 => {\n                result.insert(0, one);\n \
    \               result.insert(0, ten);\n            }\n            _ => {}\n \
    \       }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xxi\"`,\n right: `\"xix\"`', /tmp/tmp9gaut2p2.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    let roman_digit = match digit {\n            1 => \"i\",\n            2 =>\
    \ \"ii\",\n            3 => \"iii\",\n            4 => \"iv\",\n            5\
    \ => \"v\",\n            6 => \"vi\",\n            7 => \"vii\",\n           \
    \ 8 => \"viii\",\n            9 => \"ix\",\n            _ => \"\",\n        };\n\
    \        result = format!(\"{}{}\", roman_digit, result);\n        i += 1;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpylojk8zq.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let (ones,\
    \ fives, tens) = match i {\n            0 => ('i', 'v', 'x'),\n            1 =>\
    \ ('x', 'l', 'c'),\n            2 => ('c', 'd', 'm'),\n            3 => ('m',\
    \ '?', '?'),\n            _ => panic!(\"Invalid number\"),\n        };\n     \
    \   match digit {\n            1 | 2 | 3 => result.push_str(&ones.to_string().repeat(digit\
    \ as usize)),\n            4 => result.push_str(&format!(\"{}{}\", ones, fives)),\n\
    \            5 | 6 | 7 | 8 => result.push_str(&format!(\"{}{}\", fives, ones.to_string().repeat((digit\
    \ - 5) as usize))),\n            9 => result.push_str(&format!(\"{}{}\", ones,\
    \ tens)),\n            _ => (),\n        }\n        i += 1;\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xxi\"`,\n right: `\"xix\"`', /tmp/tmpgho3uths.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    let (ones, fives, tens) = match i {\n            0 => ('i', 'v', 'x'),\n\
    \            1 => ('x', 'l', 'c'),\n            2 => ('c', 'd', 'm'),\n      \
    \      3 => ('m', 'v', 'x'),\n            _ => panic!(\"number too large\"),\n\
    \        };\n        match digit {\n            1 => result.push(ones),\n    \
    \        2 => result.push_str(&[ones, ones].iter().collect::<String>()),\n   \
    \         3 => result.push_str(&[ones, ones, ones].iter().collect::<String>()),\n\
    \            4 => result.push_str(&[ones, fives].iter().collect::<String>()),\n\
    \            5 => result.push(fives),\n            6 => result.push_str(&[fives,\
    \ ones].iter().collect::<String>()),\n            7 => result.push_str(&[fives,\
    \ ones, ones].iter().collect::<String>()),\n            8 => result.push_str(&[fives,\
    \ ones, ones, ones].iter().collect::<String>()),\n            9 => result.push_str(&[ones,\
    \ tens].iter().collect::<String>()),\n            _ => (),\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"ixx\"`,\n right: `\"xix\"`', /tmp/tmp3u3y_f3h.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        if num >= 1000 {\n            result.push_str(\"m\");\n     \
    \       num -= 1000;\n        } else if num >= 900 {\n            result.push_str(\"\
    cm\");\n            num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let roman_digit\
    \ = match digit {\n            1 => \"i\",\n            2 => \"ii\",\n       \
    \     3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\",\n     \
    \       6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\",\n\
    \            9 => \"ix\",\n            _ => \"\",\n        };\n        result\
    \ = format!(\"{}{}\", roman_digit, result);\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpx0pnw8gu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut numeral_map = vec![\n\
    \        (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n     \
    \   (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50,\
    \ \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n\
    \        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ];\n\n  \
    \  while num > 0 {\n        for (value, numeral) in numeral_map.iter() {\n   \
    \         if num >= *value {\n                result.push_str(numeral);\n    \
    \            num -= *value;\n                break;\n            }\n        }\n\
    \    }\n\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    let (one, five, ten) = match i {\n            0 => ('i', 'v', 'x'),\n   \
    \         1 => ('x', 'l', 'c'),\n            2 => ('c', 'd', 'm'),\n         \
    \   3 => ('m', '?', '?'),\n            _ => ('?', '?', '?'),\n        };\n   \
    \     match digit {\n            1 => result.insert(0, one),\n            2 =>\
    \ {\n                result.insert(0, one);\n                result.insert(0,\
    \ one);\n            }\n            3 => {\n                result.insert(0, one);\n\
    \                result.insert(0, one);\n                result.insert(0, one);\n\
    \            }\n            4 => {\n                result.insert(0, one);\n \
    \               result.insert(0, five);\n            }\n            5 => result.insert(0,\
    \ five),\n            6 => {\n                result.insert(0, one);\n       \
    \         result.insert(0, five);\n            }\n            7 => {\n       \
    \         result.insert(0, one);\n                result.insert(0, one);\n   \
    \             result.insert(0, five);\n            }\n            8 => {\n   \
    \             result.insert(0, one);\n                result.insert(0, one);\n\
    \                result.insert(0, one);\n                result.insert(0, five);\n\
    \            }\n            9 => {\n                result.insert(0, one);\n \
    \               result.insert(0, ten);\n            }\n            _ => (),\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xxi\"`,\n right: `\"xix\"`', /tmp/tmp_d6qylt2.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        match i {\n\
    \            0 => result = int_to_mini_roman_digit(digit, \"i\", \"v\", \"x\"\
    ) + &result,\n            1 => result = int_to_mini_roman_digit(digit, \"x\",\
    \ \"l\", \"c\") + &result,\n            2 => result = int_to_mini_roman_digit(digit,\
    \ \"c\", \"d\", \"m\") + &result,\n            3 => result = int_to_mini_roman_digit(digit,\
    \ \"m\", \"\", \"\") + &result,\n            _ => panic!(\"Number is too large\"\
    ),\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `int_to_mini_roman_digit` in this scope\n\
    \  --> /tmp/tmp8f7xn7z9.rs:13:27\n   |\n13 |             0 => result = int_to_mini_roman_digit(digit,\
    \ \"i\", \"v\", \"x\") + &result,\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `int_to_mini_roman_digit`\
    \ in this scope\n  --> /tmp/tmp8f7xn7z9.rs:14:27\n   |\n14 |             1 =>\
    \ result = int_to_mini_roman_digit(digit, \"x\", \"l\", \"c\") + &result,\n  \
    \ |                           ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find function `int_to_mini_roman_digit` in this scope\n\
    \  --> /tmp/tmp8f7xn7z9.rs:15:27\n   |\n15 |             2 => result = int_to_mini_roman_digit(digit,\
    \ \"c\", \"d\", \"m\") + &result,\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find function `int_to_mini_roman_digit`\
    \ in this scope\n  --> /tmp/tmp8f7xn7z9.rs:16:27\n   |\n16 |             3 =>\
    \ result = int_to_mini_roman_digit(digit, \"m\", \"\", \"\") + &result,\n   |\
    \                           ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error: aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let roman_digit\
    \ = match digit {\n            1 => \"i\",\n            2 => \"ii\",\n       \
    \     3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\",\n     \
    \       6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\",\n\
    \            9 => \"ix\",\n            _ => \"\",\n        };\n        result\
    \ = format!(\"{}{}\", roman_digit, result);\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpx0pnw8gu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let (div, rem) = (num / 10, num % 10);\n        if rem == 4 {\n\
    \            result.push_str(&ROMAN_DIGITS[i][0]);\n            result.push_str(&ROMAN_DIGITS[i][1]);\n\
    \        } else if rem == 9 {\n            result.push_str(&ROMAN_DIGITS[i][0]);\n\
    \            result.push_str(&ROMAN_DIGITS[i + 1][0]);\n        } else if rem\
    \ >= 5 {\n            result.push_str(&ROMAN_DIGITS[i][1]);\n            for _\
    \ in 0..rem - 5 {\n                result.push_str(&ROMAN_DIGITS[i][0]);\n   \
    \         }\n        } else {\n            for _ in 0..rem {\n               \
    \ result.push_str(&ROMAN_DIGITS[i][0]);\n            }\n        }\n        num\
    \ = div;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpneff3z3o.rs:12:30\n\
    \   |\n12 |             result.push_str(&ROMAN_DIGITS[i][0]);\n   |          \
    \                    ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpneff3z3o.rs:13:30\n \
    \  |\n13 |             result.push_str(&ROMAN_DIGITS[i][1]);\n   |           \
    \                   ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpneff3z3o.rs:15:30\n \
    \  |\n15 |             result.push_str(&ROMAN_DIGITS[i][0]);\n   |           \
    \                   ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpneff3z3o.rs:16:30\n \
    \  |\n16 |             result.push_str(&ROMAN_DIGITS[i + 1][0]);\n   |       \
    \                       ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpneff3z3o.rs:18:30\n\
    \   |\n18 |             result.push_str(&ROMAN_DIGITS[i][1]);\n   |          \
    \                    ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpneff3z3o.rs:20:34\n \
    \  |\n20 |                 result.push_str(&ROMAN_DIGITS[i][0]);\n   |       \
    \                           ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpneff3z3o.rs:24:34\n\
    \   |\n24 |                 result.push_str(&ROMAN_DIGITS[i][0]);\n   |      \
    \                            ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 7 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        if digit ==\
    \ 0 {\n            i += 1;\n            continue;\n        }\n        let roman\
    \ = match i {\n            0 => match digit {\n                1 => \"i\",\n \
    \               2 => \"ii\",\n                3 => \"iii\",\n                4\
    \ => \"iv\",\n                5 => \"v\",\n                6 => \"vi\",\n    \
    \            7 => \"vii\",\n                8 => \"viii\",\n                9\
    \ => \"ix\",\n                _ => unreachable!(),\n            },\n         \
    \   1 => match digit {\n                1 => \"x\",\n                2 => \"xx\"\
    ,\n                3 => \"xxx\",\n                4 => \"xl\",\n             \
    \   5 => \"l\",\n                6 => \"lx\",\n                7 => \"lxx\",\n\
    \                8 => \"lxxx\",\n                9 => \"xc\",\n              \
    \  _ => unreachable!(),\n            },\n            2 => match digit {\n    \
    \            1 => \"c\",\n                2 => \"cc\",\n                3 => \"\
    ccc\",\n                4 => \"cd\",\n                5 => \"d\",\n          \
    \      6 => \"dc\",\n                7 => \"dcc\",\n                8 => \"dccc\"\
    ,\n                9 => \"cm\",\n                _ => unreachable!(),\n      \
    \      },\n            3 => match digit {\n                1 => \"m\",\n     \
    \           2 => \"mm\",\n                3 => \"mmm\",\n                _ =>\
    \ unreachable!(),\n            },\n            _ => unreachable!(),\n        };\n\
    \        result.insert_str(0, roman);\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let numerals = [\n     \
    \   (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n        (\"\
    cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"l\", 50),\n\
    \        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n        (\"\
    v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for (numeral,\
    \ value) in numerals.iter() {\n        while number >= *value {\n            result.push_str(numeral);\n\
    \            number -= *value;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        if num >= 1000 {\n            result.push_str(\"m\");\n     \
    \       num -= 1000;\n        } else if num >= 900 {\n            result.push_str(\"\
    cm\");\n            num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    let roman_digit = match digit {\n            1 => \"i\",\n            2 =>\
    \ \"ii\",\n            3 => \"iii\",\n            4 => \"iv\",\n            5\
    \ => \"v\",\n            6 => \"vi\",\n            7 => \"vii\",\n           \
    \ 8 => \"viii\",\n            9 => \"ix\",\n            _ => \"\",\n        };\n\
    \        result = format!(\"{}{}\", roman_digit, result);\n        i += 1;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpdwqis85l.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut remaining = number;\n    let mut current_digit\
    \ = 0;\n    let mut current_value = 1;\n    while remaining > 0 {\n        current_digit\
    \ = (remaining % 10) as usize;\n        current_value = (10 as isize).pow(result.len()\
    \ as u32);\n        remaining = remaining / 10;\n        result = match current_digit\
    \ {\n            1 => format!(\"I{}\", result),\n            2 => format!(\"II{}\"\
    , result),\n            3 => format!(\"III{}\", result),\n            4 => format!(\"\
    IV{}\", result),\n            5 => format!(\"V{}\", result),\n            6 =>\
    \ format!(\"VI{}\", result),\n            7 => format!(\"VII{}\", result),\n \
    \           8 => format!(\"VIII{}\", result),\n            9 => format!(\"IX{}\"\
    , result),\n            _ => result,\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"IIX\"`,\n right: `\"xix\"`', /tmp/tmpx2h6o_g_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    let mut numeral_index =\
    \ 0;\n    while number > 0 {\n        let numeral = NUMERALS[numeral_index];\n\
    \        let (div, modulo) = number.div_rem(&numeral.value);\n        if div >\
    \ 0 {\n            result.push_str(&numeral.symbol.repeat(div as usize));\n  \
    \      }\n        number = modulo;\n        numeral_index += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `NUMERALS` in this scope\n  --> /tmp/tmp_vxbt52t.rs:10:23\n\
    \   |\n10 |         let numeral = NUMERALS[numeral_index];\n   |             \
    \          ^^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `div_rem`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp_vxbt52t.rs:11:36\n\
    \   |\n11 |         let (div, modulo) = number.div_rem(&numeral.value);\n   |\
    \                                    ^^^^^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        match i {\n\
    \            0 => {\n                result = match digit {\n                \
    \    1 => \"i\".to_string(),\n                    2 => \"ii\".to_string(),\n \
    \                   3 => \"iii\".to_string(),\n                    4 => \"iv\"\
    .to_string(),\n                    5 => \"v\".to_string(),\n                 \
    \   6 => \"vi\".to_string(),\n                    7 => \"vii\".to_string(),\n\
    \                    8 => \"viii\".to_string(),\n                    9 => \"ix\"\
    .to_string(),\n                    _ => \"\".to_string(),\n                } +\
    \ &result;\n            }\n            1 => {\n                result = match\
    \ digit {\n                    1 => \"x\".to_string(),\n                    2\
    \ => \"xx\".to_string(),\n                    3 => \"xxx\".to_string(),\n    \
    \                4 => \"xl\".to_string(),\n                    5 => \"l\".to_string(),\n\
    \                    6 => \"lx\".to_string(),\n                    7 => \"lxx\"\
    .to_string(),\n                    8 => \"lxxx\".to_string(),\n              \
    \      9 => \"xc\".to_string(),\n                    _ => \"\".to_string(),\n\
    \                } + &result;\n            }\n            2 => {\n           \
    \     result = match digit {\n                    1 => \"c\".to_string(),\n  \
    \                  2 => \"cc\".to_string(),\n                    3 => \"ccc\"\
    .to_string(),\n                    4 => \"cd\".to_string(),\n                \
    \    5 => \"d\".to_string(),\n                    6 => \"dc\".to_string(),\n \
    \                   7 => \"dcc\".to_string(),\n                    8 => \"dccc\"\
    .to_string(),\n                    9 => \"cm\".to_string(),\n                \
    \    _ => \"\".to_string(),\n                } + &result;\n            }\n   \
    \         3 => {\n                result = match digit {\n                   \
    \ 1 => \"m\".to_string(),\n                    2 => \"mm\".to_string(),\n    \
    \                3 => \"mmm\".to_string(),\n                    _ => \"\".to_string(),\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp2fz5bxdq.rs:79:3\n\
    \   |\n5  | fn int_to_mini_roman(number: isize) -> String {\n   |            \
    \                                   - unclosed delimiter\n...\n9  |     while\
    \ num > 0 {\n   |                   - unclosed delimiter\n...\n12 |         match\
    \ i {\n   |                 - unclosed delimiter\n...\n55 |             3 => {\n\
    \   |                  - unclosed delimiter\n56 |                 result = match\
    \ digit {\n   |                                      - this delimiter might not\
    \ be properly closed...\n...\n61 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n79 | }\n   |   ^\n\nerror: expected one of `.`,\
    \ `;`, `?`, `}`, or an operator, found keyword `fn`\n  --> /tmp/tmp2fz5bxdq.rs:5:47\n\
    \   |\n5  | fn int_to_mini_roman(number: isize) -> String {\n   |            \
    \                                   ^ unclosed delimiter\n...\n61 | }\n   |  -\n\
    \   |  |\n   |  expected one of `.`, `;`, `?`, `}`, or an operator\n   |  help:\
    \ `}` may belong here\n62 | \n63 | fn main() {\n   | ^^ unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2fz5bxdq.rs:9:5\n   |\n5  |   fn int_to_mini_roman(number:\
    \ isize) -> String {\n   |                                          ------ expected\
    \ `String` because of return type\n...\n9  | /     while num > 0 {\n10 | |   \
    \      let digit = num % 10;\n11 | |         num /= 10;\n12 | |         match\
    \ i {\n...  |\n78 | |     assert_eq!(candidate(1000), String::from(\"m\"));\n\
    79 | | }\n   | |__^ expected struct `String`, found `()`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut num_to_roman = vec![\n\
    \        (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n     \
    \   (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50,\
    \ \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n\
    \        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\"),\n    ];\n    while\
    \ number > 0 {\n        for (num, roman) in num_to_roman.iter() {\n          \
    \  if number >= *num {\n                result.push_str(roman);\n            \
    \    number -= *num;\n                break;\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    let mut\
    \ roman_numerals = vec![\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\",\n    ];\n    let mut values\
    \ = vec![1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    while num\
    \ > 0 {\n        if num >= values[i] {\n            result.push_str(roman_numerals[i]);\n\
    \            num -= values[i];\n        } else {\n            i += 1;\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut num\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ num > 0 {\n        let digit = num % 10;\n        num /= 10;\n        match\
    \ digit {\n            1 => result.insert(i, 'i'),\n            2 => result.insert(i,\
    \ 'i'),\n            3 => result.insert(i, 'i'),\n            4 => result.insert(i,\
    \ 'v'),\n            5 => result.insert(i, 'v'),\n            6 => result.insert(i,\
    \ 'v'),\n            7 => result.insert(i, 'v'),\n            8 => result.insert(i,\
    \ 'v'),\n            9 => result.insert(i, 'x'),\n            _ => (),\n     \
    \   }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xi\"`,\n right: `\"xix\"`', /tmp/tmppysu1a3j.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        if num >= roman_numerals::ROMAN_NUMERALS[i].1 {\n           \
    \ result.push_str(roman_numerals::ROMAN_NUMERALS[i].0);\n            num -= roman_numerals::ROMAN_NUMERALS[i].1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `roman_numerals`\n\
    \  --> /tmp/tmpwwkzgj8a.rs:10:19\n   |\n10 |         if num >= roman_numerals::ROMAN_NUMERALS[i].1\
    \ {\n   |                   ^^^^^^^^^^^^^^ use of undeclared crate or module `roman_numerals`\n\
    \nerror[E0433]: failed to resolve: use of undeclared crate or module `roman_numerals`\n\
    \  --> /tmp/tmpwwkzgj8a.rs:11:29\n   |\n11 |             result.push_str(roman_numerals::ROMAN_NUMERALS[i].0);\n\
    \   |                             ^^^^^^^^^^^^^^ use of undeclared crate or module\
    \ `roman_numerals`\n\nerror[E0433]: failed to resolve: use of undeclared crate\
    \ or module `roman_numerals`\n  --> /tmp/tmpwwkzgj8a.rs:12:20\n   |\n12 |    \
    \         num -= roman_numerals::ROMAN_NUMERALS[i].1;\n   |                  \
    \  ^^^^^^^^^^^^^^ use of undeclared crate or module `roman_numerals`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut numeral_map = vec![\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n\n  \
    \  while number > 0 {\n        let (numeral, value) = numeral_map.pop().unwrap();\n\
    \        if number >= value {\n            result.push_str(numeral);\n       \
    \     number -= value;\n        }\n    }\n\n    result\n}\n\nfn main() {\n   \
    \ let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iivvix\"`,\n right: `\"xix\"`', /tmp/tmpfbkexgwo.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut remaining = number;\n    while remaining > 0 {\n\
    \        if remaining >= 1000 {\n            result.push_str(\"m\");\n       \
    \     remaining -= 1000;\n        } else if remaining >= 900 {\n            result.push_str(\"\
    cm\");\n            remaining -= 900;\n        } else if remaining >= 500 {\n\
    \            result.push_str(\"d\");\n            remaining -= 500;\n        }\
    \ else if remaining >= 400 {\n            result.push_str(\"cd\");\n         \
    \   remaining -= 400;\n        } else if remaining >= 100 {\n            result.push_str(\"\
    c\");\n            remaining -= 100;\n        } else if remaining >= 90 {\n  \
    \          result.push_str(\"xc\");\n            remaining -= 90;\n        } else\
    \ if remaining >= 50 {\n            result.push_str(\"l\");\n            remaining\
    \ -= 50;\n        } else if remaining >= 40 {\n            result.push_str(\"\
    xl\");\n            remaining -= 40;\n        } else if remaining >= 10 {\n  \
    \          result.push_str(\"x\");\n            remaining -= 10;\n        } else\
    \ if remaining >= 9 {\n            result.push_str(\"ix\");\n            remaining\
    \ -= 9;\n        } else if remaining >= 5 {\n            result.push_str(\"v\"\
    );\n            remaining -= 5;\n        } else if remaining >= 4 {\n        \
    \    result.push_str(\"iv\");\n            remaining -= 4;\n        } else if\
    \ remaining >= 1 {\n            result.push_str(\"i\");\n            remaining\
    \ -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let roman_numerals = [\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for\
    \ (roman, arabic) in roman_numerals.iter() {\n        while number >= *arabic\
    \ {\n            result.push_str(roman);\n            number -= arabic;\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        if digit ==\
    \ 0 {\n            i += 1;\n            continue;\n        }\n        let (one,\
    \ five, ten) = match i {\n            0 => ('i', 'v', 'x'),\n            1 =>\
    \ ('x', 'l', 'c'),\n            2 => ('c', 'd', 'm'),\n            3 => ('m',\
    \ '?', '?'),\n            _ => panic!(\"number too large\"),\n        };\n   \
    \     if digit < 4 {\n            result.push_str(&one.to_string().repeat(digit\
    \ as usize));\n        } else if digit == 4 {\n            result.push(one);\n\
    \            result.push(five);\n        } else if digit == 5 {\n            result.push(five);\n\
    \        } else if digit < 9 {\n            result.push(five);\n            result.push_str(&one.to_string().repeat((digit\
    \ - 5) as usize));\n        } else {\n            result.push(one);\n        \
    \    result.push(ten);\n        }\n        i += 1;\n    }\n    result.chars().rev().collect()\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xxi\"`,\n right: `\"xix\"`', /tmp/tmpr9s0unpn.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        if digit ==\
    \ 0 {\n            i += 1;\n            continue;\n        }\n        let roman\
    \ = match i {\n            0 => match digit {\n                1 => \"i\",\n \
    \               2 => \"ii\",\n                3 => \"iii\",\n                4\
    \ => \"iv\",\n                5 => \"v\",\n                6 => \"vi\",\n    \
    \            7 => \"vii\",\n                8 => \"viii\",\n                9\
    \ => \"ix\",\n                _ => \"\",\n            },\n            1 => match\
    \ digit {\n                1 => \"x\",\n                2 => \"xx\",\n       \
    \         3 => \"xxx\",\n                4 => \"xl\",\n                5 => \"\
    l\",\n                6 => \"lx\",\n                7 => \"lxx\",\n          \
    \      8 => \"lxxx\",\n                9 => \"xc\",\n                _ => \"\"\
    ,\n            },\n            2 => match digit {\n                1 => \"c\"\
    ,\n                2 => \"cc\",\n                3 => \"ccc\",\n             \
    \   4 => \"cd\",\n                5 => \"d\",\n                6 => \"dc\",\n\
    \                7 => \"dcc\",\n                8 => \"dccc\",\n             \
    \   9 => \"cm\",\n                _ => \"\",\n            },\n            3 =>\
    \ match digit {\n                1 => \"m\",\n                2 => \"mm\",\n \
    \               3 => \"mmm\",\n                _ => \"\",\n            },\n  \
    \          _ => \"\",\n        };\n        result.insert_str(0, roman);\n    \
    \    i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut roman\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   roman.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        roman.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        roman.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        roman.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        roman.push_str(\"c\");\n        num -= 100;\n    }\n \
    \   if num >= 90 {\n        roman.push_str(\"xc\");\n        num -= 90;\n    }\n\
    \    if num >= 50 {\n        roman.push_str(\"l\");\n        num -= 50;\n    }\n\
    \    if num >= 40 {\n        roman.push_str(\"xl\");\n        num -= 40;\n   \
    \ }\n    while num >= 10 {\n        roman.push_str(\"x\");\n        num -= 10;\n\
    \    }\n    if num >= 9 {\n        roman.push_str(\"ix\");\n        num -= 9;\n\
    \    }\n    if num >= 5 {\n        roman.push_str(\"v\");\n        num -= 5;\n\
    \    }\n    if num >= 4 {\n        roman.push_str(\"iv\");\n        num -= 4;\n\
    \    }\n    while num >= 1 {\n        roman.push_str(\"i\");\n        num -= 1;\n\
    \    }\n    roman\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    let roman_digit = match digit {\n            1 => \"i\",\n            2 =>\
    \ \"ii\",\n            3 => \"iii\",\n            4 => \"iv\",\n            5\
    \ => \"v\",\n            6 => \"vi\",\n            7 => \"vii\",\n           \
    \ 8 => \"viii\",\n            9 => \"ix\",\n            _ => \"\",\n        };\n\
    \        result = format!(\"{}{}\", roman_digit, result);\n        i += 1;\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpdwqis85l.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let roman_numerals = [\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for\
    \ (numeral, value) in roman_numerals.iter() {\n        while number >= *value\
    \ {\n            result.push_str(numeral);\n            number -= *value;\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut numeral_map = vec![\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n\n  \
    \  while number > 0 {\n        let (numeral, value) = numeral_map.pop().unwrap();\n\
    \        if number >= value {\n            result.push_str(numeral);\n       \
    \     number -= value;\n        }\n    }\n\n    result\n}\n\nfn main() {\n   \
    \ let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iivvix\"`,\n right: `\"xix\"`', /tmp/tmpfbkexgwo.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let roman_digit\
    \ = match digit {\n            1 => \"i\",\n            2 => \"ii\",\n       \
    \     3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\",\n     \
    \       6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\",\n\
    \            9 => \"ix\",\n            _ => \"\",\n        };\n        result\
    \ = format!(\"{}{}\", roman_digit, result);\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpx0pnw8gu.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut num\
    \ = number;\n    let mut roman = String::new();\n    let mut i = 0;\n    while\
    \ num > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let roman_digit\
    \ = match digit {\n            1 => \"i\",\n            2 => \"ii\",\n       \
    \     3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\",\n     \
    \       6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\",\n\
    \            9 => \"ix\",\n            _ => \"\",\n        };\n        roman =\
    \ format!(\"{}{}\", roman_digit, roman);\n        i += 1;\n    }\n    roman\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpwg385816.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut remaining = number;\n    while remaining >= 1000\
    \ {\n        result.push_str(\"m\");\n        remaining -= 1000;\n    }\n    if\
    \ remaining >= 900 {\n        result.push_str(\"cm\");\n        remaining -= 900;\n\
    \    }\n    if remaining >= 500 {\n        result.push_str(\"d\");\n        remaining\
    \ -= 500;\n    }\n    if remaining >= 400 {\n        result.push_str(\"cd\");\n\
    \        remaining -= 400;\n    }\n    while remaining >= 100 {\n        result.push_str(\"\
    c\");\n        remaining -= 100;\n    }\n    if remaining >= 90 {\n        result.push_str(\"\
    xc\");\n        remaining -= 90;\n    }\n    if remaining >= 50 {\n        result.push_str(\"\
    l\");\n        remaining -= 50;\n    }\n    if remaining >= 40 {\n        result.push_str(\"\
    xl\");\n        remaining -= 40;\n    }\n    while remaining >= 10 {\n       \
    \ result.push_str(\"x\");\n        remaining -= 10;\n    }\n    if remaining >=\
    \ 9 {\n        result.push_str(\"ix\");\n        remaining -= 9;\n    }\n    if\
    \ remaining >= 5 {\n        result.push_str(\"v\");\n        remaining -= 5;\n\
    \    }\n    if remaining >= 4 {\n        result.push_str(\"iv\");\n        remaining\
    \ -= 4;\n    }\n    while remaining >= 1 {\n        result.push_str(\"i\");\n\
    \        remaining -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let (one,\
    \ five, ten) = match i {\n            0 => ('i', 'v', 'x'),\n            1 =>\
    \ ('x', 'l', 'c'),\n            2 => ('c', 'd', 'm'),\n            3 => ('m',\
    \ 'v', 'x'),\n            _ => (' ', ' ', ' '),\n        };\n        match digit\
    \ {\n            1 => result.insert(0, one),\n            2 => {\n           \
    \     result.insert(0, one);\n                result.insert(0, one);\n       \
    \     }\n            3 => {\n                result.insert(0, one);\n        \
    \        result.insert(0, one);\n                result.insert(0, one);\n    \
    \        }\n            4 => {\n                result.insert(0, one);\n     \
    \           result.insert(0, five);\n            }\n            5 => result.insert(0,\
    \ five),\n            6 => {\n                result.insert(0, one);\n       \
    \         result.insert(0, five);\n            }\n            7 => {\n       \
    \         result.insert(0, one);\n                result.insert(0, one);\n   \
    \             result.insert(0, five);\n            }\n            8 => {\n   \
    \             result.insert(0, one);\n                result.insert(0, one);\n\
    \                result.insert(0, one);\n                result.insert(0, five);\n\
    \            }\n            9 => {\n                result.insert(0, one);\n \
    \               result.insert(0, ten);\n            }\n            _ => (),\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xxi\"`,\n right: `\"xix\"`', /tmp/tmprfmhhvkq.rs:63:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let roman_numerals = [\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for\
    \ (numeral, value) in roman_numerals.iter() {\n        while number >= *value\
    \ {\n            result.push_str(numeral);\n            number -= *value;\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    match digit {\n            1 => result.insert(i, 'i'),\n            2 =>\
    \ result.insert(i, 'i'),\n            3 => result.insert(i, 'i'),\n          \
    \  4 => result.insert(i, 'v'),\n            5 => result.insert(i, 'v'),\n    \
    \        6 => result.insert(i, 'v'),\n            7 => result.insert(i, 'v'),\n\
    \            8 => result.insert(i, 'v'),\n            9 => result.insert(i, 'x'),\n\
    \            _ => (),\n        }\n        i += 1;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"xi\"`,\n right: `\"xix\"`', /tmp/tmp26wyye9x.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let (div, rem) = (num / 10, num % 10);\n        let mut str =\
    \ String::new();\n        match rem {\n            1 => str = \"i\".to_string(),\n\
    \            2 => str = \"ii\".to_string(),\n            3 => str = \"iii\".to_string(),\n\
    \            4 => str = \"iv\".to_string(),\n            5 => str = \"v\".to_string(),\n\
    \            6 => str = \"vi\".to_string(),\n            7 => str = \"vii\".to_string(),\n\
    \            8 => str = \"viii\".to_string(),\n            9 => str = \"ix\".to_string(),\n\
    \            _ => (),\n        }\n        result = str + &result;\n        num\
    \ = div;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpnibes0x1.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let roman_numerals = vec![\n\
    \        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n     \
    \   (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"\
    l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n\
    \        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for\
    \ (roman, arabic) in roman_numerals {\n        while num >= *arabic {\n      \
    \      result.push_str(roman);\n            num -= arabic;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp6tth_zng.rs:24:22\n\
    \   |\n24 |         while num >= *arabic {\n   |                      ^^^^^^^\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut remaining = number;\n    while remaining >= 1000\
    \ {\n        result.push_str(\"m\");\n        remaining -= 1000;\n    }\n    if\
    \ remaining >= 900 {\n        result.push_str(\"cm\");\n        remaining -= 900;\n\
    \    }\n    if remaining >= 500 {\n        result.push_str(\"d\");\n        remaining\
    \ -= 500;\n    }\n    if remaining >= 400 {\n        result.push_str(\"cd\");\n\
    \        remaining -= 400;\n    }\n    while remaining >= 100 {\n        result.push_str(\"\
    c\");\n        remaining -= 100;\n    }\n    if remaining >= 90 {\n        result.push_str(\"\
    xc\");\n        remaining -= 90;\n    }\n    if remaining >= 50 {\n        result.push_str(\"\
    l\");\n        remaining -= 50;\n    }\n    if remaining >= 40 {\n        result.push_str(\"\
    xl\");\n        remaining -= 40;\n    }\n    while remaining >= 10 {\n       \
    \ result.push_str(\"x\");\n        remaining -= 10;\n    }\n    if remaining >=\
    \ 9 {\n        result.push_str(\"ix\");\n        remaining -= 9;\n    }\n    if\
    \ remaining >= 5 {\n        result.push_str(\"v\");\n        remaining -= 5;\n\
    \    }\n    if remaining >= 4 {\n        result.push_str(\"iv\");\n        remaining\
    \ -= 4;\n    }\n    while remaining >= 1 {\n        result.push_str(\"i\");\n\
    \        remaining -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut index = 0;\n   \
    \ while number > 0 {\n        let digit = number % 10;\n        number /= 10;\n\
    \        let roman_digit = match digit {\n            1 => \"i\",\n          \
    \  2 => \"ii\",\n            3 => \"iii\",\n            4 => \"iv\",\n       \
    \     5 => \"v\",\n            6 => \"vi\",\n            7 => \"vii\",\n     \
    \       8 => \"viii\",\n            9 => \"ix\",\n            _ => \"\",\n   \
    \     };\n        result = format!(\"{}{}\", roman_digit, result);\n        index\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpj7_tlykq.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        if num >= 1000 {\n            result.push_str(\"m\");\n     \
    \       num -= 1000;\n        } else if num >= 900 {\n            result.push_str(\"\
    cm\");\n            num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        if digit == 9 {\n            result.push_str(&MINI_ROMAN_DIGITS[i\
    \ + 1]);\n            result.push_str(&MINI_ROMAN_DIGITS[i]);\n        } else\
    \ if digit == 4 {\n            result.push_str(&MINI_ROMAN_DIGITS[i]);\n     \
    \       result.push_str(&MINI_ROMAN_DIGITS[i + 1]);\n        } else if digit >=\
    \ 5 {\n            result.push_str(&MINI_ROMAN_DIGITS[i + 1]);\n            for\
    \ _ in 0..digit - 5 {\n                result.push_str(&MINI_ROMAN_DIGITS[i]);\n\
    \            }\n        } else {\n            for _ in 0..digit {\n          \
    \      result.push_str(&MINI_ROMAN_DIGITS[i]);\n            }\n        }\n   \
    \     num /= 10;\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `MINI_ROMAN_DIGITS` in this scope\n  -->\
    \ /tmp/tmpk10l7cyz.rs:12:30\n   |\n12 |             result.push_str(&MINI_ROMAN_DIGITS[i\
    \ + 1]);\n   |                              ^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `MINI_ROMAN_DIGITS` in this scope\n\
    \  --> /tmp/tmpk10l7cyz.rs:13:30\n   |\n13 |             result.push_str(&MINI_ROMAN_DIGITS[i]);\n\
    \   |                              ^^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `MINI_ROMAN_DIGITS` in this scope\n  --> /tmp/tmpk10l7cyz.rs:15:30\n\
    \   |\n15 |             result.push_str(&MINI_ROMAN_DIGITS[i]);\n   |        \
    \                      ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `MINI_ROMAN_DIGITS` in this scope\n  --> /tmp/tmpk10l7cyz.rs:16:30\n\
    \   |\n16 |             result.push_str(&MINI_ROMAN_DIGITS[i + 1]);\n   |    \
    \                          ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `MINI_ROMAN_DIGITS` in this scope\n  --> /tmp/tmpk10l7cyz.rs:18:30\n\
    \   |\n18 |             result.push_str(&MINI_ROMAN_DIGITS[i + 1]);\n   |    \
    \                          ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `MINI_ROMAN_DIGITS` in this scope\n  --> /tmp/tmpk10l7cyz.rs:20:34\n\
    \   |\n20 |                 result.push_str(&MINI_ROMAN_DIGITS[i]);\n   |    \
    \                              ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `MINI_ROMAN_DIGITS` in this scope\n  --> /tmp/tmpk10l7cyz.rs:24:34\n\
    \   |\n24 |                 result.push_str(&MINI_ROMAN_DIGITS[i]);\n   |    \
    \                              ^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 7 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        result = format!(\"{}{}\", ROMAN_DIGITS[i][digit\
    \ as usize], result);\n        num /= 10;\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpplfa3jtz.rs:11:34\n\
    \   |\n11 |         result = format!(\"{}{}\", ROMAN_DIGITS[i][digit as usize],\
    \ result);\n   |                                  ^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    let symbols\
    \ = vec![\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"\
    ix\", \"v\", \"iv\", \"i\"];\n    let values = vec![1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1];\n    while num > 0 {\n        let count = num /\
    \ values[i];\n        num %= values[i];\n        result.push_str(&symbols[i].repeat(count\
    \ as usize));\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let symbols = vec![\n  \
    \      (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n       \
    \ (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"l\"\
    , 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n  \
    \      (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for\
    \ (symbol, value) in symbols {\n        while number >= value {\n            result.push_str(symbol);\n\
    \            number -= value;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    let roman_digit = match digit {\n            1 => \"i\",\n            2 =>\
    \ \"ii\",\n            3 => \"iii\",\n            4 => \"iv\",\n            5\
    \ => \"v\",\n            6 => \"vi\",\n            7 => \"vii\",\n           \
    \ 8 => \"viii\",\n            9 => \"ix\",\n            _ => \"\",\n        };\n\
    \        result = roman_digit.to_string() + &result;\n        i += 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpwelco0if.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let roman\
    \ = match digit {\n            1 => \"i\",\n            2 => \"ii\",\n       \
    \     3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\",\n     \
    \       6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\",\n\
    \            9 => \"ix\",\n            _ => \"\",\n        };\n        result\
    \ = format!(\"{}{}\", roman, result);\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpt90jsdy4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        if num >= 1000 {\n            result.push_str(\"m\");\n     \
    \       num -= 1000;\n        } else if num >= 900 {\n            result.push_str(\"\
    cm\");\n            num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        match digit\
    \ {\n            1 => result.insert_str(i, \"i\"),\n            2 => result.insert_str(i,\
    \ \"ii\"),\n            3 => result.insert_str(i, \"iii\"),\n            4 =>\
    \ result.insert_str(i, \"iv\"),\n            5 => result.insert_str(i, \"v\"),\n\
    \            6 => result.insert_str(i, \"vi\"),\n            7 => result.insert_str(i,\
    \ \"vii\"),\n            8 => result.insert_str(i, \"viii\"),\n            9 =>\
    \ result.insert_str(i, \"ix\"),\n            _ => (),\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmp_06mhajp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    result = match digit {\n            1 => format!(\"I{}\", result),\n    \
    \        2 => format!(\"II{}\", result),\n            3 => format!(\"III{}\",\
    \ result),\n            4 => format!(\"IV{}\", result),\n            5 => format!(\"\
    V{}\", result),\n            6 => format!(\"VI{}\", result),\n            7 =>\
    \ format!(\"VII{}\", result),\n            8 => format!(\"VIII{}\", result),\n\
    \            9 => format!(\"IX{}\", result),\n            _ => result,\n     \
    \   };\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"IIX\"`,\n right: `\"xix\"`', /tmp/tmppe4oni14.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut roman\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   roman.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        roman.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        roman.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        roman.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        roman.push_str(\"c\");\n        num -= 100;\n    }\n \
    \   if num >= 90 {\n        roman.push_str(\"xc\");\n        num -= 90;\n    }\n\
    \    if num >= 50 {\n        roman.push_str(\"l\");\n        num -= 50;\n    }\n\
    \    if num >= 40 {\n        roman.push_str(\"xl\");\n        num -= 40;\n   \
    \ }\n    while num >= 10 {\n        roman.push_str(\"x\");\n        num -= 10;\n\
    \    }\n    if num >= 9 {\n        roman.push_str(\"ix\");\n        num -= 9;\n\
    \    }\n    if num >= 5 {\n        roman.push_str(\"v\");\n        num -= 5;\n\
    \    }\n    if num >= 4 {\n        roman.push_str(\"iv\");\n        num -= 4;\n\
    \    }\n    while num >= 1 {\n        roman.push_str(\"i\");\n        num -= 1;\n\
    \    }\n    roman\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let symbols = vec![\n  \
    \      (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n       \
    \ (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"l\"\
    , 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n  \
    \      (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n    for\
    \ (symbol, value) in symbols {\n        while number >= value {\n            result.push_str(symbol);\n\
    \            number -= value;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut roman\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let q = num / mini_roman_numerals[i].0;\n        num = num %\
    \ mini_roman_numerals[i].0;\n        for _ in 0..q {\n            roman.push_str(mini_roman_numerals[i].1);\n\
    \        }\n        i += 1;\n    }\n    roman\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `mini_roman_numerals` in this scope\n \
    \ --> /tmp/tmp6roh7yzo.rs:10:23\n   |\n10 |         let q = num / mini_roman_numerals[i].0;\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `mini_roman_numerals` in this scope\n  --> /tmp/tmp6roh7yzo.rs:11:21\n\
    \   |\n11 |         num = num % mini_roman_numerals[i].0;\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `mini_roman_numerals` in this scope\n  --> /tmp/tmp6roh7yzo.rs:13:28\n\
    \   |\n13 |             roman.push_str(mini_roman_numerals[i].1);\n   |      \
    \                      ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    let mut roman = String::new();\n        if digit == 9 {\n            roman.push(ROMAN_DIGITS[i\
    \ + 1]);\n            roman.push(ROMAN_DIGITS[i]);\n        } else if digit ==\
    \ 4 {\n            roman.push(ROMAN_DIGITS[i + 1]);\n            roman.push(ROMAN_DIGITS[i\
    \ + 2]);\n        } else {\n            if digit >= 5 {\n                roman.push(ROMAN_DIGITS[i\
    \ + 1]);\n                digit -= 5;\n            }\n            for _ in 0..digit\
    \ {\n                roman.push(ROMAN_DIGITS[i + 2]);\n            }\n       \
    \ }\n        result = roman + &result;\n        i += 2;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpcemnhfj3.rs:14:24\n\
    \   |\n14 |             roman.push(ROMAN_DIGITS[i + 1]);\n   |               \
    \         ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpcemnhfj3.rs:15:24\n   |\n15 |  \
    \           roman.push(ROMAN_DIGITS[i]);\n   |                        ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `ROMAN_DIGITS` in\
    \ this scope\n  --> /tmp/tmpcemnhfj3.rs:17:24\n   |\n17 |             roman.push(ROMAN_DIGITS[i\
    \ + 1]);\n   |                        ^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpcemnhfj3.rs:18:24\n\
    \   |\n18 |             roman.push(ROMAN_DIGITS[i + 2]);\n   |               \
    \         ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpcemnhfj3.rs:21:28\n   |\n21 |  \
    \               roman.push(ROMAN_DIGITS[i + 1]);\n   |                       \
    \     ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpcemnhfj3.rs:25:28\n   |\n25 |  \
    \               roman.push(ROMAN_DIGITS[i + 2]);\n   |                       \
    \     ^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 6 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        match digit\
    \ {\n            1 => result.insert_str(i, \"i\"),\n            2 => result.insert_str(i,\
    \ \"ii\"),\n            3 => result.insert_str(i, \"iii\"),\n            4 =>\
    \ result.insert_str(i, \"iv\"),\n            5 => result.insert_str(i, \"v\"),\n\
    \            6 => result.insert_str(i, \"vi\"),\n            7 => result.insert_str(i,\
    \ \"vii\"),\n            8 => result.insert_str(i, \"viii\"),\n            9 =>\
    \ result.insert_str(i, \"ix\"),\n            _ => (),\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmp_06mhajp.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 1
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut remainder = number;\n    let mut i = 0;\n    while\
    \ remainder > 0 {\n        let digit = remainder % 10;\n        remainder /= 10;\n\
    \        result = match digit {\n            1 => format!(\"{}{}\", ROMAN_DIGITS[i][0],\
    \ result),\n            2 => format!(\"{}{}\", ROMAN_DIGITS[i][0], result),\n\
    \            3 => format!(\"{}{}\", ROMAN_DIGITS[i][0], result),\n           \
    \ 4 => format!(\"{}{}\", ROMAN_DIGITS[i][0], ROMAN_DIGITS[i][1]),\n          \
    \  5 => format!(\"{}\", ROMAN_DIGITS[i][1]),\n            6 => format!(\"{}{}\"\
    , ROMAN_DIGITS[i][1], ROMAN_DIGITS[i][0]),\n            7 => format!(\"{}{}\"\
    , ROMAN_DIGITS[i][1], ROMAN_DIGITS[i][0]),\n            8 => format!(\"{}{}\"\
    , ROMAN_DIGITS[i][1], ROMAN_DIGITS[i][0]),\n            9 => format!(\"{}{}\"\
    , ROMAN_DIGITS[i][0], ROMAN_DIGITS[i][2]),\n            _ => String::new(),\n\
    \        };\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpv059qoia.rs:13:34\n\
    \   |\n13 |             1 => format!(\"{}{}\", ROMAN_DIGITS[i][0], result),\n\
    \   |                                  ^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpv059qoia.rs:14:34\n\
    \   |\n14 |             2 => format!(\"{}{}\", ROMAN_DIGITS[i][0], result),\n\
    \   |                                  ^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpv059qoia.rs:15:34\n\
    \   |\n15 |             3 => format!(\"{}{}\", ROMAN_DIGITS[i][0], result),\n\
    \   |                                  ^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpv059qoia.rs:16:34\n\
    \   |\n16 |             4 => format!(\"{}{}\", ROMAN_DIGITS[i][0], ROMAN_DIGITS[i][1]),\n\
    \   |                                  ^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpv059qoia.rs:16:54\n\
    \   |\n16 |             4 => format!(\"{}{}\", ROMAN_DIGITS[i][0], ROMAN_DIGITS[i][1]),\n\
    \   |                                                      ^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n\
    \  --> /tmp/tmpv059qoia.rs:17:32\n   |\n17 |             5 => format!(\"{}\",\
    \ ROMAN_DIGITS[i][1]),\n   |                                ^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `ROMAN_DIGITS` in this scope\n\
    \  --> /tmp/tmpv059qoia.rs:18:34\n   |\n18 |             6 => format!(\"{}{}\"\
    , ROMAN_DIGITS[i][1], ROMAN_DIGITS[i][0]),\n   |                             \
    \     ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `ROMAN_DIGITS` in this scope\n  --> /tmp/tmpv059qoia.rs:18:54\n   |\n18 |  \
    \           6 => format!(\"{}{}\", ROMAN_DIGITS[i][1], ROMAN_DIGITS[i][0]),\n\
    \   |                                                      ^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `ROMAN_DIGIT"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        let digit = number % 10;\n        number /= 10;\n    \
    \    let roman = match digit {\n            1 => \"i\",\n            2 => \"ii\"\
    ,\n            3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\"\
    ,\n            6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\"\
    ,\n            9 => \"ix\",\n            _ => \"\",\n        };\n        result\
    \ = format!(\"{}{}\", roman, result);\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmph0fdtms9.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let roman\
    \ = match digit {\n            1 => \"i\",\n            2 => \"ii\",\n       \
    \     3 => \"iii\",\n            4 => \"iv\",\n            5 => \"v\",\n     \
    \       6 => \"vi\",\n            7 => \"vii\",\n            8 => \"viii\",\n\
    \            9 => \"ix\",\n            _ => \"\",\n        };\n        result\
    \ = format!(\"{}{}\", roman, result);\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"iix\"`,\n right: `\"xix\"`', /tmp/tmpt90jsdy4.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut i = 0;\n    while\
    \ number > 0 {\n        if number >= 1000 {\n            result.push_str(\"m\"\
    );\n            number -= 1000;\n        } else if number >= 900 {\n         \
    \   result.push_str(\"cm\");\n            number -= 900;\n        } else if number\
    \ >= 500 {\n            result.push_str(\"d\");\n            number -= 500;\n\
    \        } else if number >= 400 {\n            result.push_str(\"cd\");\n   \
    \         number -= 400;\n        } else if number >= 100 {\n            result.push_str(\"\
    c\");\n            number -= 100;\n        } else if number >= 90 {\n        \
    \    result.push_str(\"xc\");\n            number -= 90;\n        } else if number\
    \ >= 50 {\n            result.push_str(\"l\");\n            number -= 50;\n  \
    \      } else if number >= 40 {\n            result.push_str(\"xl\");\n      \
    \      number -= 40;\n        } else if number >= 10 {\n            result.push_str(\"\
    x\");\n            number -= 10;\n        } else if number >= 9 {\n          \
    \  result.push_str(\"ix\");\n            number -= 9;\n        } else if number\
    \ >= 5 {\n            result.push_str(\"v\");\n            number -= 5;\n    \
    \    } else if number >= 4 {\n            result.push_str(\"iv\");\n         \
    \   number -= 4;\n        } else if number >= 1 {\n            result.push_str(\"\
    i\");\n            number -= 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19),\
    \ String::from(\"xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"\
    ));\n    assert_eq!(candidate(251), String::from(\"ccli\"));\n    assert_eq!(candidate(426),\
    \ String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500), String::from(\"d\"\
    ));\n    assert_eq!(candidate(1), String::from(\"i\"));\n    assert_eq!(candidate(4),\
    \ String::from(\"iv\"));\n    assert_eq!(candidate(43), String::from(\"xliii\"\
    ));\n    assert_eq!(candidate(90), String::from(\"xc\"));\n    assert_eq!(candidate(94),\
    \ String::from(\"xciv\"));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"\
    ));\n    assert_eq!(candidate(900), String::from(\"cm\"));\n    assert_eq!(candidate(994),\
    \ String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000), String::from(\"\
    m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 101
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    let mut i = 0;\n    while num\
    \ > 0 {\n        let digit = num % 10;\n        num /= 10;\n        let mut roman_digit\
    \ = String::new();\n        match digit {\n            1 => roman_digit = \"i\"\
    .to_string(),\n            2 => roman_digit = \"ii\".to_string(),\n          \
    \  3 => roman_digit = \"iii\".to_string(),\n            4 => roman_digit = \"\
    iv\".to_string(),\n            5 => roman_digit = \"v\".to_string(),\n       \
    \     6 => roman_digit = \"vi\".to_string(),\n            7 => roman_digit = \"\
    vii\".to_string(),\n            8 => roman_digit = \"viii\".to_string(),\n   \
    \         9 => roman_digit = \"ix\".to_string(),\n            _ => (),\n     \
    \   }\n        match i {\n            0 => (),\n            1 => roman_digit =\
    \ roman_digit.replace(\"i\", \"x\"),\n            2 => roman_digit = roman_digit.replace(\"\
    i\", \"c\"),\n            3 => roman_digit = roman_digit.replace(\"i\", \"m\"\
    ),\n            _ => (),\n        }\n        result = roman_digit + &result;\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"cvii\"`,\n right: `\"clii\"`', /tmp/tmpw9fotfm0.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number >= 1000 {\n\
    \        result.push_str(\"m\");\n        number -= 1000;\n    }\n    if number\
    \ >= 900 {\n        result.push_str(\"cm\");\n        number -= 900;\n    }\n\
    \    if number >= 500 {\n        result.push_str(\"d\");\n        number -= 500;\n\
    \    }\n    if number >= 400 {\n        result.push_str(\"cd\");\n        number\
    \ -= 400;\n    }\n    while number >= 100 {\n        result.push_str(\"c\");\n\
    \        number -= 100;\n    }\n    if number >= 90 {\n        result.push_str(\"\
    xc\");\n        number -= 90;\n    }\n    if number >= 50 {\n        result.push_str(\"\
    l\");\n        number -= 50;\n    }\n    if number >= 40 {\n        result.push_str(\"\
    xl\");\n        number -= 40;\n    }\n    while number >= 10 {\n        result.push_str(\"\
    x\");\n        number -= 10;\n    }\n    if number >= 9 {\n        result.push_str(\"\
    ix\");\n        number -= 9;\n    }\n    if number >= 5 {\n        result.push_str(\"\
    v\");\n        number -= 5;\n    }\n    if number >= 4 {\n        result.push_str(\"\
    iv\");\n        number -= 4;\n    }\n    while number >= 1 {\n        result.push_str(\"\
    i\");\n        number -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut number\
    \ = number;\n    let mut result = String::new();\n    let mut roman_numerals =\
    \ vec![\n        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n\
    \        (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n      \
    \  (\"l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\"\
    , 9),\n        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ];\n\
    \n    while number > 0 {\n        for (roman, arabic) in roman_numerals.iter()\
    \ {\n            if number >= *arabic {\n                result.push_str(roman);\n\
    \                number -= *arabic;\n                break;\n            }\n \
    \       }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num > 0 {\n        if\
    \ num >= 1000 {\n            result.push_str(\"m\");\n            num -= 1000;\n\
    \        } else if num >= 900 {\n            result.push_str(\"cm\");\n      \
    \      num -= 900;\n        } else if num >= 500 {\n            result.push_str(\"\
    d\");\n            num -= 500;\n        } else if num >= 400 {\n            result.push_str(\"\
    cd\");\n            num -= 400;\n        } else if num >= 100 {\n            result.push_str(\"\
    c\");\n            num -= 100;\n        } else if num >= 90 {\n            result.push_str(\"\
    xc\");\n            num -= 90;\n        } else if num >= 50 {\n            result.push_str(\"\
    l\");\n            num -= 50;\n        } else if num >= 40 {\n            result.push_str(\"\
    xl\");\n            num -= 40;\n        } else if num >= 10 {\n            result.push_str(\"\
    x\");\n            num -= 10;\n        } else if num >= 9 {\n            result.push_str(\"\
    ix\");\n            num -= 9;\n        } else if num >= 5 {\n            result.push_str(\"\
    v\");\n            num -= 5;\n        } else if num >= 4 {\n            result.push_str(\"\
    iv\");\n            num -= 4;\n        } else if num >= 1 {\n            result.push_str(\"\
    i\");\n            num -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"\
    xix\"));\n    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut number = number;\n    while number > 0 {\n   \
    \     if number >= 1000 {\n            result.push_str(\"m\");\n            number\
    \ -= 1000;\n        } else if number >= 900 {\n            result.push_str(\"\
    cm\");\n            number -= 900;\n        } else if number >= 500 {\n      \
    \      result.push_str(\"d\");\n            number -= 500;\n        } else if\
    \ number >= 400 {\n            result.push_str(\"cd\");\n            number -=\
    \ 400;\n        } else if number >= 100 {\n            result.push_str(\"c\");\n\
    \            number -= 100;\n        } else if number >= 90 {\n            result.push_str(\"\
    xc\");\n            number -= 90;\n        } else if number >= 50 {\n        \
    \    result.push_str(\"l\");\n            number -= 50;\n        } else if number\
    \ >= 40 {\n            result.push_str(\"xl\");\n            number -= 40;\n \
    \       } else if number >= 10 {\n            result.push_str(\"x\");\n      \
    \      number -= 10;\n        } else if number >= 9 {\n            result.push_str(\"\
    ix\");\n            number -= 9;\n        } else if number >= 5 {\n          \
    \  result.push_str(\"v\");\n            number -= 5;\n        } else if number\
    \ >= 4 {\n            result.push_str(\"iv\");\n            number -= 4;\n   \
    \     } else if number >= 1 {\n            result.push_str(\"i\");\n         \
    \   number -= 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = int_to_mini_roman;\n    assert_eq!(candidate(19), String::from(\"xix\"));\n\
    \    assert_eq!(candidate(152), String::from(\"clii\"));\n    assert_eq!(candidate(251),\
    \ String::from(\"ccli\"));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"\
    ));\n    assert_eq!(candidate(500), String::from(\"d\"));\n    assert_eq!(candidate(1),\
    \ String::from(\"i\"));\n    assert_eq!(candidate(4), String::from(\"iv\"));\n\
    \    assert_eq!(candidate(43), String::from(\"xliii\"));\n    assert_eq!(candidate(90),\
    \ String::from(\"xc\"));\n    assert_eq!(candidate(94), String::from(\"xciv\"\
    ));\n    assert_eq!(candidate(532), String::from(\"dxxxii\"));\n    assert_eq!(candidate(900),\
    \ String::from(\"cm\"));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"\
    ));\n    assert_eq!(candidate(1000), String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
- exit_code: 0
  program: "/// Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
    /// Examples:\nfn int_to_mini_roman(number: isize) -> String {\n    let mut result\
    \ = String::new();\n    let mut num = number;\n    while num >= 1000 {\n     \
    \   result.push_str(\"m\");\n        num -= 1000;\n    }\n    if num >= 900 {\n\
    \        result.push_str(\"cm\");\n        num -= 900;\n    }\n    if num >= 500\
    \ {\n        result.push_str(\"d\");\n        num -= 500;\n    }\n    if num >=\
    \ 400 {\n        result.push_str(\"cd\");\n        num -= 400;\n    }\n    while\
    \ num >= 100 {\n        result.push_str(\"c\");\n        num -= 100;\n    }\n\
    \    if num >= 90 {\n        result.push_str(\"xc\");\n        num -= 90;\n  \
    \  }\n    if num >= 50 {\n        result.push_str(\"l\");\n        num -= 50;\n\
    \    }\n    if num >= 40 {\n        result.push_str(\"xl\");\n        num -= 40;\n\
    \    }\n    while num >= 10 {\n        result.push_str(\"x\");\n        num -=\
    \ 10;\n    }\n    if num >= 9 {\n        result.push_str(\"ix\");\n        num\
    \ -= 9;\n    }\n    if num >= 5 {\n        result.push_str(\"v\");\n        num\
    \ -= 5;\n    }\n    if num >= 4 {\n        result.push_str(\"iv\");\n        num\
    \ -= 4;\n    }\n    while num >= 1 {\n        result.push_str(\"i\");\n      \
    \  num -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = int_to_mini_roman;\n\
    \    assert_eq!(candidate(19), String::from(\"xix\"));\n    assert_eq!(candidate(152),\
    \ String::from(\"clii\"));\n    assert_eq!(candidate(251), String::from(\"ccli\"\
    ));\n    assert_eq!(candidate(426), String::from(\"cdxxvi\"));\n    assert_eq!(candidate(500),\
    \ String::from(\"d\"));\n    assert_eq!(candidate(1), String::from(\"i\"));\n\
    \    assert_eq!(candidate(4), String::from(\"iv\"));\n    assert_eq!(candidate(43),\
    \ String::from(\"xliii\"));\n    assert_eq!(candidate(90), String::from(\"xc\"\
    ));\n    assert_eq!(candidate(94), String::from(\"xciv\"));\n    assert_eq!(candidate(532),\
    \ String::from(\"dxxxii\"));\n    assert_eq!(candidate(900), String::from(\"cm\"\
    ));\n    assert_eq!(candidate(994), String::from(\"cmxciv\"));\n    assert_eq!(candidate(1000),\
    \ String::from(\"m\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805848
