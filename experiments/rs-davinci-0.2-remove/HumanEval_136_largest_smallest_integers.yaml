name: HumanEval_136_largest_smallest_integers
language: rs
prompt: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a list.\n/// If there is no negative or positive integers, return them as None.\n\
  /// Examples:\nfn largest_smallest_integers(lst: Vec<isize>) -> (Option<isize>,\
  \ Option<isize>) {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ['    unimplemented!()', "    let mut min = None;\n    let mut max =\
    \ None;\n    for i in lst {\n        if i > 0 {\n            if min.is_none()\
    \ || i < min.unwrap() {\n                min = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if max.is_none() || i > max.unwrap() {\n  \
    \              max = Some(i);\n            }\n        }\n    }\n    (max, min)",
  '    unimplemented!();', "    let mut min = None;\n    let mut max = None;\n   \
    \ for i in lst {\n        if i < 0 {\n            if let Some(x) = max {\n   \
    \             if i > x {\n                    max = Some(i);\n               \
    \ }\n            } else {\n                max = Some(i);\n            }\n   \
    \     } else {\n            if let Some(x) = min {\n                if i < x {\n\
    \                    min = Some(i);\n                }\n            } else {\n\
    \                min = Some(i);\n            }\n        }\n    }\n    (max, min)",
  "    let mut smallest_pos = None;\n    let mut largest_neg = None;\n    for i in\
    \ lst {\n        if i > 0 {\n            if smallest_pos.is_none() || i < smallest_pos.unwrap()\
    \ {\n                smallest_pos = Some(i);\n            }\n        } else if\
    \ i < 0 {\n            if largest_neg.is_none() || i > largest_neg.unwrap() {\n\
    \                largest_neg = Some(i);\n            }\n        }\n    }\n   \
    \ (largest_neg, smallest_pos)", "    let mut neg = None;\n    let mut pos = None;\n\
    \    for i in lst {\n        if i < 0 {\n            neg = Some(match neg {\n\
    \                Some(n) => if n > i { n } else { i },\n                None =>\
    \ i,\n            });\n        } else {\n            pos = Some(match pos {\n\
    \                Some(p) => if p < i { p } else { i },\n                None =>\
    \ i,\n            });\n        }\n    }\n    (neg, pos)", "    let mut neg: Option<isize>\
    \ = None;\n    let mut pos: Option<isize> = None;\n    for i in lst {\n      \
    \  if i < 0 {\n            if neg.is_none() || i > neg.unwrap() {\n          \
    \      neg = Some(i);\n            }\n        } else {\n            if pos.is_none()\
    \ || i < pos.unwrap() {\n                pos = Some(i);\n            }\n     \
    \   }\n    }\n    (neg, pos)", "    let mut min = None;\n    let mut max = None;\n\
    \    for i in lst {\n        if i > 0 {\n            if min.is_none() || i < min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        } else if i < 0 {\n\
    \            if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", "    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ let Some(x) = min {\n                if i < x {\n                    min = Some(i);\n\
    \                }\n            } else {\n                min = Some(i);\n   \
    \         }\n        } else {\n            if let Some(x) = max {\n          \
    \      if i > x {\n                    max = Some(i);\n                }\n   \
    \         } else {\n                max = Some(i);\n            }\n        }\n\
    \    }\n    (max, min)", '    unimplemented!()', '    unimplemented!()', "   \
    \ let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n \
    \       if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap() {\n\
    \                max_neg = Some(i);\n            }\n        } else if i > 0 {\n\
    \            if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)", "    let\
    \ mut largest_negative = None;\n    let mut smallest_positive = None;\n    for\
    \ i in lst {\n        if i < 0 {\n            if largest_negative.is_none() ||\
    \ i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut smallest = None;\n    let mut largest = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if smallest == None || i < smallest.unwrap()\
    \ {\n                smallest = Some(i);\n            }\n        } else if i <\
    \ 0 {\n            if largest == None || i > largest.unwrap() {\n            \
    \    largest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)",
  '    unimplemented!()', "    let mut min = None;\n    let mut max = None;\n    for\
    \ i in lst {\n        if i > 0 {\n            if let Some(n) = min {\n       \
    \         if i < n {\n                    min = Some(i);\n                }\n\
    \            } else {\n                min = Some(i);\n            }\n       \
    \ } else {\n            if let Some(n) = max {\n                if i > n {\n \
    \                   max = Some(i);\n                }\n            } else {\n\
    \                max = Some(i);\n            }\n        }\n    }\n    (max, min)",
  "    let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative == None {\n                largest_negative = Some(i);\n  \
    \          } else if i > largest_negative.unwrap() {\n                largest_negative\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest_positive\
    \ == None {\n                smallest_positive = Some(i);\n            } else\
    \ if i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut max_neg: Option<isize>\
    \ = None;\n    let mut min_pos: Option<isize> = None;\n    for i in lst {\n  \
    \      if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap() {\n\
    \                max_neg = Some(i);\n            }\n        } else if i > 0 {\n\
    \            if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)", "    let\
    \ mut min = None;\n    let mut max = None;\n    for i in lst {\n        if i >\
    \ 0 {\n            match min {\n                None => min = Some(i),\n     \
    \           Some(n) => {\n                    if i < n {\n                   \
    \     min = Some(i);\n                    }\n                }\n            }\n\
    \        } else {\n            match max {\n                None => max = Some(i),\n\
    \                Some(n) => {\n                    if i > n {\n              \
    \          max = Some(i);\n                    }\n                }\n        \
    \    }\n        }\n    }\n    (max, min)", "    let mut min = None;\n    let mut\
    \ max = None;\n    for i in lst {\n        if i > 0 {\n            if min.is_none()\
    \ || i < min.unwrap() {\n                min = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if max.is_none() || i > max.unwrap() {\n  \
    \              max = Some(i);\n            }\n        }\n    }\n    (max, min)",
  '    unimplemented!()', '    unimplemented!();', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', " \
    \   let mut neg_max = None;\n    let mut pos_min = None;\n    for i in lst {\n\
    \        if i < 0 {\n            neg_max = match neg_max {\n                None\
    \ => Some(i),\n                Some(n) => Some(if i > n { i } else { n }),\n \
    \           };\n        } else if i > 0 {\n            pos_min = match pos_min\
    \ {\n                None => Some(i),\n                Some(n) => Some(if i <\
    \ n { i } else { n }),\n            };\n        }\n    }\n    (neg_max, pos_min)",
  "    let mut largest_neg: Option<isize> = None;\n    let mut smallest_pos: Option<isize>\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_neg.is_none()\
    \ || i > largest_neg.unwrap() {\n                largest_neg = Some(i);\n    \
    \        }\n        } else if i > 0 {\n            if smallest_pos.is_none() ||\
    \ i < smallest_pos.unwrap() {\n                smallest_pos = Some(i);\n     \
    \       }\n        }\n    }\n    (largest_neg, smallest_pos)", '    unimplemented!()',
  "    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if largest.is_none() || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        } else {\n   \
    \         if smallest.is_none() || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        }\n    }\n    (largest, smallest)", "   \
    \ let mut largest_negative = None;\n    let mut smallest_positive = None;\n  \
    \  for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if largest.is_none() || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        } else {\n   \
    \         if smallest.is_none() || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        }\n    }\n    (largest, smallest)", '    unimplemented!();',
  "    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if i > 0 {\n            match smallest {\n                None => smallest\
    \ = Some(i),\n                Some(x) => {\n                    if i < x {\n \
    \                       smallest = Some(i);\n                    }\n         \
    \       }\n            }\n        } else {\n            match largest {\n    \
    \            None => largest = Some(i),\n                Some(x) => {\n      \
    \              if i > x {\n                        largest = Some(i);\n      \
    \              }\n                }\n            }\n        }\n    }\n    (largest,\
    \ smallest)", "    let mut min = None;\n    let mut max = None;\n    for i in\
    \ lst {\n        if i > 0 {\n            if let Some(x) = min {\n            \
    \    if i < x {\n                    min = Some(i);\n                }\n     \
    \       } else {\n                min = Some(i);\n            }\n        } else\
    \ {\n            if let Some(x) = max {\n                if i > x {\n        \
    \            max = Some(i);\n                }\n            } else {\n       \
    \         max = Some(i);\n            }\n        }\n    }\n    (max, min)", " \
    \   let mut neg = None;\n    let mut pos = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            neg = Some(match neg {\n                Some(n) => if\
    \ n > i { n } else { i },\n                None => i,\n            });\n     \
    \   } else {\n            pos = Some(match pos {\n                Some(p) => if\
    \ p < i { p } else { i },\n                None => i,\n            });\n     \
    \   }\n    }\n    (neg, pos)", '    unimplemented!()', "    let mut smallest =\
    \ None;\n    let mut largest = None;\n    for i in lst {\n        if i > 0 {\n\
    \            if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)", '    unimplemented!();',
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  '    unimplemented!()', "    let mut largest = None;\n    let mut smallest = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest.is_none() || largest.unwrap()\
    \ < i {\n                largest = Some(i);\n            }\n        } else {\n\
    \            if smallest.is_none() || smallest.unwrap() > i {\n              \
    \  smallest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", "    let mut min = None;\n    let mut max = None;\n\
    \    for i in lst {\n        if i > 0 {\n            if let Some(x) = min {\n\
    \                if i < x {\n                    min = Some(i);\n            \
    \    }\n            } else {\n                min = Some(i);\n            }\n\
    \        } else {\n            if let Some(x) = max {\n                if i >\
    \ x {\n                    max = Some(i);\n                }\n            } else\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if let Some(m) = max {\n                if i\
    \ > m {\n                    max = Some(i);\n                }\n            }\
    \ else {\n                max = Some(i);\n            }\n        } else {\n  \
    \          if let Some(m) = min {\n                if i < m {\n              \
    \      min = Some(i);\n                }\n            } else {\n             \
    \   min = Some(i);\n            }\n        }\n    }\n    (max, min)", '    unimplemented!()',
  "    let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative == None {\n                largest_negative = Some(i);\n  \
    \          } else if i > largest_negative.unwrap() {\n                largest_negative\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest_positive\
    \ == None {\n                smallest_positive = Some(i);\n            } else\
    \ if i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if largest.is_none() || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        } else {\n   \
    \         if smallest.is_none() || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        }\n    }\n    (largest, smallest)", "   \
    \ let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", '    unimplemented!()', "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i > 0 {\n           \
    \ if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut max_neg = None;\n    let mut min_pos = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if max_neg.is_none() || i\
    \ > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n  \
    \      } else if i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap()\
    \ {\n                min_pos = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", "    let mut largest = None;\n    let mut smallest = None;\n\
    \    for i in lst {\n        if i > 0 {\n            if smallest == None || i\
    \ < smallest.unwrap() {\n                smallest = Some(i);\n            }\n\
    \        } else if i < 0 {\n            if largest == None || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        }\n    }\n   \
    \ (largest, smallest)", '    unimplemented!();', "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut max = None;\n\
    \    let mut min = None;\n    for i in lst {\n        if i > 0 {\n           \
    \ if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n\
    \        if i > 0 {\n            min = match min {\n                None => Some(i),\n\
    \                Some(m) => Some(if i < m { i } else { m }),\n            };\n\
    \        } else if i < 0 {\n            max = match max {\n                None\
    \ => Some(i),\n                Some(m) => Some(if i > m { i } else { m }),\n \
    \           };\n        }\n    }\n    (max, min)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i > 0 {\n           \
    \ if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if min.is_none() || i < min.unwrap() {\n    \
    \            min = Some(i);\n            }\n        } else if i < 0 {\n      \
    \      if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n      \
    \      if smallest == None || i < smallest.unwrap() {\n                smallest\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if largest\
    \ == None || i > largest.unwrap() {\n                largest = Some(i);\n    \
    \        }\n        }\n    }\n    (largest, smallest)", '    unimplemented!();',
  '    unimplemented!()', "    let mut max_neg = None;\n    let mut min_pos = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if max_neg.is_none() || i\
    \ > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n  \
    \      } else if i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap()\
    \ {\n                min_pos = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", "    let mut max = None;\n    let mut min = None;\n   \
    \ for i in lst {\n        if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        } else {\n       \
    \     if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut neg = None;\n\
    \    let mut pos = None;\n    for i in lst {\n        match i {\n            i\
    \ if i < 0 => {\n                if neg.is_none() || i > neg.unwrap() {\n    \
    \                neg = Some(i);\n                }\n            }\n          \
    \  i if i > 0 => {\n                if pos.is_none() || i < pos.unwrap() {\n \
    \                   pos = Some(i);\n                }\n            }\n       \
    \     _ => (),\n        }\n    }\n    (neg, pos)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i > 0 {\n           \
    \ if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if min.is_none() || i < min.unwrap() {\n    \
    \            min = Some(i);\n            }\n        } else if i < 0 {\n      \
    \      if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i > 0 {\n           \
    \ if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if min.is_none() || i < min.unwrap() {\n    \
    \            min = Some(i);\n            }\n        } else if i < 0 {\n      \
    \      if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i < 0 {\n           \
    \ if min.is_none() || i > min.unwrap() {\n                min = Some(i);\n   \
    \         }\n        } else {\n            if max.is_none() || i < max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (min,\
    \ max)", "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if min.is_none() || i < min.unwrap() {\n    \
    \            min = Some(i);\n            }\n        } else if i < 0 {\n      \
    \      if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut min_pos = None;\n\
    \    let mut max_neg = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if let Some(n) = min_pos {\n                if i < n {\n               \
    \     min_pos = Some(i);\n                }\n            } else {\n          \
    \      min_pos = Some(i);\n            }\n        } else {\n            if let\
    \ Some(n) = max_neg {\n                if i > n {\n                    max_neg\
    \ = Some(i);\n                }\n            } else {\n                max_neg\
    \ = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)", "    let\
    \ mut min = None;\n    let mut max = None;\n    for i in lst {\n        if i <\
    \ 0 {\n            if let Some(x) = max {\n                if i > x {\n      \
    \              max = Some(i);\n                }\n            } else {\n     \
    \           max = Some(i);\n            }\n        } else {\n            if let\
    \ Some(x) = min {\n                if i < x {\n                    min = Some(i);\n\
    \                }\n            } else {\n                min = Some(i);\n   \
    \         }\n        }\n    }\n    (max, min)", '    unimplemented!()', "    let\
    \ mut min = None;\n    let mut max = None;\n    for i in lst {\n        if i <\
    \ 0 {\n            if max.is_none() || i > max.unwrap() {\n                max\
    \ = Some(i);\n            }\n        } else {\n            if min.is_none() ||\
    \ i < min.unwrap() {\n                min = Some(i);\n            }\n        }\n\
    \    }\n    (max, min)", "    let mut min = None;\n    let mut max = None;\n \
    \   for i in lst {\n        if i > 0 {\n            min = match min {\n      \
    \          None => Some(i),\n                Some(x) => Some(if i < x { i } else\
    \ { x }),\n            };\n        } else if i < 0 {\n            max = match\
    \ max {\n                None => Some(i),\n                Some(x) => Some(if\
    \ i > x { i } else { x }),\n            };\n        }\n    }\n    (max, min)",
  '    unimplemented!()', '    unimplemented!();', "    let mut max_neg = None;\n\
    \    let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if min_pos.is_none()\
    \ || i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", '    unimplemented!()', '    unimplemented!();',
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if let Some(x) = min {\n                if i < x {\n  \
    \                  min = Some(i);\n                }\n            } else {\n \
    \               min = Some(i);\n            }\n        } else {\n            if\
    \ let Some(x) = max {\n                if i > x {\n                    max = Some(i);\n\
    \                }\n            } else {\n                max = Some(i);\n   \
    \         }\n        }\n    }\n    (max, min)", "    let mut min = None;\n   \
    \ let mut max = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ let Some(x) = max {\n                if i > x {\n                    max = Some(i);\n\
    \                }\n            } else {\n                max = Some(i);\n   \
    \         }\n        } else {\n            if let Some(x) = min {\n          \
    \      if i < x {\n                    min = Some(i);\n                }\n   \
    \         } else {\n                min = Some(i);\n            }\n        }\n\
    \    }\n    (max, min)", "    let mut smallest = None;\n    let mut largest =\
    \ None;\n    for i in lst {\n        if i > 0 {\n            if smallest == None\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        } else if i < 0 {\n            if largest == None || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        }\n    }\n   \
    \ (largest, smallest)", "    let mut min = None;\n    let mut max = None;\n  \
    \  for i in lst {\n        if i < 0 {\n            if min.is_none() || i > min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        } else {\n       \
    \     if max.is_none() || i < max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (min, max)", '    unimplemented!()', " \
    \   let mut min = None;\n    let mut max = None;\n    for i in lst {\n       \
    \ if i > 0 {\n            if min.is_none() || i < min.unwrap() {\n           \
    \     min = Some(i);\n            }\n        } else if i < 0 {\n            if\
    \ max.is_none() || i > max.unwrap() {\n                max = Some(i);\n      \
    \      }\n        }\n    }\n    (max, min)", "    let mut min = None;\n    let\
    \ mut max = None;\n    for i in lst {\n        if i > 0 {\n            if let\
    \ Some(x) = min {\n                if i < x {\n                    min = Some(i);\n\
    \                }\n            } else {\n                min = Some(i);\n   \
    \         }\n        } else {\n            if let Some(x) = max {\n          \
    \      if i > x {\n                    max = Some(i);\n                }\n   \
    \         } else {\n                max = Some(i);\n            }\n        }\n\
    \    }\n    (max, min)", '    unimplemented!();', "    let mut min_pos = None;\n\
    \    let mut max_neg = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if max_neg.is_none()\
    \ || i > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", "    let mut min = None;\n    let\
    \ mut max = None;\n    for i in lst {\n        if i > 0 {\n            if min.is_none()\
    \ || i < min.unwrap() {\n                min = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if max.is_none() || i > max.unwrap() {\n  \
    \              max = Some(i);\n            }\n        }\n    }\n    (max, min)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", "    let mut largest_negative = None;\n    let\
    \ mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n    \
    \        if largest_negative.is_none() || i > largest_negative.unwrap() {\n  \
    \              largest_negative = Some(i);\n            }\n        } else if i\
    \ > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i < 0 {\n           \
    \ if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n   \
    \         }\n        } else {\n            if min.is_none() || i < min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if min.is_none() || i < min.unwrap() {\n    \
    \            min = Some(i);\n            }\n        } else if i < 0 {\n      \
    \      if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut min_pos = None;\n\
    \    let mut max_neg = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if max_neg.is_none()\
    \ || i > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", "    let mut min = None;\n    let\
    \ mut max = None;\n    for i in lst {\n        if i > 0 {\n            if min.is_none()\
    \ || i < min.unwrap() {\n                min = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if max.is_none() || i > max.unwrap() {\n  \
    \              max = Some(i);\n            }\n        }\n    }\n    (max, min)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", "    let mut min = None;\n    let mut max = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if let Some(x) = max {\n\
    \                if i > x {\n                    max = Some(i);\n            \
    \    }\n            } else {\n                max = Some(i);\n            }\n\
    \        } else {\n            if let Some(x) = min {\n                if i <\
    \ x {\n                    min = Some(i);\n                }\n            } else\
    \ {\n                min = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", "    let mut min = None;\n    let mut max = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        } else {\n       \
    \     if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i < 0 {\n           \
    \ if min.is_none() || i > min.unwrap() {\n                min = Some(i);\n   \
    \         }\n        } else {\n            if max.is_none() || i < max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (min,\
    \ max)", '    unimplemented!();', "    let mut largest = None;\n    let mut smallest\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest.is_none()\
    \ || i > largest.unwrap() {\n                largest = Some(i);\n            }\n\
    \        } else {\n            if smallest.is_none() || i < smallest.unwrap()\
    \ {\n                smallest = Some(i);\n            }\n        }\n    }\n  \
    \  (largest, smallest)", '    unimplemented!()', "    let mut min = None;\n  \
    \  let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", '    unimplemented!()', "    let mut min = None;\n    let mut max = None;\n\
    \    for i in lst {\n        if i > 0 {\n            if let Some(x) = min {\n\
    \                if i < x {\n                    min = Some(i);\n            \
    \    }\n            } else {\n                min = Some(i);\n            }\n\
    \        } else {\n            if let Some(x) = max {\n                if i >\
    \ x {\n                    max = Some(i);\n                }\n            } else\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if min.is_none() || i < min.unwrap() {\n    \
    \            min = Some(i);\n            }\n        } else if i < 0 {\n      \
    \      if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut smallest = None;\n\
    \    let mut largest = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", "    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", '    unimplemented!()', "    let mut min = None;\n    let mut max = None;\n\
    \    for i in lst {\n        if i > 0 {\n            min = match min {\n     \
    \           None => Some(i),\n                Some(x) => Some(if i < x { i } else\
    \ { x }),\n            };\n        } else if i < 0 {\n            max = match\
    \ max {\n                None => Some(i),\n                Some(x) => Some(if\
    \ i > x { i } else { x }),\n            };\n        }\n    }\n    (max, min)",
  '    unimplemented!();', "    let mut neg_max: Option<isize> = None;\n    let mut\
    \ pos_min: Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n   \
    \         if neg_max.is_none() || i > neg_max.unwrap() {\n                neg_max\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if pos_min.is_none()\
    \ || i < pos_min.unwrap() {\n                pos_min = Some(i);\n            }\n\
    \        }\n    }\n    (neg_max, pos_min)", "    let mut min = None;\n    let\
    \ mut max = None;\n    for i in lst {\n        if i > 0 {\n            if min.is_none()\
    \ || i < min.unwrap() {\n                min = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if max.is_none() || i > max.unwrap() {\n  \
    \              max = Some(i);\n            }\n        }\n    }\n    (max, min)",
  '    unimplemented!()', "    let mut neg = None;\n    let mut pos = None;\n    for\
    \ i in lst {\n        if i < 0 {\n            neg = Some(match neg {\n       \
    \         Some(n) => if n > i { n } else { i },\n                None => i,\n\
    \            });\n        } else {\n            pos = Some(match pos {\n     \
    \           Some(p) => if p < i { p } else { i },\n                None => i,\n\
    \            });\n        }\n    }\n    (neg, pos)", "    let mut min_pos = None;\n\
    \    let mut max_neg = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        } else if i < 0 {\n            if max_neg.is_none()\
    \ || i > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", "    let mut max_neg = None;\n   \
    \ let mut min_pos = None;\n    for i in lst {\n        if i < 0 {\n          \
    \  if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if min_pos.is_none() ||\
    \ i < min_pos.unwrap() {\n                min_pos = Some(i);\n            }\n\
    \        }\n    }\n    (max_neg, min_pos)", "    let mut largest_negative = None;\n\
    \    let mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n\
    \            if largest_negative.is_none() || i > largest_negative.unwrap() {\n\
    \                largest_negative = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i < 0 {\n           \
    \ if let Some(x) = max {\n                if i > x {\n                    max\
    \ = Some(i);\n                }\n            } else {\n                max = Some(i);\n\
    \            }\n        } else {\n            if let Some(x) = min {\n       \
    \         if i < x {\n                    min = Some(i);\n                }\n\
    \            } else {\n                min = Some(i);\n            }\n       \
    \ }\n    }\n    (max, min)", "    let mut largest_negative = None;\n    let mut\
    \ smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n        \
    \    largest_negative = match largest_negative {\n                None => Some(i),\n\
    \                Some(x) => Some(if i > x { i } else { x }),\n            };\n\
    \        } else if i > 0 {\n            smallest_positive = match smallest_positive\
    \ {\n                None => Some(i),\n                Some(x) => Some(if i <\
    \ x { i } else { x }),\n            };\n        }\n    }\n    (largest_negative,\
    \ smallest_positive)", "    let mut min: Option<isize> = None;\n    let mut max:\
    \ Option<isize> = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ let Some(m) = min {\n                if i < m {\n                    min = Some(i);\n\
    \                }\n            } else {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if let Some(m) = max {\n \
    \               if i > m {\n                    max = Some(i);\n             \
    \   }\n            } else {\n                max = Some(i);\n            }\n \
    \       }\n    }\n    (max, min)", "    let mut largest = None;\n    let mut smallest\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest.is_none()\
    \ || i > largest.unwrap() {\n                largest = Some(i);\n            }\n\
    \        } else {\n            if smallest.is_none() || i < smallest.unwrap()\
    \ {\n                smallest = Some(i);\n            }\n        }\n    }\n  \
    \  (largest, smallest)", '    unimplemented!();', "    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", '    unimplemented!()', "  \
    \  let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", "    let mut largest = None;\n    let mut smallest\
    \ = None;\n    for i in lst {\n        if i > 0 {\n            if smallest ==\
    \ None || i < smallest.unwrap() {\n                smallest = Some(i);\n     \
    \       }\n        } else if i < 0 {\n            if largest == None || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        }\n    }\n   \
    \ (largest, smallest)", "    let mut min = None;\n    let mut max = None;\n  \
    \  for i in lst {\n        if i > 0 {\n            if let Some(x) = min {\n  \
    \              if i < x {\n                    min = Some(i);\n              \
    \  }\n            } else {\n                min = Some(i);\n            }\n  \
    \      } else {\n            if let Some(x) = max {\n                if i > x\
    \ {\n                    max = Some(i);\n                }\n            } else\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if min.is_none() || i > min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else {\n            if max.is_none()\
    \ || i < max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (min, max)", "    let mut smallest = None;\n    let mut largest\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest.is_none()\
    \ || largest.unwrap() < i {\n                largest = Some(i);\n            }\n\
    \        } else {\n            if smallest.is_none() || smallest.unwrap() > i\
    \ {\n                smallest = Some(i);\n            }\n        }\n    }\n  \
    \  (largest, smallest)", "    let mut min = None;\n    let mut max = None;\n \
    \   for i in lst {\n        if i > 0 {\n            if let Some(v) = min {\n \
    \               if i < v {\n                    min = Some(i);\n             \
    \   }\n            } else {\n                min = Some(i);\n            }\n \
    \       } else {\n            if let Some(v) = max {\n                if i > v\
    \ {\n                    max = Some(i);\n                }\n            } else\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if let Some(x) = min {\n                if i\
    \ < x {\n                    min = Some(i);\n                }\n            }\
    \ else {\n                min = Some(i);\n            }\n        } else {\n  \
    \          if let Some(x) = max {\n                if i > x {\n              \
    \      max = Some(i);\n                }\n            } else {\n             \
    \   max = Some(i);\n            }\n        }\n    }\n    (max, min)", '    unimplemented!()',
  "    let mut neg = None;\n    let mut pos = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            neg = Some(match neg {\n                Some(n) => std::cmp::max(n,\
    \ i),\n                None => i,\n            });\n        } else {\n       \
    \     pos = Some(match pos {\n                Some(p) => std::cmp::min(p, i),\n\
    \                None => i,\n            });\n        }\n    }\n    (neg, pos)",
  "    let mut neg_max = None;\n    let mut pos_min = None;\n    for i in lst {\n\
    \        if i < 0 {\n            neg_max = Some(match neg_max {\n            \
    \    Some(n) => if n > i { n } else { i },\n                None => i,\n     \
    \       });\n        } else {\n            pos_min = Some(match pos_min {\n  \
    \              Some(n) => if n < i { n } else { i },\n                None =>\
    \ i,\n            });\n        }\n    }\n    (neg_max, pos_min)", "    let mut\
    \ min = None;\n    let mut max = None;\n    for i in lst {\n        if i > 0 {\n\
    \            if let Some(m) = min {\n                if i < m {\n            \
    \        min = Some(i);\n                }\n            } else {\n           \
    \     min = Some(i);\n            }\n        } else {\n            if let Some(m)\
    \ = max {\n                if i > m {\n                    max = Some(i);\n  \
    \              }\n            } else {\n                max = Some(i);\n     \
    \       }\n        }\n    }\n    (max, min)", "    let mut max = None;\n    let\
    \ mut min = None;\n    for i in lst {\n        if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   } else {\n            if min.is_none() || i < min.unwrap() {\n           \
    \     min = Some(i);\n            }\n        }\n    }\n    (max, min)", "    let\
    \ mut smallest = None;\n    let mut largest = None;\n    for i in lst {\n    \
    \    if i > 0 {\n            smallest = match smallest {\n                None\
    \ => Some(i),\n                Some(x) => Some(if i < x { i } else { x }),\n \
    \           };\n        } else if i < 0 {\n            largest = match largest\
    \ {\n                None => Some(i),\n                Some(x) => Some(if i >\
    \ x { i } else { x }),\n            };\n        }\n    }\n    (largest, smallest)",
  '    unimplemented!();', '    unimplemented!()', '    unimplemented!()', "    let\
    \ mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n    \
    \    if i > 0 {\n            if smallest == None || i < smallest.unwrap() {\n\
    \                smallest = Some(i);\n            }\n        } else if i < 0 {\n\
    \            if largest == None || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        }\n    }\n    (largest, smallest)", "   \
    \ let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", "    let mut largest_negative = None;\n    let\
    \ mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n    \
    \        if largest_negative.is_none() || i > largest_negative.unwrap() {\n  \
    \              largest_negative = Some(i);\n            }\n        } else if i\
    \ > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut neg = None;\n\
    \    let mut pos = None;\n    for i in lst {\n        if i < 0 {\n           \
    \ if neg.is_none() || i > neg.unwrap() {\n                neg = Some(i);\n   \
    \         }\n        } else {\n            if pos.is_none() || i < pos.unwrap()\
    \ {\n                pos = Some(i);\n            }\n        }\n    }\n    (neg,\
    \ pos)", "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i\
    \ in lst {\n        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  "    let mut neg_max: Option<isize> = None;\n    let mut pos_min: Option<isize>\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            match neg_max {\n\
    \                None => neg_max = Some(i),\n                Some(x) => if i >\
    \ x { neg_max = Some(i) },\n            }\n        } else {\n            match\
    \ pos_min {\n                None => pos_min = Some(i),\n                Some(x)\
    \ => if i < x { pos_min = Some(i) },\n            }\n        }\n    }\n    (neg_max,\
    \ pos_min)", "    let mut min = None;\n    let mut max = None;\n    for i in lst\
    \ {\n        if i > 0 {\n            if min.is_none() || i < min.unwrap() {\n\
    \                min = Some(i);\n            }\n        } else if i < 0 {\n  \
    \          if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", '    unimplemented!();', '    unimplemented!()',
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min == None || i < min.unwrap() {\n                min\
    \ = Some(i);\n            }\n        } else {\n            if max == None || i\
    \ > max.unwrap() {\n                max = Some(i);\n            }\n        }\n\
    \    }\n    (max, min)", "    let mut min = None;\n    let mut max = None;\n \
    \   for i in lst {\n        if i > 0 {\n            if let Some(x) = min {\n \
    \               if i < x {\n                    min = Some(i);\n             \
    \   }\n            } else {\n                min = Some(i);\n            }\n \
    \       } else {\n            if let Some(x) = max {\n                if i > x\
    \ {\n                    max = Some(i);\n                }\n            } else\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", '    unimplemented!()', "    let mut largest_negative: Option<isize>\
    \ = None;\n    let mut smallest_positive: Option<isize> = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            if largest_negative == None {\n     \
    \           largest_negative = Some(i);\n            } else if i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive == None {\n                smallest_positive\
    \ = Some(i);\n            } else if i < smallest_positive.unwrap() {\n       \
    \         smallest_positive = Some(i);\n            }\n        }\n    }\n    (largest_negative,\
    \ smallest_positive)", "    let mut min_pos = None;\n    let mut max_neg = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if max_neg.is_none() || i\
    \ > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n  \
    \      } else {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n\
    \                min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg,\
    \ min_pos)", '    unimplemented!();', "    let mut min = None;\n    let mut max\
    \ = None;\n    for i in lst {\n        if i > 0 {\n            if let Some(m)\
    \ = min {\n                if i < m {\n                    min = Some(i);\n  \
    \              }\n            } else {\n                min = Some(i);\n     \
    \       }\n        } else {\n            if let Some(m) = max {\n            \
    \    if i > m {\n                    max = Some(i);\n                }\n     \
    \       } else {\n                max = Some(i);\n            }\n        }\n \
    \   }\n    (max, min)", '    unimplemented!()', "    let mut max = None;\n   \
    \ let mut min = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", '    unimplemented!()', "    let mut largest = None;\n    let mut smallest\
    \ = None;\n    for i in lst {\n        if i > 0 {\n            if smallest ==\
    \ None || i < smallest.unwrap() {\n                smallest = Some(i);\n     \
    \       }\n        } else if i < 0 {\n            if largest == None || i > largest.unwrap()\
    \ {\n                largest = Some(i);\n            }\n        }\n    }\n   \
    \ (largest, smallest)", '    unimplemented!()', "    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", "    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ let Some(v) = min {\n                if i < v {\n                    min = Some(i);\n\
    \                }\n            } else {\n                min = Some(i);\n   \
    \         }\n        } else {\n            if let Some(v) = max {\n          \
    \      if i > v {\n                    max = Some(i);\n                }\n   \
    \         } else {\n                max = Some(i);\n            }\n        }\n\
    \    }\n    (max, min)", "    let mut max = None;\n    let mut min = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        } else {\n       \
    \     if min.is_none() || i < min.unwrap() {\n                min = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i < 0 {\n           \
    \ if let Some(x) = max {\n                if i > x {\n                    max\
    \ = Some(i);\n                }\n            } else {\n                max = Some(i);\n\
    \            }\n        } else {\n            if let Some(x) = min {\n       \
    \         if i < x {\n                    min = Some(i);\n                }\n\
    \            } else {\n                min = Some(i);\n            }\n       \
    \ }\n    }\n    (max, min)", "    let mut min_pos = None;\n    let mut max_neg\
    \ = None;\n    for i in lst {\n        if i > 0 {\n            if let Some(x)\
    \ = min_pos {\n                if i < x {\n                    min_pos = Some(i);\n\
    \                }\n            } else {\n                min_pos = Some(i);\n\
    \            }\n        } else {\n            if let Some(x) = max_neg {\n   \
    \             if i > x {\n                    max_neg = Some(i);\n           \
    \     }\n            } else {\n                max_neg = Some(i);\n          \
    \  }\n        }\n    }\n    (max_neg, min_pos)", "    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", "    let mut max = None;\n \
    \   let mut min = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ max.is_none() || i > max.unwrap() {\n                max = Some(i);\n      \
    \      }\n        } else {\n            if min.is_none() || i < min.unwrap() {\n\
    \                min = Some(i);\n            }\n        }\n    }\n    (max, min)",
  '    unimplemented!()', "    let mut min = None;\n    let mut max = None;\n    for\
    \ i in lst {\n        if i > 0 {\n            if min.is_none() || i < min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        } else if i < 0 {\n\
    \            if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (max, min)", '    unimplemented!()', " \
    \   let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for n in lst {\n        if n < 0 {\n            if largest_negative.is_none()\
    \ || n > largest_negative.unwrap() {\n                largest_negative = Some(n);\n\
    \            }\n        } else if n > 0 {\n            if smallest_positive.is_none()\
    \ || n < smallest_positive.unwrap() {\n                smallest_positive = Some(n);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min == None || i < min.unwrap() {\n                min\
    \ = Some(i);\n            }\n        } else {\n            if max == None || i\
    \ > max.unwrap() {\n                max = Some(i);\n            }\n        }\n\
    \    }\n    (max, min)", "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if let Some(x) = min {\n                if i < x {\n  \
    \                  min = Some(i);\n                }\n            } else {\n \
    \               min = Some(i);\n            }\n        } else {\n            if\
    \ let Some(x) = max {\n                if i > x {\n                    max = Some(i);\n\
    \                }\n            } else {\n                max = Some(i);\n   \
    \         }\n        }\n    }\n    (max, min)", "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            largest_negative = match largest_negative {\n      \
    \          None => Some(i),\n                Some(x) => Some(if i > x { i } else\
    \ { x }),\n            };\n        } else if i > 0 {\n            smallest_positive\
    \ = match smallest_positive {\n                None => Some(i),\n            \
    \    Some(x) => Some(if i < x { i } else { x }),\n            };\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!();', '    unimplemented!()',
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", "    let mut min = None;\n    let mut max = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if min.is_none() || i > min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        } else {\n       \
    \     if max.is_none() || i < max.unwrap() {\n                max = Some(i);\n\
    \            }\n        }\n    }\n    (min, max)", "    let mut min = None;\n\
    \    let mut max = None;\n    for i in lst {\n        if i < 0 {\n           \
    \ if max.is_none() || i > max.unwrap() {\n                max = Some(i);\n   \
    \         }\n        } else {\n            if min.is_none() || i < min.unwrap()\
    \ {\n                min = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", "    let mut neg = None;\n    let mut pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if neg.is_none() || i > neg.unwrap() {\n    \
    \            neg = Some(i);\n            }\n        } else {\n            if pos.is_none()\
    \ || i < pos.unwrap() {\n                pos = Some(i);\n            }\n     \
    \   }\n    }\n    (neg, pos)", '    unimplemented!()', '    unimplemented!();']
stop_tokens:
- "\n}"
