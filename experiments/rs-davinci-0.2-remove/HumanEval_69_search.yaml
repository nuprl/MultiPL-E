name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the list.\n/// If no such a value exist, return -1.\n///\
  \ Examples:\nfn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut m = std::collections::HashMap::new();\n    for i in lst {\n        let count\
    \ = m.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut res = -1;\n\
    \    for (k, v) in m {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut freq = vec![0; lst.len()];\n    for\
    \ i in 0..lst.len() {\n        freq[lst[i] as usize] += 1;\n    }\n    for i in\
    \ (1..freq.len()).rev() {\n        if freq[i] >= i as isize {\n            return\
    \ i as isize;\n        }\n    }\n    -1", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut count = 0;\n    let mut max = 0;\n    let mut map = HashMap::new();\n\
    \    for i in lst {\n        if i > max {\n            max = i;\n        }\n \
    \       let counter = map.entry(i).or_insert(0);\n        *counter += 1;\n   \
    \ }\n    for i in 1..=max {\n        if let Some(x) = map.get(&i) {\n        \
    \    if *x >= i {\n                count = i;\n            }\n        }\n    }\n\
    \    if count == 0 {\n        -1\n    } else {\n        count\n    }", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n\
    \        if i > 0 && i <= lst.len() as isize {\n            freq[(i - 1) as usize]\
    \ += 1;\n        }\n    }\n    for i in 0..lst.len() {\n        if freq[i] >=\
    \ i as isize + 1 {\n            return i as isize + 1;\n        }\n    }\n   \
    \ -1", "    let mut m = std::collections::HashMap::new();\n    for i in lst {\n\
    \        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in m {\n        if k <= v && k > res {\n            res = k;\n      \
    \  }\n    }\n    res", "    let mut freq = vec![0; lst.len()];\n    for i in lst\
    \ {\n        freq[i as usize] += 1;\n    }\n    for i in (1..freq.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut freq = vec![0; lst.len()];\n    for i in\
    \ 0..lst.len() {\n        freq[lst[i] as usize] += 1;\n    }\n    for i in (1..freq.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut m = std::collections::HashMap::new();\n\
    \    for i in lst {\n        let c = m.entry(i).or_insert(0);\n        *c += 1;\n\
    \    }\n    let mut max = -1;\n    for (k, v) in m.iter() {\n        if *k <=\
    \ *v && *k > max {\n            max = *k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n  \
    \  for i in lst {\n        if i <= *freq.get(&i).unwrap() {\n            return\
    \ i;\n        }\n    }\n    -1", "    let mut counts = HashMap::new();\n    for\
    \ n in lst {\n        let count = counts.entry(n).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (n, count) in counts {\n      \
    \  if n <= count && n > max {\n            max = n;\n        }\n    }\n    max",
  "    let mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (k, v) in map\
    \ {\n        if k <= v && k > result {\n            result = k;\n        }\n \
    \   }\n    result", "    let mut freq = vec![0; lst.len()];\n    for i in lst\
    \ {\n        if i > 0 && i <= lst.len() as isize {\n            freq[(i - 1) as\
    \ usize] += 1;\n        }\n    }\n    for i in 0..freq.len() {\n        if freq[i]\
    \ >= i as isize + 1 {\n            return i as isize + 1;\n        }\n    }\n\
    \    -1", "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n      \
    \  freq[i as usize] += 1;\n    }\n    for i in (1..freq.len()).rev() {\n     \
    \   if freq[i] >= i as isize {\n            return i as isize;\n        }\n  \
    \  }\n    -1", "    let mut m = std::collections::HashMap::new();\n    for i in\
    \ lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in m {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = vec![0; lst.len()];\n    for\
    \ &x in &lst {\n        if x > 0 && x <= lst.len() as isize {\n            freq[(x\
    \ - 1) as usize] += 1;\n        }\n    }\n    for (i, &f) in freq.iter().enumerate()\
    \ {\n        if f >= i as isize + 1 {\n            return i as isize + 1;\n  \
    \      }\n    }\n    -1", "    let mut freq = vec![0; *lst.iter().max().unwrap()\
    \ as usize + 1];\n    for i in lst {\n        freq[i as usize] += 1;\n    }\n\
    \    for i in (1..freq.len()).rev() {\n        if freq[i] >= i as isize {\n  \
    \          return i as isize;\n        }\n    }\n    -1", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    for (k, v) in map.iter() {\n        if *k <= *v {\n      \
    \      return *k;\n        }\n    }\n    -1", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = 0;\n    for (k, v) in freq {\n        if k > max && k <= v {\n   \
    \         max = k;\n        }\n    }\n    if max == 0 {\n        -1\n    } else\
    \ {\n        max\n    }", "    let mut freq = vec![0; lst.len()];\n    for i in\
    \ lst {\n        freq[i as usize] += 1;\n    }\n    for i in (1..freq.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut counts = HashMap::new();\n    for i in lst\
    \ {\n        let count = counts.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if k <= v &&\
    \ k > max {\n            max = k;\n        }\n    }\n    max", "    let mut map\
    \ = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut m = std::collections::HashMap::new();\n    for i in lst {\n       \
    \ *m.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for (k, v)\
    \ in m {\n        if k <= v && k > res {\n            res = k;\n        }\n  \
    \  }\n    res", "    let mut freq: HashMap<isize, isize> = HashMap::new();\n \
    \   for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n  \
    \          max = k;\n        }\n    }\n    max", "    let mut freq = vec![0; lst.len()];\n\
    \    for i in lst {\n        if i > 0 && i <= lst.len() as isize {\n         \
    \   freq[(i - 1) as usize] += 1;\n        }\n    }\n    for i in 0..freq.len()\
    \ {\n        if freq[i] >= i as isize + 1 {\n            return i as isize + 1;\n\
    \        }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    for i in (1..lst.len()\
    \ as isize + 1).rev() {\n        if let Some(f) = freq.get(&i) {\n           \
    \ if *f >= i {\n                return i;\n            }\n        }\n    }\n \
    \   -1", "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n       \
    \ if i > 0 && i <= lst.len() as isize {\n            freq[(i - 1) as usize] +=\
    \ 1;\n        }\n    }\n    for i in 0..lst.len() {\n        if freq[i] >= i as\
    \ isize + 1 {\n            return i as isize + 1;\n        }\n    }\n    -1",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut m = std::collections::HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut r = -1;\n    for (k, v) in m {\n        if k <= v\
    \ && k > r {\n            r = k;\n        }\n    }\n    r", "    let mut freq\
    \ = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 && i <= lst.len()\
    \ as isize {\n            freq[(i - 1) as usize] += 1;\n        }\n    }\n   \
    \ for i in (0..lst.len()).rev() {\n        if freq[i] >= i as isize + 1 {\n  \
    \          return i as isize + 1;\n        }\n    }\n    -1", "    let mut map\
    \ = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut m = std::collections::HashMap::new();\n    for\
    \ i in lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut max =\
    \ -1;\n    for (k, v) in m {\n        if k <= v && k > max {\n            max\
    \ = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for\
    \ i in lst {\n        let count = freq.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (&k, &v) in &counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut freq: Vec<isize> = vec![0; lst.len()];\n    for i in lst\
    \ {\n        freq[i as usize] += 1;\n    }\n    for i in (1..freq.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = vec![0; lst.len()];\n    for\
    \ i in lst {\n        if i > 0 && i <= lst.len() as isize {\n            freq[(i\
    \ - 1) as usize] += 1;\n        }\n    }\n    for i in 0..lst.len() {\n      \
    \  if freq[i] >= i as isize + 1 {\n            return i as isize + 1;\n      \
    \  }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if key <=\
    \ val && key > max {\n            max = key;\n        }\n    }\n    max", "  \
    \  let mut freq = vec![0; lst.len()];\n    for i in 0..lst.len() {\n        freq[lst[i]\
    \ as usize] += 1;\n    }\n    for i in (1..freq.len()).rev() {\n        if freq[i]\
    \ >= i as isize {\n            return i as isize;\n        }\n    }\n    -1",
  "    let mut cnt = vec![0; lst.len()];\n    for i in lst {\n        cnt[i as usize]\
    \ += 1;\n    }\n    for i in (1..cnt.len()).rev() {\n        if cnt[i] >= i as\
    \ isize {\n            return i as isize;\n        }\n    }\n    -1", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 &&\
    \ i <= lst.len() as isize {\n            freq[(i - 1) as usize] += 1;\n      \
    \  }\n    }\n    for i in 0..lst.len() {\n        if freq[i] >= i as isize + 1\
    \ {\n            return i as isize + 1;\n        }\n    }\n    -1", "    let mut\
    \ freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq {\n      \
    \  if key <= value && key > max {\n            max = key;\n        }\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..lst.len() as isize + 1).rev() {\n        if let\
    \ Some(f) = freq.get(&i) {\n            if *f >= i {\n                return i;\n\
    \            }\n        }\n    }\n    -1", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts\
    \ {\n        if k <= v && k > max {\n            max = k;\n        }\n    }\n\
    \    max", "    let mut m = std::collections::HashMap::new();\n    for i in lst\
    \ {\n        let c = m.entry(i).or_insert(0);\n        *c += 1;\n    }\n    for\
    \ i in (1..lst.len() as isize + 1).rev() {\n        if let Some(c) = m.get(&i)\
    \ {\n            if *c >= i {\n                return i;\n            }\n    \
    \    }\n    }\n    -1", "    let mut freq = vec![0; lst.len()];\n    for i in\
    \ lst {\n        freq[i as usize] += 1;\n    }\n    for i in (1..freq.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for item in lst\
    \ {\n        *freq.entry(item).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k <= v &&\
    \ k > res {\n            res = k;\n        }\n    }\n    res", "    let mut freq\
    \ = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize] += 1;\n\
    \    }\n    for i in (1..freq.len()).rev() {\n        if freq[i] >= i as isize\
    \ {\n            return i as isize;\n        }\n    }\n    -1", "    let mut map\
    \ = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > res {\n            res = k;\n        }\n    }\n    res",
  "    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        if map.contains_key(&i) {\n            *map.get_mut(&i).unwrap() += 1;\n\
    \        } else {\n            map.insert(i, 1);\n        }\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in map {\n        if k <= v && k > max {\n       \
    \     max = k;\n        }\n    }\n    max", "    let mut freq = vec![0; lst.len()];\n\
    \    for i in lst {\n        if i > 0 && i <= lst.len() as isize {\n         \
    \   freq[(i - 1) as usize] += 1;\n        }\n    }\n    for i in 0..freq.len()\
    \ {\n        if freq[i] >= i as isize + 1 {\n            return i as isize + 1;\n\
    \        }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map.iter() {\n      \
    \  if *k <= *v && *k > max {\n            max = *k;\n        }\n    }\n    max",
  "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize]\
    \ += 1;\n    }\n    for i in (1..lst.len()).rev() {\n        if freq[i] >= i {\n\
    \            return i as isize;\n        }\n    }\n    -1", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k > v\
    \ && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ v >= k && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = vec![0; lst.len()];\n    for\
    \ i in lst {\n        freq[i as usize] += 1;\n    }\n    for i in (1..freq.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut freq = vec![0; lst.len()];\n    for i in\
    \ lst {\n        if i > 0 && i <= lst.len() as isize {\n            freq[(i -\
    \ 1) as usize] += 1;\n        }\n    }\n    for i in 0..lst.len() {\n        if\
    \ freq[i] >= i as isize + 1 {\n            return i as isize + 1;\n        }\n\
    \    }\n    -1", "    let mut m = std::collections::HashMap::new();\n    for i\
    \ in lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in m {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut map: HashMap<isize, isize> = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map.iter() {\n      \
    \  if *k <= *v && *k > max {\n            max = *k;\n        }\n    }\n    max",
  "    let mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > res {\n            res = k;\n        }\n    }\n    res",
  "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 &&\
    \ i <= lst.len() as isize {\n            freq[(i - 1) as usize] += 1;\n      \
    \  }\n    }\n    for i in 0..lst.len() {\n        if freq[i] >= i as isize + 1\
    \ {\n            return i as isize + 1;\n        }\n    }\n    -1", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (i, count) in counts\
    \ {\n        if i <= count && i > max {\n            max = i;\n        }\n   \
    \ }\n    max", "    let mut counts = HashMap::new();\n    for i in lst {\n   \
    \     let count = counts.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (key, value) in counts {\n        if key <= value\
    \ && key > max {\n            max = key;\n        }\n    }\n    max", "    let\
    \ mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res = -1;\n    for (key, val) in freq\
    \ {\n        if key <= val && key > res {\n            res = key;\n        }\n\
    \    }\n    res", "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n\
    \        if i > 0 && i <= lst.len() as isize {\n            freq[(i - 1) as usize]\
    \ += 1;\n        }\n    }\n    for i in 0..lst.len() {\n        if freq[i] >=\
    \ i as isize + 1 {\n            return i as isize + 1;\n        }\n    }\n   \
    \ -1", "    let mut m = std::collections::HashMap::new();\n    for i in lst {\n\
    \        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in m {\n        if k <= v && k > max {\n            max = k;\n      \
    \  }\n    }\n    max", "    let mut freq = vec![0; lst.len()];\n    for i in lst\
    \ {\n        freq[i as usize] += 1;\n    }\n    for i in (1..lst.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (key, val) in freq {\n        if key <= val && key > max {\n        \
    \    max = key;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut res = -1;\n    for (k, v) in freq {\n        if k > v && k > res {\n   \
    \         res = k;\n        }\n    }\n    res", "    let mut map: HashMap<isize,\
    \ isize> = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in map\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n\
    \        freq[i as usize] += 1;\n    }\n    for i in (1..freq.len()).rev() {\n\
    \        if freq[i] >= i as isize {\n            return i as isize;\n        }\n\
    \    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst {\n   \
    \     let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n \
    \   let mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k > max\
    \ {\n            max = k;\n        }\n    }\n    max", "    let mut map = HashMap::new();\n\
    \    for i in lst {\n        *map.entry(i).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for (key, value) in map {\n        if key <= value && key\
    \ > max {\n            max = key;\n        }\n    }\n    max", "    let mut map\
    \ = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq {\n        if\
    \ val >= key && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize]\
    \ += 1;\n    }\n    for i in (1..lst.len()).rev() {\n        if freq[i] >= i as\
    \ isize {\n            return i as isize;\n        }\n    }\n    -1", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    for i in (1..lst.len() as isize + 1).rev() {\n        if freq.get(&i).unwrap_or(&0)\
    \ >= &i {\n            return i;\n        }\n    }\n    -1", "    let mut freq\
    \ = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize] += 1;\n\
    \    }\n    for i in (1..freq.len()).rev() {\n        if freq[i] >= i as isize\
    \ {\n            return i as isize;\n        }\n    }\n    -1", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n  \
    \      let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (key, value) in freq {\n        if key <= value\
    \ && key > max {\n            max = key;\n        }\n    }\n    max", "    let\
    \ mut freq = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize]\
    \ += 1;\n    }\n    for i in (1..lst.len()).rev() {\n        if freq[i] >= i as\
    \ isize {\n            return i as isize;\n        }\n    }\n    -1", "    let\
    \ mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut res = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > res {\n            res = k;\n        }\n    }\n    res",
  "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 &&\
    \ i < lst.len() as isize {\n            freq[i as usize] += 1;\n        }\n  \
    \  }\n    for (i, &f) in freq.iter().enumerate() {\n        if f >= i as isize\
    \ {\n            return i as isize;\n        }\n    }\n    -1", "    let mut map\
    \ = HashMap::new();\n    for i in lst {\n        *map.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (key, value) in map {\n        if\
    \ key <= value && key > max {\n            max = key;\n        }\n    }\n    max",
  "    let mut frequency = vec![0; lst.len()];\n    for i in lst {\n        if i >\
    \ 0 && i <= lst.len() as isize {\n            frequency[(i - 1) as usize] += 1;\n\
    \        }\n    }\n    for i in 0..lst.len() {\n        if frequency[i] >= i as\
    \ isize + 1 {\n            return i as isize + 1;\n        }\n    }\n    -1",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        *freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 && i <=\
    \ lst.len() as isize {\n            freq[(i - 1) as usize] += 1;\n        }\n\
    \    }\n    for i in 0..lst.len() {\n        if freq[i] >= i as isize + 1 {\n\
    \            return i as isize + 1;\n        }\n    }\n    -1", "    let mut freq\
    \ = vec![0; lst.len()];\n    for i in lst {\n        if i as usize < lst.len()\
    \ {\n            freq[i as usize] += 1;\n        }\n    }\n    for i in (1..lst.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut counts = HashMap::new();\n    for i in lst\
    \ {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in counts {\n        if k <= v && k > max {\n            max =\
    \ k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for\
    \ i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for (k, v) in freq {\n        if k <= v && k > max {\n          \
    \  max = k;\n        }\n    }\n    max", "    let mut m = std::collections::HashMap::new();\n\
    \    for i in lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    for (k,\
    \ v) in m.iter() {\n        if k <= v {\n            return *k;\n        }\n \
    \   }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (key, value) in freq {\n        if key <= value && key > max {\n           \
    \ max = key;\n        }\n    }\n    max", "    let mut lst = lst;\n    lst.sort();\n\
    \    let mut max = -1;\n    let mut count = 0;\n    let mut prev = lst[0];\n \
    \   for i in lst {\n        if i == prev {\n            count += 1;\n        }\
    \ else {\n            if count >= prev && prev > max {\n                max =\
    \ prev;\n            }\n            count = 1;\n            prev = i;\n      \
    \  }\n    }\n    if count >= prev && prev > max {\n        max = prev;\n    }\n\
    \    max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = vec![0; lst.len()];\n    for i in 0..lst.len() {\n        freq[lst[i]\
    \ as usize] += 1;\n    }\n    for i in (1..freq.len()).rev() {\n        if freq[i]\
    \ >= i as isize {\n            return i as isize;\n        }\n    }\n    -1",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let counter = freq.entry(i).or_insert(0);\n\
    \        *counter += 1;\n    }\n    let mut result = -1;\n    for (k, v) in freq\
    \ {\n        if k <= v && k > result {\n            result = k;\n        }\n \
    \   }\n    result", "    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut ans = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > ans {\n            ans = k;\n\
    \        }\n    }\n    ans", "    let mut counts = HashMap::new();\n    for i\
    \ in lst {\n        *counts.entry(i).or_insert(0) += 1;\n    }\n    let mut keys:\
    \ Vec<isize> = counts.keys().map(|&x| x).collect();\n    keys.sort();\n    for\
    \ i in keys.iter().rev() {\n        if *i <= counts[i] {\n            return *i;\n\
    \        }\n    }\n    -1", "    let mut freq = HashMap::new();\n    for i in\
    \ lst {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n\
    \    }\n    let mut max = -1;\n    for (key, val) in freq.iter() {\n        if\
    \ *key <= *val && *key > max {\n            max = *key;\n        }\n    }\n  \
    \  max", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k > v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, val) in map.iter()\
    \ {\n        if *key <= *val && *key > max {\n            max = *key;\n      \
    \  }\n    }\n    max", "    let mut freq = HashMap::new();\n    for i in lst {\n\
    \        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n   \
    \ for (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n\
    \        }\n    }\n    res", "    let mut freq = vec![0; lst.len()];\n    for\
    \ i in lst {\n        if i > 0 && i <= lst.len() as isize {\n            freq[(i\
    \ - 1) as usize] += 1;\n        }\n    }\n    for i in (0..lst.len()).rev() {\n\
    \        if freq[i] >= i as isize + 1 {\n            return i as isize + 1;\n\
    \        }\n    }\n    -1", "    let mut m = std::collections::HashMap::new();\n\
    \    for x in lst {\n        let c = m.entry(x).or_insert(0);\n        *c += 1;\n\
    \    }\n    let mut max = -1;\n    for (k, v) in m.iter() {\n        if *k <=\
    \ *v && *k > max {\n            max = *k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n   \
    \     }\n    }\n    res", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for &x in\
    \ &lst {\n        *freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max =\
    \ -1;\n    for (&x, &f) in &freq {\n        if x > f && x > max {\n          \
    \  max = x;\n        }\n    }\n    max", "    let mut hm = HashMap::new();\n \
    \   for i in lst {\n        let count = hm.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in hm {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (key, val) in freq {\n        if\
    \ key <= val && key > res {\n            res = key;\n        }\n    }\n    res",
  "    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (key, value) in map {\n        if key <= value\
    \ && key > max {\n            max = key;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut m = std::collections::HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut r = -1;\n    for (k, v) in m {\n        if k <= v\
    \ && k > r {\n            r = k;\n        }\n    }\n    r", "    let mut lst =\
    \ lst;\n    lst.sort();\n    let mut count = 1;\n    let mut max = 0;\n    for\
    \ i in 1..lst.len() {\n        if lst[i] == lst[i - 1] {\n            count +=\
    \ 1;\n        } else {\n            if count >= lst[i - 1] && lst[i - 1] > max\
    \ {\n                max = lst[i - 1];\n            }\n            count = 1;\n\
    \        }\n    }\n    if count >= lst[lst.len() - 1] && lst[lst.len() - 1] >\
    \ max {\n        max = lst[lst.len() - 1];\n    }\n    if max == 0 {\n       \
    \ -1\n    } else {\n        max\n    }", "    let mut freq = vec![0; lst.len()];\n\
    \    for i in lst {\n        freq[i as usize] += 1;\n    }\n    for i in (1..lst.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut result = -1;\n    let mut map = HashMap::new();\n\
    \    for i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    for (key, value) in map {\n        if key <= value && key\
    \ > result {\n            result = key;\n        }\n    }\n    result", "    let\
    \ mut m = std::collections::HashMap::new();\n    for i in lst {\n        let c\
    \ = m.entry(i).or_insert(0);\n        *c += 1;\n    }\n    for i in (1..lst.len()\
    \ as isize + 1).rev() {\n        if let Some(c) = m.get(&i) {\n            if\
    \ *c >= i {\n                return i;\n            }\n        }\n    }\n    -1",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut counts = HashMap::new();\n    for i in lst {\n        *counts.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n        if\
    \ k <= v && k > max {\n            max = k;\n        }\n    }\n    max", "   \
    \ let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize]\
    \ += 1;\n    }\n    for i in (1..freq.len()).rev() {\n        if freq[i] >= i\
    \ as isize {\n            return i as isize;\n        }\n    }\n    -1", "   \
    \ let mut freq = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize]\
    \ += 1;\n    }\n    for i in (1..freq.len()).rev() {\n        if freq[i] >= i\
    \ as isize {\n            return i as isize;\n        }\n    }\n    -1", "   \
    \ let mut freq = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 &&\
    \ i <= lst.len() as isize {\n            freq[(i - 1) as usize] += 1;\n      \
    \  }\n    }\n    for i in 0..freq.len() {\n        if freq[i] >= i as isize +\
    \ 1 {\n            return i as isize + 1;\n        }\n    }\n    -1", "    let\
    \ mut freq = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 && i <=\
    \ lst.len() as isize {\n            freq[(i - 1) as usize] += 1;\n        }\n\
    \    }\n    for i in 0..lst.len() {\n        if freq[i] >= i as isize + 1 {\n\
    \            return i as isize + 1;\n        }\n    }\n    -1", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n\
    \        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n\
    \    let mut max = -1;\n    for (k, v) in freq.iter() {\n        if *k <= *v &&\
    \ *k > max {\n            max = *k;\n        }\n    }\n    max", "    let mut\
    \ counts = HashMap::new();\n    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut result = -1;\n    for (key, value) in\
    \ counts {\n        if key <= value && key > result {\n            result = key;\n\
    \        }\n    }\n    result", "    let mut m = std::collections::HashMap::new();\n\
    \    for i in lst {\n        *m.entry(i).or_insert(0) += 1;\n    }\n    let mut\
    \ r = -1;\n    for (k, v) in m {\n        if k <= v && k > r {\n            r\
    \ = k;\n        }\n    }\n    r", "    let mut map = HashMap::new();\n    for\
    \ i in lst {\n        let count = map.entry(i).or_insert(0);\n        *count +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n        if k <= v\
    \ && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ freq = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 && i <= lst.len()\
    \ as isize {\n            freq[(i - 1) as usize] += 1;\n        }\n    }\n   \
    \ for i in 0..lst.len() {\n        if freq[i] >= i as isize + 1 {\n          \
    \  return i as isize + 1;\n        }\n    }\n    -1", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in counts {\n \
    \       if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 &&\
    \ i <= lst.len() as isize {\n            freq[(i - 1) as usize] += 1;\n      \
    \  }\n    }\n    for i in 0..lst.len() {\n        if freq[i] >= i as isize + 1\
    \ {\n            return i as isize + 1;\n        }\n    }\n    -1", "    let mut\
    \ freq = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize] +=\
    \ 1;\n    }\n    for i in (1..lst.len()).rev() {\n        if freq[i] >= i as isize\
    \ {\n            return i as isize;\n        }\n    }\n    -1", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0) +=\
    \ 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <=\
    \ v && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        let\
    \ count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in map.iter() {\n        if *k <= *v && *k > max {\n\
    \            max = *k;\n        }\n    }\n    max", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut result = -1;\n    for (k, v) in counts {\n\
    \        if k <= v && k > result {\n            result = k;\n        }\n    }\n\
    \    result", "    let mut freq = HashMap::new();\n    for i in lst {\n      \
    \  *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for (k,\
    \ v) in freq {\n        if k <= v && k > res {\n            res = k;\n       \
    \ }\n    }\n    res", "    let mut cnt = vec![0; lst.len()];\n    for x in lst\
    \ {\n        cnt[x as usize] += 1;\n    }\n    for i in (1..lst.len()).rev() {\n\
    \        if cnt[i] >= i as isize {\n            return i as isize;\n        }\n\
    \    }\n    -1", "    let mut map = HashMap::new();\n    for i in lst {\n    \
    \    let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n   \
    \ let mut max = -1;\n    for (key, val) in map.iter() {\n        if *key <= *val\
    \ && *key > max {\n            max = *key;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > max {\n            max = k;\n   \
    \     }\n    }\n    max", "    let mut cnt = vec![0; lst.len()];\n    for i in\
    \ lst {\n        cnt[i as usize] += 1;\n    }\n    for i in (1..cnt.len()).rev()\
    \ {\n        if cnt[i] >= i as isize {\n            return i as isize;\n     \
    \   }\n    }\n    -1", "    let mut freq = vec![0; lst.len()];\n    for i in lst\
    \ {\n        freq[i as usize] += 1;\n    }\n    for i in (1..lst.len()).rev()\
    \ {\n        if freq[i] >= i as isize {\n            return i as isize;\n    \
    \    }\n    }\n    -1", "    let mut m = std::collections::HashMap::new();\n \
    \   for i in lst {\n        let count = m.entry(i).or_insert(0);\n        *count\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m.iter() {\n        if\
    \ *k <= *v && *k > max {\n            max = *k;\n        }\n    }\n    max", " \
    \   let mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    for i in 1.. {\n        if let Some(count) =\
    \ freq.get(&i) {\n            if *count >= i {\n                return i;\n  \
    \          }\n        } else {\n            return -1;\n        }\n    }\n   \
    \ -1", "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq: HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n    \
    \    *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut max = 0;\n    for (k,\
    \ v) in freq.iter() {\n        if *k > *v && *k > max {\n            max = *k;\n\
    \        }\n    }\n    if max == 0 {\n        -1\n    } else {\n        max\n\
    \    }", "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n       \
    \ freq[i as usize] += 1;\n    }\n    for i in (1..freq.len()).rev() {\n      \
    \  if freq[i] >= i as isize {\n            return i as isize;\n        }\n   \
    \ }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst {\n      \
    \  *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for (k,\
    \ v) in freq {\n        if k <= v && k > res {\n            res = k;\n       \
    \ }\n    }\n    res", "    let mut freq = vec![0; lst.len()];\n    for i in lst\
    \ {\n        if i > 0 && i <= lst.len() as isize {\n            freq[(i - 1) as\
    \ usize] += 1;\n        }\n    }\n    for i in 0..freq.len() {\n        if freq[i]\
    \ >= i as isize + 1 {\n            return i as isize + 1;\n        }\n    }\n\
    \    -1", "    let mut map = HashMap::new();\n    for i in lst {\n        let\
    \ count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut\
    \ max = -1;\n    for (k, v) in map {\n        if k <= v && k > max {\n       \
    \     max = k;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n       \
    \ *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n     \
    \   if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let entry = freq.entry(i).or_insert(0);\n\
    \        *entry += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut m = std::collections::HashMap::new();\n    for i in lst {\n       \
    \ *m.entry(i).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    for (k, v)\
    \ in m {\n        if k <= v && k > max {\n            max = k;\n        }\n  \
    \  }\n    max", "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n\
    \        freq[i as usize] += 1;\n    }\n    for i in (1..freq.len()).rev() {\n\
    \        if freq[i] >= i as isize {\n            return i as isize;\n        }\n\
    \    }\n    -1", "    let mut map = HashMap::new();\n    for i in lst {\n    \
    \    let count = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n   \
    \ let mut max = -1;\n    for (key, value) in map {\n        if key <= value &&\
    \ key > max {\n            max = key;\n        }\n    }\n    max", "    let mut\
    \ m = std::collections::HashMap::new();\n    for i in lst {\n        *m.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in m {\n        if k > v\
    \ && k > max {\n            max = k;\n        }\n    }\n    max", "    let mut\
    \ map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut count = HashMap::new();\n    for i in lst {\n        *count.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in count {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut map = HashMap::new();\n    for i in lst {\n        let count = map.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in map {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut m = std::collections::HashMap::new();\n    for i in lst {\n       \
    \ let c = m.entry(i).or_insert(0);\n        *c += 1;\n    }\n    let mut r = -1;\n\
    \    for (k, v) in m {\n        if v >= k && k > r {\n            r = k;\n   \
    \     }\n    }\n    r", "    let mut map = HashMap::new();\n    for i in lst {\n\
    \        *map.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in map {\n        if k <= v && k > res {\n            res = k;\n    \
    \    }\n    }\n    res", "    let mut freq = HashMap::new();\n    for i in lst\
    \ {\n        let count = freq.entry(i).or_insert(0);\n        *count += 1;\n \
    \   }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k <= v && k\
    \ > max {\n            max = k;\n        }\n    }\n    max", "    let mut freq\
    \ = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n\
    \        if k <= v && k > max {\n            max = k;\n        }\n    }\n    max",
  "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n        freq[i as usize]\
    \ += 1;\n    }\n    for i in (1..lst.len()).rev() {\n        if freq[i] >= i as\
    \ isize {\n            return i as isize;\n        }\n    }\n    -1", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > max {\n            max = k;\n        }\n    }\n    max", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    for i in (1..lst.len() + 1).rev() {\n      \
    \  if let Some(count) = freq.get(&i) {\n            if *count >= i {\n       \
    \         return i;\n            }\n        }\n    }\n    -1", "    let mut map:\
    \ HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        let count\
    \ = map.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let mut res =\
    \ -1;\n    for (k, v) in map {\n        if k <= v && k > res {\n            res\
    \ = k;\n        }\n    }\n    res", "    let mut freq = vec![0; lst.len()];\n\
    \    for i in lst {\n        if i < lst.len() as isize {\n            freq[i as\
    \ usize] += 1;\n        }\n    }\n    for i in (1..lst.len()).rev() {\n      \
    \  if freq[i] >= i as isize {\n            return i as isize;\n        }\n   \
    \ }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst {\n      \
    \  let count = freq.entry(i).or_insert(0);\n        *count += 1;\n    }\n    let\
    \ mut max = -1;\n    for (key, val) in freq {\n        if key <= val && key >\
    \ max {\n            max = key;\n        }\n    }\n    max", "    let mut freq:\
    \ HashMap<isize, isize> = HashMap::new();\n    for i in lst {\n        *freq.entry(i).or_insert(0)\
    \ += 1;\n    }\n    let mut res = -1;\n    for (k, v) in freq {\n        if k\
    \ <= v && k > res {\n            res = k;\n        }\n    }\n    res", "    let\
    \ mut freq = vec![0; lst.len()];\n    for i in lst {\n        if i as usize <\
    \ lst.len() {\n            freq[i as usize] += 1;\n        }\n    }\n    for i\
    \ in (1..freq.len()).rev() {\n        if freq[i] >= i as isize {\n           \
    \ return i as isize;\n        }\n    }\n    -1", "    let mut counts = HashMap::new();\n\
    \    for i in lst {\n        let count = counts.entry(i).or_insert(0);\n     \
    \   *count += 1;\n    }\n    let mut result = -1;\n    for (k, v) in counts {\n\
    \        if k <= v && k > result {\n            result = k;\n        }\n    }\n\
    \    result", "    let mut freq = vec![0; lst.len()];\n    for i in lst {\n  \
    \      freq[i as usize] += 1;\n    }\n    for i in (1..lst.len()).rev() {\n  \
    \      if freq[i] >= i as isize {\n            return i as isize;\n        }\n\
    \    }\n    -1", "    let mut freq = HashMap::new();\n    for i in lst {\n   \
    \     *freq.entry(i).or_insert(0) += 1;\n    }\n    let mut res = -1;\n    for\
    \ (k, v) in freq {\n        if k <= v && k > res {\n            res = k;\n   \
    \     }\n    }\n    res", "    let mut freq = vec![0; lst.len()];\n    for i in\
    \ lst {\n        if i > 0 && i <= lst.len() as isize {\n            freq[(i -\
    \ 1) as usize] += 1;\n        }\n    }\n    for i in (0..lst.len()).rev() {\n\
    \        if freq[i] >= i as isize + 1 {\n            return i as isize + 1;\n\
    \        }\n    }\n    -1", "    let mut map = HashMap::new();\n    for i in lst\
    \ {\n        let count = map.entry(i).or_insert(0);\n        *count += 1;\n  \
    \  }\n    let mut max = -1;\n    for (key, value) in map {\n        if key <=\
    \ value && key > max {\n            max = key;\n        }\n    }\n    max", " \
    \   let mut freq = vec![0; lst.len()];\n    for i in lst {\n        if i > 0 &&\
    \ i <= lst.len() as isize {\n            freq[(i - 1) as usize] += 1;\n      \
    \  }\n    }\n    for i in (0..lst.len()).rev() {\n        if freq[i] >= i as isize\
    \ + 1 {\n            return i as isize + 1;\n        }\n    }\n    -1", "    let\
    \ mut freq = HashMap::new();\n    for i in lst {\n        let count = freq.entry(i).or_insert(0);\n\
    \        *count += 1;\n    }\n    let mut max = -1;\n    for (key, value) in freq\
    \ {\n        if key <= value && key > max {\n            max = key;\n        }\n\
    \    }\n    max"]
stop_tokens:
- "\n}"
