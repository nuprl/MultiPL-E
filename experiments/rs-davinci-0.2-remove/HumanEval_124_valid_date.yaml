name: HumanEval_124_valid_date
language: rs
prompt: "/// You have to write a function which validates a given date string and\n\
  /// returns True if the date is valid otherwise False.\n/// The date is valid if\
  \ all of the following rules are satisfied:\n/// 1. The date string is not empty.\n\
  /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  /// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date\
  \ should be in the format: mm-dd-yyyy\nfn valid_date(date: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = valid_date;\n    assert_eq!(candidate(String::from(\"\
  03-11-2000\")), true);\n    assert_eq!(candidate(String::from(\"15-01-2012\")),\
  \ false);\n    assert_eq!(candidate(String::from(\"04-0-2040\")), false);\n    assert_eq!(candidate(String::from(\"\
  06-04-2020\")), true);\n    assert_eq!(candidate(String::from(\"01-01-2007\")),\
  \ true);\n    assert_eq!(candidate(String::from(\"03-32-2011\")), false);\n    assert_eq!(candidate(String::from(\"\
  \")), false);\n    assert_eq!(candidate(String::from(\"04-31-3000\")), false);\n\
  \    assert_eq!(candidate(String::from(\"06-06-2005\")), true);\n    assert_eq!(candidate(String::from(\"\
  21-31-2000\")), false);\n    assert_eq!(candidate(String::from(\"04-12-2003\")),\
  \ true);\n    assert_eq!(candidate(String::from(\"04122003\")), false);\n    assert_eq!(candidate(String::from(\"\
  20030412\")), false);\n    assert_eq!(candidate(String::from(\"2003-04\")), false);\n\
  \    assert_eq!(candidate(String::from(\"2003-04-12\")), false);\n    assert_eq!(candidate(String::from(\"\
  04-2003\")), false);\n}\n"
completions: ["    let mut date_split = date.split(\"-\");\n    let mut date_vec:\
    \ Vec<&str> = Vec::new();\n    for i in date_split {\n        date_vec.push(i);\n\
    \    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n    let month:\
    \ i32 = date_vec[0].parse().unwrap();\n    let day: i32 = date_vec[1].parse().unwrap();\n\
    \    let year: i32 = date_vec[2].parse().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false;\n        }\n    } else if month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12 {\n        if day < 1 || day\
    \ > 31 {\n            return false;\n        }\n    } else {\n        if day <\
    \ 1 || day > 30 {\n            return false;\n        }\n    }\n    return true;",
  "    let mut date_iter = date.split(\"-\");\n    let month = date_iter.next().unwrap();\n\
    \    let day = date_iter.next().unwrap();\n    let year = date_iter.next().unwrap();\n\
    \    let month = month.parse::<i32>().unwrap();\n    let day = day.parse::<i32>().unwrap();\n\
    \    let year = year.parse::<i32>().unwrap();\n    if month < 1 || month > 12\
    \ {\n        return false;\n    }\n    if month == 2 {\n        if day < 1 ||\
    \ day > 29 {\n            return false;\n        }\n    } else if month == 4 ||\
    \ month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n\
    \            return false;\n        }\n    } else {\n        if day < 1 || day\
    \ > 31 {\n            return false;\n        }\n    }\n    true", "    let date_regex\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n\
    \    if !date_regex.is_match(&date) {\n        return false;\n    }\n    let mut\
    \ date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if year < 0 {\n        return false;\n    }\n    if month < 1 || month >\
    \ 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n        return\
    \ false;\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false;\n        }\n        if day == 29 {\n            if year % 4 != 0 {\n\
    \                return false;\n            }\n            if year % 100 == 0\
    \ && year % 400 != 0 {\n                return false;\n            }\n       \
    \ }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n \
    \       if day > 30 {\n            return false;\n        }\n    }\n    true",
  "    let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        match i.parse::<i32>() {\n            Ok(n)\
    \ => date_vec.push(n),\n            Err(_) => return false,\n        }\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let mut days_in_month\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if date_vec[2] % 4\
    \ == 0 {\n        days_in_month[1] = 29;\n    }\n    if date_vec[0] < 1 || date_vec[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec[1] < 1 || date_vec[1]\
    \ > days_in_month[(date_vec[0] - 1) as usize] {\n        return false;\n    }\n\
    \    return true;", "    let date_vec: Vec<&str> = date.split(\"-\").collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month: i32\
    \ = date_vec[0].parse().unwrap();\n    let day: i32 = date_vec[1].parse().unwrap();\n\
    \    let year: i32 = date_vec[2].parse().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    true", "   \
    \ let date_vec: Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    let month: i32 = date_vec[0].parse().unwrap();\n\
    \    let day: i32 = date_vec[1].parse().unwrap();\n    let year: i32 = date_vec[2].parse().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    let date_split: Vec<&str> = date.split(\"-\").collect();\n\
    \    let month = date_split[0].parse::<i32>().unwrap();\n    let day = date_split[1].parse::<i32>().unwrap();\n\
    \    let year = date_split[2].parse::<i32>().unwrap();\n    if date_regex.is_match(&date)\
    \ {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) && day <= 31 {\n            return true;\n\
    \        } else if (month == 4 || month == 6 || month == 9 || month == 11) &&\
    \ day <= 30 {\n            return true;\n        } else if month == 2 && day <=\
    \ 29 {\n            return true;\n        }\n    }\n    false", "    let date_regex\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\").unwrap();\n\
    \    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n        let month: u32 = date_vec[0].parse().unwrap();\n    \
    \    let day: u32 = date_vec[1].parse().unwrap();\n        let year: u32 = date_vec[2].parse().unwrap();\n\
    \        if month > 12 || day > 31 || year < 1 {\n            return false;\n\
    \        }\n        if month == 2 && day > 29 {\n            return false;\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ && day > 30 {\n            return false;\n        }\n        return true;\n\
    \    }\n    return false;", "    if date.is_empty() {\n        return false;\n\
    \    }\n\n    let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<u32>().unwrap();\n\n    if month < 1 ||\
    \ month > 12 {\n        return false;\n    }\n\n    if day < 1 || day > 31 {\n\
    \        return false;\n    }\n\n    if month == 2 && day > 29 {\n        return\
    \ false;\n    }\n\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) && day > 30 {\n        return false;\n    }\n\n    if year < 1 {\n     \
    \   return false;\n    }\n\n    return true;", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    re.is_match(&date)", "    let mut date_split = date.split(\"\
    -\");\n    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n\
    \        match i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n  \
    \          Err(_) => return false,\n        }\n    }\n    if date_vec.len() !=\
    \ 3 {\n        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0] > 12\
    \ {\n        return false;\n    }\n    if date_vec[0] == 2 {\n        if date_vec[1]\
    \ < 1 || date_vec[1] > 29 {\n            return false;\n        }\n    } else\
    \ if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0] ==\
    \ 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n        if\
    \ date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n        }\n\
    \    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n            return\
    \ false;\n        }\n    }\n    true", "    let mut date_split = date.split(\"\
    -\");\n    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n\
    \        date_vec.push(i.parse::<i32>().unwrap());\n    }\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec[0] == 1 || date_vec[0]\
    \ == 3 || date_vec[0] == 5 || date_vec[0] == 7 || date_vec[0] == 8 || date_vec[0]\
    \ == 10 || date_vec[0] == 12 {\n        if date_vec[1] < 1 || date_vec[1] > 31\
    \ {\n            return false;\n        }\n    } else if date_vec[0] == 4 || date_vec[0]\
    \ == 6 || date_vec[0] == 9 || date_vec[0] == 11 {\n        if date_vec[1] < 1\
    \ || date_vec[1] > 30 {\n            return false;\n        }\n    } else if date_vec[0]\
    \ == 2 {\n        if date_vec[1] < 1 || date_vec[1] > 29 {\n            return\
    \ false;\n        }\n    }\n    return true;", "    let date_regex = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n    if !date_regex.is_match(&date)\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month = date_vec[0].parse::<u32>().unwrap();\n    let\
    \ day = date_vec[1].parse::<u32>().unwrap();\n    let year = date_vec[2].parse::<u32>().unwrap();\n\
    \    if month > 12 || day > 31 || year < 1 {\n        return false;\n    }\n \
    \   if month == 2 && day > 29 {\n        return false;\n    }\n    if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) && day > 30 {\n        return\
    \ false;\n    }\n    true", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    date_regex.is_match(&date)", "    let mut date_split = date.split(\"\
    -\");\n    let mut date_vec: Vec<u32> = Vec::new();\n    for i in date_split {\n\
    \        date_vec.push(i.parse::<u32>().unwrap());\n    }\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    if date_vec[0] > 12 || date_vec[0]\
    \ < 1 {\n        return false;\n    }\n    if date_vec[0] == 2 {\n        if date_vec[1]\
    \ > 29 || date_vec[1] < 1 {\n            return false;\n        }\n    } else\
    \ if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0] ==\
    \ 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n        if\
    \ date_vec[1] > 31 || date_vec[1] < 1 {\n            return false;\n        }\n\
    \    } else {\n        if date_vec[1] > 30 || date_vec[1] < 1 {\n            return\
    \ false;\n        }\n    }\n    return true;", "    let mut split = date.split(\"\
    -\");\n    let mut valid = true;\n    let mut days = 0;\n    let mut month = 0;\n\
    \    let mut year = 0;\n    if let Some(m) = split.next() {\n        if let Ok(m)\
    \ = m.parse::<i32>() {\n            month = m;\n        } else {\n           \
    \ valid = false;\n        }\n    } else {\n        valid = false;\n    }\n   \
    \ if let Some(d) = split.next() {\n        if let Ok(d) = d.parse::<i32>() {\n\
    \            days = d;\n        } else {\n            valid = false;\n       \
    \ }\n    } else {\n        valid = false;\n    }\n    if let Some(y) = split.next()\
    \ {\n        if let Ok(y) = y.parse::<i32>() {\n            year = y;\n      \
    \  } else {\n            valid = false;\n        }\n    } else {\n        valid\
    \ = false;\n    }\n    if valid {\n        if month > 12 || month < 1 {\n    \
    \        valid = false;\n        } else if month == 2 {\n            if days >\
    \ 29 || days < 1 {\n                valid = false;\n            }\n        } else\
    \ if month == 4 || month == 6 || month == 9 || month == 11 {\n            if days\
    \ > 30 || days < 1 {\n                valid = false;\n            }\n        }\
    \ else {\n            if days > 31 || days < 1 {\n                valid = false;\n\
    \            }\n        }\n    }\n    valid", "    let mut date_split = date.split('-');\n\
    \    let month = date_split.next().unwrap().parse::<u32>().unwrap();\n    let\
    \ day = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \n    if month < 1 || month > 12 {\n        return false;\n    }\n\n    if day\
    \ < 1 || day > 31 {\n        return false;\n    }\n\n    if month == 2 && day\
    \ > 29 {\n        return false;\n    }\n\n    if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) && day > 30 {\n        return false;\n    }\n\n \
    \   true", "    let mut date_parts = date.split(\"-\");\n    let month = date_parts.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_parts.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_parts.next().unwrap().parse::<u32>().unwrap();\n\n    if month < 1 ||\
    \ month > 12 {\n        return false;\n    }\n\n    if day < 1 {\n        return\
    \ false;\n    }\n\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false;\n        }\n    } else if month % 2 == 0 {\n        if day > 30 {\n \
    \           return false;\n        }\n    } else {\n        if day > 31 {\n  \
    \          return false;\n        }\n    }\n\n    return true;", "    let mut\
    \ date_split = date.split('-');\n    let month = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<u32>().unwrap();\n\n    if month > 12 ||\
    \ day > 31 || year < 1 {\n        return false;\n    }\n\n    match month {\n\
    \        1 | 3 | 5 | 7 | 8 | 10 | 12 => day <= 31,\n        4 | 6 | 9 | 11 =>\
    \ day <= 30,\n        2 => {\n            if year % 4 == 0 {\n               \
    \ day <= 29\n            } else {\n                day <= 28\n            }\n\
    \        }\n        _ => false,\n    }", "    let mut split = date.split(\"-\"\
    );\n    let month = split.next().unwrap().parse::<i32>().unwrap();\n    let day\
    \ = split.next().unwrap().parse::<i32>().unwrap();\n    let year = split.next().unwrap().parse::<i32>().unwrap();\n\
    \    if month > 12 || month < 1 {\n        return false;\n    }\n    if day >\
    \ 31 || day < 1 {\n        return false;\n    }\n    if month == 2 {\n       \
    \ if day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n    \
    \        return false;\n        }\n    }\n    return true;", "    let mut date_split\
    \ = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n    for\
    \ i in date_split {\n        match i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n\
    \            Err(_) => return false,\n        }\n    }\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec[0] == 2 {\n        if\
    \ date_vec[1] < 1 || date_vec[1] > 29 {\n            return false;\n        }\n\
    \    } else if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0]\
    \ == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n     \
    \   if date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n    \
    \    }\n    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n     \
    \       return false;\n        }\n    }\n    true", "    let mut date_split =\
    \ date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30 {\n        return false;\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    true", "    let mut date_split = date.split(\"-\");\n    let month:\
    \ i32 = match date_split.next() {\n        Some(x) => match x.parse::<i32>() {\n\
    \            Ok(x) => x,\n            Err(_) => return false,\n        },\n  \
    \      None => return false,\n    };\n    let day: i32 = match date_split.next()\
    \ {\n        Some(x) => match x.parse::<i32>() {\n            Ok(x) => x,\n  \
    \          Err(_) => return false,\n        },\n        None => return false,\n\
    \    };\n    let year: i32 = match date_split.next() {\n        Some(x) => match\
    \ x.parse::<i32>() {\n            Ok(x) => x,\n            Err(_) => return false,\n\
    \        },\n        None => return false,\n    };\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    true", "   \
    \ let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    if !date_regex.is_match(&date) {\n        return false;\n\
    \    }\n    let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 {\n        if day > 29 {\n         \
    \   return false;\n        }\n        if day == 29 {\n            if year % 4\
    \ != 0 {\n                return false;\n            }\n            if year %\
    \ 100 == 0 && year % 400 != 0 {\n                return false;\n            }\n\
    \        }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day > 30 {\n            return false;\n        }\n    }\n    true",
  "    let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<u32>().unwrap();\n\n    if month < 1 ||\
    \ month > 12 {\n        return false;\n    }\n\n    if day < 1 || day > 31 {\n\
    \        return false;\n    }\n\n    if month == 2 && day > 29 {\n        return\
    \ false;\n    }\n\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) && day > 30 {\n        return false;\n    }\n\n    if year < 1 {\n     \
    \   return false;\n    }\n\n    true", "    let mut date_split = date.split(\"\
    -\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n \
    \   let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month > 12 ||\
    \ month < 1 {\n        return false;\n    }\n    if day > 31 || day < 1 {\n  \
    \      return false;\n    }\n    if month == 2 {\n        if day > 29 {\n    \
    \        return false;\n        }\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        if day > 30 {\n            return false;\n  \
    \      }\n    }\n    if year < 1 {\n        return false;\n    }\n    return true;",
  "    let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<u32>().unwrap();\n\n    if month < 1 ||\
    \ month > 12 {\n        return false;\n    }\n\n    if day < 1 || day > 31 {\n\
    \        return false;\n    }\n\n    if month == 2 && day > 29 {\n        return\
    \ false;\n    }\n\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) && day > 30 {\n        return false;\n    }\n\n    true", "    let date_regex\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n\
    \    if !date_regex.is_match(&date) {\n        return false;\n    }\n    let date_split:\
    \ Vec<&str> = date.split(\"-\").collect();\n    let month: u32 = date_split[0].parse().unwrap();\n\
    \    let day: u32 = date_split[1].parse().unwrap();\n    let year: u32 = date_split[2].parse().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ if date.is_empty() {\n        return false;\n    }\n\n    let mut date_split\
    \ = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\n    for\
    \ i in date_split {\n        match i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n\
    \            Err(_) => return false,\n        }\n    }\n\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n\n    let month = date_vec[0];\n    let\
    \ day = date_vec[1];\n    let year = date_vec[2];\n\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n\n    if day < 1 || day > 31 {\n     \
    \   return false;\n    }\n\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n\n    if (month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30 {\n        return false;\n    }\n\n    if year < 1 {\n        return false;\n\
    \    }\n\n    true", "    let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month: i32\
    \ = date_vec[0].parse().unwrap();\n    let day: i32 = date_vec[1].parse().unwrap();\n\
    \    let year: i32 = date_vec[2].parse().unwrap();\n    if month > 12 || month\
    \ < 1 {\n        return false;\n    }\n    if day > 31 || day < 1 {\n        return\
    \ false;\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false;\n        }\n    }\n    if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false;\n        }\n    }\n\
    \    return true;", "    let mut date_split = date.split('-');\n    let mut date_vec:\
    \ Vec<i32> = Vec::new();\n    for i in date_split {\n        match i.parse::<i32>()\
    \ {\n            Ok(x) => date_vec.push(x),\n            Err(_) => return false,\n\
    \        }\n    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n\
    \    if date_vec[0] < 1 || date_vec[0] > 12 {\n        return false;\n    }\n\
    \    if date_vec[0] == 2 {\n        if date_vec[1] < 1 || date_vec[1] > 29 {\n\
    \            return false;\n        }\n    } else if date_vec[0] == 1 || date_vec[0]\
    \ == 3 || date_vec[0] == 5 || date_vec[0] == 7 || date_vec[0] == 8 || date_vec[0]\
    \ == 10 || date_vec[0] == 12 {\n        if date_vec[1] < 1 || date_vec[1] > 31\
    \ {\n            return false;\n        }\n    } else {\n        if date_vec[1]\
    \ < 1 || date_vec[1] > 30 {\n            return false;\n        }\n    }\n   \
    \ true", "    let mut date_parts = date.split(\"-\");\n    let month = date_parts.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_parts.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_parts.next().unwrap().parse::<u32>().unwrap();\n\n    if year < 1 {\n\
    \        return false;\n    }\n\n    if month < 1 || month > 12 {\n        return\
    \ false;\n    }\n\n    if day < 1 {\n        return false;\n    }\n\n    match\
    \ month {\n        1 | 3 | 5 | 7 | 8 | 10 | 12 => day <= 31,\n        4 | 6 |\
    \ 9 | 11 => day <= 30,\n        2 => day <= 29,\n        _ => false,\n    }",
  "    let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        match i.parse::<i32>() {\n            Ok(n)\
    \ => date_vec.push(n),\n            Err(_) => return false,\n        }\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month = date_vec[0];\n\
    \    let day = date_vec[1];\n    let year = date_vec[2];\n    if month < 1 ||\
    \ month > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n \
    \       return false;\n    }\n    if month == 2 && day > 29 {\n        return\
    \ false;\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day > 30 {\n            return false;\n        }\n    }\n    if\
    \ year < 1 {\n        return false;\n    }\n    true", "    let mut date_split\
    \ = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<u32>().unwrap();\n\n    if month > 12 ||\
    \ month < 1 {\n        return false;\n    }\n\n    if month == 2 {\n        if\
    \ day > 29 || day < 1 {\n            return false;\n        }\n    } else if month\
    \ == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 || day\
    \ < 1 {\n            return false;\n        }\n    } else {\n        if day >\
    \ 31 || day < 1 {\n            return false;\n        }\n    }\n\n    return true;",
  "    let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        match i.parse::<i32>() {\n            Ok(n)\
    \ => date_vec.push(n),\n            Err(_) => return false,\n        }\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    if date_vec[0]\
    \ < 1 || date_vec[0] > 12 {\n        return false;\n    }\n    if date_vec[1]\
    \ < 1 || date_vec[1] > 31 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 2 && date_vec[1] > 29 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 4 || date_vec[0] == 6 || date_vec[0] == 9 || date_vec[0] == 11 {\n      \
    \  if date_vec[1] > 30 {\n            return false;\n        }\n    }\n    true",
  "    let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        match i.parse::<i32>() {\n            Ok(n)\
    \ => date_vec.push(n),\n            Err(_) => return false,\n        }\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    if date_vec[0]\
    \ > 12 || date_vec[0] < 1 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 2 {\n        if date_vec[1] > 29 || date_vec[1] < 1 {\n            return\
    \ false;\n        }\n    } else if date_vec[0] == 4 || date_vec[0] == 6 || date_vec[0]\
    \ == 9 || date_vec[0] == 11 {\n        if date_vec[1] > 30 || date_vec[1] < 1\
    \ {\n            return false;\n        }\n    } else {\n        if date_vec[1]\
    \ > 31 || date_vec[1] < 1 {\n            return false;\n        }\n    }\n   \
    \ true", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month = date_vec[0].parse::<u32>().unwrap();\n\
    \        let day = date_vec[1].parse::<u32>().unwrap();\n        let year = date_vec[2].parse::<u32>().unwrap();\n\
    \        if month > 12 || day > 31 || year < 1 {\n            return false;\n\
    \        }\n        if month == 2 && day > 29 {\n            return false;\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ && day > 30 {\n            return false;\n        }\n        return true;\n\
    \    }\n    return false;", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    let mut valid = false;\n    if re.is_match(&date) {\n       \
    \ let date_vec: Vec<&str> = date.split(\"-\").collect();\n        let month =\
    \ date_vec[0].parse::<i32>().unwrap();\n        let day = date_vec[1].parse::<i32>().unwrap();\n\
    \        let year = date_vec[2].parse::<i32>().unwrap();\n        if month > 0\
    \ && month < 13 {\n            if month == 2 {\n                if year % 4 ==\
    \ 0 {\n                    if day > 0 && day < 30 {\n                        valid\
    \ = true;\n                    }\n                } else {\n                 \
    \   if day > 0 && day < 29 {\n                        valid = true;\n        \
    \            }\n                }\n            } else if month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n\
    \                if day > 0 && day < 32 {\n                    valid = true;\n\
    \                }\n            } else {\n                if day > 0 && day <\
    \ 31 {\n                    valid = true;\n                }\n            }\n\
    \        }\n    }\n    valid", "    let mut date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    if date_vec.len() != 3 {\n        return false;\n    }\n\
    \    let months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"\
    , \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    let month = date_vec[0];\n\
    \    let day = date_vec[1];\n    let year = date_vec[2];\n    if !months.contains(&month)\
    \ {\n        return false;\n    }\n    if !day.chars().all(|c| c.is_digit(10))\
    \ {\n        return false;\n    }\n    if !year.chars().all(|c| c.is_digit(10))\
    \ {\n        return false;\n    }\n    let day_num = day.parse::<i32>().unwrap();\n\
    \    let year_num = year.parse::<i32>().unwrap();\n    if year_num < 1 {\n   \
    \     return false;\n    }\n    if day_num < 1 {\n        return false;\n    }\n\
    \    let month_num = months.iter().position(|&r| r == month).unwrap() + 1;\n \
    \   if month_num == 2 {\n        if day_num > 29 {\n            return false;\n\
    \        }\n        if day_num == 29 {\n            if year_num % 4 != 0 {\n \
    \               return false;\n            }\n            if year_num % 100 ==\
    \ 0 && year_num % 400 != 0 {\n                return false;\n            }\n \
    \       }\n    } else if month_num == 4 || month_num == 6 || month_num == 9 ||\
    \ month_num == 11 {\n        if day_num > 30 {\n            return false;\n  \
    \      }\n    } else {\n        if day_num > 31 {\n            return false;\n\
    \        }\n    }\n    true", "    let mut date_split = date.split(\"-\");\n \
    \   let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n    \
    \    match i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n      \
    \      Err(_) => return false,\n        }\n    }\n    if date_vec.len() != 3 {\n\
    \        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0] > 12 {\n\
    \        return false;\n    }\n    if date_vec[0] == 2 {\n        if date_vec[1]\
    \ < 1 || date_vec[1] > 29 {\n            return false;\n        }\n    } else\
    \ if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0] ==\
    \ 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n        if\
    \ date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n        }\n\
    \    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n            return\
    \ false;\n        }\n    }\n    true", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_parts: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month = date_parts[0].parse::<u32>().unwrap();\n\
    \        let day = date_parts[1].parse::<u32>().unwrap();\n        let year =\
    \ date_parts[2].parse::<u32>().unwrap();\n        if month == 2 {\n          \
    \  if day > 29 {\n                return false;\n            }\n            if\
    \ day == 29 {\n                if year % 4 != 0 {\n                    return\
    \ false;\n                }\n                if year % 100 == 0 && year % 400\
    \ != 0 {\n                    return false;\n                }\n            }\n\
    \        } else if month == 4 || month == 6 || month == 9 || month == 11 {\n \
    \           if day > 30 {\n                return false;\n            }\n    \
    \    } else if day > 31 {\n            return false;\n        }\n        return\
    \ true;\n    }\n    return false;", "    let mut date_split = date.split(\"-\"\
    );\n    let mut date_vec: Vec<u32> = Vec::new();\n    for i in date_split {\n\
    \        match i.parse::<u32>() {\n            Ok(num) => date_vec.push(num),\n\
    \            Err(_) => return false,\n        }\n    }\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    let month = date_vec[0];\n    let\
    \ day = date_vec[1];\n    let year = date_vec[2];\n    if month > 12 || month\
    \ < 1 {\n        return false;\n    }\n    if month == 2 {\n        if day > 29\
    \ || day < 1 {\n            return false;\n        }\n    } else if month % 2\
    \ == 0 {\n        if day > 30 || day < 1 {\n            return false;\n      \
    \  }\n    } else {\n        if day > 31 || day < 1 {\n            return false;\n\
    \        }\n    }\n    true", "    let mut date_iter = date.split(\"-\");\n  \
    \  let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_iter {\n      \
    \  match i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n        \
    \    Err(_) => return false,\n        }\n    }\n    if date_vec.len() != 3 {\n\
    \        return false;\n    }\n    let (month, day, year) = (date_vec[0], date_vec[1],\
    \ date_vec[2]);\n    if month < 1 || month > 12 {\n        return false;\n   \
    \ }\n    if day < 1 || day > 31 {\n        return false;\n    }\n    if month\
    \ == 2 && day > 29 {\n        return false;\n    }\n    if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) && day > 30 {\n        return false;\n  \
    \  }\n    true", "    let mut date_split = date.split(\"-\");\n    let month =\
    \ date_split.next().unwrap().parse::<i32>().unwrap();\n    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let year = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month\
    \ < 1 || month > 12 {\n        return false;\n    }\n    if day < 1 || day > 31\
    \ {\n        return false;\n    }\n    if month == 2 && day > 29 {\n        return\
    \ false;\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day > 30 {\n            return false;\n        }\n    }\n    true",
  "    let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap();\n\
    \    let day = date_split.next().unwrap();\n    let year = date_split.next().unwrap();\n\
    \    let month_int = month.parse::<u32>().unwrap();\n    let day_int = day.parse::<u32>().unwrap();\n\
    \    let year_int = year.parse::<u32>().unwrap();\n    if month_int > 12 || month_int\
    \ < 1 {\n        return false;\n    }\n    if month_int == 2 {\n        if day_int\
    \ > 29 || day_int < 1 {\n            return false;\n        }\n    } else if month_int\
    \ == 4 || month_int == 6 || month_int == 9 || month_int == 11 {\n        if day_int\
    \ > 30 || day_int < 1 {\n            return false;\n        }\n    } else {\n\
    \        if day_int > 31 || day_int < 1 {\n            return false;\n       \
    \ }\n    }\n    if year_int < 1 {\n        return false;\n    }\n    true", " \
    \   let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> =\
    \ Vec::new();\n    for i in date_split {\n        match i.parse::<i32>() {\n \
    \           Ok(num) => date_vec.push(num),\n            Err(_) => return false,\n\
    \        }\n    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n\
    \    if date_vec[0] < 1 || date_vec[0] > 12 {\n        return false;\n    }\n\
    \    if date_vec[0] == 2 {\n        if date_vec[1] < 1 || date_vec[1] > 29 {\n\
    \            return false;\n        }\n    } else if date_vec[0] == 1 || date_vec[0]\
    \ == 3 || date_vec[0] == 5 || date_vec[0] == 7 || date_vec[0] == 8 || date_vec[0]\
    \ == 10 || date_vec[0] == 12 {\n        if date_vec[1] < 1 || date_vec[1] > 31\
    \ {\n            return false;\n        }\n    } else {\n        if date_vec[1]\
    \ < 1 || date_vec[1] > 30 {\n            return false;\n        }\n    }\n   \
    \ if date_vec[2] < 1 {\n        return false;\n    }\n    true", "    let date_regex\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\").unwrap();\n\
    \    let date_regex_match = date_regex.is_match(&date);\n    if !date_regex_match\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month: i32 = date_vec[0].parse().unwrap();\n    let day:\
    \ i32 = date_vec[1].parse().unwrap();\n    let year: i32 = date_vec[2].parse().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if year % 4 == 0 {\n            if day < 1 || day > 29 {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ day < 1 || day > 28 {\n                return false;\n            }\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    true", "    let mut date_iter = date.split(\"-\");\n    let mut\
    \ date_vec: Vec<i32> = Vec::new();\n    for i in date_iter {\n        let j =\
    \ i.parse::<i32>();\n        match j {\n            Ok(k) => date_vec.push(k),\n\
    \            Err(_) => return false,\n        }\n    }\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    let mut days = date_vec[1];\n    let\
    \ mut months = date_vec[0];\n    let mut years = date_vec[2];\n    if months <\
    \ 1 || months > 12 {\n        return false;\n    }\n    if months == 2 {\n   \
    \     if days < 1 || days > 29 {\n            return false;\n        }\n    }\
    \ else if months == 1 || months == 3 || months == 5 || months == 7 || months ==\
    \ 8 || months == 10 || months == 12 {\n        if days < 1 || days > 31 {\n  \
    \          return false;\n        }\n    } else {\n        if days < 1 || days\
    \ > 30 {\n            return false;\n        }\n    }\n    if years < 1 {\n  \
    \      return false;\n    }\n    true", "    let mut date_split = date.split(\"\
    -\");\n    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n\
    \        date_vec.push(i.parse::<i32>().unwrap());\n    }\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec[0] == 1 || date_vec[0]\
    \ == 3 || date_vec[0] == 5 || date_vec[0] == 7 || date_vec[0] == 8 || date_vec[0]\
    \ == 10 || date_vec[0] == 12 {\n        if date_vec[1] < 1 || date_vec[1] > 31\
    \ {\n            return false;\n        }\n    } else if date_vec[0] == 4 || date_vec[0]\
    \ == 6 || date_vec[0] == 9 || date_vec[0] == 11 {\n        if date_vec[1] < 1\
    \ || date_vec[1] > 30 {\n            return false;\n        }\n    } else if date_vec[0]\
    \ == 2 {\n        if date_vec[1] < 1 || date_vec[1] > 29 {\n            return\
    \ false;\n        }\n    }\n    return true;", "    let mut date_split = date.split('-');\n\
    \    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n   \
    \     match i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n     \
    \       Err(_) => return false,\n        }\n    }\n    if date_vec.len() != 3\
    \ {\n        return false;\n    }\n    let month = date_vec[0];\n    let day =\
    \ date_vec[1];\n    let year = date_vec[2];\n    if month < 1 || month > 12 {\n\
    \        return false;\n    }\n    if day < 1 || day > 31 {\n        return false;\n\
    \    }\n    if month == 2 && day > 29 {\n        return false;\n    }\n    if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) && day > 30 {\n    \
    \    return false;\n    }\n    if year < 1 {\n        return false;\n    }\n \
    \   true", "    let mut date_split = date.split(\"-\");\n    let mut date_vec:\
    \ Vec<i32> = Vec::new();\n    for i in date_split {\n        match i.parse::<i32>()\
    \ {\n            Ok(n) => date_vec.push(n),\n            Err(_) => return false,\n\
    \        }\n    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n\
    \    if date_vec[0] < 1 || date_vec[0] > 12 {\n        return false;\n    }\n\
    \    if date_vec[0] == 2 {\n        if date_vec[1] < 1 || date_vec[1] > 29 {\n\
    \            return false;\n        }\n    } else if date_vec[0] == 1 || date_vec[0]\
    \ == 3 || date_vec[0] == 5 || date_vec[0] == 7 || date_vec[0] == 8 || date_vec[0]\
    \ == 10 || date_vec[0] == 12 {\n        if date_vec[1] < 1 || date_vec[1] > 31\
    \ {\n            return false;\n        }\n    } else {\n        if date_vec[1]\
    \ < 1 || date_vec[1] > 30 {\n            return false;\n        }\n    }\n   \
    \ true", "    let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30 {\n        return false;\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    true", "    let mut date_split = date.split(\"-\");\n    let mut date_vec:\
    \ Vec<i32> = Vec::new();\n    for i in date_split {\n        match i.parse::<i32>()\
    \ {\n            Ok(num) => date_vec.push(num),\n            Err(_) => return\
    \ false,\n        }\n    }\n    if date_vec.len() != 3 {\n        return false;\n\
    \    }\n    let month = date_vec[0];\n    let day = date_vec[1];\n    let year\
    \ = date_vec[2];\n    if month < 1 || month > 12 {\n        return false;\n  \
    \  }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false;\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day < 1 || day > 30 {\n            return false;\n     \
    \   }\n    } else {\n        if day < 1 || day > 31 {\n            return false;\n\
    \        }\n    }\n    if year < 0 {\n        return false;\n    }\n    true",
  "    let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<u32>().unwrap();\n\n    if month < 1 ||\
    \ month > 12 {\n        return false;\n    }\n\n    if day < 1 || day > 31 {\n\
    \        return false;\n    }\n\n    if month == 2 && day > 29 {\n        return\
    \ false;\n    }\n\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day > 30 {\n            return false;\n        }\n    }\n\n  \
    \  true", "    let mut date_split = date.split('-');\n    let mut date_vec: Vec<&str>\
    \ = Vec::new();\n    for i in date_split {\n        date_vec.push(i);\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 {\n       \
    \ if day > 29 {\n            return false;\n        }\n    }\n    if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n    \
    \        return false;\n        }\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    return true;", "    let mut date_vec: Vec<&str> = date.split(\"-\"\
    ).collect();\n    if date_vec.len() != 3 {\n        return false;\n    }\n   \
    \ let month = date_vec[0].parse::<i32>().unwrap();\n    let day = date_vec[1].parse::<i32>().unwrap();\n\
    \    let year = date_vec[2].parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    if year < 0\
    \ {\n        return false;\n    }\n    true", "    let mut date_split = date.split(\"\
    -\");\n    let mut date_vec: Vec<u32> = Vec::new();\n    for i in date_split {\n\
    \        date_vec.push(i.parse::<u32>().unwrap());\n    }\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec[0] == 2 {\n        if\
    \ date_vec[1] < 1 || date_vec[1] > 29 {\n            return false;\n        }\n\
    \    } else if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0]\
    \ == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n     \
    \   if date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n    \
    \    }\n    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n     \
    \       return false;\n        }\n    }\n    true", "    let mut valid = true;\n\
    \    let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n    let mut days:\
    \ u32 = date_vec[1].parse().unwrap();\n    let mut months: u32 = date_vec[0].parse().unwrap();\n\
    \    let mut years: u32 = date_vec[2].parse().unwrap();\n    if date.len() ==\
    \ 0 {\n        valid = false;\n    }\n    if months > 12 || months < 1 {\n   \
    \     valid = false;\n    }\n    if months == 2 && days > 29 {\n        valid\
    \ = false;\n    }\n    if (months == 4 || months == 6 || months == 9 || months\
    \ == 11) && days > 30 {\n        valid = false;\n    }\n    if (months == 1 ||\
    \ months == 3 || months == 5 || months == 7 || months == 8 || months == 10 ||\
    \ months == 12) && days > 31 {\n        valid = false;\n    }\n    if years <\
    \ 1 {\n        valid = false;\n    }\n    valid", "    let mut date_split = date.split(\"\
    -\");\n    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n\
    \        match i.parse::<i32>() {\n            Ok(val) => date_vec.push(val),\n\
    \            Err(_) => return false,\n        }\n    }\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec[0] == 2 {\n        if\
    \ date_vec[1] < 1 || date_vec[1] > 29 {\n            return false;\n        }\n\
    \    } else if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0]\
    \ == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n     \
    \   if date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n    \
    \    }\n    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n     \
    \       return false;\n        }\n    }\n    true", "    let date_regex = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n    if !date_regex.is_match(&date)\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month: u32 = date_vec[0].parse().unwrap();\n    let day:\
    \ u32 = date_vec[1].parse().unwrap();\n    if month < 1 || month > 12 {\n    \
    \    return false;\n    }\n    if month == 2 {\n        if day < 1 || day > 29\
    \ {\n            return false;\n        }\n    } else if month == 4 || month ==\
    \ 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n       \
    \     return false;\n        }\n    } else {\n        if day < 1 || day > 31 {\n\
    \            return false;\n        }\n    }\n    true", "    let mut date_split\
    \ = date.split(\"-\");\n    let mut date_vec: Vec<u32> = Vec::new();\n    for\
    \ i in date_split {\n        date_vec.push(i.parse::<u32>().unwrap());\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    if date_vec[0]\
    \ > 12 || date_vec[0] < 1 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 2 {\n        if date_vec[1] > 29 || date_vec[1] < 1 {\n            return\
    \ false;\n        }\n    } else if date_vec[0] == 4 || date_vec[0] == 6 || date_vec[0]\
    \ == 9 || date_vec[0] == 11 {\n        if date_vec[1] > 30 || date_vec[1] < 1\
    \ {\n            return false;\n        }\n    } else {\n        if date_vec[1]\
    \ > 31 || date_vec[1] < 1 {\n            return false;\n        }\n    }\n   \
    \ true", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n\
    \    let v: Vec<&str> = date.split(\"-\").collect();\n    let month = v[0].parse::<u32>().unwrap();\n\
    \    let day = v[1].parse::<u32>().unwrap();\n    let year = v[2].parse::<u32>().unwrap();\n\
    \    if month > 12 || day > 31 || year < 1 {\n        return false;\n    }\n \
    \   if month == 2 {\n        if day > 29 {\n            return false;\n      \
    \  }\n        if day == 29 {\n            if year % 4 != 0 {\n               \
    \ return false;\n            }\n            if year % 100 == 0 && year % 400 !=\
    \ 0 {\n                return false;\n            }\n        }\n    }\n    if\
    \ month == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30\
    \ {\n            return false;\n        }\n    }\n    true", "    let date_regex\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\").unwrap();\n\
    \    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n        let month: u32 = date_vec[0].parse().unwrap();\n    \
    \    let day: u32 = date_vec[1].parse().unwrap();\n        let year: u32 = date_vec[2].parse().unwrap();\n\
    \        if year % 4 == 0 {\n            if month == 2 && day <= 29 {\n      \
    \          return true;\n            }\n        }\n        if month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\
    \ {\n            if day <= 31 {\n                return true;\n            }\n\
    \        }\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \            if day <= 30 {\n                return true;\n            }\n   \
    \     }\n    }\n    false", "    let mut date_split = date.split(\"-\");\n   \
    \ let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n      \
    \  match i.parse::<i32>() {\n            Ok(num) => date_vec.push(num),\n    \
    \        Err(_) => return false,\n        }\n    }\n    if date_vec.len() != 3\
    \ {\n        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0] > 12\
    \ {\n        return false;\n    }\n    if date_vec[0] == 2 {\n        if date_vec[1]\
    \ < 1 || date_vec[1] > 29 {\n            return false;\n        }\n    } else\
    \ if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0] ==\
    \ 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n        if\
    \ date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n        }\n\
    \    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n            return\
    \ false;\n        }\n    }\n    if date_vec[2] < 1 {\n        return false;\n\
    \    }\n    true", "    let mut date_vec: Vec<&str> = date.split('-').collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month: i32\
    \ = match date_vec[0].parse() {\n        Ok(num) => num,\n        Err(_) => return\
    \ false,\n    };\n    let day: i32 = match date_vec[1].parse() {\n        Ok(num)\
    \ => num,\n        Err(_) => return false,\n    };\n    let year: i32 = match\
    \ date_vec[2].parse() {\n        Ok(num) => num,\n        Err(_) => return false,\n\
    \    };\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if\
    \ month == 2 {\n        if day < 1 || day > 29 {\n            return false;\n\
    \        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false;\n        }\n\
    \    } else {\n        if day < 1 || day > 31 {\n            return false;\n \
    \       }\n    }\n    if year < 1 {\n        return false;\n    }\n    true",
  "    let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        match i.parse::<i32>() {\n            Ok(num)\
    \ => date_vec.push(num),\n            Err(_) => return false,\n        }\n   \
    \ }\n    if date_vec.len() != 3 {\n        return false;\n    }\n    if date_vec[0]\
    \ < 1 || date_vec[0] > 12 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 2 {\n        if date_vec[1] < 1 || date_vec[1] > 29 {\n            return\
    \ false;\n        }\n    } else if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0]\
    \ == 5 || date_vec[0] == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0]\
    \ == 12 {\n        if date_vec[1] < 1 || date_vec[1] > 31 {\n            return\
    \ false;\n        }\n    } else {\n        if date_vec[1] < 1 || date_vec[1] >\
    \ 30 {\n            return false;\n        }\n    }\n    true", "    let mut date_vec:\
    \ Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len() != 3 {\n   \
    \     return false;\n    }\n    let mut date_vec: Vec<i32> = date_vec.iter().map(|x|\
    \ x.parse::<i32>().unwrap()).collect();\n    date_vec.sort();\n    if date_vec[0]\
    \ < 1 || date_vec[0] > 12 {\n        return false;\n    }\n    if date_vec[1]\
    \ < 1 || date_vec[1] > 31 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 2 && date_vec[1] > 29 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 2 && date_vec[1] == 29 && date_vec[2] % 4 != 0 {\n        return false;\n\
    \    }\n    if date_vec[0] == 4 || date_vec[0] == 6 || date_vec[0] == 9 || date_vec[0]\
    \ == 11 {\n        if date_vec[1] > 30 {\n            return false;\n        }\n\
    \    }\n    true", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    if !date_regex.is_match(&date) {\n        return false;\n\
    \    }\n    let date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month\
    \ = date_vec[0].parse::<i32>().unwrap();\n    let day = date_vec[1].parse::<i32>().unwrap();\n\
    \    let year = date_vec[2].parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    if year < 1\
    \ {\n        return false;\n    }\n    true", "    let date_split: Vec<&str> =\
    \ date.split(\"-\").collect();\n    if date_split.len() != 3 {\n        return\
    \ false;\n    }\n    let month: i32 = date_split[0].parse().unwrap();\n    let\
    \ day: i32 = date_split[1].parse().unwrap();\n    let year: i32 = date_split[2].parse().unwrap();\n\
    \    if year < 0 {\n        return false;\n    }\n    if month < 1 || month >\
    \ 12 {\n        return false;\n    }\n    if month == 2 {\n        if day < 1\
    \ || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    true", "   \
    \ let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    if re.is_match(&date) {\n        let v: Vec<&str> = date.split(\"\
    -\").collect();\n        let month = v[0].parse::<i32>().unwrap();\n        let\
    \ day = v[1].parse::<i32>().unwrap();\n        let year = v[2].parse::<i32>().unwrap();\n\
    \        if month < 1 || month > 12 {\n            return false;\n        }\n\
    \        if day < 1 || day > 31 {\n            return false;\n        }\n    \
    \    if month == 2 {\n            if day > 29 {\n                return false;\n\
    \            }\n        }\n        if month == 4 || month == 6 || month == 9 ||\
    \ month == 11 {\n            if day > 30 {\n                return false;\n  \
    \          }\n        }\n        if year < 0 {\n            return false;\n  \
    \      }\n        return true;\n    }\n    return false;", "    let mut date_vec:\
    \ Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len() != 3 {\n   \
    \     return false;\n    }\n    let month = date_vec[0].parse::<u32>().unwrap();\n\
    \    let day = date_vec[1].parse::<u32>().unwrap();\n    let year = date_vec[2].parse::<u32>().unwrap();\n\
    \    if month > 12 || month < 1 {\n        return false;\n    }\n    if day >\
    \ 31 || day < 1 {\n        return false;\n    }\n    if month == 2 {\n       \
    \ if day > 29 {\n            return false;\n        }\n    }\n    if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n    \
    \        return false;\n        }\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    true", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n    let\
    \ date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<u32>().unwrap();\n\
    \    let day = date_vec[1].parse::<u32>().unwrap();\n    let year = date_vec[2].parse::<u32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) && day > 30 {\n        return false;\n    }\n    if year <\
    \ 1 {\n        return false;\n    }\n    true", "    let mut split = date.split(\"\
    -\");\n    let month = split.next().unwrap().parse::<i32>().unwrap();\n    let\
    \ day = split.next().unwrap().parse::<i32>().unwrap();\n    let year = split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let days_in_month = match month {\n        1 | 3 | 5 | 7 | 8 | 10 | 12 =>\
    \ 31,\n        4 | 6 | 9 | 11 => 30,\n        2 => 28,\n        _ => 0,\n    };\n\
    \    if month < 1 || month > 12 || day < 1 || day > days_in_month || year < 1\
    \ {\n        return false;\n    }\n    true", "    let date_split: Vec<&str> =\
    \ date.split(\"-\").collect();\n    if date_split.len() != 3 {\n        return\
    \ false;\n    }\n    let month = date_split[0].parse::<i32>().unwrap();\n    let\
    \ day = date_split[1].parse::<i32>().unwrap();\n    let year = date_split[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    re.is_match(&date)", "    let mut date_vec: Vec<&str> = date.split('-').collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month: i32\
    \ = date_vec[0].parse().unwrap();\n    let day: i32 = date_vec[1].parse().unwrap();\n\
    \    let year: i32 = date_vec[2].parse().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    if year < 1\
    \ {\n        return false;\n    }\n    true", "    if date.is_empty() {\n    \
    \    return false;\n    }\n\n    let date_split: Vec<&str> = date.split(\"-\"\
    ).collect();\n    if date_split.len() != 3 {\n        return false;\n    }\n\n\
    \    let month = date_split[0].parse::<i32>().unwrap();\n    let day = date_split[1].parse::<i32>().unwrap();\n\
    \    let year = date_split[2].parse::<i32>().unwrap();\n\n    if month < 1 ||\
    \ month > 12 {\n        return false;\n    }\n\n    if month == 2 {\n        if\
    \ day < 1 || day > 29 {\n            return false;\n        }\n    } else if month\
    \ == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day\
    \ > 30 {\n            return false;\n        }\n    } else {\n        if day <\
    \ 1 || day > 31 {\n            return false;\n        }\n    }\n\n    return true;",
  "    let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        match i.parse::<i32>() {\n            Ok(n)\
    \ => date_vec.push(n),\n            Err(_) => return false,\n        }\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    if date_vec[0]\
    \ < 1 || date_vec[0] > 12 {\n        return false;\n    }\n    if date_vec[1]\
    \ < 1 || date_vec[1] > 31 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 2 && date_vec[1] > 29 {\n        return false;\n    }\n    if (date_vec[0]\
    \ == 4 || date_vec[0] == 6 || date_vec[0] == 9 || date_vec[0] == 11) && date_vec[1]\
    \ > 30 {\n        return false;\n    }\n    true", "    let date_regex = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\").unwrap();\n    if date_regex.is_match(&date)\
    \ {\n        let date_vec: Vec<&str> = date.split(\"-\").collect();\n        let\
    \ month: u32 = date_vec[0].parse().unwrap();\n        let day: u32 = date_vec[1].parse().unwrap();\n\
    \        let year: u32 = date_vec[2].parse().unwrap();\n        if month > 12\
    \ || day > 31 || year < 1000 || year > 9999 {\n            return false;\n   \
    \     }\n        if month == 2 && day > 29 {\n            return false;\n    \
    \    }\n        if (month == 4 || month == 6 || month == 9 || month == 11) &&\
    \ day > 30 {\n            return false;\n        }\n        return true;\n   \
    \ }\n    return false;", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month: u32 = date_vec[0].parse().unwrap();\n\
    \        let day: u32 = date_vec[1].parse().unwrap();\n        let year: u32 =\
    \ date_vec[2].parse().unwrap();\n        if month > 12 || day > 31 || year < 1\
    \ {\n            return false;\n        }\n        if month == 2 && day > 29 {\n\
    \            return false;\n        }\n        if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) && day > 30 {\n            return false;\n      \
    \  }\n        return true;\n    }\n    return false;", "    let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n    if date_vec.len() != 3 {\n        return\
    \ false;\n    }\n    let month: u32 = match date_vec[0].parse() {\n        Ok(num)\
    \ => num,\n        Err(_) => return false,\n    };\n    let day: u32 = match date_vec[1].parse()\
    \ {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    let\
    \ year: u32 = match date_vec[2].parse() {\n        Ok(num) => num,\n        Err(_)\
    \ => return false,\n    };\n    if month < 1 || month > 12 {\n        return false;\n\
    \    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false;\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day < 1 || day > 30 {\n            return false;\n     \
    \   }\n    } else {\n        if day < 1 || day > 31 {\n            return false;\n\
    \        }\n    }\n    if year < 1 {\n        return false;\n    }\n    true",
  "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\"\
    ).unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n    let\
    \ v: Vec<&str> = date.split(\"-\").collect();\n    let month = v[0].parse::<i32>().unwrap();\n\
    \    let day = v[1].parse::<i32>().unwrap();\n    let year = v[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    true", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n    let\
    \ date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if year < 0 {\n        return false;\n    }\n    if month < 1 || month >\
    \ 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n        return\
    \ false;\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false;\n        }\n        if day == 29 {\n            if year % 4 != 0 {\n\
    \                return false;\n            }\n            if year % 100 == 0\
    \ && year % 400 != 0 {\n                return false;\n            }\n       \
    \ }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n \
    \       if day > 30 {\n            return false;\n        }\n    }\n    true",
  "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    return date_regex.is_match(&date);", "    let mut date_split\
    \ = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n    for\
    \ i in date_split {\n        let j = i.parse::<i32>().unwrap();\n        date_vec.push(j);\n\
    \    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n    if date_vec[0]\
    \ < 1 || date_vec[0] > 12 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0] == 7 || date_vec[0]\
    \ == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n        if date_vec[1] < 1\
    \ || date_vec[1] > 31 {\n            return false;\n        }\n    } else if date_vec[0]\
    \ == 4 || date_vec[0] == 6 || date_vec[0] == 9 || date_vec[0] == 11 {\n      \
    \  if date_vec[1] < 1 || date_vec[1] > 30 {\n            return false;\n     \
    \   }\n    } else if date_vec[0] == 2 {\n        if date_vec[1] < 1 || date_vec[1]\
    \ > 29 {\n            return false;\n        }\n    }\n    return true;", "  \
    \  let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        if day > 30 {\n            return false;\n     \
    \   }\n    }\n    if year < 0 {\n        return false;\n    }\n    true", "  \
    \  let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if re.is_match(&date) {\n        let v: Vec<&str> = date.split(\"\
    -\").collect();\n        let month = v[0].parse::<i32>().unwrap();\n        let\
    \ day = v[1].parse::<i32>().unwrap();\n        let year = v[2].parse::<i32>().unwrap();\n\
    \        if year % 4 == 0 && month == 2 && day > 29 {\n            return false;\n\
    \        }\n        if year % 4 != 0 && month == 2 && day > 28 {\n           \
    \ return false;\n        }\n        if (month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12) && day > 31 {\n \
    \           return false;\n        }\n        if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) && day > 30 {\n            return false;\n      \
    \  }\n        return true;\n    }\n    return false;", "    let date_regex = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\").unwrap();\n    if date_regex.is_match(&date)\
    \ {\n        let date_vec: Vec<&str> = date.split(\"-\").collect();\n        let\
    \ month = date_vec[0].parse::<i32>().unwrap();\n        let day = date_vec[1].parse::<i32>().unwrap();\n\
    \        let year = date_vec[2].parse::<i32>().unwrap();\n        if month > 12\
    \ || month < 1 {\n            return false;\n        }\n        if day > 31 ||\
    \ day < 1 {\n            return false;\n        }\n        if month == 2 {\n \
    \           if day > 29 {\n                return false;\n            }\n    \
    \    }\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n \
    \           if day > 30 {\n                return false;\n            }\n    \
    \    }\n        if year < 0 {\n            return false;\n        }\n        return\
    \ true;\n    }\n    return false;", "    let mut date_split = date.split(\"-\"\
    );\n    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n\
    \        match i.parse::<i32>() {\n            Ok(x) => date_vec.push(x),\n  \
    \          Err(_) => return false,\n        }\n    }\n    if date_vec.len() !=\
    \ 3 {\n        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0] > 12\
    \ {\n        return false;\n    }\n    if date_vec[1] < 1 {\n        return false;\n\
    \    }\n    if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0]\
    \ == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n     \
    \   if date_vec[1] > 31 {\n            return false;\n        }\n    } else if\
    \ date_vec[0] == 4 || date_vec[0] == 6 || date_vec[0] == 9 || date_vec[0] == 11\
    \ {\n        if date_vec[1] > 30 {\n            return false;\n        }\n   \
    \ } else if date_vec[0] == 2 {\n        if date_vec[1] > 29 {\n            return\
    \ false;\n        }\n    }\n    true", "    let mut date_vec: Vec<&str> = date.split('-').collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<u32>().unwrap();\n\
    \    let day = date_vec[1].parse::<u32>().unwrap();\n    let year = date_vec[2].parse::<u32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        if day > 30 {\n            return false;\n     \
    \   }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "  \
    \  let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    let date_regex_match = date_regex.is_match(&date);\n    if !date_regex_match\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month = date_vec[0].parse::<u32>().unwrap();\n    let\
    \ day = date_vec[1].parse::<u32>().unwrap();\n    let year = date_vec[2].parse::<u32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if year % 4 == 0 {\n            if day < 1 || day > 29 {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ day < 1 || day > 28 {\n                return false;\n            }\n      \
    \  }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n   \
    \         return false;\n        }\n    } else {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    }\n    true", "    let date_vec:\
    \ Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len() != 3 {\n   \
    \     return false;\n    }\n    let month: i32 = date_vec[0].parse().unwrap();\n\
    \    let day: i32 = date_vec[1].parse().unwrap();\n    let year: i32 = date_vec[2].parse().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    true", "    if date.is_empty() {\n        return false;\n   \
    \ }\n\n    let mut split = date.split('-');\n    let month = split.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = split.next().unwrap().parse::<u32>().unwrap();\n    let year =\
    \ split.next().unwrap().parse::<u32>().unwrap();\n\n    if month > 12 || month\
    \ < 1 {\n        return false;\n    }\n\n    if month == 2 {\n        if day >\
    \ 29 || day < 1 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 || day <\
    \ 1 {\n            return false;\n        }\n    } else {\n        if day > 31\
    \ || day < 1 {\n            return false;\n        }\n    }\n\n    true", "  \
    \  let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    let mut date_vec: Vec<i32> = date_vec.iter().map(|x|\
    \ x.parse::<i32>().unwrap()).collect();\n    if date_vec[0] < 1 || date_vec[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec[0] == 2 {\n        if\
    \ date_vec[1] < 1 || date_vec[1] > 29 {\n            return false;\n        }\n\
    \    } else if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0]\
    \ == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n     \
    \   if date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n    \
    \    }\n    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n     \
    \       return false;\n        }\n    }\n    true", "    let date_regex = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\").unwrap();\n    if date_regex.is_match(&date)\
    \ {\n        let date_vec: Vec<&str> = date.split(\"-\").collect();\n        let\
    \ month: u32 = date_vec[0].parse().unwrap();\n        let day: u32 = date_vec[1].parse().unwrap();\n\
    \        let year: u32 = date_vec[2].parse().unwrap();\n        if month > 12\
    \ || day > 31 || year < 1000 || year > 9999 {\n            return false;\n   \
    \     }\n        if month == 2 && day > 29 {\n            return false;\n    \
    \    }\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n \
    \           if day > 30 {\n                return false;\n            }\n    \
    \    }\n        return true;\n    }\n    return false;", "    let mut date_vec:\
    \ Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len() != 3 {\n   \
    \     return false;\n    }\n    let mut date_vec: Vec<i32> = date_vec.iter().map(|x|\
    \ x.parse::<i32>().unwrap()).collect();\n    if date_vec[0] < 1 || date_vec[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec[0] == 2 {\n        if\
    \ date_vec[1] < 1 || date_vec[1] > 29 {\n            return false;\n        }\n\
    \    } else if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0]\
    \ == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n     \
    \   if date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n    \
    \    }\n    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n     \
    \       return false;\n        }\n    }\n    true", "    let re = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\").unwrap();\n    if !re.is_match(&date)\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n    let\
    \ day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) && day > 30 {\n        return false;\n    }\n    if year <\
    \ 1 {\n        return false;\n    }\n    true", "    let mut date_iter = date.split('-');\n\
    \    let month = date_iter.next().unwrap();\n    let day = date_iter.next().unwrap();\n\
    \    let year = date_iter.next().unwrap();\n\n    if month.len() == 0 || day.len()\
    \ == 0 || year.len() == 0 {\n        return false;\n    }\n\n    let month: u32\
    \ = match month.parse() {\n        Ok(n) => n,\n        Err(_) => return false,\n\
    \    };\n\n    let day: u32 = match day.parse() {\n        Ok(n) => n,\n     \
    \   Err(_) => return false,\n    };\n\n    let year: u32 = match year.parse()\
    \ {\n        Ok(n) => n,\n        Err(_) => return false,\n    };\n\n    if month\
    \ < 1 || month > 12 {\n        return false;\n    }\n\n    if month == 2 {\n \
    \       if day < 1 || day > 29 {\n            return false;\n        }\n    }\
    \ else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if\
    \ day < 1 || day > 30 {\n            return false;\n        }\n    } else {\n\
    \        if day < 1 || day > 31 {\n            return false;\n        }\n    }\n\
    \n    true", "    let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    let mut is_valid\
    \ = true;\n    if month < 1 || month > 12 {\n        is_valid = false;\n    }\n\
    \    if day < 1 || day > 31 {\n        is_valid = false;\n    }\n    if month\
    \ == 2 && day > 29 {\n        is_valid = false;\n    }\n    if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            is_valid\
    \ = false;\n        }\n    }\n    if year < 1 {\n        is_valid = false;\n \
    \   }\n    is_valid", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    if !date_regex.is_match(&date) {\n        return false;\n\
    \    }\n    let date_split: Vec<&str> = date.split(\"-\").collect();\n    let\
    \ month = date_split[0].parse::<i32>().unwrap();\n    let day = date_split[1].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) && day > 30 {\n        return false;\n    }\n    true", " \
    \   let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month = date_vec[0].parse::<i32>().unwrap();\n\
    \        let day = date_vec[1].parse::<i32>().unwrap();\n        let year = date_vec[2].parse::<i32>().unwrap();\n\
    \        if month < 1 || month > 12 {\n            return false;\n        }\n\
    \        if month == 2 {\n            if year % 4 == 0 {\n                if day\
    \ < 1 || day > 29 {\n                    return false;\n                }\n  \
    \          } else {\n                if day < 1 || day > 28 {\n              \
    \      return false;\n                }\n            }\n        } else if month\
    \ == 4 || month == 6 || month == 9 || month == 11 {\n            if day < 1 ||\
    \ day > 30 {\n                return false;\n            }\n        } else {\n\
    \            if day < 1 || day > 31 {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    return false;", "    let\
    \ re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n\
    \    if !re.is_match(&date) {\n        return false;\n    }\n    let date_vec:\
    \ Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 {\n       \
    \ if day > 29 {\n            return false;\n        }\n        if day == 29 {\n\
    \            if year % 4 != 0 {\n                return false;\n            }\n\
    \            if year % 100 == 0 && year % 400 != 0 {\n                return false;\n\
    \            }\n        }\n    }\n    if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        if day > 30 {\n            return false;\n     \
    \   }\n    }\n    true", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n\
    \    let date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if year % 4 == 0 {\n            if day < 1 || day > 29 {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ day < 1 || day > 28 {\n                return false;\n            }\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    true", "    let mut date_split = date.split(\"-\");\n    let\
    \ month = date_split.next().unwrap().parse::<u32>().unwrap();\n    let day = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \    let year = date_split.next().unwrap().parse::<u32>().unwrap();\n\n    if\
    \ month < 1 || month > 12 {\n        return false;\n    }\n\n    let max_days\
    \ = match month {\n        1 | 3 | 5 | 7 | 8 | 10 | 12 => 31,\n        4 | 6 |\
    \ 9 | 11 => 30,\n        2 => 29,\n        _ => 0,\n    };\n\n    if day < 1 ||\
    \ day > max_days {\n        return false;\n    }\n\n    true", "    let date_regex\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\").unwrap();\n\
    \    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n        let month: u32 = date_vec[0].parse().unwrap();\n    \
    \    let day: u32 = date_vec[1].parse().unwrap();\n        let year: u32 = date_vec[2].parse().unwrap();\n\
    \        if month > 12 || day > 31 || year < 1 {\n            return false;\n\
    \        }\n        if month == 2 && day > 29 {\n            return false;\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ && day > 30 {\n            return false;\n        }\n        return true;\n\
    \    }\n    return false;", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if re.is_match(&date) {\n        let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n        let month = date_vec[0].parse::<u32>().unwrap();\n  \
    \      let day = date_vec[1].parse::<u32>().unwrap();\n        let year = date_vec[2].parse::<u32>().unwrap();\n\
    \        if month > 12 || day > 31 || year < 1 {\n            return false;\n\
    \        }\n        if month == 2 && day > 29 {\n            return false;\n \
    \       }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ && day > 30 {\n            return false;\n        }\n        return true;\n\
    \    }\n    return false;", "    let mut date_split = date.split(\"-\");\n   \
    \ let month = date_split.next().unwrap().parse::<i32>().unwrap();\n    let day\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        if day > 30 {\n            return false;\n     \
    \   }\n    }\n    return true;", "    let mut date_split = date.split(\"-\");\n\
    \    let mut date_vec: Vec<i32> = Vec::new();\n    for s in date_split {\n   \
    \     match s.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n     \
    \       Err(_) => return false,\n        }\n    }\n    if date_vec.len() != 3\
    \ {\n        return false;\n    }\n    let month = date_vec[0];\n    let day =\
    \ date_vec[1];\n    let year = date_vec[2];\n    if month < 1 || month > 12 {\n\
    \        return false;\n    }\n    if year < 1 {\n        return false;\n    }\n\
    \    if month == 2 {\n        if day < 1 || day > 29 {\n            return false;\n\
    \        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false;\n        }\n\
    \    } else {\n        if day < 1 || day > 31 {\n            return false;\n \
    \       }\n    }\n    true", "    let mut date_split = date.split(\"-\");\n  \
    \  let month = date_split.next().unwrap().parse::<u32>().unwrap();\n    let day\
    \ = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \n    if month < 1 || month > 12 {\n        return false;\n    }\n\n    if day\
    \ < 1 || day > 31 {\n        return false;\n    }\n\n    if month == 2 && day\
    \ > 29 {\n        return false;\n    }\n\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        if day > 30 {\n            return false;\n  \
    \      }\n    }\n\n    true", "    let mut date_split = date.split(\"-\");\n \
    \   let mut date_vec: Vec<&str> = Vec::new();\n    for i in date_split {\n   \
    \     date_vec.push(i);\n    }\n    if date_vec.len() != 3 {\n        return false;\n\
    \    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n    let day = date_vec[1].parse::<i32>().unwrap();\n\
    \    let year = date_vec[2].parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12 {\n        if day < 1 || day > 31 {\n            return false;\n\
    \        }\n    } else {\n        if day < 1 || day > 30 {\n            return\
    \ false;\n        }\n    }\n    if year < 1 {\n        return false;\n    }\n\
    \    return true;", "    let mut date_iter = date.split(\"-\");\n    let month\
    \ = date_iter.next().unwrap();\n    let day = date_iter.next().unwrap();\n   \
    \ let year = date_iter.next().unwrap();\n    let month_num = month.parse::<u8>().unwrap();\n\
    \    let day_num = day.parse::<u8>().unwrap();\n    let year_num = year.parse::<u16>().unwrap();\n\
    \    if month_num > 12 || month_num < 1 {\n        return false;\n    }\n    if\
    \ month_num == 2 {\n        if day_num > 29 || day_num < 1 {\n            return\
    \ false;\n        }\n    } else if month_num == 4 || month_num == 6 || month_num\
    \ == 9 || month_num == 11 {\n        if day_num > 30 || day_num < 1 {\n      \
    \      return false;\n        }\n    } else {\n        if day_num > 31 || day_num\
    \ < 1 {\n            return false;\n        }\n    }\n    if year_num < 1 {\n\
    \        return false;\n    }\n    true", "    let mut date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    if date_vec.len() != 3 {\n        return false;\n    }\n\
    \    let month: i32 = date_vec[0].parse().unwrap();\n    let day: i32 = date_vec[1].parse().unwrap();\n\
    \    let year: i32 = date_vec[2].parse().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false;\n        }\n    }\n    if year <\
    \ 1 {\n        return false;\n    }\n    return true;", "    let mut date_split\
    \ = date.split('-');\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    let days_in_month\
    \ = match month {\n        1 | 3 | 5 | 7 | 8 | 10 | 12 => 31,\n        4 | 6 |\
    \ 9 | 11 => 30,\n        2 => 29,\n        _ => 0,\n    };\n    if month < 1 ||\
    \ month > 12 || day < 1 || day > days_in_month || year < 1 {\n        return false;\n\
    \    }\n    true", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    if re.is_match(&date) {\n        let v: Vec<&str> = date.split(\"\
    -\").collect();\n        let month = v[0].parse::<i32>().unwrap();\n        let\
    \ day = v[1].parse::<i32>().unwrap();\n        let year = v[2].parse::<i32>().unwrap();\n\
    \        if year < 0 {\n            return false;\n        }\n        if month\
    \ < 1 || month > 12 {\n            return false;\n        }\n        if day <\
    \ 1 || day > 31 {\n            return false;\n        }\n        if month == 2\
    \ {\n            if day > 29 {\n                return false;\n            }\n\
    \        }\n        if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \            if day > 30 {\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n    return false;", "    let date_regex\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\").unwrap();\n\
    \    let date_regex_match = date_regex.is_match(&date);\n    if !date_regex_match\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month = date_vec[0].parse::<u32>().unwrap();\n    let\
    \ day = date_vec[1].parse::<u32>().unwrap();\n    let year = date_vec[2].parse::<u32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let date_split: Vec<&str> = date.split(\"-\").collect();\n    if date_split.len()\
    \ != 3 {\n        return false;\n    }\n    let month: i32 = date_split[0].parse().unwrap();\n\
    \    let day: i32 = date_split[1].parse().unwrap();\n    let year: i32 = date_split[2].parse().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) && day > 30 {\n        return false;\n    }\n    if year <\
    \ 0 {\n        return false;\n    }\n    true", "    let mut valid = true;\n \
    \   let mut days_in_month = 31;\n    let mut month = 0;\n    let mut year = 0;\n\
    \    let mut day = 0;\n    let mut date_split = date.split(\"-\");\n    for (i,\
    \ date_part) in date_split.enumerate() {\n        let date_part_int = date_part.parse::<i32>();\n\
    \        match date_part_int {\n            Ok(date_part_int) => {\n         \
    \       match i {\n                    0 => {\n                        month =\
    \ date_part_int;\n                        if month < 1 || month > 12 {\n     \
    \                       valid = false;\n                        }\n          \
    \          }\n                    1 => {\n                        day = date_part_int;\n\
    \                        if month == 2 {\n                            days_in_month\
    \ = 28;\n                        } else if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n                            days_in_month = 30;\n      \
    \                  }\n                        if day < 1 || day > days_in_month\
    \ {\n                            valid = false;\n                        }\n \
    \                   }\n                    2 => {\n                        year\
    \ = date_part_int;\n                        if year < 1 {\n                  \
    \          valid = false;\n                        }\n                    }\n\
    \                    _ => {}\n                }\n            }\n            Err(_)\
    \ => {\n                valid = false;\n            }\n        }\n    }\n    valid",
  "    let mut date_split = date.split(\"-\");\n    let month: i32 = match date_split.next()\
    \ {\n        Some(m) => match m.parse::<i32>() {\n            Ok(m) => m,\n  \
    \          Err(_) => return false,\n        },\n        None => return false,\n\
    \    };\n    let day: i32 = match date_split.next() {\n        Some(d) => match\
    \ d.parse::<i32>() {\n            Ok(d) => d,\n            Err(_) => return false,\n\
    \        },\n        None => return false,\n    };\n    let year: i32 = match\
    \ date_split.next() {\n        Some(y) => match y.parse::<i32>() {\n         \
    \   Ok(y) => y,\n            Err(_) => return false,\n        },\n        None\
    \ => return false,\n    };\n    if month < 1 || month > 12 {\n        return false;\n\
    \    }\n    if day < 1 {\n        return false;\n    }\n    if month == 2 {\n\
    \        if year % 4 == 0 {\n            if day > 29 {\n                return\
    \ false;\n            }\n        } else {\n            if day > 28 {\n       \
    \         return false;\n            }\n        }\n    } else if month == 4 ||\
    \ month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n         \
    \   return false;\n        }\n    } else {\n        if day > 31 {\n          \
    \  return false;\n        }\n    }\n    true", "    let mut date_split = date.split(\"\
    -\");\n    let month: u32 = match date_split.next() {\n        Some(x) => x.parse().unwrap(),\n\
    \        None => return false,\n    };\n    let day: u32 = match date_split.next()\
    \ {\n        Some(x) => x.parse().unwrap(),\n        None => return false,\n \
    \   };\n    let year: u32 = match date_split.next() {\n        Some(x) => x.parse().unwrap(),\n\
    \        None => return false,\n    };\n    if month < 1 || month > 12 {\n   \
    \     return false;\n    }\n    if month == 2 {\n        if day < 1 || day > 29\
    \ {\n            return false;\n        }\n    } else if month == 4 || month ==\
    \ 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n       \
    \     return false;\n        }\n    } else {\n        if day < 1 || day > 31 {\n\
    \            return false;\n        }\n    }\n    return true;", "    let mut\
    \ date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30 {\n        return false;\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    true", "    let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if year % 4 == 0 {\n            if day < 1 || day > 29 {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ day < 1 || day > 28 {\n                return false;\n            }\n      \
    \  }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n   \
    \         return false;\n        }\n    } else {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    }\n    return true;", "    let\
    \ mut valid = true;\n    let mut date_split = date.split(\"-\");\n    let month\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let year = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month\
    \ < 1 || month > 12 {\n        valid = false;\n    }\n    if month == 2 {\n  \
    \      if day < 1 || day > 29 {\n            valid = false;\n        }\n    }\
    \ else if month == 4 || month == 6 || month == 9 || month == 11 {\n        if\
    \ day < 1 || day > 30 {\n            valid = false;\n        }\n    } else {\n\
    \        if day < 1 || day > 31 {\n            valid = false;\n        }\n   \
    \ }\n    if year < 1 {\n        valid = false;\n    }\n    valid", "    let mut\
    \ date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false;\n        }\n    }\n    if year <\
    \ 1 {\n        return false;\n    }\n    true", "    let mut date_split = date.split('-');\n\
    \    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n    let\
    \ day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) && day > 30 {\n        return false;\n    }\n    if year <\
    \ 0 {\n        return false;\n    }\n    true", "    let mut date_split = date.split(\"\
    -\");\n    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n\
    \        let num = i.parse::<i32>();\n        match num {\n            Ok(n) =>\
    \ date_vec.push(n),\n            Err(_) => return false,\n        }\n    }\n \
    \   if date_vec.len() != 3 {\n        return false;\n    }\n    if date_vec[0]\
    \ < 1 || date_vec[0] > 12 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 2 {\n        if date_vec[1] < 1 || date_vec[1] > 29 {\n            return\
    \ false;\n        }\n    } else if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0]\
    \ == 5 || date_vec[0] == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0]\
    \ == 12 {\n        if date_vec[1] < 1 || date_vec[1] > 31 {\n            return\
    \ false;\n        }\n    } else {\n        if date_vec[1] < 1 || date_vec[1] >\
    \ 30 {\n            return false;\n        }\n    }\n    true", "    let date_regex\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\").unwrap();\n\
    \    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n        let month = date_vec[0].parse::<u32>().unwrap();\n  \
    \      let day = date_vec[1].parse::<u32>().unwrap();\n        let year = date_vec[2].parse::<u32>().unwrap();\n\
    \        if month > 12 || month < 1 {\n            return false;\n        }\n\
    \        if month == 2 {\n            if day > 29 || day < 1 {\n             \
    \   return false;\n            }\n        } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n            if day > 30 || day < 1 {\n        \
    \        return false;\n            }\n        } else {\n            if day >\
    \ 31 || day < 1 {\n                return false;\n            }\n        }\n \
    \       if year < 1 {\n            return false;\n        }\n        return true;\n\
    \    }\n    return false;", "    let mut date_split = date.split(\"-\");\n   \
    \ let month = date_split.next().unwrap().parse::<i32>().unwrap();\n    let day\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    return true;", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if re.is_match(&date) {\n        let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n        let month = date_vec[0].parse::<i32>().unwrap();\n  \
    \      let day = date_vec[1].parse::<i32>().unwrap();\n        let year = date_vec[2].parse::<i32>().unwrap();\n\
    \        if month < 1 || month > 12 {\n            return false;\n        }\n\
    \        if month == 2 {\n            if year % 4 == 0 {\n                if day\
    \ < 1 || day > 29 {\n                    return false;\n                }\n  \
    \          } else {\n                if day < 1 || day > 28 {\n              \
    \      return false;\n                }\n            }\n        } else if month\
    \ == 4 || month == 6 || month == 9 || month == 11 {\n            if day < 1 ||\
    \ day > 30 {\n                return false;\n            }\n        } else {\n\
    \            if day < 1 || day > 31 {\n                return false;\n       \
    \     }\n        }\n        return true;\n    }\n    return false;", "    let\
    \ date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    let date_regex_match = date_regex.is_match(&date);\n    if !date_regex_match\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n    let\
    \ day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let mut valid = true;\n    let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n\
    \    if date_vec.len() != 3 {\n        valid = false;\n    } else {\n        let\
    \ month: i32 = date_vec[0].parse().unwrap();\n        let day: i32 = date_vec[1].parse().unwrap();\n\
    \        let year: i32 = date_vec[2].parse().unwrap();\n        if month < 1 ||\
    \ month > 12 {\n            valid = false;\n        } else if month == 2 {\n \
    \           if day < 1 || day > 29 {\n                valid = false;\n       \
    \     }\n        } else if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n            if day < 1 || day > 30 {\n                valid = false;\n\
    \            }\n        } else {\n            if day < 1 || day > 31 {\n     \
    \           valid = false;\n            }\n        }\n    }\n    valid", "   \
    \ let mut split = date.split(\"-\");\n    let month = split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = split.next().unwrap().parse::<i32>().unwrap();\n    let year =\
    \ split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month >\
    \ 12 {\n        return false;\n    }\n    if month == 2 {\n        if day < 1\
    \ || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    true", "   \
    \ let mut date_split = date.split('-');\n    let mut date_vec: Vec<u32> = Vec::new();\n\
    \    for i in date_split {\n        date_vec.push(i.parse::<u32>().unwrap());\n\
    \    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n    let mut\
    \ days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if date_vec[0]\
    \ == 2 && date_vec[2] % 4 == 0 {\n        days_in_month[1] = 29;\n    }\n    if\
    \ date_vec[0] < 1 || date_vec[0] > 12 {\n        return false;\n    }\n    if\
    \ date_vec[1] < 1 || date_vec[1] > days_in_month[(date_vec[0] - 1) as usize] {\n\
    \        return false;\n    }\n    return true;", "    let mut date_split = date.split(\"\
    -\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n \
    \   let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30 {\n        return false;\n    }\n    true", "    let date_regex = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\").unwrap();\n    if date_regex.is_match(&date)\
    \ {\n        let date_vec: Vec<&str> = date.split(\"-\").collect();\n        let\
    \ month: i32 = date_vec[0].parse().unwrap();\n        let day: i32 = date_vec[1].parse().unwrap();\n\
    \        let year: i32 = date_vec[2].parse().unwrap();\n        if month < 1 ||\
    \ month > 12 {\n            return false;\n        }\n        if month == 2 {\n\
    \            if day < 1 || day > 29 {\n                return false;\n       \
    \     }\n        } else if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n            if day < 1 || day > 30 {\n                return false;\n\
    \            }\n        } else {\n            if day < 1 || day > 31 {\n     \
    \           return false;\n            }\n        }\n        return true;\n  \
    \  }\n    return false;", "    let mut date_split = date.split(\"-\");\n    let\
    \ mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n        match\
    \ i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n            Err(_)\
    \ => return false,\n        }\n    }\n    if date_vec.len() != 3 {\n        return\
    \ false;\n    }\n    if date_vec[0] < 1 || date_vec[0] > 12 {\n        return\
    \ false;\n    }\n    if date_vec[0] == 2 {\n        if date_vec[1] < 1 || date_vec[1]\
    \ > 29 {\n            return false;\n        }\n    } else if date_vec[0] == 1\
    \ || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0] == 7 || date_vec[0] ==\
    \ 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n        if date_vec[1] < 1 ||\
    \ date_vec[1] > 31 {\n            return false;\n        }\n    } else {\n   \
    \     if date_vec[1] < 1 || date_vec[1] > 30 {\n            return false;\n  \
    \      }\n    }\n    true", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n\
    \    let date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30 {\n        return false;\n    }\n    true", "    if date.is_empty() {\n\
    \        return false;\n    }\n\n    let mut date_split = date.split(\"-\");\n\
    \    let month = date_split.next().unwrap().parse::<u32>().unwrap();\n    let\
    \ day = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \n    if month < 1 || month > 12 {\n        return false;\n    }\n\n    if day\
    \ < 1 || day > 31 {\n        return false;\n    }\n\n    if month == 2 && day\
    \ > 29 {\n        return false;\n    }\n\n    if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) && day > 30 {\n        return false;\n    }\n\n \
    \   if year < 1 {\n        return false;\n    }\n\n    true", "    let mut date_split\
    \ = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n    for\
    \ i in date_split {\n        date_vec.push(i.parse::<i32>().unwrap());\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    if date_vec[0]\
    \ < 1 || date_vec[0] > 12 {\n        return false;\n    }\n    if date_vec[0]\
    \ == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0] == 7 || date_vec[0]\
    \ == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n        if date_vec[1] < 1\
    \ || date_vec[1] > 31 {\n            return false;\n        }\n    } else if date_vec[0]\
    \ == 4 || date_vec[0] == 6 || date_vec[0] == 9 || date_vec[0] == 11 {\n      \
    \  if date_vec[1] < 1 || date_vec[1] > 30 {\n            return false;\n     \
    \   }\n    } else if date_vec[0] == 2 {\n        if date_vec[1] < 1 || date_vec[1]\
    \ > 29 {\n            return false;\n        }\n    }\n    return true;", "  \
    \  let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    if !date_regex.is_match(&date) {\n        return false;\n\
    \    }\n    let date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month\
    \ = date_vec[0].parse::<i32>().unwrap();\n    let day = date_vec[1].parse::<i32>().unwrap();\n\
    \    let year = date_vec[2].parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    true", "   \
    \ let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len()\
    \ != 3 {\n        return false;\n    }\n    let month: i32 = date_vec[0].parse().unwrap();\n\
    \    let day: i32 = date_vec[1].parse().unwrap();\n    let year: i32 = date_vec[2].parse().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    let date_regex_match = date_regex.is_match(&date);\n    if !date_regex_match\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month: u32 = date_vec[0].parse().unwrap();\n    let day:\
    \ u32 = date_vec[1].parse().unwrap();\n    let year: u32 = date_vec[2].parse().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let date_regex = Regex::new(r\"^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$\"\
    ).unwrap();\n    date_regex.is_match(&date)", "    let mut date_iter = date.split(\"\
    -\");\n    let mut date_vec: Vec<u32> = Vec::new();\n    for i in date_iter {\n\
    \        match i.parse::<u32>() {\n            Ok(n) => date_vec.push(n),\n  \
    \          Err(_) => return false,\n        }\n    }\n    if date_vec.len() !=\
    \ 3 {\n        return false;\n    }\n    let month = date_vec[0];\n    let day\
    \ = date_vec[1];\n    let year = date_vec[2];\n    if month == 0 || month > 12\
    \ {\n        return false;\n    }\n    if day == 0 {\n        return false;\n\
    \    }\n    if month == 2 {\n        if day > 29 {\n            return false;\n\
    \        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day > 30 {\n            return false;\n        }\n    } else {\n\
    \        if day > 31 {\n            return false;\n        }\n    }\n    if year\
    \ < 1000 || year > 9999 {\n        return false;\n    }\n    true", "    let re\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n\
    \    if !re.is_match(&date) {\n        return false;\n    }\n    let date_vec:\
    \ Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<u32>().unwrap();\n\
    \    let day = date_vec[1].parse::<u32>().unwrap();\n    let year = date_vec[2].parse::<u32>().unwrap();\n\
    \    if month > 12 || day > 31 || year < 1 {\n        return false;\n    }\n \
    \   if month == 2 && day > 29 {\n        return false;\n    }\n    if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n    \
    \        return false;\n        }\n    }\n    true", "    let re = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\").unwrap();\n    if !re.is_match(&date)\
    \ {\n        return false;\n    }\n    let v: Vec<&str> = date.split(\"-\").collect();\n\
    \    let month = v[0].parse::<i32>().unwrap();\n    let day = v[1].parse::<i32>().unwrap();\n\
    \    let year = v[2].parse::<i32>().unwrap();\n    if month < 1 || month > 12\
    \ {\n        return false;\n    }\n    if month == 2 {\n        if year % 4 ==\
    \ 0 {\n            if day < 1 || day > 29 {\n                return false;\n \
    \           }\n        } else {\n            if day < 1 || day > 28 {\n      \
    \          return false;\n            }\n        }\n    } else if month == 4 ||\
    \ month == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n\
    \            return false;\n        }\n    } else {\n        if day < 1 || day\
    \ > 31 {\n            return false;\n        }\n    }\n    true", "    let mut\
    \ date_iter = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_iter {\n        match i.parse::<i32>() {\n            Ok(n)\
    \ => date_vec.push(n),\n            Err(_) => return false,\n        }\n    }\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let mut days\
    \ = date_vec[1];\n    let mut months = date_vec[0];\n    let mut years = date_vec[2];\n\
    \    if months > 12 || months < 1 {\n        return false;\n    }\n    if months\
    \ == 2 {\n        if years % 4 == 0 {\n            if days > 29 || days < 1 {\n\
    \                return false;\n            }\n        } else {\n            if\
    \ days > 28 || days < 1 {\n                return false;\n            }\n    \
    \    }\n    } else if months == 4 || months == 6 || months == 9 || months == 11\
    \ {\n        if days > 30 || days < 1 {\n            return false;\n        }\n\
    \    } else {\n        if days > 31 || days < 1 {\n            return false;\n\
    \        }\n    }\n    true", "    let date_vec: Vec<&str> = date.split(\"-\"\
    ).collect();\n    if date_vec.len() != 3 {\n        return false;\n    }\n   \
    \ let month: i32 = date_vec[0].parse().unwrap();\n    let day: i32 = date_vec[1].parse().unwrap();\n\
    \    let year: i32 = date_vec[2].parse().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    if year < 1\
    \ {\n        return false;\n    }\n    true", "    let mut iter = date.split(\"\
    -\");\n    let month: u32 = iter.next().unwrap().parse().unwrap();\n    let day:\
    \ u32 = iter.next().unwrap().parse().unwrap();\n    let year: u32 = iter.next().unwrap().parse().unwrap();\n\
    \n    if month < 1 || month > 12 {\n        return false;\n    }\n\n    if day\
    \ < 1 {\n        return false;\n    }\n\n    if month == 2 {\n        if day >\
    \ 29 {\n            return false;\n        }\n    } else if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return\
    \ false;\n        }\n    } else {\n        if day > 31 {\n            return false;\n\
    \        }\n    }\n\n    return true;", "    let mut date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    if date_vec.len() != 3 {\n        return false;\n    }\n\
    \    let mut date_vec: Vec<i32> = date_vec.iter().map(|x| x.parse::<i32>().unwrap()).collect();\n\
    \    if date_vec[0] < 1 || date_vec[0] > 12 {\n        return false;\n    }\n\
    \    if date_vec[0] == 2 {\n        if date_vec[1] < 1 || date_vec[1] > 29 {\n\
    \            return false;\n        }\n    } else if date_vec[0] == 4 || date_vec[0]\
    \ == 6 || date_vec[0] == 9 || date_vec[0] == 11 {\n        if date_vec[1] < 1\
    \ || date_vec[1] > 30 {\n            return false;\n        }\n    } else {\n\
    \        if date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n\
    \        }\n    }\n    true", "    let date_split: Vec<&str> = date.split(\"-\"\
    ).collect();\n    if date_split.len() != 3 {\n        return false;\n    }\n \
    \   let day = date_split[1].parse::<i32>().unwrap();\n    let month = date_split[0].parse::<i32>().unwrap();\n\
    \    let year = date_split[2].parse::<i32>().unwrap();\n    if month > 12 || month\
    \ < 1 {\n        return false;\n    }\n    if day > 31 || day < 1 {\n        return\
    \ false;\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false;\n        }\n        if day == 29 {\n            if year % 4 != 0 {\n\
    \                return false;\n            }\n            if year % 100 == 0\
    \ && year % 400 != 0 {\n                return false;\n            }\n       \
    \ }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n \
    \       if day > 30 {\n            return false;\n        }\n    }\n    true",
  "    let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30 {\n        return false;\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    true", "    let mut date_split = date.split(\"-\");\n    let month\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let year = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month\
    \ < 1 || month > 12 {\n        return false;\n    }\n    if month == 2 {\n   \
    \     if day < 1 || day > 29 {\n            return false;\n        }\n    } else\
    \ if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day <\
    \ 1 || day > 30 {\n            return false;\n        }\n    } else {\n      \
    \  if day < 1 || day > 31 {\n            return false;\n        }\n    }\n   \
    \ return true;", "    let mut date_split = date.split('-');\n    let mut date_vec:\
    \ Vec<i32> = Vec::new();\n    for i in date_split {\n        match i.parse::<i32>()\
    \ {\n            Ok(n) => date_vec.push(n),\n            Err(_) => return false,\n\
    \        }\n    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n\
    \    let mut days = date_vec[1];\n    let mut months = date_vec[0];\n    let mut\
    \ years = date_vec[2];\n    if months < 1 || months > 12 {\n        return false;\n\
    \    }\n    if months == 2 {\n        if days < 1 || days > 29 {\n           \
    \ return false;\n        }\n    } else if months == 1 || months == 3 || months\
    \ == 5 || months == 7 || months == 8 || months == 10 || months == 12 {\n     \
    \   if days < 1 || days > 31 {\n            return false;\n        }\n    } else\
    \ {\n        if days < 1 || days > 30 {\n            return false;\n        }\n\
    \    }\n    return true;", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n    let\
    \ v: Vec<&str> = date.split(\"-\").collect();\n    let month = v[0].parse::<u32>().unwrap();\n\
    \    let day = v[1].parse::<u32>().unwrap();\n    let year = v[2].parse::<u32>().unwrap();\n\
    \    if month > 12 || day > 31 || day < 1 {\n        return false;\n    }\n  \
    \  if month == 2 && day > 29 {\n        return false;\n    }\n    if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n    \
    \        return false;\n        }\n    }\n    if year % 4 == 0 {\n        if year\
    \ % 100 == 0 {\n            if year % 400 == 0 {\n                return true;\n\
    \            }\n            return false;\n        }\n        return true;\n \
    \   }\n    return false;", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month = date_vec[0].parse::<i32>().unwrap();\n\
    \        let day = date_vec[1].parse::<i32>().unwrap();\n        let year = date_vec[2].parse::<i32>().unwrap();\n\
    \        if year % 4 == 0 && year % 100 != 0 || year % 400 == 0 {\n          \
    \  if month == 2 && day >= 1 && day <= 29 {\n                return true;\n  \
    \          }\n        }\n        if month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12 {\n            if day\
    \ >= 1 && day <= 31 {\n                return true;\n            }\n        }\n\
    \        if month == 4 || month == 6 || month == 9 || month == 11 {\n        \
    \    if day >= 1 && day <= 30 {\n                return true;\n            }\n\
    \        }\n    }\n    false", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n    let\
    \ date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<u32>().unwrap();\n\
    \    let day = date_vec[1].parse::<u32>().unwrap();\n    let year = date_vec[2].parse::<u32>().unwrap();\n\
    \    if month > 12 || month < 1 {\n        return false;\n    }\n    if day >\
    \ 31 || day < 1 {\n        return false;\n    }\n    if month == 2 {\n       \
    \ if day > 29 {\n            return false;\n        }\n        if day == 29 {\n\
    \            if year % 4 != 0 {\n                return false;\n            }\n\
    \            if year % 100 == 0 && year % 400 != 0 {\n                return false;\n\
    \            }\n        }\n    }\n    if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        if day > 30 {\n            return false;\n     \
    \   }\n    }\n    true", "    let mut date_split = date.split(\"-\");\n    let\
    \ mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n        match\
    \ i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n            Err(_)\
    \ => return false,\n        }\n    }\n    if date_vec.len() != 3 {\n        return\
    \ false;\n    }\n    if date_vec[0] < 1 || date_vec[0] > 12 {\n        return\
    \ false;\n    }\n    if date_vec[1] < 1 || date_vec[1] > 31 {\n        return\
    \ false;\n    }\n    if date_vec[0] == 2 && date_vec[1] > 29 {\n        return\
    \ false;\n    }\n    if date_vec[0] == 4 || date_vec[0] == 6 || date_vec[0] ==\
    \ 9 || date_vec[0] == 11 {\n        if date_vec[1] > 30 {\n            return\
    \ false;\n        }\n    }\n    true", "    let mut date_iter = date.split(\"\
    -\");\n    let month = date_iter.next().unwrap().parse::<i32>().unwrap();\n  \
    \  let day = date_iter.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_iter.next().unwrap().parse::<i32>().unwrap();\n    let mut days_in_month\
    \ = 31;\n    if month == 2 {\n        days_in_month = 28;\n        if year % 4\
    \ == 0 {\n            days_in_month = 29;\n        }\n    } else if month == 4\
    \ || month == 6 || month == 9 || month == 11 {\n        days_in_month = 30;\n\
    \    }\n    if month < 1 || month > 12 || day < 1 || day > days_in_month {\n \
    \       return false;\n    }\n    return true;", "    let re = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n    if !re.is_match(&date)\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n    let\
    \ day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if year < 0 {\n        return false;\n    }\n    if month < 1 || month >\
    \ 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n        return\
    \ false;\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false;\n        }\n        if day == 29 {\n            if year % 4 != 0 {\n\
    \                return false;\n            }\n            if year % 100 == 0\
    \ && year % 400 != 0 {\n                return false;\n            }\n       \
    \ }\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n \
    \       if day > 30 {\n            return false;\n        }\n    }\n    true",
  "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    if !date_regex.is_match(&date) {\n        return false;\n\
    \    }\n    let date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month\
    \ = date_vec[0].parse::<u32>().unwrap();\n    let day = date_vec[1].parse::<u32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        if day > 30 {\n            return false;\n     \
    \   }\n    }\n    true", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n    let\
    \ v: Vec<&str> = date.split(\"-\").collect();\n    let month = v[0].parse::<i32>().unwrap();\n\
    \    let day = v[1].parse::<i32>().unwrap();\n    let year = v[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if year % 4 == 0 {\n            if day < 1 || day > 29 {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ day < 1 || day > 28 {\n                return false;\n            }\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    true", "    let mut date_split = date.split(\"-\");\n    let\
    \ month = date_split.next().unwrap().parse::<i32>().unwrap();\n    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let year = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month\
    \ < 1 || month > 12 {\n        return false;\n    }\n    if day < 1 || day > 31\
    \ {\n        return false;\n    }\n    if month == 2 && day > 29 {\n        return\
    \ false;\n    }\n    if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day > 30 {\n            return false;\n        }\n    }\n    return\
    \ true;", "    let mut date_iter = date.split('-');\n    let month = date_iter.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_iter.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_iter.next().unwrap().parse::<u32>().unwrap();\n\n    if month < 1 ||\
    \ month > 12 {\n        return false;\n    }\n\n    if day < 1 {\n        return\
    \ false;\n    }\n\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false;\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day > 31 {\n            return false;\n        }\n    }\n\
    \n    true", "    let mut date_split = date.split(\"-\");\n    let mut date_vec:\
    \ Vec<i32> = Vec::new();\n    for i in date_split {\n        match i.parse::<i32>()\
    \ {\n            Ok(n) => date_vec.push(n),\n            Err(_) => return false,\n\
    \        }\n    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n\
    \    let mut days = vec![31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  \
    \  if date_vec[2] % 4 == 0 {\n        days[1] = 29;\n    }\n    if date_vec[0]\
    \ < 1 || date_vec[0] > 12 {\n        return false;\n    }\n    if date_vec[1]\
    \ < 1 || date_vec[1] > days[(date_vec[0] - 1) as usize] {\n        return false;\n\
    \    }\n    true", "    let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if day < 1 || day > 29 {\n            return false;\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    if year < 1 {\n        return false;\n    }\n    true", "   \
    \ let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false;\n        }\n    }\n    if year <\
    \ 1 {\n        return false;\n    }\n    return true;", "    let re = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n    if re.is_match(&date)\
    \ {\n        let date_vec: Vec<&str> = date.split(\"-\").collect();\n        let\
    \ month = date_vec[0].parse::<i32>().unwrap();\n        let day = date_vec[1].parse::<i32>().unwrap();\n\
    \        let year = date_vec[2].parse::<i32>().unwrap();\n        if month > 12\
    \ || month < 1 {\n            return false;\n        }\n        if day > 31 ||\
    \ day < 1 {\n            return false;\n        }\n        if month == 2 {\n \
    \           if day > 29 {\n                return false;\n            }\n    \
    \        if day == 29 {\n                if year % 4 != 0 {\n                \
    \    return false;\n                }\n                if year % 100 == 0 && year\
    \ % 400 != 0 {\n                    return false;\n                }\n       \
    \     }\n        }\n        if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n            if day > 30 {\n                return false;\n        \
    \    }\n        }\n        return true;\n    }\n    return false;", "    let mut\
    \ date_split = date.split(\"-\");\n    let month = date_split.next().unwrap().parse::<u32>().unwrap();\n\
    \    let day = date_split.next().unwrap().parse::<u32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<u32>().unwrap();\n\n    if month < 1 ||\
    \ month > 12 {\n        return false;\n    }\n\n    if year < 1 {\n        return\
    \ false;\n    }\n\n    if month == 2 {\n        if day < 1 || day > 29 {\n   \
    \         return false;\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return\
    \ false;\n        }\n    } else {\n        if day < 1 || day > 31 {\n        \
    \    return false;\n        }\n    }\n\n    true", "    let mut date_iter = date.split(\"\
    -\");\n    let month = date_iter.next().unwrap();\n    let day = date_iter.next().unwrap();\n\
    \    let year = date_iter.next().unwrap();\n    let month = month.parse::<i32>().unwrap();\n\
    \    let day = day.parse::<i32>().unwrap();\n    let year = year.parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 {\n       \
    \ if day > 29 {\n            return false;\n        }\n    }\n    if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n    \
    \        return false;\n        }\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    return true;", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month = date_vec[0].parse::<u32>().unwrap();\n\
    \        let day = date_vec[1].parse::<u32>().unwrap();\n        let year = date_vec[2].parse::<u32>().unwrap();\n\
    \        if month == 2 {\n            if day > 29 {\n                return false;\n\
    \            }\n            if day == 29 {\n                if year % 4 != 0 {\n\
    \                    return false;\n                }\n                if year\
    \ % 100 == 0 && year % 400 != 0 {\n                    return false;\n       \
    \         }\n            }\n        } else if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n            if day > 30 {\n                return false;\n\
    \            }\n        } else if day > 31 {\n            return false;\n    \
    \    }\n        return true;\n    }\n    return false;", "    let mut date_vec:\
    \ Vec<&str> = date.split(\"-\").collect();\n    if date_vec.len() != 3 {\n   \
    \     return false;\n    }\n    let day: i32 = match date_vec[1].parse() {\n \
    \       Ok(num) => num,\n        Err(_) => return false,\n    };\n    let month:\
    \ i32 = match date_vec[0].parse() {\n        Ok(num) => num,\n        Err(_) =>\
    \ return false,\n    };\n    let year: i32 = match date_vec[2].parse() {\n   \
    \     Ok(num) => num,\n        Err(_) => return false,\n    };\n    if month <\
    \ 1 || month > 12 {\n        return false;\n    }\n    if day < 1 || day > 31\
    \ {\n        return false;\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false;\n        }\n    }\n    if month == 4 || month == 6\
    \ || month == 9 || month == 11 {\n        if day > 30 {\n            return false;\n\
    \        }\n    }\n    if year < 0 {\n        return false;\n    }\n    true",
  "    let mut date_split = date.split('-');\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        let j = i.parse::<i32>().unwrap();\n     \
    \   date_vec.push(j);\n    }\n    if date_vec.len() != 3 {\n        return false;\n\
    \    }\n    if date_vec[0] < 1 || date_vec[0] > 12 {\n        return false;\n\
    \    }\n    if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0]\
    \ == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n     \
    \   if date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n    \
    \    }\n    } else if date_vec[0] == 4 || date_vec[0] == 6 || date_vec[0] == 9\
    \ || date_vec[0] == 11 {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n \
    \           return false;\n        }\n    } else if date_vec[0] == 2 {\n     \
    \   if date_vec[1] < 1 || date_vec[1] > 29 {\n            return false;\n    \
    \    }\n    }\n    return true;", "    let mut date_split = date.split(\"-\");\n\
    \    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n   \
    \     match i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n     \
    \       Err(_) => return false,\n        }\n    }\n    if date_vec.len() != 3\
    \ {\n        return false;\n    }\n    let month = date_vec[0];\n    let day =\
    \ date_vec[1];\n    let year = date_vec[2];\n    if month < 1 || month > 12 {\n\
    \        return false;\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false;\n        }\n    } else if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n    \
    \        return false;\n        }\n    } else {\n        if day < 1 || day > 31\
    \ {\n            return false;\n        }\n    }\n    if year < 1 {\n        return\
    \ false;\n    }\n    true", "    let mut date_vec: Vec<&str> = date.split(\"-\"\
    ).collect();\n    if date_vec.len() != 3 {\n        return false;\n    }\n   \
    \ let month = date_vec[0].parse::<i32>().unwrap();\n    let day = date_vec[1].parse::<i32>().unwrap();\n\
    \    let year = date_vec[2].parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    if year < 0\
    \ {\n        return false;\n    }\n    true", "    let date_regex = Regex::new(r\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n    if !date_regex.is_match(&date)\
    \ {\n        return false;\n    }\n    let date_vec: Vec<&str> = date.split(\"\
    -\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n    let\
    \ day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if year % 4 == 0 {\n            if day < 1 || day > 29 {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ day < 1 || day > 28 {\n                return false;\n            }\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    true", "    let date_split: Vec<&str> = date.split(\"-\").collect();\n\
    \    if date_split.len() != 3 {\n        return false;\n    }\n    let month:\
    \ i32 = date_split[0].parse().unwrap();\n    let day: i32 = date_split[1].parse().unwrap();\n\
    \    let year: i32 = date_split[2].parse().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30 {\n        return false;\n    }\n    if year < 0 {\n        return false;\n\
    \    }\n    true", "    let mut date_split = date.split(\"-\");\n    let mut date_vec:\
    \ Vec<&str> = Vec::new();\n    for i in date_split {\n        date_vec.push(i);\n\
    \    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n    let mut\
    \ date_vec_int: Vec<i32> = Vec::new();\n    for i in date_vec {\n        match\
    \ i.parse::<i32>() {\n            Ok(n) => date_vec_int.push(n),\n           \
    \ Err(_) => return false,\n        }\n    }\n    if date_vec_int[0] < 1 || date_vec_int[0]\
    \ > 12 {\n        return false;\n    }\n    if date_vec_int[0] == 2 {\n      \
    \  if date_vec_int[1] < 1 || date_vec_int[1] > 29 {\n            return false;\n\
    \        }\n    } else if date_vec_int[0] == 1 || date_vec_int[0] == 3 || date_vec_int[0]\
    \ == 5 || date_vec_int[0] == 7 || date_vec_int[0] == 8 || date_vec_int[0] == 10\
    \ || date_vec_int[0] == 12 {\n        if date_vec_int[1] < 1 || date_vec_int[1]\
    \ > 31 {\n            return false;\n        }\n    } else {\n        if date_vec_int[1]\
    \ < 1 || date_vec_int[1] > 30 {\n            return false;\n        }\n    }\n\
    \    true", "    let mut date_vec: Vec<&str> = date.split(\"-\").collect();\n\
    \    if date_vec.len() != 3 {\n        return false;\n    }\n    let month: u32\
    \ = match date_vec[0].parse() {\n        Ok(num) => num,\n        Err(_) => return\
    \ false,\n    };\n    let day: u32 = match date_vec[1].parse() {\n        Ok(num)\
    \ => num,\n        Err(_) => return false,\n    };\n    let year: u32 = match\
    \ date_vec[2].parse() {\n        Ok(num) => num,\n        Err(_) => return false,\n\
    \    };\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if\
    \ day < 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day\
    \ > 29 {\n        return false;\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) && day > 30 {\n        return false;\n    }\n    if year\
    \ < 1 {\n        return false;\n    }\n    true", "    let mut date_split = date.split(\"\
    -\");\n    let month = date_split.next().unwrap().parse::<i32>().unwrap();\n \
    \   let day = date_split.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_split.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false;\n        }\n    }\n    true", " \
    \   let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month: i32 = date_vec[0].parse().unwrap();\n\
    \        let day: i32 = date_vec[1].parse().unwrap();\n        let year: i32 =\
    \ date_vec[2].parse().unwrap();\n        if month < 1 || month > 12 {\n      \
    \      return false;\n        }\n        if month == 2 {\n            if day <\
    \ 1 || day > 29 {\n                return false;\n            }\n        } else\
    \ if month == 4 || month == 6 || month == 9 || month == 11 {\n            if day\
    \ < 1 || day > 30 {\n                return false;\n            }\n        } else\
    \ {\n            if day < 1 || day > 31 {\n                return false;\n   \
    \         }\n        }\n        return true;\n    }\n    return false;", "   \
    \ let mut date_split = date.split(\"-\");\n    let month = date_split.next().unwrap();\n\
    \    let day = date_split.next().unwrap();\n    let year = date_split.next().unwrap();\n\
    \    let month = month.parse::<i32>().unwrap();\n    let day = day.parse::<i32>().unwrap();\n\
    \    let year = year.parse::<i32>().unwrap();\n    if month < 1 || month > 12\
    \ {\n        return false;\n    }\n    if day < 1 || day > 31 {\n        return\
    \ false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n    }\n\
    \    if month == 4 || month == 6 || month == 9 || month == 11 {\n        if day\
    \ > 30 {\n            return false;\n        }\n    }\n    if year < 1 {\n   \
    \     return false;\n    }\n    return true;", "    let date_vec: Vec<&str> =\
    \ date.split(\"-\").collect();\n    if date_vec.len() != 3 {\n        return false;\n\
    \    }\n    let month = date_vec[0].parse::<u32>().unwrap();\n    let day = date_vec[1].parse::<u32>().unwrap();\n\
    \    let year = date_vec[2].parse::<u32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30 {\n        return false;\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    true", "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    ).unwrap();\n    re.is_match(&date)", "    let mut date_split = date.split('-');\n\
    \    let mut date_vec: Vec<i32> = Vec::new();\n    for i in date_split {\n   \
    \     match i.parse::<i32>() {\n            Ok(n) => date_vec.push(n),\n     \
    \       Err(_) => return false,\n        }\n    }\n    if date_vec.len() != 3\
    \ {\n        return false;\n    }\n    if date_vec[0] < 1 || date_vec[0] > 12\
    \ {\n        return false;\n    }\n    if date_vec[0] == 2 {\n        if date_vec[1]\
    \ < 1 || date_vec[1] > 29 {\n            return false;\n        }\n    } else\
    \ if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] == 5 || date_vec[0] ==\
    \ 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0] == 12 {\n        if\
    \ date_vec[1] < 1 || date_vec[1] > 31 {\n            return false;\n        }\n\
    \    } else {\n        if date_vec[1] < 1 || date_vec[1] > 30 {\n            return\
    \ false;\n        }\n    }\n    if date_vec[2] < 1 {\n        return false;\n\
    \    }\n    true", "    let mut date_iter = date.split(\"-\");\n    let mut date_vec:\
    \ Vec<i32> = Vec::new();\n    for i in date_iter {\n        let num: i32 = i.parse().unwrap();\n\
    \        date_vec.push(num);\n    }\n    if date_vec.len() != 3 {\n        return\
    \ false;\n    }\n    if date_vec[0] < 1 || date_vec[0] > 12 {\n        return\
    \ false;\n    }\n    if date_vec[0] == 1 || date_vec[0] == 3 || date_vec[0] ==\
    \ 5 || date_vec[0] == 7 || date_vec[0] == 8 || date_vec[0] == 10 || date_vec[0]\
    \ == 12 {\n        if date_vec[1] < 1 || date_vec[1] > 31 {\n            return\
    \ false;\n        }\n    } else if date_vec[0] == 4 || date_vec[0] == 6 || date_vec[0]\
    \ == 9 || date_vec[0] == 11 {\n        if date_vec[1] < 1 || date_vec[1] > 30\
    \ {\n            return false;\n        }\n    } else if date_vec[0] == 2 {\n\
    \        if date_vec[1] < 1 || date_vec[1] > 29 {\n            return false;\n\
    \        }\n    }\n    return true;", "    let mut date_split = date.split(\"\
    -\");\n    let month = date_split.next().unwrap();\n    let day = date_split.next().unwrap();\n\
    \    let year = date_split.next().unwrap();\n    let month_int = match month.parse::<i32>()\
    \ {\n        Ok(m) => m,\n        Err(_) => return false,\n    };\n    let day_int\
    \ = match day.parse::<i32>() {\n        Ok(d) => d,\n        Err(_) => return\
    \ false,\n    };\n    let year_int = match year.parse::<i32>() {\n        Ok(y)\
    \ => y,\n        Err(_) => return false,\n    };\n    if month_int < 1 || month_int\
    \ > 12 {\n        return false;\n    }\n    if month_int == 2 {\n        if day_int\
    \ < 1 || day_int > 29 {\n            return false;\n        }\n    } else if month_int\
    \ == 4 || month_int == 6 || month_int == 9 || month_int == 11 {\n        if day_int\
    \ < 1 || day_int > 30 {\n            return false;\n        }\n    } else {\n\
    \        if day_int < 1 || day_int > 31 {\n            return false;\n       \
    \ }\n    }\n    if year_int < 1 {\n        return false;\n    }\n    true", " \
    \   let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<&str> =\
    \ Vec::new();\n    for i in date_split {\n        date_vec.push(i);\n    }\n \
    \   if date_vec.len() != 3 {\n        return false;\n    }\n    let month: u32\
    \ = match date_vec[0].parse() {\n        Ok(num) => num,\n        Err(_) => return\
    \ false,\n    };\n    let day: u32 = match date_vec[1].parse() {\n        Ok(num)\
    \ => num,\n        Err(_) => return false,\n    };\n    let year: u32 = match\
    \ date_vec[2].parse() {\n        Ok(num) => num,\n        Err(_) => return false,\n\
    \    };\n    if month < 1 || month > 12 {\n        return false;\n    }\n    if\
    \ month == 2 {\n        if day < 1 || day > 29 {\n            return false;\n\
    \        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day < 1 || day > 30 {\n            return false;\n        }\n\
    \    } else {\n        if day < 1 || day > 31 {\n            return false;\n \
    \       }\n    }\n    true", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month = date_vec[0].parse::<u32>().unwrap();\n\
    \        let day = date_vec[1].parse::<u32>().unwrap();\n        let year = date_vec[2].parse::<u32>().unwrap();\n\
    \        if month > 12 || month < 1 {\n            return false;\n        }\n\
    \        if month == 2 {\n            if day > 29 || day < 1 {\n             \
    \   return false;\n            }\n        } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n            if day > 30 || day < 1 {\n        \
    \        return false;\n            }\n        } else {\n            if day >\
    \ 31 || day < 1 {\n                return false;\n            }\n        }\n \
    \       if year < 1 {\n            return false;\n        }\n        return true;\n\
    \    }\n    return false;", "    let mut date_split = date.split(\"-\");\n   \
    \ let mut date_vec: Vec<&str> = Vec::new();\n    for i in date_split {\n     \
    \   date_vec.push(i);\n    }\n    if date_vec.len() != 3 {\n        return false;\n\
    \    }\n    let month: u32 = match date_vec[0].parse() {\n        Ok(num) => num,\n\
    \        Err(_) => return false,\n    };\n    let day: u32 = match date_vec[1].parse()\
    \ {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    let\
    \ year: u32 = match date_vec[2].parse() {\n        Ok(num) => num,\n        Err(_)\
    \ => return false,\n    };\n    if month < 1 || month > 12 {\n        return false;\n\
    \    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false;\n        }\n    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n        if day < 1 || day > 30 {\n            return false;\n     \
    \   }\n    } else {\n        if day < 1 || day > 31 {\n            return false;\n\
    \        }\n    }\n    return true;", "    let mut date_split = date.split(\"\
    -\");\n    let mut date_vec: Vec<&str> = Vec::new();\n    for i in date_split\
    \ {\n        date_vec.push(i);\n    }\n    if date_vec.len() != 3 {\n        return\
    \ false;\n    }\n    let month: i32 = date_vec[0].parse().unwrap();\n    let day:\
    \ i32 = date_vec[1].parse().unwrap();\n    let year: i32 = date_vec[2].parse().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if year % 4 == 0 {\n            if day < 1 || day > 29 {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ day < 1 || day > 28 {\n                return false;\n            }\n      \
    \  }\n    } else if month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12 {\n        if day < 1 || day > 31 {\n   \
    \         return false;\n        }\n    } else {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    }\n    true", "    let date_regex\
    \ = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\").unwrap();\n\
    \    if !date_regex.is_match(&date) {\n        return false;\n    }\n    let date_vec:\
    \ Vec<&str> = date.split(\"-\").collect();\n    let month: u32 = date_vec[0].parse().unwrap();\n\
    \    let day: u32 = date_vec[1].parse().unwrap();\n    if month < 1 || month >\
    \ 12 {\n        return false;\n    }\n    if month == 2 {\n        if day < 1\
    \ || day > 29 {\n            return false;\n        }\n    } else if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false;\n        }\n    } else {\n        if day < 1\
    \ || day > 31 {\n            return false;\n        }\n    }\n    true", "   \
    \ let mut date_iter = date.split(\"-\");\n    let month = date_iter.next().unwrap().parse::<i32>().unwrap();\n\
    \    let day = date_iter.next().unwrap().parse::<i32>().unwrap();\n    let year\
    \ = date_iter.next().unwrap().parse::<i32>().unwrap();\n    if month < 1 || month\
    \ > 12 {\n        return false;\n    }\n    if day < 1 || day > 31 {\n       \
    \ return false;\n    }\n    if month == 2 && day > 29 {\n        return false;\n\
    \    }\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n     \
    \   if day > 30 {\n            return false;\n        }\n    }\n    return true;",
  "    let re = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$\"\
    ).unwrap();\n    if !re.is_match(&date) {\n        return false;\n    }\n    let\
    \ date_vec: Vec<&str> = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if year % 4 == 0 {\n            if day < 1 || day > 29 {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ day < 1 || day > 28 {\n                return false;\n            }\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    true", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$\").unwrap();\n    let date_regex_match = date_regex.is_match(&date);\n \
    \   if !date_regex_match {\n        return false;\n    }\n    let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n    let month = date_vec[0].parse::<i32>().unwrap();\n\
    \    let day = date_vec[1].parse::<i32>().unwrap();\n    let year = date_vec[2].parse::<i32>().unwrap();\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if month\
    \ == 2 {\n        if year % 4 == 0 {\n            if day < 1 || day > 29 {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ day < 1 || day > 28 {\n                return false;\n            }\n      \
    \  }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day < 1 || day > 30 {\n            return false;\n        }\n    }\
    \ else {\n        if day < 1 || day > 31 {\n            return false;\n      \
    \  }\n    }\n    true", "    let date_vec: Vec<&str> = date.split(\"-\").collect();\n\
    \    let month: u32 = date_vec[0].parse().unwrap();\n    let day: u32 = date_vec[1].parse().unwrap();\n\
    \    let year: u32 = date_vec[2].parse().unwrap();\n    if date_vec.len() != 3\
    \ {\n        return false;\n    }\n    if month > 12 || month < 1 {\n        return\
    \ false;\n    }\n    if month == 2 {\n        if day > 29 || day < 1 {\n     \
    \       return false;\n        }\n    } else if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        if day > 30 || day < 1 {\n            return\
    \ false;\n        }\n    } else {\n        if day > 31 || day < 1 {\n        \
    \    return false;\n        }\n    }\n    if year < 1 {\n        return false;\n\
    \    }\n    return true;", "    let mut split = date.split(\"-\");\n    let month\
    \ = split.next().unwrap().parse::<i32>().unwrap();\n    let day = split.next().unwrap().parse::<i32>().unwrap();\n\
    \    let year = split.next().unwrap().parse::<i32>().unwrap();\n    if month >\
    \ 12 || month < 1 {\n        return false;\n    }\n    if day > 31 || day < 1\
    \ {\n        return false;\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false;\n        }\n    } else if month == 4 || month == 6\
    \ || month == 9 || month == 11 {\n        if day > 30 {\n            return false;\n\
    \        }\n    }\n    true", "    let date_regex = Regex::new(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    ).unwrap();\n    if date_regex.is_match(&date) {\n        let date_vec: Vec<&str>\
    \ = date.split(\"-\").collect();\n        let month: u32 = date_vec[0].parse().unwrap();\n\
    \        let day: u32 = date_vec[1].parse().unwrap();\n        let year: u32 =\
    \ date_vec[2].parse().unwrap();\n        if month > 12 || day > 31 || year < 1000\
    \ || year > 9999 {\n            return false;\n        }\n        if month ==\
    \ 2 && day > 29 {\n            return false;\n        }\n        if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) && day > 30 {\n            return\
    \ false;\n        }\n        return true;\n    }\n    return false;", "    let\
    \ mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<i32> = Vec::new();\n\
    \    for i in date_split {\n        let j = i.parse::<i32>().unwrap();\n     \
    \   date_vec.push(j);\n    }\n    let month = date_vec[0];\n    let day = date_vec[1];\n\
    \    let year = date_vec[2];\n    if month < 1 || month > 12 {\n        return\
    \ false;\n    }\n    if day < 1 || day > 31 {\n        return false;\n    }\n\
    \    if month == 2 && day > 29 {\n        return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) && day > 30 {\n        return\
    \ false;\n    }\n    if year < 1 {\n        return false;\n    }\n    true", " \
    \   let mut date_split = date.split(\"-\");\n    let mut date_vec: Vec<u32> =\
    \ Vec::new();\n    for i in date_split {\n        match i.parse::<u32>() {\n \
    \           Ok(num) => date_vec.push(num),\n            Err(_) => return false,\n\
    \        }\n    }\n    if date_vec.len() != 3 {\n        return false;\n    }\n\
    \    let month = date_vec[0];\n    let day = date_vec[1];\n    let year = date_vec[2];\n\
    \    if month < 1 || month > 12 {\n        return false;\n    }\n    if day <\
    \ 1 || day > 31 {\n        return false;\n    }\n    if month == 2 && day > 29\
    \ {\n        return false;\n    }\n    if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        if day > 30 {\n            return false;\n     \
    \   }\n    }\n    if year < 1 {\n        return false;\n    }\n    true"]
stop_tokens:
- "\n}"
