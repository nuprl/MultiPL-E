language: rs
name: HumanEval_128_prod_signs
results:
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 1
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    let\
    \ mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n\
    \            prod *= 1;\n            sum += i;\n        } else if i < 0 {\n  \
    \          prod *= -1;\n            sum += i.abs();\n        } else {\n      \
    \      prod *= 0;\n        }\n    }\n    if arr.len() == 0 {\n        None\n \
    \   } else {\n        Some(sum * prod)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `arr`\n   --> /tmp/tmpuu8f62ye.rs:20:8\n\
    \    |\n6   | fn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    |       \
    \        --- move occurs because `arr` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n9   |     for i in arr {\n    |              --- `arr`\
    \ moved due to this implicit call to `.into_iter()`\n...\n20  |     if arr.len()\
    \ == 0 {\n    |        ^^^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `arr`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n9   |     for i in &arr {\n    |              +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660008757
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for n in arr {\n        prod *= n.signum();\n        sum +=\
    \ n.abs();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate =\
    \ prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0,\
    \ 1]), Some(0));\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 2, -1, -1, 9]), Some(20));\n    assert_eq!(candidate(vec![-1, 1, -1, 1]),\
    \ Some(4));\n    assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 0]), Some(0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    unimplemented!()\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''not implemented'', /tmp/tmpa_r2fln0.rs:7:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660008758
- exit_code: 1
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    let\
    \ mut sum = 0;\n    let mut prod = 1;\n    for i in arr {\n        if i > 0 {\n\
    \            sum += i;\n            prod *= 1;\n        } else if i < 0 {\n  \
    \          sum += i.abs();\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n    }\n    if arr.len() == 0 {\n        None\n \
    \   } else {\n        Some(sum * prod)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `arr`\n   --> /tmp/tmps6brmkk_.rs:20:8\n\
    \    |\n6   | fn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    |       \
    \        --- move occurs because `arr` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n9   |     for i in arr {\n    |              --- `arr`\
    \ moved due to this implicit call to `.into_iter()`\n...\n20  |     if arr.len()\
    \ == 0 {\n    |        ^^^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `arr`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n9   |     for i in &arr {\n    |              +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660008757
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    let\
    \ mut sum = 0;\n    let mut prod = 1;\n    for i in arr {\n        if i > 0 {\n\
    \            sum += i;\n            prod *= 1;\n        } else if i < 0 {\n  \
    \          sum += -i;\n            prod *= -1;\n        } else {\n           \
    \ prod *= 0;\n        }\n    }\n    if sum == 0 {\n        None\n    } else {\n\
    \        Some(sum * prod)\n    }\n}\n\nfn main() {\n    let candidate = prod_signs;\n\
    \    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0,\
    \ 1]), Some(0));\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 2, -1, -1, 9]), Some(20));\n    assert_eq!(candidate(vec![-1, 1, -1, 1]),\
    \ Some(4));\n    assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 0]), Some(0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let sum = arr.iter().map(|x|\
    \ x.abs()).sum::<isize>();\n    let prod = arr.iter().map(|x| x.signum()).product::<isize>();\n\
    \    Some(sum * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n   \
    \ assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0,\
    \ 1]), Some(0));\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 2, -1, -1, 9]), Some(20));\n    assert_eq!(candidate(vec![-1, 1, -1, 1]),\
    \ Some(4));\n    assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 0]), Some(0));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for num in arr {\n        if num > 0 {\n            prod *=\
    \ 1;\n        } else if num < 0 {\n            prod *= -1;\n        } else {\n\
    \            prod *= 0;\n        }\n        sum += num.abs();\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 1
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    let\
    \ mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n\
    \            prod *= 1;\n        } else if i < 0 {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n        sum += i.abs();\n\
    \    }\n    if arr.len() == 0 {\n        None\n    } else {\n        Some(sum\
    \ * prod)\n    }\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `arr`\n   --> /tmp/tmpfm2yknyh.rs:19:8\n\
    \    |\n6   | fn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    |       \
    \        --- move occurs because `arr` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n9   |     for i in arr {\n    |              --- `arr`\
    \ moved due to this implicit call to `.into_iter()`\n...\n19  |     if arr.len()\
    \ == 0 {\n    |        ^^^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `arr`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n9   |     for i in &arr {\n    |              +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660008757
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for x in arr {\n        if x < 0 {\n            prod *= -1;\n\
    \        } else if x > 0 {\n            sum += x;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpgydw5h80.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 1
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let prod = arr.iter().map(|x|\
    \ x.signum()).product();\n    let sum = arr.iter().map(|x| x.abs()).sum();\n \
    \   Some(sum * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpz93tzf19.rs:10:9\n\
    \   |\n10 |     let prod = arr.iter().map(|x| x.signum()).product();\n   |   \
    \      ^^^^ consider giving `prod` a type\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660008757
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i == 0 {\n            continue;\n\
    \        }\n        prod *= i.signum();\n        sum += i.abs();\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(0)`', /tmp/tmpn6g724ws.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for x in arr {\n        if x > 0 {\n            prod *= 1;\n\
    \        } else if x < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += x.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for x in arr {\n        if x < 0 {\n            prod *= -1;\n\
    \        } else if x > 0 {\n            sum += x;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpgydw5h80.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 1
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    let\
    \ mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n\
    \            prod *= 1;\n            sum += i;\n        } else if i < 0 {\n  \
    \          prod *= -1;\n            sum += i.abs();\n        } else {\n      \
    \      prod *= 0;\n        }\n    }\n    if arr.len() == 0 {\n        None\n \
    \   } else {\n        Some(sum * prod)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `arr`\n   --> /tmp/tmpuu8f62ye.rs:20:8\n\
    \    |\n6   | fn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    |       \
    \        --- move occurs because `arr` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n9   |     for i in arr {\n    |              --- `arr`\
    \ moved due to this implicit call to `.into_iter()`\n...\n20  |     if arr.len()\
    \ == 0 {\n    |        ^^^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `arr`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n9   |     for i in &arr {\n    |              +\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660008757
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    let\
    \ mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n\
    \            prod *= 1;\n        } else if i < 0 {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n        sum += i.abs();\n\
    \    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n\
    \    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0,\
    \ 1]), Some(0));\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 2, -1, -1, 9]), Some(20));\n    assert_eq!(candidate(vec![-1, 1, -1, 1]),\
    \ Some(4));\n    assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 0]), Some(0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(0)`,\n right: `None`', /tmp/tmpgr0bmzmo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i == 0 {\n            continue;\n\
    \        }\n        prod *= i.signum();\n        sum += i.abs();\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(0)`', /tmp/tmpn6g724ws.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i == 0 {\n            continue;\n\
    \        }\n        prod *= i.signum();\n        sum += i.abs();\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(0)`', /tmp/tmpn6g724ws.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    let\
    \ mut prod = 1;\n    let mut sum = 0;\n    for i in arr {\n        if i > 0 {\n\
    \            prod *= 1;\n        } else if i < 0 {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n        sum += i.abs();\n\
    \    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n\
    \    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0,\
    \ 1]), Some(0));\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 2, -1, -1, 9]), Some(20));\n    assert_eq!(candidate(vec![-1, 1, -1, 1]),\
    \ Some(4));\n    assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 0]), Some(0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(0)`,\n right: `None`', /tmp/tmpgr0bmzmo.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        if i !=\
    \ 0 {\n            prod *= i.signum();\n        }\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(0)`', /tmp/tmpouucjfz4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i == 0 {\n            continue;\n\
    \        }\n        prod *= i.signum();\n        sum += i.abs();\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(0)`', /tmp/tmpn6g724ws.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        if i > 0 {\n            sum += i;\n\
    \        } else if i < 0 {\n            sum -= i;\n            prod *= -1;\n \
    \       }\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate =\
    \ prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0,\
    \ 1]), Some(0));\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![2,\
    \ 4, 1, 2, -1, -1, 9]), Some(20));\n    assert_eq!(candidate(vec![-1, 1, -1, 1]),\
    \ Some(4));\n    assert_eq!(candidate(vec![-1, 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 0]), Some(0));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(0)`', /tmp/tmpe20zdlk8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i == 0 {\n            continue;\n\
    \        }\n        prod *= i.signum();\n        sum += i.abs();\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(0)`', /tmp/tmpn6g724ws.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i == 0 {\n            continue;\n\
    \        }\n        prod *= i.signum();\n        sum += i.abs();\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(1)`,\n right: `Some(0)`', /tmp/tmpn6g724ws.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i > 0 {\n            prod *= 1;\n\
    \        } else if i < 0 {\n            prod *= -1;\n        } else {\n      \
    \      prod *= 0;\n        }\n        sum += i.abs();\n    }\n    Some(sum * prod)\n\
    }\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 101
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut prod = 1;\n    let\
    \ mut sum = 0;\n    for i in arr {\n        if i < 0 {\n            prod *= -1;\n\
    \        } else if i > 0 {\n            sum += i;\n        }\n    }\n    Some(sum\
    \ * prod)\n}\n\nfn main() {\n    let candidate = prod_signs;\n    assert_eq!(candidate(vec![1,\
    \ 2, 2, -4]), Some(-9));\n    assert_eq!(candidate(vec![0, 1]), Some(0));\n  \
    \  assert_eq!(candidate(vec![1, 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(-5)`,\n right: `Some(-9)`', /tmp/tmpy77qtqq3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
- exit_code: 0
  program: "/// You are given an array arr of integers and you need to return\n///\
    \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
    \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
    \ arr.\n/// Example:\nfn prod_signs(arr: Vec<isize>) -> Option<isize> {\n    if\
    \ arr.is_empty() {\n        return None;\n    }\n    let mut sum = 0;\n    let\
    \ mut prod = 1;\n    for i in arr {\n        sum += i.abs();\n        prod *=\
    \ i.signum();\n    }\n    Some(sum * prod)\n}\n\nfn main() {\n    let candidate\
    \ = prod_signs;\n    assert_eq!(candidate(vec![1, 2, 2, -4]), Some(-9));\n   \
    \ assert_eq!(candidate(vec![0, 1]), Some(0));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 2, 3, -1, 1]), Some(-10));\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ None);\n    assert_eq!(candidate(vec![2, 4, 1, 2, -1, -1, 9]), Some(20));\n\
    \    assert_eq!(candidate(vec![-1, 1, -1, 1]), Some(4));\n    assert_eq!(candidate(vec![-1,\
    \ 1, 1, 1]), Some(-4));\n    assert_eq!(candidate(vec![-1, 1, 1, 0]), Some(0));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008758
