name: HumanEval_140_fix_spaces
language: rs
prompt: "/// Given a string text, replace all spaces in it with underscores, \n///\
  \ and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with -\nfn fix_spaces(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!(candidate(String::from(\"\
  Example\")), String::from(\"Example\"));\n    assert_eq!(candidate(String::from(\"\
  Mudasir Hanif \")), String::from(\"Mudasir_Hanif_\"));\n    assert_eq!(candidate(String::from(\"\
  Yellow Yellow  Dirty  Fellow\")), String::from(\"Yellow_Yellow__Dirty__Fellow\"\
  ));\n    assert_eq!(candidate(String::from(\"Exa   mple\")), String::from(\"Exa-mple\"\
  ));\n    assert_eq!(candidate(String::from(\"   Exa 1 2 2 mple\")), String::from(\"\
  -Exa_1_2_2_mple\"));\n}\n"
completions: ["    let mut result = String::new();\n    let mut spaces = 0;\n    for\
    \ c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n     \
    \       if spaces > 2 {\n                result.push('-');\n                spaces\
    \ = 0;\n            }\n        } else {\n            spaces = 0;\n           \
    \ result.push(c);\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_char == ' ' {\n              \
    \  count += 1;\n            } else {\n                count = 1;\n           \
    \ }\n            if count > 2 {\n                result.push('-');\n         \
    \   } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            count = 0;\n            result.push(c);\n        }\n        prev_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if last_char == ' ' {\n              \
    \  consecutive_spaces += 1;\n            } else {\n                consecutive_spaces\
    \ = 1;\n            }\n            if consecutive_spaces > 2 {\n             \
    \   result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count == 1 {\n                result.push('_');\n           \
    \ } else if space_count == 2 {\n                result.push('-');\n          \
    \  }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                if last_char != '-' {\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n     \
    \       space_count += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_space = false;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            if prev_space {\n                result.push('-');\n            }\
    \ else {\n                result.push('_');\n            }\n            prev_space\
    \ = true;\n        } else {\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces == 1 {\n                result.push('_');\n\
    \            } else if spaces > 2 {\n                result.push('-');\n     \
    \       }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut space_count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            space_count += 1;\n            if space_count\
    \ > 2 {\n                continue;\n            }\n        } else {\n        \
    \    space_count = 0;\n        }\n        if prev_char == ' ' && c == ' ' {\n\
    \            result.push('-');\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut last_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            }\n        } else {\n  \
    \          consecutive_spaces = 0;\n            result.push(c);\n        }\n \
    \       last_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                continue;\n   \
    \         }\n        } else {\n            consecutive_spaces = 0;\n        }\n\
    \        if c == ' ' {\n            if last_char == ' ' {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            result.push(c);\n        }\n        last_char = c;\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n \
    \       if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n                consecutive_spaces\
    \ = 0;\n            }\n        } else {\n            consecutive_spaces = 0;\n\
    \            if prev_char == ' ' {\n                result.push('_');\n      \
    \      }\n            result.push(c);\n        }\n        prev_char = c;\n   \
    \ }\n    result", "    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n \
    \       if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count > 2 {\n                result.push('-');\n            \
    \    space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for ch in text.chars()\
    \ {\n        if ch == ' ' {\n            consecutive_spaces += 1;\n          \
    \  if consecutive_spaces > 2 {\n                continue;\n            }\n   \
    \     } else {\n            consecutive_spaces = 0;\n        }\n        if ch\
    \ == ' ' && prev_char == ' ' {\n            result.push('-');\n        } else\
    \ {\n            result.push(ch);\n        }\n        prev_char = ch;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut last_char = '\
    \ ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n     \
    \   if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                continue;\n            }\n        } else {\n        \
    \    consecutive_spaces = 0;\n        }\n        if c == ' ' {\n            if\
    \ last_char == ' ' {\n                result.push('-');\n            } else {\n\
    \                result.push('_');\n            }\n        } else {\n        \
    \    result.push(c);\n        }\n        last_char = c;\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut last_char = ' ';\n    let mut\
    \ last_last_char = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            if last_char == ' ' && last_last_char == ' ' {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            result.push(c);\n        }\n        last_last_char\
    \ = last_char;\n        last_char = c;\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut prev_char = '\\0';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                continue;\n\
    \            }\n            result.push('_');\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n        prev_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           result.push(c);\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut previous_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                continue;\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \  }\n        if c == ' ' && previous_char == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        previous_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                result.push('-');\n           \
    \     consecutive_spaces = 0;\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            if prev_char == ' ' {\n                result.push('_');\n\
    \            }\n            result.push(c);\n        }\n        prev_char = c;\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n \
    \       if c == ' ' {\n            if prev_char == ' ' {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut spaces = 0;\n    for c in text.chars() {\n     \
    \   if c == ' ' {\n            spaces += 1;\n            if spaces > 2 {\n   \
    \             result.push('-');\n                spaces = 0;\n            }\n\
    \        } else {\n            if spaces > 0 {\n                result.push_str(&\"\
    _\".repeat(spaces));\n                spaces = 0;\n            }\n           \
    \ result.push(c);\n        }\n    }\n    result", "    text.replace(\" \", \"\
    _\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n     \
    \   .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\"\
    )\n        .replace(\"__\", \"_\")\n        .replace(\"__\", \"_\")\n        .replace(\"\
    __\", \"_\")\n        .replace(\"__\", \"_", "    let mut result = String::new();\n\
    \    let mut space_count = 0;\n    for c in text.chars() {\n        if c == '\
    \ ' {\n            space_count += 1;\n            if space_count == 1 {\n    \
    \            result.push('_');\n            } else if space_count == 2 {\n   \
    \             result.push('-');\n            }\n        } else {\n           \
    \ space_count = 0;\n            result.push(c);\n        }\n    }\n    result",
  "    let mut new_text = String::new();\n    let mut last_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                if last_char != '-' {\n                    new_text.push('-');\n\
    \                }\n            } else {\n                new_text.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      new_text.push(c);\n        }\n        last_char = c;\n    }\n    new_text",
  "    let mut result = String::new();\n    let mut count_spaces = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            count_spaces += 1;\n    \
    \        if count_spaces > 2 {\n                result.push('-');\n          \
    \      count_spaces = 0;\n            }\n        } else {\n            if count_spaces\
    \ > 0 {\n                result.push('_');\n                count_spaces = 0;\n\
    \            }\n            result.push(c);\n        }\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut prev_space = false;\n    let\
    \ mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == '\
    \ ' {\n            if prev_space {\n                consecutive_spaces += 1;\n\
    \            } else {\n                consecutive_spaces = 1;\n            }\n\
    \            prev_space = true;\n        } else {\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n      \
    \      spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut space_count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            space_count += 1;\n            if space_count\
    \ > 2 {\n                result.push('-');\n                space_count = 0;\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ prev_is_space = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_is_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \        prev_is_space = true;\n        } else {\n            result.push(c);\n\
    \            prev_is_space = false;\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut last_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            if last_char\
    \ == ' ' {\n                consecutive_spaces += 1;\n            } else {\n \
    \               consecutive_spaces = 1;\n            }\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     result.push('_');\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n        last_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n \
    \           space_count += 1;\n            if space_count > 2 {\n            \
    \    result.push('-');\n                space_count = 0;\n            } else {\n\
    \                result.push('_');\n            }\n        } else {\n        \
    \    space_count = 0;\n            result.push(c);\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_space = false;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            if prev_space {\n    \
    \            result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n            prev_space = true;\n        } else {\n           \
    \ result.push(c);\n            prev_space = false;\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            if spaces > 0 {\n                result.push_str(&\"\
    _\".repeat(spaces));\n                spaces = 0;\n            }\n           \
    \ result.push(c);\n        }\n    }\n    if spaces > 0 {\n        result.push_str(&\"\
    _\".repeat(spaces));\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n \
    \       if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                continue;\n            }\n        } else {\n        \
    \    consecutive_spaces = 0;\n        }\n        if c == ' ' && prev_char == '\
    \ ' {\n            result.push('-');\n        } else {\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut prev_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            }\n        } else {\n  \
    \          consecutive_spaces = 0;\n            if prev_char == ' ' {\n      \
    \          result.push('_');\n            }\n            result.push(c);\n   \
    \     }\n        prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces == 1 {\n                result.push('_');\n\
    \            } else if spaces > 2 {\n                result.push('-');\n     \
    \       }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                if last_char != '-' {\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ spaces = 0;\n    for ch in text.chars() {\n        if ch == ' ' {\n        \
    \    spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            result.push(ch);\n        }\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut last_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                continue;\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \  }\n        if c == ' ' {\n            if last_char == ' ' {\n             \
    \   result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            result.push(c);\n        }\n   \
    \     last_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n                consecutive_spaces\
    \ = 0;\n            } else {\n                result.push('_');\n            }\n\
    \        } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_space = false;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            if prev_space {\n                result.push('-');\n            }\
    \ else {\n                result.push('_');\n            }\n            prev_space\
    \ = true;\n        } else {\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut last_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                if last_char\
    \ != '-' {\n                    result.push('-');\n                }\n       \
    \     } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            consecutive_spaces = 0;\n            result.push(c);\n      \
    \  }\n        last_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut last_char = ' ';\n    let mut last_was_space = false;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            if last_was_space {\n\
    \                result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n            last_was_space = true;\n        } else {\n       \
    \     result.push(c);\n            last_was_space = false;\n        }\n      \
    \  last_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                if prev_char !=\
    \ '-' {\n                    result.push('-');\n                }\n          \
    \  } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            consecutive_spaces = 0;\n            result.push(c);\n      \
    \  }\n        prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                if last_char !=\
    \ '-' {\n                    result.push('-');\n                }\n          \
    \  } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            consecutive_spaces = 0;\n            result.push(c);\n      \
    \  }\n        last_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            if prev_char == ' ' {\n\
    \                consecutive_spaces += 1;\n            } else {\n            \
    \    consecutive_spaces = 1;\n            }\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     result.push('_');\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n        prev_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces == 1 {\n                result.push('_');\n          \
    \  } else if consecutive_spaces > 2 {\n                result.push('-');\n   \
    \         }\n        } else {\n            consecutive_spaces = 0;\n         \
    \   result.push(c);\n        }\n        prev_char = c;\n    }\n    result", " \
    \   let mut result = String::new();\n    let mut last_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                continue;\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n        }\n        if c == ' ' && last_char == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        last_char =\
    \ c;\n    }\n    result", "    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            }\n        } else {\n            if spaces\
    \ > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n           \
    \     spaces = 0;\n            }\n            result.push(c);\n        }\n   \
    \ }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n  \
    \  }\n    result", "    let mut result = String::new();\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            } else {\n             \
    \   result.push('_');\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut prev_char = ' ';\n    let mut prev_prev_char\
    \ = ' ';\n    for c in text.chars() {\n        if c == ' ' {\n            if prev_char\
    \ == ' ' && prev_prev_char == ' ' {\n                result.push('-');\n     \
    \       } else {\n                result.push('_');\n            }\n        }\
    \ else {\n            result.push(c);\n        }\n        prev_prev_char = prev_char;\n\
    \        prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces == 1 {\n                result.push('_');\n\
    \            } else if spaces > 2 {\n                result.push('-');\n     \
    \       }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if last_char == ' ' {\n              \
    \  consecutive_spaces += 1;\n            } else {\n                consecutive_spaces\
    \ = 1;\n            }\n            if consecutive_spaces > 2 {\n             \
    \   result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_space = false;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            if prev_space {\n                result.push('-');\n            }\
    \ else {\n                result.push('_');\n            }\n            prev_space\
    \ = true;\n        } else {\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            }\n        } else {\n  \
    \          consecutive_spaces = 0;\n            if prev_char == ' ' {\n      \
    \          result.push('_');\n            }\n            result.push(c);\n   \
    \     }\n        prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    result", "    let mut result = String::new();\n    let mut prev_char\
    \ = ' ';\n    let mut prev_prev_char = ' ';\n    for c in text.chars() {\n   \
    \     if c == ' ' {\n            if prev_char == ' ' && prev_prev_char == ' '\
    \ {\n                result.push('-');\n            } else {\n               \
    \ result.push('_');\n            }\n        } else {\n            result.push(c);\n\
    \        }\n        prev_prev_char = prev_char;\n        prev_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == '\
    \ ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n                consecutive_spaces\
    \ = 0;\n            } else {\n                result.push('_');\n            }\n\
    \        } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                continue;\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n        }\n        if c ==\
    \ ' ' && prev_char == ' ' {\n            result.push('-');\n        } else {\n\
    \            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count == 1 {\n                result.push('_');\n           \
    \ } else if space_count > 2 {\n                result.push('-');\n           \
    \ }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n \
    \           space_count += 1;\n            if space_count == 1 {\n           \
    \     result.push('_');\n            } else if space_count == 2 {\n          \
    \      result.push('-');\n            }\n        } else {\n            space_count\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut space_count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            space_count += 1;\n            if space_count\
    \ > 2 {\n                result.push('-');\n                space_count = 0;\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result", "    let mut new_text = String::new();\n    let mut\
    \ last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                continue;\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n        }\n        if c ==\
    \ ' ' && last_char == ' ' {\n            new_text.push('-');\n        } else {\n\
    \            new_text.push(c);\n        }\n        last_char = c;\n    }\n   \
    \ new_text", "    let mut new_text = String::new();\n    let mut prev_char = '\
    \ ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n     \
    \   if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                new_text.push('-');\n                consecutive_spaces\
    \ = 0;\n            }\n        } else {\n            consecutive_spaces = 0;\n\
    \            if prev_char == ' ' {\n                new_text.push('_');\n    \
    \        }\n            new_text.push(c);\n        }\n        prev_char = c;\n\
    \    }\n    new_text", "    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces > 2 {\n                result.push('-');\n        \
    \    }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                continue;\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n        }\n        if c ==\
    \ ' ' && prev_char == ' ' {\n            result.push('-');\n        } else {\n\
    \            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count > 2 {\n                result.push('-');\n            \
    \    space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                if last_char != '-' {\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut new_text = String::new();\n    let mut\
    \ space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n     \
    \       space_count += 1;\n            if space_count == 1 {\n               \
    \ new_text.push('_');\n            } else if space_count == 2 {\n            \
    \    new_text.push('-');\n            }\n        } else {\n            space_count\
    \ = 0;\n            new_text.push(c);\n        }\n    }\n    new_text", "    let\
    \ mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n \
    \           space_count += 1;\n            if space_count == 1 {\n           \
    \     result.push('_');\n            } else if space_count > 2 {\n           \
    \     result.push('-');\n            }\n        } else {\n            space_count\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            if spaces > 0 {\n                result.push('_');\n\
    \                spaces = 0;\n            }\n            result.push(c);\n   \
    \     }\n    }\n    if spaces > 0 {\n        result.push('_');\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_space = false;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            if prev_space {\n    \
    \            result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n            prev_space = true;\n        } else {\n           \
    \ result.push(c);\n            prev_space = false;\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut last_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_char = '\\0';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                continue;\n            }\n            result.push('_');\n   \
    \     } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n        prev_char = c;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut prev_char = ' ';\n    let mut num_spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            num_spaces +=\
    \ 1;\n            if num_spaces > 2 {\n                result.push('-');\n   \
    \             num_spaces = 0;\n            }\n        } else {\n            if\
    \ num_spaces > 0 {\n                for _ in 0..num_spaces {\n               \
    \     result.push('_');\n                }\n                num_spaces = 0;\n\
    \            }\n            result.push(c);\n        }\n        prev_char = c;\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces == 2 {\n                result.push('-');\n       \
    \     }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n      \
    \      spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut last_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            }\n        } else {\n  \
    \          consecutive_spaces = 0;\n            result.push(c);\n        }\n \
    \       last_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_space = false;\n    for c in text.chars() {\n        if c ==\
    \ ' ' {\n            if prev_space {\n                result.push('-');\n    \
    \        } else {\n                result.push('_');\n            }\n        \
    \    prev_space = true;\n        } else {\n            result.push(c);\n     \
    \       prev_space = false;\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut counter = 0;\n \
    \   for c in text.chars() {\n        if c == ' ' {\n            if prev_char ==\
    \ ' ' {\n                counter += 1;\n                if counter > 2 {\n   \
    \                 result.push('-');\n                } else {\n              \
    \      result.push('_');\n                }\n            } else {\n          \
    \      result.push('_');\n                counter = 1;\n            }\n      \
    \  } else {\n            result.push(c);\n            counter = 0;\n        }\n\
    \        prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    result", "    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    let mut count = 0;\n    for c in text.chars() {\n        if c ==\
    \ ' ' {\n            if last_char == ' ' {\n                count += 1;\n    \
    \        } else {\n                count = 1;\n            }\n            if count\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     result.push('_');\n            }\n        } else {\n            count =\
    \ 0;\n            result.push(c);\n        }\n        last_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                if last_char != '-' {\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n     \
    \       space_count += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                if last_char != '-' {\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n     \
    \       space_count += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n      \
    \      spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            if spaces > 0 {\n                result.push_str(&\"\
    _\".repeat(spaces));\n                spaces = 0;\n            }\n           \
    \ result.push(c);\n        }\n    }\n    if spaces > 0 {\n        result.push_str(&\"\
    _\".repeat(spaces));\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ == 1 {\n                result.push('_');\n            } else if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            }\n        } else {\n\
    \            consecutive_spaces = 0;\n            result.push(c);\n        }\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut space_count\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                if last_char != '-' {\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n          \
    \  spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result.push('-');\n            } else {\n    \
    \            result.push('_');\n            }\n            prev_space = true;\n\
    \        } else {\n            result.push(c);\n            prev_space = false;\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n      \
    \      spaces += 1;\n            if spaces <= 2 {\n                result.push('_');\n\
    \            } else {\n                result.push('-');\n            }\n    \
    \    } else {\n            spaces = 0;\n            result.push(c);\n        }\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces > 2 {\n                result.push('-');\n    \
    \            spaces = 0;\n            }\n        } else {\n            result.push(c);\n\
    \            spaces = 0;\n        }\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut prev_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                continue;\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \  }\n        if c == ' ' && prev_char == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        prev_char =\
    \ c;\n    }\n    result", "    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n \
    \       if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for\
    \ c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                continue;\n   \
    \         }\n            result.push('_');\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut prev_is_space = false;\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                continue;\n\
    \            }\n            prev_is_space = true;\n            result.push('_');\n\
    \        } else {\n            consecutive_spaces = 0;\n            prev_is_space\
    \ = false;\n            result.push(c);\n        }\n    }\n    if prev_is_space\
    \ {\n        result.push('_');\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    result", "    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n \
    \       if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                continue;\n            }\n        } else {\n        \
    \    consecutive_spaces = 0;\n        }\n        if c == ' ' && last_char == '\
    \ ' {\n            result.push('-');\n        } else {\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut prev_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            }\n        } else {\n  \
    \          consecutive_spaces = 0;\n            result.push(c);\n        }\n \
    \   }\n    result", "    let mut result = String::new();\n    let mut spaces =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces +=\
    \ 1;\n            if spaces > 2 {\n                result.push('-');\n       \
    \         spaces = 0;\n            }\n        } else {\n            if spaces\
    \ > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n           \
    \     spaces = 0;\n            }\n            result.push(c);\n        }\n   \
    \ }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n  \
    \  }\n    result", "    let mut result = String::new();\n    let mut spaces =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces +=\
    \ 1;\n            if spaces > 2 {\n                result.push('-');\n       \
    \         spaces = 0;\n            }\n        } else {\n            if spaces\
    \ > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n           \
    \     spaces = 0;\n            }\n            result.push(c);\n        }\n   \
    \ }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n  \
    \  }\n    result", "    let mut result = String::new();\n    let mut spaces =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces +=\
    \ 1;\n            if spaces == 1 {\n                result.push('_');\n      \
    \      } else if spaces > 2 {\n                result.push('-');\n           \
    \ }\n        } else {\n            result.push(c);\n            spaces = 0;\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == '\
    \ ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n                consecutive_spaces\
    \ = 0;\n            } else {\n                result.push('_');\n            }\n\
    \        } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = '\\0';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                continue;\n            }\n    \
    \        result.push('_');\n        } else {\n            consecutive_spaces =\
    \ 0;\n            result.push(c);\n        }\n        prev_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut spaces = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces += 1;\n\
    \            if spaces > 2 {\n                result.push('-');\n            \
    \    spaces = 0;\n            }\n        } else {\n            spaces = 0;\n \
    \           result.push(c);\n        }\n    }\n    result", "    let mut result\
    \ = String::new();\n    let mut prev_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                continue;\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \  }\n        if c == ' ' && prev_char == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        prev_char =\
    \ c;\n    }\n    result", "    let mut result = String::new();\n    let mut prev_char\
    \ = '\\0';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n            } else {\n           \
    \     result.push('_');\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n        prev_char = c;\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut last_char = '\
    \ ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n     \
    \   if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut last_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                result.push('-');\n                consecutive_spaces = 0;\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for ch in text.chars() {\n        if ch == ' '\
    \ {\n            consecutive_spaces += 1;\n            if consecutive_spaces >\
    \ 2 {\n                result.push('-');\n                consecutive_spaces =\
    \ 0;\n            }\n        } else {\n            consecutive_spaces = 0;\n \
    \           result.push(ch);\n        }\n        prev_char = ch;\n    }\n    result",
  "    let mut result = String::new();\n    let mut last_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut last_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count == 1 {\n                result.push('_');\n           \
    \ } else if space_count > 2 {\n                result.push('-');\n           \
    \ }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n \
    \           space_count += 1;\n            if space_count > 2 {\n            \
    \    result.push('-');\n                space_count = 0;\n            } else {\n\
    \                result.push('_');\n            }\n        } else {\n        \
    \    space_count = 0;\n            result.push(c);\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                continue;\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n        }\n        if c == ' ' && prev_char == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        prev_char =\
    \ c;\n    }\n    result", "    let mut result = String::new();\n    let mut spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            spaces\
    \ += 1;\n            if spaces == 1 {\n                result.push('_');\n   \
    \         } else if spaces > 2 {\n                result.push('-');\n        \
    \    }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n \
    \           space_count += 1;\n            if space_count > 2 {\n            \
    \    result.push('-');\n                space_count = 0;\n            } else {\n\
    \                result.push('_');\n            }\n        } else {\n        \
    \    space_count = 0;\n            result.push(c);\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                if prev_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut last_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                if prev_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                if prev_char != '-' {\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n        }\n        prev_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n          \
    \  spaces += 1;\n            if spaces == 1 {\n                result.push('_');\n\
    \            } else if spaces > 2 {\n                result.push('-');\n     \
    \       }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                if prev_char != '-' {\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n        }\n        prev_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                result.push('-');\n                consecutive_spaces = 0;\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                continue;\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n        }\n        if c ==\
    \ ' ' && prev_char == ' ' {\n            result.push('-');\n        } else {\n\
    \            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count > 2 {\n                result.push('-');\n            \
    \    space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n \
    \           space_count += 1;\n            if space_count > 2 {\n            \
    \    result.push('-');\n                space_count = 0;\n            } else {\n\
    \                result.push('_');\n            }\n        } else {\n        \
    \    space_count = 0;\n            result.push(c);\n        }\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for ch in text.chars() {\n        if ch == ' '\
    \ {\n            consecutive_spaces += 1;\n            if consecutive_spaces >\
    \ 2 {\n                continue;\n            }\n        } else {\n          \
    \  consecutive_spaces = 0;\n        }\n        if ch == ' ' && prev_char == '\
    \ ' {\n            result.push('-');\n        } else {\n            result.push(ch);\n\
    \        }\n        prev_char = ch;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut prev_char = ' ';\n    let mut space_count = 0;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            space_count +=\
    \ 1;\n            if space_count > 2 {\n                continue;\n          \
    \  }\n        } else {\n            space_count = 0;\n        }\n        if prev_char\
    \ == ' ' && c == ' ' {\n            result.push('-');\n        } else {\n    \
    \        result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut last_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces += 1;\n            if spaces >\
    \ 2 {\n                result.push('-');\n                spaces = 0;\n      \
    \      }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                continue;\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n        }\n        if c ==\
    \ ' ' && prev_char == ' ' {\n            result.push('-');\n        } else {\n\
    \            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count > 2 {\n                result.push('-');\n            \
    \    space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut previous_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            consecutive_spaces += 1;\n\
    \            if consecutive_spaces > 2 {\n                continue;\n        \
    \    }\n        } else {\n            consecutive_spaces = 0;\n        }\n   \
    \     if c == ' ' && previous_char == ' ' {\n            result.push('-');\n \
    \       } else {\n            result.push(c);\n        }\n        previous_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n          \
    \  spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut prev_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ prev_space {\n                result.push('-');\n            } else {\n    \
    \            result.push('_');\n            }\n            prev_space = true;\n\
    \        } else {\n            result.push(c);\n            prev_space = false;\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                continue;\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n        }\n        if c ==\
    \ ' ' {\n            if last_char == ' ' {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            result.push(c);\n        }\n        last_char = c;\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut last_was_space\
    \ = false;\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if last_was_space {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            last_was_space = true;\n        } else {\n            if\
    \ consecutive_spaces > 2 {\n                result.push('-');\n            } else\
    \ {\n                for _ in 0..consecutive_spaces {\n                    result.push('_');\n\
    \                }\n            }\n            consecutive_spaces = 0;\n     \
    \       last_was_space = false;\n            result.push(c);\n        }\n    }\n\
    \    if consecutive_spaces > 2 {\n        result.push('-');\n    } else {\n  \
    \      for _ in 0..consecutive_spaces {\n            result.push('_');\n     \
    \   }\n    }\n    result", "    let mut result = String::new();\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            } else {\n             \
    \   result.push('_');\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut prev_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                continue;\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \  }\n        if c == ' ' && prev_char == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        prev_char =\
    \ c;\n    }\n    result", "    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n \
    \       if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count > 2 {\n                result.push('-');\n            \
    \    space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_char == ' ' {\n              \
    \  consecutive_spaces += 1;\n            } else {\n                consecutive_spaces\
    \ = 1;\n            }\n            if consecutive_spaces > 2 {\n             \
    \   result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut space_count = 0;\n    for c in\
    \ text.chars() {\n        if c == ' ' {\n            space_count += 1;\n     \
    \       if space_count == 1 {\n                result.push('_');\n           \
    \ } else if space_count > 2 {\n                result.push('-');\n           \
    \ }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut spaces = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            spaces += 1;\n            if spaces > 2 {\n\
    \                if last_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            spaces = 0;\n            result.push(c);\n\
    \        }\n        last_char = c;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut space_count = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            space_count += 1;\n            if space_count\
    \ > 2 {\n                result.push('-');\n                space_count = 0;\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            space_count = 0;\n            result.push(c);\n   \
    \     }\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n     \
    \       space_count += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == '\
    \ ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n                consecutive_spaces\
    \ = 0;\n            } else {\n                result.push('_');\n            }\n\
    \        } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut count = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if last_char == ' ' {\n                count\
    \ += 1;\n            } else {\n                count = 1;\n            }\n   \
    \         if count > 2 {\n                result.push('-');\n            } else\
    \ {\n                result.push('_');\n            }\n        } else {\n    \
    \        count = 0;\n            result.push(c);\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                continue;\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n        }\n        if c ==\
    \ ' ' && prev_char == ' ' {\n            result.push('-');\n        } else {\n\
    \            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut consecutive_spaces = 0;\n    for\
    \ c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \                consecutive_spaces = 0;\n            } else {\n             \
    \   result.push('_');\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut prev_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                if prev_char\
    \ != '-' {\n                    result.push('-');\n                }\n       \
    \     } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            consecutive_spaces = 0;\n            result.push(c);\n      \
    \  }\n        prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                if last_char !=\
    \ '-' {\n                    result.push('-');\n                }\n          \
    \  } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            consecutive_spaces = 0;\n            result.push(c);\n      \
    \  }\n        last_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut spaces_count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces_count += 1;\n            if spaces_count\
    \ > 2 {\n                result.push('-');\n                spaces_count = 0;\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            spaces_count = 0;\n            result.push(c);\n  \
    \      }\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ prev_space = false;\n    for c in text.chars() {\n        if c == ' ' {\n  \
    \          if prev_space {\n                result.push('-');\n            } else\
    \ {\n                result.push('_');\n            }\n            prev_space\
    \ = true;\n        } else {\n            result.push(c);\n            prev_space\
    \ = false;\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if\
    \ c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n                consecutive_spaces\
    \ = 0;\n            } else {\n                result.push('_');\n            }\n\
    \        } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                if last_char != '-' {\n       \
    \             result.push('-');\n                }\n            } else {\n   \
    \             result.push('_');\n            }\n        } else {\n           \
    \ consecutive_spaces = 0;\n            result.push(c);\n        }\n        last_char\
    \ = c;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n     \
    \       space_count += 1;\n            if space_count > 2 {\n                result.push('-');\n\
    \                space_count = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n      \
    \      spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            if\
    \ spaces > 0 {\n                result.push_str(&\"_\".repeat(spaces));\n    \
    \            spaces = 0;\n            }\n            result.push(c);\n       \
    \ }\n    }\n    if spaces > 0 {\n        result.push_str(&\"_\".repeat(spaces));\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut last_char\
    \ = ' ';\n    let mut consecutive_spaces = 0;\n    for ch in text.chars() {\n\
    \        if ch == ' ' {\n            if last_char == ' ' {\n                consecutive_spaces\
    \ += 1;\n            } else {\n                consecutive_spaces = 1;\n     \
    \       }\n            if consecutive_spaces > 2 {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n            result.push(ch);\n\
    \        }\n        last_char = ch;\n    }\n    result", "    let mut result =\
    \ String::new();\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                result.push('-');\n           \
    \     consecutive_spaces = 0;\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut space_count = 0;\n    for c in text.chars() {\n        if c == '\
    \ ' {\n            space_count += 1;\n            if space_count > 2 {\n     \
    \           result.push('-');\n                space_count = 0;\n            }\
    \ else {\n                result.push('_');\n            }\n        } else {\n\
    \            space_count = 0;\n            result.push(c);\n        }\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count > 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut space_count = 0;\n    for c in text.chars() {\n        if c == ' ' {\n \
    \           space_count += 1;\n            if space_count == 1 {\n           \
    \     result.push('_');\n            } else if space_count == 2 {\n          \
    \      result.push('-');\n            }\n        } else {\n            space_count\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut space_count = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            space_count += 1;\n            if space_count\
    \ == 1 {\n                result.push('_');\n            } else if space_count\
    \ > 2 {\n                result.push('-');\n            }\n        } else {\n\
    \            space_count = 0;\n            result.push(c);\n        }\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut space_count =\
    \ 0;\n    for c in text.chars() {\n        if c == ' ' {\n            space_count\
    \ += 1;\n            if space_count == 1 {\n                result.push('_');\n\
    \            } else if space_count == 2 {\n                result.push('-');\n\
    \            }\n        } else {\n            space_count = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            consecutive_spaces += 1;\n           \
    \ if consecutive_spaces > 2 {\n                continue;\n            }\n    \
    \    } else {\n            consecutive_spaces = 0;\n        }\n        if c ==\
    \ ' ' && prev_char == ' ' {\n            result.push('-');\n        } else {\n\
    \            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut new_text = String::new();\n    let mut space_count = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            space_count += 1;\n  \
    \          if space_count > 2 {\n                new_text.push('-');\n       \
    \         space_count = 0;\n            }\n        } else {\n            if space_count\
    \ > 0 {\n                new_text.push('_');\n                space_count = 0;\n\
    \            }\n            new_text.push(c);\n        }\n    }\n    if space_count\
    \ > 0 {\n        new_text.push('_');\n    }\n    new_text", "    let mut result\
    \ = String::new();\n    let mut space_count = 0;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            space_count += 1;\n            if space_count\
    \ == 1 {\n                result.push('_');\n            } else if space_count\
    \ > 2 {\n                result.push('-');\n            }\n        } else {\n\
    \            space_count = 0;\n            result.push(c);\n        }\n    }\n\
    \    result", "    let mut result = String::new();\n    let mut last_char = '\\\
    0';\n    let mut consecutive_spaces = 0;\n    for c in text.chars() {\n      \
    \  if c == ' ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n                consecutive_spaces\
    \ = 0;\n            }\n        } else {\n            consecutive_spaces = 0;\n\
    \            result.push(c);\n        }\n        last_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                result.push('-');\n                consecutive_spaces = 0;\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      if prev_char == ' ' {\n                result.push('_');\n            }\n\
    \            result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                if prev_char != '-' {\n                    result.push('-');\n\
    \                }\n            } else {\n                result.push('_');\n\
    \            }\n        } else {\n            consecutive_spaces = 0;\n      \
    \      result.push(c);\n        }\n        prev_char = c;\n    }\n    result",
  "    let mut result = String::new();\n    let mut prev_char = ' ';\n    let mut\
    \ consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            consecutive_spaces += 1;\n            if consecutive_spaces > 2 {\n\
    \                continue;\n            }\n        } else {\n            consecutive_spaces\
    \ = 0;\n        }\n        if c == ' ' && prev_char == ' ' {\n            result.push('-');\n\
    \        } else {\n            result.push(c);\n        }\n        prev_char =\
    \ c;\n    }\n    result", "    let mut result = String::new();\n    let mut last_space\
    \ = false;\n    for c in text.chars() {\n        if c == ' ' {\n            if\
    \ last_space {\n                result.push('-');\n            } else {\n    \
    \            result.push('_');\n            }\n            last_space = true;\n\
    \        } else {\n            result.push(c);\n            last_space = false;\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut consecutive_spaces = 0;\n    for c in text.chars() {\n        if c == '\
    \ ' {\n            consecutive_spaces += 1;\n            if consecutive_spaces\
    \ > 2 {\n                result.push('-');\n                consecutive_spaces\
    \ = 0;\n            } else {\n                result.push('_');\n            }\n\
    \        } else {\n            consecutive_spaces = 0;\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n      \
    \      spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut prev_char = ' ';\n    let mut consecutive_spaces\
    \ = 0;\n    for c in text.chars() {\n        if c == ' ' {\n            consecutive_spaces\
    \ += 1;\n            if consecutive_spaces > 2 {\n                if prev_char\
    \ != '-' {\n                    result.push('-');\n                }\n       \
    \     } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            consecutive_spaces = 0;\n            result.push(c);\n      \
    \  }\n        prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut last_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                if last_char !=\
    \ '-' {\n                    result.push('-');\n                }\n          \
    \  } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            consecutive_spaces = 0;\n            result.push(c);\n      \
    \  }\n        last_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut prev_char = ' ';\n    let mut consecutive_spaces = 0;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            consecutive_spaces +=\
    \ 1;\n            if consecutive_spaces > 2 {\n                if prev_char !=\
    \ '-' {\n                    result.push('-');\n                }\n          \
    \  } else {\n                result.push('_');\n            }\n        } else\
    \ {\n            consecutive_spaces = 0;\n            result.push(c);\n      \
    \  }\n        prev_char = c;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut spaces = 0;\n    for c in text.chars() {\n        if c == ' ' {\n\
    \            spaces += 1;\n            if spaces > 2 {\n                result.push('-');\n\
    \                spaces = 0;\n            }\n        } else {\n            spaces\
    \ = 0;\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut prev_space = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            if prev_space {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \        prev_space = true;\n        } else {\n            result.push(c);\n \
    \           prev_space = false;\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
