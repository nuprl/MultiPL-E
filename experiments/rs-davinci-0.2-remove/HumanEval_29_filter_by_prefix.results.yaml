language: rs
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for string in strings {\n       \
    \ if string.starts_with(&prefix) {\n            filtered.push(string);\n     \
    \   }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for string in strings {\n       \
    \ if string.starts_with(&prefix) {\n            filtered.push(string);\n     \
    \   }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for item in strings {\n        if\
    \ item.starts_with(&prefix) {\n            filtered.push(item);\n        }\n \
    \   }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for string in strings {\n       \
    \ if string.starts_with(&prefix) {\n            filtered.push(string);\n     \
    \   }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for string in strings {\n       \
    \ if string.starts_with(&prefix) {\n            filtered.push(string);\n     \
    \   }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for string in strings {\n       \
    \ if string.starts_with(&prefix) {\n            filtered.push(string);\n     \
    \   }\n    }\n    filtered\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for string in strings {\n        if\
    \ string.starts_with(&prefix) {\n            result.push(string);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"\
    xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"\
    xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"\
    ), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    let mut filtered = Vec::new();\n    for s in strings {\n        if s.starts_with(&prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered\n}\n\nfn main()\
    \ {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|string| string.starts_with(&prefix)).collect()\n\
    }\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
- exit_code: 0
  program: "/// Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String>\
    \ {\n    strings.into_iter().filter(|s| s.starts_with(&prefix)).collect()\n}\n\
    \nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
    ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
    xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747310
