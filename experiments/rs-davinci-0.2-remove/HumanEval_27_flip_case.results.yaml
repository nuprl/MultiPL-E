language: rs
name: HumanEval_27_flip_case
results:
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else\
    \ {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp8xw27a8f.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n\
    \        c.to_ascii_uppercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    let mut flipped\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped.push(c.to_uppercase().next().unwrap());\n        } else\
    \ if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    let mut flipped\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            flipped.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            flipped.push(c.to_ascii_lowercase());\n        } else {\n   \
    \         flipped.push(c);\n        }\n    }\n    flipped\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else\
    \ {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    let mut flipped\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped.push(c.to_uppercase().next().unwrap());\n        } else\
    \ if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp8xw27a8f.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp8xw27a8f.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp8xw27a8f.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    let mut flipped\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            flipped.push(c.to_uppercase().next().unwrap());\n        } else\
    \ if c.is_uppercase() {\n            flipped.push(c.to_lowercase().next().unwrap());\n\
    \        } else {\n            flipped.push(c);\n        }\n    }\n    flipped\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp8xw27a8f.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else {\n\
    \        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `{`\n\
    \ --> /tmp/tmpglr34vqb.rs:3:45\n  |\n3 |     string.chars().map(|c| c.is_lowercase()\
    \ {\n  |                                            -^ expected one of `)`, `,`,\
    \ `.`, `?`, or an operator\n  |                                            |\n\
    \  |                                            help: missing `,`\n\nerror: expected\
    \ one of `)`, `,`, `.`, `?`, or an operator, found keyword `else`\n --> /tmp/tmpglr34vqb.rs:5:7\n\
    \  |\n5 |     } else {\n  |       ^^^^ expected one of `)`, `,`, `.`, `?`, or\
    \ an operator\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else\
    \ {\n        c.to_uppercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    let mut flipped\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_uppercase()\
    \ {\n            flipped.push(c.to_lowercase().next().unwrap());\n        } else\
    \ {\n            flipped.push(c.to_uppercase().next().unwrap());\n        }\n\
    \    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 101
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.to_ascii_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"HELLO!\"`,\n right: `\"hELLO!\"`', /tmp/tmp8xw27a8f.rs:9:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    let mut flipped\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_uppercase()\
    \ {\n            flipped.push(c.to_lowercase().next().unwrap());\n        } else\
    \ {\n            flipped.push(c.to_uppercase().next().unwrap());\n        }\n\
    \    }\n    flipped\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n\
    \        c.to_ascii_lowercase()\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = flip_case;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"\
    ));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"hELLO!\"\
    ));\n    assert_eq!(candidate(String::from(\"These violent delights have violent\
    \ ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else\
    \ {\n        c.to_lowercase().next().unwrap()\n    }).collect()\n}\n\nfn main()\
    \ {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\"\
    )), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n   \
    \         'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 1
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ c.swap_case()).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n\
    \    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"\
    Hello!\")), String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"\
    These violent delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `swap_case` found for type `char` in the\
    \ current scope\n --> /tmp/tmpwlqo271p.rs:3:30\n  |\n3 |     string.chars().map(|c|\
    \ c.swap_case()).collect()\n  |                              ^^^^^^^^^ method\
    \ not found in `char`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n\
    \        } else {\n            c.to_uppercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n\
    \        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap()\
    \ }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ match c {\n        'a'...'z' => c.to_ascii_uppercase(),\n        'A'...'Z' =>\
    \ c.to_ascii_lowercase(),\n        _ => c,\n    }).collect()\n}\n\nfn main() {\n\
    \    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\")),\
    \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")), String::from(\"\
    hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent delights have\
    \ violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n\
    \        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()\n\
    }\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
- exit_code: 0
  program: "/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\nfn flip_case(string: String) -> String {\n    string.chars().map(|c|\
    \ {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n\
    \        } else {\n            c.to_lowercase().next().unwrap()\n        }\n \
    \   }).collect()\n}\n\nfn main() {\n    let candidate = flip_case;\n    assert_eq!(candidate(String::from(\"\
    \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"Hello!\")),\
    \ String::from(\"hELLO!\"));\n    assert_eq!(candidate(String::from(\"These violent\
    \ delights have violent ends\")), String::from(\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747250
