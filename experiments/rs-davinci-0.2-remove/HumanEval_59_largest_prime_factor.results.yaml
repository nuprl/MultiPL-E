language: rs
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ < n {\n        if n % i == 0 {\n            return largest_prime_factor(n /\
    \ i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime = 1;\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ largest_prime = i;\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp30bum4a1.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime = 2;\n\
    \    let mut n = n;\n    while n > 1 {\n        if n % largest_prime == 0 {\n\
    \            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime = 1;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     largest_prime = i;\n            n /= i;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    if n > largest_prime {\n        n\n    } else {\n\
    \        largest_prime\n    }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp2tr23fo6.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            n /= i;\n \
    \       } else {\n            i += 1;\n        }\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n % factor != 0 {\n        factor += 1;\n    }\n    n\
    \ / factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `3`', /tmp/tmpomq5vl89.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            n /= i;\n \
    \       } else {\n            i += 1;\n        }\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime_factor\
    \ = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime_factor\
    \ = n;\n    }\n    largest_prime_factor\n}\n\nfn main() {\n    let candidate =\
    \ largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpohw9uv8f.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ p = 2;\n    while n % p != 0 {\n        p += 1;\n    }\n    n /= p;\n    while\
    \ n > 1 {\n        while n % p != 0 {\n            p += 1;\n        }\n      \
    \  n /= p;\n    }\n    p\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0 {\n\
    \            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if n > 1 {\n        largest = n;\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpt7rd89nw.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime = 1;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     largest_prime = i;\n            n /= i;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    if n > largest_prime {\n        n\n    } else {\n\
    \        largest_prime\n    }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp2tr23fo6.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n % factor != 0 {\n        factor += 1;\n    }\n    n\
    \ / factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `3`', /tmp/tmpomq5vl89.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 1;\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpyn_soo2b.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ < n {\n        if n % i == 0 {\n            return largest_prime_factor(n /\
    \ i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime_factor\
    \ = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime_factor\
    \ = n;\n    }\n    largest_prime_factor\n}\n\nfn main() {\n    let candidate =\
    \ largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpohw9uv8f.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut p = 2;\n    let mut\
    \ n = n;\n    while n % p != 0 {\n        p += 1;\n    }\n    n / p\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `3`', /tmp/tmpp3ie0nje.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_factor = 1;\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ largest_factor = i;\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    largest_factor\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp3e8npl00.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n % factor != 0 {\n        factor += 1;\n    }\n    n\
    \ / factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `3`', /tmp/tmpomq5vl89.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime = 0;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     largest_prime = i;\n            n /= i;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    if n > largest_prime {\n        n\n    } else {\n\
    \        largest_prime\n    }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpmdfh1xij.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 0;\n    while i * i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if n > 1 {\n        largest = n;\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpze_npp8o.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut p = 2;\n    let mut\
    \ n = n;\n    while n % p != 0 {\n        p += 1;\n    }\n    n / p\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `3`', /tmp/tmpp3ie0nje.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ p = 2;\n    while n % p != 0 {\n        p += 1;\n    }\n    n /= p;\n    while\
    \ n % p == 0 {\n        n /= p;\n    }\n    if n == 1 {\n        p\n    } else\
    \ {\n        largest_prime_factor(n)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest = 1;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if n > largest {\n        n\n    } else {\n        largest\n    }\n\
    }\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp2_u6uqah.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest_prime = 1;\n    while i <= n {\n        if n % i == 0 {\n          \
    \  largest_prime = i;\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpzg67an4h.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i < n {\n        if n % i == 0 {\n            n /= i;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 1;\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpyn_soo2b.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ largest_factor = 1;\n    let mut i = 2;\n    while i <= n {\n        if n %\
    \ i == 0 {\n            largest_factor = i;\n            n /= i;\n           \
    \ while n % i == 0 {\n                n /= i;\n            }\n        }\n    \
    \    i += 1;\n    }\n    largest_factor\n}\n\nfn main() {\n    let candidate =\
    \ largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime = 1;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     largest_prime = i;\n            n /= i;\n        } else {\n            i\
    \ += 1;\n        }\n    }\n    if n > largest_prime {\n        n\n    } else {\n\
    \        largest_prime\n    }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp2tr23fo6.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 0;\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp_b_h1ikj.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 0;\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp_b_h1ikj.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if n > 1 {\n        largest = n;\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpt7rd89nw.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ largest_prime = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            largest_prime = i;\n            while n % i == 0 {\n\
    \                n /= i;\n            }\n        }\n        i += 1;\n    }\n \
    \   if n > 1 {\n        largest_prime = n;\n    }\n    largest_prime\n}\n\nfn\
    \ main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut f = 2;\n    let mut\
    \ n = n;\n    while f * f <= n {\n        if n % f == 0 {\n            n /= f;\n\
    \        } else {\n            f += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 0;\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp_b_h1ikj.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 1;\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpyn_soo2b.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 1;\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpyn_soo2b.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n % factor != 0 {\n        factor += 1;\n    }\n    n\
    \ / factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `3`', /tmp/tmpomq5vl89.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 0;\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp_b_h1ikj.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest = 1;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if n > largest {\n        n\n    } else {\n        largest\n    }\n\
    }\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp2_u6uqah.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut x = n;\n    let mut\
    \ i = 2;\n    while i * i <= x {\n        if x % i == 0 {\n            x /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    x\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n % factor != 0 {\n        factor += 1;\n    }\n    n\
    \ / factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `3`', /tmp/tmpomq5vl89.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime = 1;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     largest_prime = i;\n            while n % i == 0 {\n                n /=\
    \ i;\n            }\n        }\n        i += 1;\n    }\n    if n > 1 {\n     \
    \   largest_prime = n;\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp4i478cgc.rs:9:17\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n9 |      \
    \           n /= i;\n  |                 ^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n % factor != 0 {\n        factor += 1;\n    }\n    n\
    \ / factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `3`', /tmp/tmpomq5vl89.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime_factor\
    \ = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime_factor\
    \ = n;\n    }\n    largest_prime_factor\n}\n\nfn main() {\n    let candidate =\
    \ largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpohw9uv8f.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_factor = 0;\n\
    \    let mut i = 2;\n    let mut n = n;\n    while i <= n {\n        if n % i\
    \ == 0 {\n            largest_factor = i;\n            n /= i;\n            while\
    \ n % i == 0 {\n                n /= i;\n            }\n        }\n        i +=\
    \ 1;\n    }\n    largest_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i <= n {\n        if n % i == 0 {\n            n /= i;\n \
    \       } else {\n            i += 1;\n        }\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i < n {\n        if n % i == 0 {\n            n /= i;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime = 1;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     largest_prime = i;\n            while n % i == 0 {\n                n /=\
    \ i;\n            }\n        }\n        i += 1;\n    }\n    if n > 1 {\n     \
    \   largest_prime = n;\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp4i478cgc.rs:9:17\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n9 |      \
    \           n /= i;\n  |                 ^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 0;\n    while i * i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            while n % i == 0 {\n                n /= i;\n            }\n\
    \        }\n        i += 1;\n    }\n    if n > 1 {\n        largest = n;\n   \
    \ }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpjr52w7nx.rs:9:17\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n9 |      \
    \           n /= i;\n  |                 ^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 0;\n    while i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp_b_h1ikj.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n    let\
    \ mut i = 3;\n    while i <= n {\n        while n % i == 0 {\n            n /=\
    \ i;\n            largest_prime = i;\n        }\n        i += 2;\n    }\n    largest_prime\n\
    }\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ largest_factor = 0;\n    let mut i = 2;\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            largest_factor = i;\n            n /= i;\n       \
    \ } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_factor\
    \ = n;\n    }\n    largest_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime = 0;\n\
    \    let mut i = 2;\n    while i <= n {\n        if n % i == 0 {\n           \
    \ largest_prime = i;\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpav418fm8.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ largest_prime = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            n /= i;\n            largest_prime = i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    if n > largest_prime {\n     \
    \   n\n    } else {\n        largest_prime\n    }\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut largest_factor = 1;\n\
    \    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     largest_factor = i;\n            n /= i;\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    if n > 1 {\n        largest_factor = n;\n   \
    \ }\n    largest_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpq7o5cn8g.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ n = n;\n    while i <= n {\n        if n % i == 0 {\n            n /= i;\n \
    \       } else {\n            i += 1;\n        }\n    }\n    i\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 0;\n    while i * i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if n > 1 {\n        largest = n;\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpze_npp8o.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut factor = 2;\n    let\
    \ mut n = n;\n    while n > 1 {\n        if n % factor == 0 {\n            n /=\
    \ factor;\n        } else {\n            factor += 1;\n        }\n    }\n    factor\n\
    }\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ p = 2;\n    while n % p != 0 {\n        p += 1;\n    }\n    n /= p;\n    while\
    \ n % p == 0 {\n        n /= p;\n    }\n    if n == 1 {\n        p\n    } else\
    \ {\n        largest_prime_factor(n)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ p = 2;\n    while n % p != 0 {\n        p += 1;\n    }\n    n /= p;\n    while\
    \ n % p == 0 {\n        n /= p;\n    }\n    if n == 1 {\n        p\n    } else\
    \ {\n        largest_prime_factor(n)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n % factor != 0 {\n        factor += 1;\n    }\n    n\
    \ / factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `3`', /tmp/tmpomq5vl89.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    let mut largest_factor = 2;\n    while n > 1 {\n        if\
    \ n % factor == 0 {\n            largest_factor = factor;\n            n /= factor;\n\
    \            while n % factor == 0 {\n                n /= factor;\n         \
    \   }\n        }\n        factor += 1;\n    }\n    largest_factor\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest_prime = 1;\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      largest_prime = i;\n            n /= i;\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime = n;\n    }\n\
    \    largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpd7hxhcq5.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    n\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut factor = 2;\n    let\
    \ mut n = n;\n    while n > 1 {\n        if n % factor == 0 {\n            n /=\
    \ factor;\n        } else {\n            factor += 1;\n        }\n    }\n    factor\n\
    }\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut i = 2;\n    let mut\
    \ largest = 0;\n    while i * i <= n {\n        if n % i == 0 {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    if n > 1 {\n        largest = n;\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpze_npp8o.rs:8:13\n\
    \  |\n2 | fn largest_prime_factor(n: isize) -> isize {\n  |                  \
    \       - help: consider making this binding mutable: `mut n`\n...\n8 |      \
    \       n /= i;\n  |             ^^^^^^ cannot assign to immutable argument\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    fn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let mut\
    \ factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n            n\
    \ /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n \
    \   factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805521
