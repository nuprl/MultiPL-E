language: rs
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    let (left, right) = digits.split_at(len - shift as\
    \ usize);\n    format!(\"{}{}\", right, left)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd63gyw4d.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpd63gyw4d.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ mut shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n\
    \    let mut result = String::new();\n    for _ in 0..len {\n        result.push(digits.pop().unwrap());\n\
    \    }\n    for _ in 0..shift {\n        result.push(result.remove(0));\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdztzu_z4.rs:7:29\n  |\n7 |\
    \     let mut shift = shift % len;\n  |                             ^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n -->\
    \ /tmp/tmpdztzu_z4.rs:7:27\n  |\n7 |     let mut shift = shift % len;\n  |   \
    \                        ^ no implementation for `isize % usize`\n  |\n  = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    let shift = shift\
    \ % len;\n    if shift == 0 {\n        return s;\n    }\n    let (a, b) = s.split_at(len\
    \ - shift as usize);\n    b.to_string() + a\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_91vsnj2.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp_91vsnj2.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift > 0 {\n        let (a, b) = digits.split_at(len\
    \ - shift as usize);\n        digits = format!(\"{}{}\", b, a);\n    }\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphl4rfntu.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmphl4rfntu.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift >= len as isize {\n        digits.chars().rev().collect()\n    } else\
    \ {\n        let (left, right) = digits.split_at(len - shift as usize);\n    \
    \    right.to_string() + left\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmpr96y_k5u.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        right.to_string()\
    \ + left\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let len = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..len {\n        result.push(digits[(i\
    \ + shift as usize) % len]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpmi2df87w.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpoeswt5aa.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (a, b) = digits.split_at(len - shift as usize);\n    let mut result =\
    \ String::from(b);\n    result.push_str(a);\n    result\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppx_gi0fd.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmppx_gi0fd.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let x_str = x.to_string();\n    let x_len = x_str.len() as isize;\n \
    \   let shift = shift % x_len;\n    if shift == 0 {\n        return x_str;\n \
    \   }\n    let mut result = String::new();\n    for i in 0..x_len {\n        let\
    \ index = (x_len - shift + i) % x_len;\n        result.push(x_str.chars().nth(index\
    \ as usize).unwrap());\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmptetuf2bj.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string().chars().collect::<Vec<char>>();\n    let\
    \ len = digits.len();\n    if shift > len as isize {\n        digits.reverse();\n\
    \        return digits.into_iter().collect();\n    }\n    for _ in 0..shift {\n\
    \        let last = digits.pop().unwrap();\n        digits.insert(0, last);\n\
    \    }\n    digits.into_iter().collect()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    if shift > digits.len() as isize\
    \ {\n        digits.chars().rev().collect()\n    } else {\n        let (left,\
    \ right) = digits.split_at(shift as usize);\n        right.to_string() + left\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpjae4x7wn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp0rq0qufz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev();\n\
    \    let mut shifted = Vec::new();\n    for _ in 0..shift {\n        if let Some(digit)\
    \ = digits.next() {\n            shifted.push(digit);\n        } else {\n    \
    \        break;\n        }\n    }\n    shifted.extend(digits);\n    shifted.into_iter().map(|d|\
    \ d.to_string()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpld22qzty.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = Vec::new();\n    for i in 0..digits.len() {\n        result.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpzpx2_ypj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..n {\n        result.push(digits[(i\
    \ + shift as usize) % n]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe08vuwb9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpoeswt5aa.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        right.to_string()\
    \ + left\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    let (a, b) = digits.split_at(len - shift as usize);\n\
    \    format!(\"{}{}\", b, a)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsl0ywhdm.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpsl0ywhdm.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    digits.push_str(&digits[..shift]);\n    digits.drain(..shift);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2w23tamu.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp2w23tamu.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmp2w23tamu.rs:8:22\n  |\n8 |     digits.push_str(&digits[..shift]);\n\
    \  |                      ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the trait bound `RangeTo<isize>: RangeBounds<usize>` is not satisfied\n\
    \ --> /tmp/tmp2w23tamu.rs:9:18\n  |\n9 |     digits.drain(..shift);\n  |     \
    \             ^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `RangeTo<isize>`\n\
    \  |\n  = help: the following implementations were found:\n            <RangeTo<&T>\
    \ as RangeBounds<T>>\n            <RangeTo<T> as RangeBounds<T>>\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev();\n\
    \    let mut shifted = Vec::new();\n    for _ in 0..shift {\n        if let Some(digit)\
    \ = digits.next() {\n            shifted.push(digit);\n        } else {\n    \
    \        break;\n        }\n    }\n    for digit in digits {\n        shifted.push(digit);\n\
    \    }\n    shifted.into_iter().map(|x| x.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpkv58j7ub.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp0rq0qufz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwjdgee9p.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpwjdgee9p.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    if shift > len\
    \ as isize {\n        s.chars().rev().collect()\n    } else {\n        let (left,\
    \ right) = s.split_at(len - shift as usize);\n        right.to_string() + left\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp0rq0qufz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let digit = digits.pop().unwrap();\n        digits.insert(0,\
    \ digit);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmp1nh31ljr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = String::new();\n    for i in 0..digits.len() {\n       \
    \ result.push_str(&format!(\"{}\", digits[(i + shift as usize) % digits.len()]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpg6zny74z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (a, b) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", b, a)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = String::new();\n    let len = digits.len();\n    for i in\
    \ 0..len {\n        result.push_str(&format!(\"{}\", digits[(i + shift as usize)\
    \ % len]));\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpvv21pq3h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (a, b) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", b, a)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpaavykva7.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpjhb7sfql.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..n {\n        result.push(digits[(i\
    \ + shift as usize) % n]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe08vuwb9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev();\n\
    \    let mut shifted = Vec::new();\n    for _ in 0..shift {\n        if let Some(digit)\
    \ = digits.next() {\n            shifted.push(digit);\n        } else {\n    \
    \        break;\n        }\n    }\n    shifted.extend(digits);\n    shifted.into_iter().map(|d|\
    \ d.to_string()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpld22qzty.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpwqy1q8xy.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..n {\n        result.push(digits[(i\
    \ + shift as usize) % n]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe08vuwb9.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift as usize) % len]));\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpkxk4_l27.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push(digits[(i\
    \ + shift as usize) % len]);\n    }\n    result.iter().map(|&x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpyxgiee8o.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    let (left, right) = digits.split_at(len - shift as\
    \ usize);\n    let mut result = String::from(right);\n    result.push_str(left);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8je6z3kz.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp8je6z3kz.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push(((digits[i] + '0' as isize)\
    \ as u8) as char);\n    }\n    for _ in 0..shift {\n        let last = result.pop().unwrap();\n\
    \        result.insert(0, last);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpa_fl9qqp.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    if shift >= len\
    \ as isize {\n        s.chars().rev().collect()\n    } else {\n        let (a,\
    \ b) = s.split_at(len - shift as usize);\n        format!(\"{}{}\", b, a)\n  \
    \  }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmpmirty4hc.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        right.to_string()\
    \ + left\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let last = digits.pop().unwrap();\n        digits.insert(0,\
    \ last);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa1co36x4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    let mut result\
    \ = String::from(right);\n    result.push_str(left);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2y91q260.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp2y91q260.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&digits[(i\
    \ + shift as usize) % len].to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe2zwmuau.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwjdgee9p.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpwjdgee9p.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpoeswt5aa.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   digits.push_str(&digits[..shift]);\n    digits.remove(0..shift);\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp56nffr64.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp56nffr64.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp56nffr64.rs:11:22\n   |\n11 |     digits.push_str(&digits[..shift]);\n\
    \   |                      ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp56nffr64.rs:12:19\n   |\n12 |\
    \     digits.remove(0..shift);\n   |                   ^^^^^^^^ expected `usize`,\
    \ found struct `std::ops::Range`\n   |\n   = note: expected type `usize`\n   \
    \         found struct `std::ops::Range<isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift >= len as isize {\n        digits.chars().rev().collect()\n    } else\
    \ {\n        let (left, right) = digits.split_at(len - shift as usize);\n    \
    \    format!(\"{}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmpxk__tymp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    let mut result\
    \ = String::new();\n    while x > 0 {\n        digits.push(x % 10);\n        x\
    \ /= 10;\n    }\n    if shift > digits.len() as isize {\n        digits.reverse();\n\
    \        for d in digits {\n            result.push_str(&d.to_string());\n   \
    \     }\n    } else {\n        for i in 0..digits.len() {\n            let j =\
    \ (i as isize + shift) % digits.len() as isize;\n            result.push_str(&digits[j\
    \ as usize].to_string());\n        }\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpqep15825.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let n = digits.len();\n    let mut result = Vec::new();\n    for i in 0..n\
    \ {\n        result.push(digits[(i + shift as usize) % n]);\n    }\n    result.iter().map(|x|\
    \ x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpvyg4jx6y.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let len = digits.len();\n    let mut shifted = Vec::new();\n    for i in\
    \ 0..len {\n        shifted.push(digits[(i + shift as usize) % len]);\n    }\n\
    \    shifted.iter().map(|d| d.to_string()).collect()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpbgyr7op3.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = String::new();\n    let len = digits.len();\n    for i in\
    \ 0..len {\n        result.push_str(&digits[(i + shift as usize) % len].to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpmmni39k6.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    let (left, right) = digits.split_at(len - shift as\
    \ usize);\n    format!(\"{}{}\", right, left)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd63gyw4d.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpd63gyw4d.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let len = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..len {\n        result.push(digits[(i\
    \ + shift as usize) % len]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpg1w922gn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let last = digits.pop().unwrap();\n        digits.insert(0,\
    \ last);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa1co36x4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev().collect::<Vec<_>>();\n\
    \    let len = digits.len();\n    if shift > len {\n        digits.reverse();\n\
    \        return digits.into_iter().map(|x| x.to_string()).collect();\n    }\n\
    \    let mut result = Vec::new();\n    result.extend(digits.iter().cycle().skip(shift\
    \ as usize).take(len));\n    result.into_iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp72agugcy.rs:13:16\n   |\n\
    13 |     if shift > len {\n   |                ^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     if shift > len.try_into().unwrap() {\n   |\
    \                ~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&digits[(i\
    \ + shift as usize) % len].to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe2zwmuau.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let len = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..len {\n        result.push(digits[(i\
    \ + shift as usize) % len]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpmi2df87w.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    let shift = shift\
    \ % len;\n    let (left, right) = s.split_at(len - shift as usize);\n    let mut\
    \ result = String::new();\n    result.push_str(right);\n    result.push_str(left);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8uvb0uhf.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp8uvb0uhf.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwjdgee9p.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpwjdgee9p.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..n {\n        result.push(digits[(i\
    \ + shift as usize) % n]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpxoxt4phy.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    digits.push_str(&digits[..shift]);\n    digits.drain(..shift);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2w23tamu.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp2w23tamu.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmp2w23tamu.rs:8:22\n  |\n8 |     digits.push_str(&digits[..shift]);\n\
    \  |                      ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the trait bound `RangeTo<isize>: RangeBounds<usize>` is not satisfied\n\
    \ --> /tmp/tmp2w23tamu.rs:9:18\n  |\n9 |     digits.drain(..shift);\n  |     \
    \             ^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `RangeTo<isize>`\n\
    \  |\n  = help: the following implementations were found:\n            <RangeTo<&T>\
    \ as RangeBounds<T>>\n            <RangeTo<T> as RangeBounds<T>>\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let last = digits.pop().unwrap();\n        digits.insert(0,\
    \ last);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa1co36x4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpjhb7sfql.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwjdgee9p.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpwjdgee9p.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift) % len]));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpws8kh2wv.rs:14:52\n   |\n\
    14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % len]));\n \
    \  |                                                    ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpws8kh2wv.rs:14:50\n\
    \   |\n14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % len]));\n\
    \   |                                                  ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let mut i = digits.len() - shift as usize;\n    while i < digits.len() {\n\
    \        result.push_str(&digits[i].to_string());\n        i += 1;\n    }\n  \
    \  i = 0;\n    while i < digits.len() - shift as usize {\n        result.push_str(&digits[i].to_string());\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmplomhihyh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpff61pq75.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let n = digits.len();\n    let mut shifted = Vec::new();\n    for i in 0..n\
    \ {\n        shifted.push(digits[(i + shift as usize) % n]);\n    }\n    shifted.iter().map(|x|\
    \ x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpdi7ijtom.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&digits[(i\
    \ + shift as usize) % len].to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe2zwmuau.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmphll4684v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let digit = digits.pop().unwrap();\n        digits.insert(0,\
    \ digit);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmp1nh31ljr.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let n = digits.len();\n    if shift\
    \ >= n as isize {\n        digits.chars().rev().collect()\n    } else {\n    \
    \    let (left, right) = digits.split_at(n - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmpbuwcwp5h.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (a, b) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", b, a)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (a, b) = digits.split_at(len - shift as usize);\n    format!(\"{}{}\"\
    , b, a)\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm92shspi.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpm92shspi.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let n = digits.len();\n    for i in 0..n {\n        result.push_str(&digits[(i\
    \ + shift) % n].to_string());\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptd_6whfz.rs:14:38\n   |\n\
    14 |         result.push_str(&digits[(i + shift) % n].to_string());\n   |    \
    \                                  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n  --> /tmp/tmptd_6whfz.rs:14:36\n   |\n14 | \
    \        result.push_str(&digits[(i + shift) % n].to_string());\n   |        \
    \                            ^ no implementation for `usize + isize`\n   |\n \
    \  = help: the trait `Add<isize>` is not implemented for `usize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = String::new();\n    for i in 0..digits.len() {\n       \
    \ result.push_str(&format!(\"{}\", digits[(i + shift as usize) % digits.len()]));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpg6zny74z.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpwqy1q8xy.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    digits.push_str(&digits[..shift]);\n    digits.drain(..shift);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2w23tamu.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp2w23tamu.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmp2w23tamu.rs:8:22\n  |\n8 |     digits.push_str(&digits[..shift]);\n\
    \  |                      ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the trait bound `RangeTo<isize>: RangeBounds<usize>` is not satisfied\n\
    \ --> /tmp/tmp2w23tamu.rs:9:18\n  |\n9 |     digits.drain(..shift);\n  |     \
    \             ^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `RangeTo<isize>`\n\
    \  |\n  = help: the following implementations were found:\n            <RangeTo<&T>\
    \ as RangeBounds<T>>\n            <RangeTo<T> as RangeBounds<T>>\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = String::new();\n    let len = digits.len();\n    for i in\
    \ 0..len {\n        result.push_str(&format!(\"{}\", digits[(i + shift as usize)\
    \ % len]));\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpvv21pq3h.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.iter().rev().cloned().collect::<Vec<_>>();\n\
    \    let n = digits.len();\n    if shift >= n as isize {\n        return digits.iter().rev().map(|&x|\
    \ (x + 48) as u8 as char).collect();\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..n {\n        result.push(digits[(i + shift as usize) % n]);\n\
    \    }\n    result.iter().map(|&x| (x + 48) as u8 as char).collect()\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp3icf7vob.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpjhb7sfql.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let n = digits.len();\n    for i in 0..n {\n        let j = (i + shift) %\
    \ n;\n        result.push_str(&format!(\"{}\", digits[j]));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy1rncm22.rs:14:22\n   |\n\
    14 |         let j = (i + shift) % n;\n   |                      ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  -->\
    \ /tmp/tmpy1rncm22.rs:14:20\n   |\n14 |         let j = (i + shift) % n;\n   |\
    \                    ^ no implementation for `usize + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..n {\n        result.push(digits[(i\
    \ + shift as usize) % n]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpxoxt4phy.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut res = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        res.push_str(&format!(\"\
    {}\", digits[(i + shift as usize) % len]));\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp775lb6am.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    let mut result\
    \ = String::new();\n    result.push_str(right);\n    result.push_str(left);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3l2js_tq.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp3l2js_tq.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = digits(x);\n    let len = digits.len();\n    let mut\
    \ shift = shift % len;\n    if shift < 0 {\n        shift += len;\n    }\n   \
    \ let mut result = digits.split_off(len - shift as usize);\n    result.append(&mut\
    \ digits);\n    result.iter().map(|&d| d.to_string()).collect()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmpitojq5f2.rs:5:22\n\
    \  |\n5 |     let mut digits = digits(x);\n  |                      ^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmphll4684v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string().chars().collect::<Vec<char>>();\n    let\
    \ len = digits.len();\n    if shift > len as isize {\n        return digits.iter().rev().collect::<String>();\n\
    \    }\n    let mut result = Vec::with_capacity(len);\n    for i in 0..len {\n\
    \        let index = (i + shift as usize) % len;\n        result.push(digits[index]);\n\
    \    }\n    result.iter().collect::<String>()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmp1vbgmcgl.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let mut i = digits.len() - shift as usize;\n    while i < digits.len() {\n\
    \        result.push_str(&digits[i].to_string());\n        i += 1;\n    }\n  \
    \  i = 0;\n    while i < digits.len() - shift as usize {\n        result.push_str(&digits[i].to_string());\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmplomhihyh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    if shift > digits.len() as isize\
    \ {\n        digits.chars().rev().collect()\n    } else {\n        let (left,\
    \ right) = digits.split_at(shift as usize);\n        right.to_string() + left\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpjae4x7wn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    for _ in 0..shift {\n        let\
    \ last = digits.pop().unwrap();\n        digits.insert(0, last);\n    }\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpstkcboon.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    let mut result\
    \ = String::new();\n    while x > 0 {\n        digits.push(x % 10);\n        x\
    \ /= 10;\n    }\n    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&digits[(i\
    \ + shift as usize) % len].to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpnti1w_a3.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut digits = digits.into_iter().cycle();\n    let mut shifted = Vec::new();\n\
    \    for _ in 0..shift {\n        shifted.push(digits.next().unwrap());\n    }\n\
    \    shifted.into_iter().map(|x| x.to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"10\"`,\n right: `\"001\"`', /tmp/tmpbadokivf.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let len = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..len {\n        result.push(digits[(i\
    \ + shift as usize) % len]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpg1w922gn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&digits[(i\
    \ + shift as usize) % len].to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe2zwmuau.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut result = String::new();\n    let mut digits\
    \ = Vec::new();\n    while x > 0 {\n        digits.push(x % 10);\n        x /=\
    \ 10;\n    }\n    let n = digits.len();\n    for i in 0..n {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift) % n]));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpybqcadv2.rs:14:52\n   |\n\
    14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % n]));\n   |\
    \                                                    ^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpybqcadv2.rs:14:50\n\
    \   |\n14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % n]));\n\
    \   |                                                  ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev();\n\
    \    let mut result = Vec::new();\n    for _ in 0..shift {\n        let digit\
    \ = digits.next().unwrap_or(0);\n        result.push(digit);\n    }\n    for digit\
    \ in digits {\n        result.push(digit);\n    }\n    result.into_iter().map(|x|\
    \ x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpgbgpzbos.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwjdgee9p.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpwjdgee9p.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwjdgee9p.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpwjdgee9p.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    if shift > digits.len()\
    \ as isize {\n        digits.reverse();\n        return digits.iter().map(|d|\
    \ d.to_string()).collect();\n    }\n    let mut result = Vec::new();\n    for\
    \ i in 0..digits.len() {\n        result.push(digits[(i + shift as usize) % digits.len()]);\n\
    \    }\n    result.iter().map(|d| d.to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpjvqgjqk4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ mut shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n\
    \    let mut result = String::new();\n    result.push_str(&digits[len - shift..]);\n\
    \    result.push_str(&digits[..len - shift]);\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuqmt5d0h.rs:7:29\n  |\n7 |\
    \     let mut shift = shift % len;\n  |                             ^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n -->\
    \ /tmp/tmpuqmt5d0h.rs:7:27\n  |\n7 |     let mut shift = shift % len;\n  |   \
    \                        ^ no implementation for `isize % usize`\n  |\n  = help:\
    \ the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuqmt5d0h.rs:12:35\n   |\n12 |     result.push_str(&digits[len\
    \ - shift..]);\n   |                                   ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpuqmt5d0h.rs:12:33\n\
    \   |\n12 |     result.push_str(&digits[len - shift..]);\n   |               \
    \                  ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuqmt5d0h.rs:13:37\n   |\n13 |     result.push_str(&digits[..len\
    \ - shift]);\n   |                                     ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpuqmt5d0h.rs:13:35\n\
    \   |\n13 |     result.push_str(&digits[..len - shift]);\n   |               \
    \                    ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift as usize) % len]));\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpkxk4_l27.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift as usize) % len]));\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpkxk4_l27.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let last = digits.pop().unwrap();\n        digits.insert(0,\
    \ last);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa1co36x4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut result = String::new();\n    let mut digits\
    \ = Vec::new();\n    while x > 0 {\n        digits.push(x % 10);\n        x /=\
    \ 10;\n    }\n    let n = digits.len();\n    for i in 0..n {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift) % n]));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpybqcadv2.rs:14:52\n   |\n\
    14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % n]));\n   |\
    \                                                    ^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpybqcadv2.rs:14:50\n\
    \   |\n14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % n]));\n\
    \   |                                                  ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let last = digits.pop().unwrap();\n        digits.insert(0,\
    \ last);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa1co36x4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.into_iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmps0vc75yk.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = Vec::new();\n    let len = digits.len();\n    for i in 0..len\
    \ {\n        result.push(digits[(i + shift as usize) % len]);\n    }\n    result.iter().map(|d|\
    \ d.to_string()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpbehqm_hs.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (a, b) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", b, a)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev();\n\
    \    let mut result = String::new();\n    for _ in 0..shift {\n        if let\
    \ Some(d) = digits.next() {\n            result.push_str(&d.to_string());\n  \
    \      }\n    }\n    for d in digits {\n        result.push_str(&d.to_string());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpqhf_k_ln.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (a, b) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", b, a)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        result.push_str(&digits[(i\
    \ + shift as usize) % digits.len()].to_string());\n        i += 1;\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpbuf_t83b.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..n {\n        result.push(digits[(i\
    \ + shift) % n]);\n    }\n    result.into_iter().rev().map(|x| (x + 48) as u8\
    \ as char).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7e2blwts.rs:14:33\n   |\n\
    14 |         result.push(digits[(i + shift) % n]);\n   |                     \
    \            ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add\
    \ `isize` to `usize`\n  --> /tmp/tmp7e2blwts.rs:14:31\n   |\n14 |         result.push(digits[(i\
    \ + shift) % n]);\n   |                               ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let last = digits.pop().unwrap();\n        digits.insert(0,\
    \ last);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa1co36x4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x.to_string();\n    let len = x.len();\n    let shift = shift\
    \ % len;\n    let mut result = String::new();\n    for i in 0..len {\n       \
    \ let index = (i + shift) % len;\n        result.push(x.chars().nth(index).unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_6bis1z9.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp_6bis1z9.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_6bis1z9.rs:10:26\n\
    \   |\n10 |         let index = (i + shift) % len;\n   |                     \
    \     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize`\
    \ to `usize`\n  --> /tmp/tmp_6bis1z9.rs:10:24\n   |\n10 |         let index =\
    \ (i + shift) % len;\n   |                        ^ no implementation for `usize\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    let (a, b) = digits.split_at(len - shift as usize);\n\
    \    format!(\"{}{}\", b, a)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsl0ywhdm.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpsl0ywhdm.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    let mut result\
    \ = String::new();\n    while x > 0 {\n        digits.push(x % 10);\n        x\
    \ /= 10;\n    }\n    let len = digits.len();\n    if shift > len as isize {\n\
    \        for i in 0..len {\n            result.push_str(&format!(\"{}\", digits[len\
    \ - i - 1]));\n        }\n    } else {\n        for i in 0..len {\n          \
    \  result.push_str(&format!(\"{}\", digits[(i + shift as usize) % len]));\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmptgv66w9a.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let last = digits.pop().unwrap();\n        digits.insert(0,\
    \ last);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa1co36x4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().cycle();\n\
    \    let mut result = String::new();\n    for _ in 0..shift {\n        result.push_str(&format!(\"\
    {}\", digits.next().unwrap()));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"00\"`,\n right: `\"001\"`', /tmp/tmp1y_lmnri.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift) % len]));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpws8kh2wv.rs:14:52\n   |\n\
    14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % len]));\n \
    \  |                                                    ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpws8kh2wv.rs:14:50\n\
    \   |\n14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % len]));\n\
    \   |                                                  ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpjhb7sfql.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = Vec::new();\n    for i in 0..digits.len() {\n        result.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpzpx2_ypj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let len = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..len {\n        result.push(digits[(i\
    \ + shift as usize) % len]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpg1w922gn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut digits = digits.into_iter().cycle();\n    let mut result = String::new();\n\
    \    for _ in 0..shift {\n        result.push_str(&format!(\"{}\", digits.next().unwrap()));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"10\"`,\n right: `\"001\"`', /tmp/tmpi2k01evc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev().collect::<Vec<_>>();\n\
    \    let n = digits.len();\n    if shift >= n as isize {\n        return digits.into_iter().rev().map(|d|\
    \ d.to_string()).collect();\n    }\n    let mut result = Vec::new();\n    for\
    \ i in 0..n {\n        result.push(digits[(i + shift as usize) % n]);\n    }\n\
    \    result.into_iter().map(|d| d.to_string()).collect()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpjcwfrlz1.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        right.to_string()\
    \ + left\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (first, last) = digits.split_at(len - shift as usize);\n        last.to_string()\
    \ + first\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748985
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (a, b) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", b, a)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev();\n\
    \    let mut shifted = Vec::new();\n    for _ in 0..shift {\n        if let Some(digit)\
    \ = digits.next() {\n            shifted.push(digit);\n        } else {\n    \
    \        shifted.reverse();\n            break;\n        }\n    }\n    shifted.extend(digits);\n\
    \    shifted.into_iter().map(|x| x.to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpi2_fd3r0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    let (left, right) = digits.split_at(len - shift as\
    \ usize);\n    format!(\"{}{}\", right, left)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd63gyw4d.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpd63gyw4d.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&digits[(i\
    \ + shift as usize) % len].to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe2zwmuau.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift >= len as isize {\n        digits.chars().rev().collect()\n    } else\
    \ {\n        let (left, right) = digits.split_at(len - shift as usize);\n    \
    \    format!(\"{}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmpxk__tymp.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&format!(\"\
    {}\", digits[(len - shift + i) % len]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq0b3vjg3.rs:14:54\n   |\n\
    14 |         result.push_str(&format!(\"{}\", digits[(len - shift + i) % len]));\n\
    \   |                                                      ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpq0b3vjg3.rs:14:52\n\
    \   |\n14 |         result.push_str(&format!(\"{}\", digits[(len - shift + i)\
    \ % len]));\n   |                                                    ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    for\
    \ _ in 0..shift {\n        let last = digits.pop().unwrap();\n        digits.insert(0,\
    \ last);\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmpa1co36x4.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmphll4684v.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let mut i = digits.len() - shift as usize;\n    while i < digits.len() {\n\
    \        result.push_str(&digits[i].to_string());\n        i += 1;\n    }\n  \
    \  i = 0;\n    while i < digits.len() - shift as usize {\n        result.push_str(&digits[i].to_string());\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmplomhihyh.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpoeswt5aa.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    digits.push_str(&digits[..shift]);\n    digits.drain(..shift);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2w23tamu.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp2w23tamu.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmp2w23tamu.rs:8:22\n  |\n8 |     digits.push_str(&digits[..shift]);\n\
    \  |                      ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the trait bound `RangeTo<isize>: RangeBounds<usize>` is not satisfied\n\
    \ --> /tmp/tmp2w23tamu.rs:9:18\n  |\n9 |     digits.drain(..shift);\n  |     \
    \             ^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `RangeTo<isize>`\n\
    \  |\n  = help: the following implementations were found:\n            <RangeTo<&T>\
    \ as RangeBounds<T>>\n            <RangeTo<T> as RangeBounds<T>>\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift > 0 {\n        let (a, b) = digits.split_at(len\
    \ - shift as usize);\n        digits = format!(\"{}{}\", b, a);\n    }\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphl4rfntu.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmphl4rfntu.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (a, b) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", b, a)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    if shift > digits.len() as isize\
    \ {\n        digits.chars().rev().collect()\n    } else {\n        let (left,\
    \ right) = digits.split_at(shift as usize);\n        format!(\"{}{}\", right,\
    \ left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpib7254f0.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = Vec::new();\n    for i in 0..digits.len() {\n        result.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpzpx2_ypj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (a, b) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", b, a)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp0rq0qufz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = Vec::new();\n    for i in 0..digits.len() {\n        result.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpzpx2_ypj.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string().chars().collect::<Vec<char>>();\n    let\
    \ len = digits.len();\n    for _ in 0..shift {\n        let digit = digits.pop().unwrap();\n\
    \        digits.insert(0, digit);\n    }\n    digits.iter().collect()\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmptg12sdqj.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut result = Vec::new();\n    for i in 0..digits.len() {\n        result.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    result.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpw8xo0zei.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (first, second) = digits.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", second, first)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnpchn_sz.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpnpchn_sz.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift >= len as isize {\n        return digits.chars().rev().collect();\n  \
    \  }\n    let (left, right) = digits.split_at(len - shift as usize);\n    right.to_string()\
    \ + left\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"21\"`,\n right: `\"12\"`', /tmp/tmpvjiij5q0.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..n {\n        shifted.push(digits[(i\
    \ + shift as usize) % n]);\n    }\n    shifted.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmphy13qlzk.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&digits[(i\
    \ + shift as usize) % len].to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe2zwmuau.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let s = x.to_string();\n    let len = s.len() as isize;\n    let shift\
    \ = shift % len;\n    let (left, right) = s.split_at(len as usize - shift as usize);\n\
    \    format!(\"{}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"97\"`,\n right: `\"79\"`', /tmp/tmp_zo5zpzt.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift) % len]));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpws8kh2wv.rs:14:52\n   |\n\
    14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % len]));\n \
    \  |                                                    ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpws8kh2wv.rs:14:50\n\
    \   |\n14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % len]));\n\
    \   |                                                  ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..n {\n        shifted.push(digits[(i\
    \ + shift as usize) % n]);\n    }\n    shifted.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp34_ndavm.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut shifted =\
    \ Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpa3p8fr0g.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let len = digits.len();\n\
    \    let mut result = Vec::new();\n    for i in 0..len {\n        result.push(digits[(i\
    \ + shift as usize) % len]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpg1w922gn.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = Vec::new();\n    let mut x = x;\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits = digits.into_iter().rev().collect::<Vec<_>>();\n\
    \    let n = digits.len();\n    if shift >= n as isize {\n        digits.reverse();\n\
    \        return digits.into_iter().map(|x| x.to_string()).collect();\n    }\n\
    \    let mut digits = digits.into_iter().cycle().skip(shift as usize).take(n).collect::<Vec<_>>();\n\
    \    digits.reverse();\n    digits.into_iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpdfc4tzqh.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&digits[(i\
    \ + shift as usize) % len].to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe2zwmuau.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    digits.push_str(&digits[..shift]);\n    digits.drain(..shift);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2w23tamu.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp2w23tamu.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmp2w23tamu.rs:8:22\n  |\n8 |     digits.push_str(&digits[..shift]);\n\
    \  |                      ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the trait bound `RangeTo<isize>: RangeBounds<usize>` is not satisfied\n\
    \ --> /tmp/tmp2w23tamu.rs:9:18\n  |\n9 |     digits.drain(..shift);\n  |     \
    \             ^^^^^^^ the trait `RangeBounds<usize>` is not implemented for `RangeTo<isize>`\n\
    \  |\n  = help: the following implementations were found:\n            <RangeTo<&T>\
    \ as RangeBounds<T>>\n            <RangeTo<T> as RangeBounds<T>>\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut digits = digits.into_iter();\n    let mut shifted = Vec::new();\n\
    \    for _ in 0..shift {\n        if let Some(digit) = digits.next() {\n     \
    \       shifted.push(digit);\n        } else {\n            break;\n        }\n\
    \    }\n    shifted.extend(digits);\n    shifted.into_iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpnetv98aa.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let n = digits.len();\n\
    \    let shift = shift % n;\n    let mut result = Vec::new();\n    for i in 0..n\
    \ {\n        result.push(digits[(i + shift) % n]);\n    }\n    result.iter().map(|x|\
    \ x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0_qhp3t6.rs:12:25\n   |\n\
    12 |     let shift = shift % n;\n   |                         ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmp0_qhp3t6.rs:12:23\n\
    \   |\n12 |     let shift = shift % n;\n   |                       ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0_qhp3t6.rs:15:33\n\
    \   |\n15 |         result.push(digits[(i + shift) % n]);\n   |              \
    \                   ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add `isize` to `usize`\n  --> /tmp/tmp0_qhp3t6.rs:15:31\n   |\n15 |        \
    \ result.push(digits[(i + shift) % n]);\n   |                               ^\
    \ no implementation for `usize + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `usize`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let len = digits.len();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..len {\n        shifted.push(digits[(i\
    \ + shift as usize) % len]);\n    }\n    shifted.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmppf_w3wap.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        format!(\"\
    {}{}\", right, left)\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748984
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = x.to_string();\n    let len = s.len();\n    let shift = shift\
    \ % len;\n    let (left, right) = s.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3qp78rrx.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmp3qp78rrx.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&format!(\"\
    {}\", digits[(i + shift) % len]));\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpws8kh2wv.rs:14:52\n   |\n\
    14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % len]));\n \
    \  |                                                    ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpws8kh2wv.rs:14:50\n\
    \   |\n14 |         result.push_str(&format!(\"{}\", digits[(i + shift) % len]));\n\
    \   |                                                  ^ no implementation for\
    \ `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    for i in 0..digits.len() {\n        result.push_str(&format!(\"{}\", digits[(i\
    \ + shift as usize) % digits.len()]));\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpspnfdjkb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    digits.reverse();\n\
    \    let mut shifted = Vec::new();\n    for i in 0..digits.len() {\n        shifted.push(digits[(i\
    \ + shift as usize) % digits.len()]);\n    }\n    shifted.iter().map(|d| d.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpjhb7sfql.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 0
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    if\
    \ shift > len as isize {\n        digits.chars().rev().collect()\n    } else {\n\
    \        let (left, right) = digits.split_at(len - shift as usize);\n        right.to_string()\
    \ + left\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748983
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ mut result = String::new();\n    for i in 0..len {\n        let index = (i +\
    \ shift) % len;\n        result.push(digits.chars().nth(index).unwrap());\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7i0etgap.rs:9:26\n  |\n9 |\
    \         let index = (i + shift) % len;\n  |                          ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n -->\
    \ /tmp/tmp7i0etgap.rs:9:24\n  |\n9 |         let index = (i + shift) % len;\n\
    \  |                        ^ no implementation for `usize + isize`\n  |\n  =\
    \ help: the trait `Add<isize>` is not implemented for `usize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    format!(\"\
    {}{}\", right, left)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwjdgee9p.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpwjdgee9p.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = String::new();\n\
    \    let len = digits.len();\n    for i in 0..len {\n        result.push_str(&digits[(i\
    \ + shift as usize) % len].to_string());\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpe2zwmuau.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748984
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    if shift > digits.len()\
    \ as isize {\n        digits.reverse();\n        return digits.iter().map(|d|\
    \ d.to_string()).collect();\n    }\n    let mut result = Vec::new();\n    for\
    \ i in 0..digits.len() {\n        result.push(digits[(i + shift as usize) % digits.len()]);\n\
    \    }\n    result.iter().map(|d| d.to_string()).collect()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmpjvqgjqk4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut digits_reversed\
    \ = digits.clone();\n    digits_reversed.reverse();\n    let mut digits_shifted\
    \ = digits.clone();\n    for i in 0..shift {\n        digits_shifted[i] = digits[(shift\
    \ + i) % digits.len()];\n    }\n    let mut digits_shifted_reversed = digits_shifted.clone();\n\
    \    digits_shifted_reversed.reverse();\n    let mut digits_shifted_reversed_string\
    \ = String::new();\n    for d in digits_shifted_reversed {\n        digits_shifted_reversed_string.push_str(&d.to_string());\n\
    \    }\n    digits_shifted_reversed_string\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbr024lp7.rs:15:9\n\
    \   |\n15 |         digits_shifted[i] = digits[(shift + i) % digits.len()];\n\
    \   |         ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbr024lp7.rs:15:50\n\
    \   |\n15 |         digits_shifted[i] = digits[(shift + i) % digits.len()];\n\
    \   |                                                  ^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n  --> /tmp/tmpbr024lp7.rs:15:48\n\
    \   |\n15 |         digits_shifted[i] = digits[(shift + i) % digits.len()];\n\
    \   |                                                ^ no implementation for `isize\
    \ % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbr024lp7.rs:15:29\n\
    \   |\n15 |         digits_shifted[i] = digits[(shift + i) % digits.len()];\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let len = digits.len();\n    let\
    \ shift = shift % len;\n    if shift == 0 {\n        return digits;\n    }\n \
    \   let (left, right) = digits.split_at(len - shift as usize);\n    right.to_string()\
    \ + left\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaq4x1kfx.rs:7:25\n  |\n7 |\
    \     let shift = shift % len;\n  |                         ^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpaq4x1kfx.rs:7:23\n\
    \  |\n7 |     let shift = shift % len;\n  |                       ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748985
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    if shift > digits.len() as isize\
    \ {\n        digits.chars().rev().collect()\n    } else {\n        let (left,\
    \ right) = digits.split_at(shift as usize);\n        right.to_string() + left\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"010\"`,\n right: `\"001\"`', /tmp/tmpjae4x7wn.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut x = x;\n    let mut digits = Vec::new();\n    while x > 0 {\n\
    \        digits.push(x % 10);\n        x /= 10;\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..digits.len() {\n        result.push(digits[(i + shift as usize)\
    \ % digits.len()]);\n    }\n    result.iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"100\"`,\n right: `\"001\"`', /tmp/tmp0rq0qufz.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748983
