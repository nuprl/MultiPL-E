name: HumanEval_141_file_name_check
language: rs
prompt: "/// Create a function which takes a string representing a file's name, and\
  \ returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\nfn file_name_check(file_name:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!(candidate(String::from(\"\
  example.txt\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"\
  1example.dll\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"\
  s1sdf3.asd\")), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"\
  K.dll\")), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"MY16FILE3.exe\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"His12FILE94.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_Y.txt\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"?aREYA.exe\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"/this_is_valid.dll\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.wow\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txt\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"this_is_valid.txtexe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"#this2_i4s_5valid.ten\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"@this1_is6_valid.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"this_is_12valid.6exe4.txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"all.exe.txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_No.exe\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"Is3youfault.txt\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"no_one#knows.dll\"\
  )), String::from(\"Yes\"));\n    assert_eq!(candidate(String::from(\"1I563_Yes3.exe\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"I563_Yes3.txtt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final..txt\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"final132\")),\
  \ String::from(\"No\"));\n    assert_eq!(candidate(String::from(\"_f4indsartal132.\"\
  )), String::from(\"No\"));\n    assert_eq!(candidate(String::from(\".txt\")), String::from(\"\
  No\"));\n    assert_eq!(candidate(String::from(\"s.\")), String::from(\"No\"));\n\
  }\n"
completions: ["    let mut digits = 0;\n    let mut dot = false;\n    let mut first_letter\
    \ = false;\n    let mut extension = false;\n    let mut extension_name = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            first_letter = true;\n        }\n    }\n\
    \    if digits > 3 || !dot || !first_letter {\n        return String::from(\"\
    No\");\n    }\n    let mut split = file_name.split('.');\n    let first = split.next().unwrap();\n\
    \    let second = split.next().unwrap();\n    if first.len() == 0 {\n        return\
    \ String::from(\"No\");\n    }\n    if second == \"txt\" || second == \"exe\"\
    \ || second == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_valid_extension = false;\n    let mut is_valid_prefix = false;\n    let mut\
    \ is_valid_digits = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_dot_count\
    \ = true;\n    let mut is_valid_prefix_start = true;\n    let mut is_valid_extension_start\
    \ = true;\n    let mut is_valid_extension_end = true;\n    let mut is_valid_prefix_end\
    \ = true;\n    let mut is_valid_extension_type = true;\n    let mut is_valid_extension_type_1\
    \ = true;\n    let mut is_valid_extension_type_2 = true;\n    let mut is_valid_extension_type_3\
    \ = true;\n    let mut is_valid_extension_type_4 = true;\n    let mut is_valid_extension_type_5\
    \ = true;\n    let mut is_valid_extension_type_6 = true;\n    let mut is_valid_extension_type_7\
    \ = true;\n    let mut is_valid_extension_type_8 = true;\n    let mut is_valid_extension_type_9\
    \ = true;\n    let mut is_valid_extension_type_10 = true;\n    let mut is_valid_extension_type_11\
    \ = true;\n    let mut is_valid_extension_type_12 = true;\n    let mut is_valid_extension_type_13\
    \ = true;\n    let mut is_valid_extension_type_14 = true;\n    let mut is_valid_extension_type_15\
    \ = true;\n    let mut is_valid_extension_type_16 = true;\n    let mut is_valid_extension_type_17\
    \ = true;\n    let mut is_valid_extension_type_18 = true;", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    } else {\n        let\
    \ (before_dot, after_dot) = file_name.split_at(dot_index);\n        if before_dot.is_empty()\
    \ || !before_dot.chars().next().unwrap().is_alphabetic() {\n            is_valid\
    \ = false;\n        } else if after_dot != \".txt\" && after_dot != \".exe\" &&\
    \ after_dot != \".dll\" {\n            is_valid = false;\n        }\n    }\n \
    \   if is_valid {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n\
    \    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digits\
    \ = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_extension_char\
    \ = true;\n    let mut is_valid_prefix_char = true;\n    let mut is_valid_extension_first_char\
    \ = true;\n    let mut is_valid_prefix_first_char = true;\n    let mut is_valid_extension_last_char\
    \ = true;\n    let mut is_valid_prefix_last_char = true;\n    let mut is_valid_extension_char_count\
    \ = true;\n    let mut is_valid_prefix_char_count = true;\n    let mut is_valid_extension_char_count_2\
    \ = true;\n    let mut is_valid_prefix_char_count_2 = true;\n    let mut is_valid_extension_char_count_3\
    \ = true;\n    let mut is_valid_prefix_char_count_3 = true;\n    let mut is_valid_extension_char_count_4\
    \ = true;\n    let mut is_valid_prefix_char_count_4 = true;\n    let mut is_valid_extension_char_count_5\
    \ = true;\n    let mut is_valid_prefix_char_count_5 = true;\n    let mut is_valid_extension_char_count_6\
    \ = true;\n    let mut is_valid_prefix_char_count_6 = true;\n    let mut is_valid_extension_char_count_7\
    \ = true;\n    let mut is_valid_prefix_char_count_7 = true;\n    let mut is_valid_extension_char_count_8\
    \ = true;\n    let mut is_valid_prefix_char_count_8 = true;\n    let mut is_",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut valid = false;\n\
    \    let mut start = false;\n    let mut end = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            start = true;\n        }\n    }\n    if digits <= 3 && dot && start\
    \ {\n        let mut parts = file_name.split('.');\n        let end = parts.next_back().unwrap();\n\
    \        if end == \"txt\" || end == \"exe\" || end == \"dll\" {\n           \
    \ valid = true;\n        }\n    }\n    if valid {\n        \"Yes\".to_string()\n\
    \    } else {\n        \"No\".to_string()\n    }", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_letter\
    \ = true;\n    let mut is_first_dot = true;\n    let mut is_extension_valid =\
    \ false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if is_first_letter\
    \ {\n            if !c.is_alphabetic() {\n                is_valid = false;\n\
    \                break;\n            }\n            is_first_letter = false;\n\
    \        }\n        if is_first_dot {\n            if c == '.' {\n           \
    \     is_first_dot = false;\n            }\n        } else {\n            extension.push(c);\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        is_extension_valid\
    \ = true;\n    }\n    if is_valid && is_extension_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut has_letter\
    \ = false;\n    let mut has_extension = false;\n    let mut extension = String::new();\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        } else if c.is_alphabetic()\
    \ {\n            has_letter = true;\n        }\n    }\n    if dot_count == 1 {\n\
    \        extension = file_name[dot_index + 1..].to_string();\n        has_extension\
    \ = extension == \"txt\" || extension == \"exe\" || extension == \"dll\";\n  \
    \  }\n    if digits_count <= 3 && dot_count == 1 && has_letter && has_extension\
    \ {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n \
    \   }", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_txt = false;\n\
    \    let mut after_dot_exe = false;\n    let mut after_dot_dll = false;\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits +=\
    \ 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n \
    \       if c.is_alphabetic() {\n            before_dot = true;\n        }\n  \
    \      if c == 't' {\n            after_dot_txt = true;\n        }\n        if\
    \ c == 'e' {\n            after_dot_exe = true;\n        }\n        if c == 'd'\
    \ {\n            after_dot_dll = true;\n        }\n        if c == 'x' {\n   \
    \         after_dot_exe = true;\n        }\n        if c == 'l' {\n          \
    \  after_dot_dll = true;\n        }\n    }\n    if digits <= 3 && dot && before_dot\
    \ && (after_dot_txt || after_dot_exe || after_dot_dll) {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut extension = false;\n    let mut valid =\
    \ true;\n    let mut extension_valid = false;\n    let mut extension_valid_list\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    let mut extension_valid_list_iter =\
    \ extension_valid_list.iter();\n    let mut extension_valid_list_iter_next = extension_valid_list_iter.next();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n\
    \        if c == '.' {\n            extension = true;\n        }\n        if extension\
    \ && c != '.' {\n            if extension_valid_list_iter_next.is_some() {\n \
    \               if c == extension_valid_list_iter_next.unwrap().chars().next().unwrap()\
    \ {\n                    extension_valid = true;\n                } else {\n \
    \                   extension_valid = false;\n                }\n            }\
    \ else {\n                extension_valid = false;\n            }\n        }\n\
    \    }\n    if digits > 3 {\n        valid = false;\n    }\n    if !dot {\n  \
    \      valid = false;\n    }\n    if !extension_valid {\n        valid = false;\n\
    \    }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n        \"\
    No\".to_string()\n    }", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut prefix = false;\n    let mut suffix = false;\n    for c in file_name.chars()\
    \ {\n        match c {\n            '0'..='9' => digits += 1,\n            '.'\
    \ => dot = true,\n            'a'..='z' | 'A'..='Z' => prefix = true,\n      \
    \      _ => (),\n        }\n    }\n    if digits > 3 || !dot || !prefix {\n  \
    \      return \"No\".to_string();\n    }\n    let suffix = file_name.split('.').last().unwrap();\n\
    \    if suffix == \"txt\" || suffix == \"exe\" || suffix == \"dll\" {\n      \
    \  return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut prefix = false;\n    let mut suffix\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            prefix = true;\n        }\
    \ else if c == 't' || c == 'e' || c == 'd' {\n            suffix = true;\n   \
    \     }\n    }\n    if digits <= 3 && dot && prefix && suffix {\n        \"Yes\"\
    .to_string()\n    } else {\n        \"No\".to_string()\n    }", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut extension = false;\n    let mut\
    \ valid = true;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n\
    \            digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            if extension {\n         \
    \       valid = false;\n                break;\n            }\n        } else\
    \ if c == '.' {\n            extension = true;\n        } else {\n           \
    \ valid = false;\n            break;\n        }\n    }\n    if !dot || digits\
    \ > 3 || !valid {\n        return \"No\".to_string();\n    }\n    let mut extension\
    \ = file_name.split('.').last().unwrap();\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut ext = false;\n    let mut first_letter = false;\n    let mut last_letter\
    \ = false;\n    let mut last_letter_index = 0;\n    let mut dot_index = 0;\n \
    \   let mut last_letter_index_after_dot = 0;\n    let mut ext_index = 0;\n   \
    \ let mut ext_index_after_dot = 0;\n    let mut ext_index_after_dot_2 = 0;\n \
    \   let mut ext_index_after_dot_3 = 0;\n    let mut ext_index_after_dot_4 = 0;\n\
    \    let mut ext_index_after_dot_5 = 0;\n    let mut ext_index_after_dot_6 = 0;\n\
    \    let mut ext_index_after_dot_7 = 0;\n    let mut ext_index_after_dot_8 = 0;\n\
    \    let mut ext_index_after_dot_9 = 0;\n    let mut ext_index_after_dot_10 =\
    \ 0;\n    let mut ext_index_after_dot_11 = 0;\n    let mut ext_index_after_dot_12\
    \ = 0;\n    let mut ext_index_after_dot_13 = 0;\n    let mut ext_index_after_dot_14\
    \ = 0;\n    let mut ext_index_after_dot_15 = 0;\n    let mut ext_index_after_dot_16\
    \ = 0;\n    let mut ext_index_after_dot_17 = 0;\n    let mut ext_index_after_dot_18\
    \ = 0;\n    let mut ext_index_after_dot_19 = 0;\n    let mut ext_index_after_dot_20\
    \ = 0;\n    let mut ext_index_after_dot_21 = 0;\n    let mut ext_index_after_dot_22\
    \ = 0;\n    let mut ext_index_after_dot_23 = 0;\n    let mut ext_index_after_dot_24\
    \ = 0;\n    let mut ext_index_after_dot_25 = 0;\n    let mut ext_index_after_dot_26\
    \ = 0;\n    let mut ext_", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    let mut\
    \ valid_after_dot = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            before_dot = true;\n\
    \        } else if c == 't' || c == 'x' || c == 'd' {\n            after_dot =\
    \ true;\n        } else if c == 'e' || c == 'l' {\n            if after_dot {\n\
    \                valid_after_dot = true;\n            }\n        }\n    }\n  \
    \  if digits > 3 || !dot || !before_dot || !valid_after_dot {\n        return\
    \ String::from(\"No\");\n    }\n    String::from(\"Yes\")", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_extension = false;\n    let mut extension_start_index = 0;\n    let mut\
    \ extension_end_index = 0;\n    let mut extension_length = 0;\n    let mut extension_is_valid\
    \ = false;\n    let mut extension_is_txt = false;\n    let mut extension_is_exe\
    \ = false;\n    let mut extension_is_dll = false;\n    let mut extension_is_empty\
    \ = false;\n    let mut extension_is_too_long = false;\n    let mut extension_is_too_short\
    \ = false;\n    let mut extension_is_not_txt_exe_or_dll = false;\n    let mut\
    \ extension_is_not_txt = false;\n    let mut extension_is_not_exe = false;\n \
    \   let mut extension_is_not_dll = false;\n    let mut extension_is_not_txt_or_exe\
    \ = false;\n    let mut extension_is_not_txt_or_dll = false;\n    let mut extension_is_not_exe_or_dll\
    \ = false;\n    let mut extension_is_not_txt_exe_or_dll = false;\n    let mut\
    \ extension_is_txt_exe_or_dll = false;\n    let mut extension_is_txt_exe = false;\n\
    \    let mut extension_is_txt_dll = false;\n    let mut extension_is_exe_dll =\
    \ false;\n    let mut extension_is_txt_exe_dll = false;\n    let mut extension_is_txt_exe_or_dll\
    \ = false;\n    let mut extension_is_txt_exe_or_dll = false;\n    let mut extension_is_txt_exe_or_dll\
    \ = false;\n    let mut extension_is_txt_exe_or_dll = false;\n    let mut extension_is_txt_exe_or_dll\
    \ = false;\n    let mut extension_is_txt_exe_or_dll = false;\n    let mut extension_is_txt_exe_or_dll\
    \ = false;\n    let mut extension_is_txt_exe", "    let mut digits = 0;\n    let\
    \ mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    let mut after_dot_str = String::new();\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n        } else if !dot {\n            before_dot\
    \ = c.is_alphabetic();\n        } else {\n            after_dot_str.push(c);\n\
    \        }\n    }\n    after_dot = after_dot_str == \"txt\" || after_dot_str ==\
    \ \"exe\" || after_dot_str == \"dll\";\n    if digits > 3 || !dot || !before_dot\
    \ || !after_dot {\n        \"No\".to_string()\n    } else {\n        \"Yes\".to_string()\n\
    \    }", "    let mut digits = 0;\n    let mut dot = false;\n    let mut valid\
    \ = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    let mut after_dot_valid = false;\n    for c in file_name.chars() {\n    \
    \    if c.is_ascii_digit() {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n            before_dot = true;\n        } else\
    \ if c.is_ascii_alphabetic() {\n            if before_dot {\n                before_dot\
    \ = false;\n            } else {\n                after_dot = true;\n        \
    \    }\n        }\n    }\n    if digits > 3 {\n        return \"No\".to_string();\n\
    \    }\n    if !dot {\n        return \"No\".to_string();\n    }\n    if !after_dot\
    \ {\n        return \"No\".to_string();\n    }\n    if file_name.ends_with(\"\
    txt\") {\n        after_dot_valid = true;\n    } else if file_name.ends_with(\"\
    exe\") {\n        after_dot_valid = true;\n    } else if file_name.ends_with(\"\
    dll\") {\n        after_dot_valid = true;\n    }\n    if after_dot_valid {\n \
    \       return \"Yes\".to_string();\n    }\n    return \"No\".to_string();", " \
    \   let mut digits = 0;\n    let mut dot = false;\n    let mut dot_index = 0;\n\
    \    let mut valid = true;\n    for (i, c) in file_name.chars().enumerate() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n            dot_index = i;\n        }\n    }\n\
    \    if digits > 3 {\n        valid = false;\n    }\n    if !dot {\n        valid\
    \ = false;\n    }\n    if dot_index == 0 || dot_index == file_name.len() - 1 {\n\
    \        valid = false;\n    }\n    if !file_name[..dot_index].chars().next().unwrap().is_alphabetic()\
    \ {\n        valid = false;\n    }\n    if !(file_name[dot_index + 1..] == \"\
    txt\" || file_name[dot_index + 1..] == \"exe\" || file_name[dot_index + 1..] ==\
    \ \"dll\") {\n        valid = false;\n    }\n    if valid {\n        \"Yes\".to_string()\n\
    \    } else {\n        \"No\".to_string()\n    }", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut valid = false;\n    let mut first_letter\
    \ = false;\n    let mut extension = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        }\n        if\
    \ c == '.' {\n            dot = true;\n        }\n        if c.is_alphabetic()\
    \ {\n            first_letter = true;\n        }\n        if c == 't' || c ==\
    \ 'e' || c == 'd' {\n            extension = true;\n        }\n    }\n    if digits\
    \ <= 3 && dot && first_letter && extension {\n        valid = true;\n    }\n \
    \   if valid {\n        return \"Yes\".to_string();\n    }\n    return \"No\"\
    .to_string();", "    let mut digits = 0;\n    let mut dot = false;\n    let mut\
    \ before_dot = false;\n    let mut after_dot = false;\n    let mut after_dot_valid\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if !dot {\n            before_dot = true;\n        } else {\n\
    \            after_dot = true;\n            if c == 't' {\n                after_dot_valid\
    \ = true;\n            } else if c == 'x' && after_dot_valid {\n             \
    \   after_dot_valid = true;\n            } else if c == 'e' && after_dot_valid\
    \ {\n                after_dot_valid = true;\n            } else if c == 'd' &&\
    \ after_dot_valid {\n                after_dot_valid = true;\n            } else\
    \ if c == 'l' && after_dot_valid {\n                after_dot_valid = true;\n\
    \            } else {\n                after_dot_valid = false;\n            }\n\
    \        }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot || !after_dot_valid\
    \ {\n        return String::from(\"No\");\n    }\n    String::from(\"Yes\")",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut valid_after_dot = false;\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits +=\
    \ 1;\n        } else if c == '.' {\n            dot = true;\n        } else if\
    \ c.is_alphabetic() {\n            if dot {\n                after_dot = true;\n\
    \                if c == 't' || c == 'e' || c == 'd' {\n                    valid_after_dot\
    \ = true;\n                }\n            } else {\n                before_dot\
    \ = true;\n            }\n        }\n    }\n    if digits <= 3 && dot && before_dot\
    \ && after_dot && valid_after_dot {\n        \"Yes\".to_string()\n    } else {\n\
    \        \"No\".to_string()\n    }", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid = true;\n \
    \   let mut is_valid_extension = false;\n    let mut is_valid_name = false;\n\
    \    let mut is_valid_digits = true;\n    let mut is_valid_dot = true;\n    let\
    \ mut is_valid_extension_length = true;\n    let mut is_valid_name_length = true;\n\
    \    let mut is_valid_name_start = true;\n    let mut is_valid_extension_start\
    \ = true;\n    let mut is_valid_extension_end = true;\n    let mut is_valid_name_end\
    \ = true;\n    let mut is_valid_name_char = true;\n    let mut is_valid_extension_char\
    \ = true;\n    let mut is_valid_extension_type = true;\n    let mut is_valid_name_type\
    \ = true;\n    let mut is_valid_name_type_char = true;\n    let mut is_valid_extension_type_char\
    \ = true;\n    let mut is_valid_name_type_start = true;\n    let mut is_valid_extension_type_start\
    \ = true;\n    let mut is_valid_name_type_end = true;\n    let mut is_valid_extension_type_end\
    \ = true;\n    let mut is_valid_name_type_length = true;\n    let mut is_valid_extension_type_length\
    \ = true;\n    let mut is_valid_name_type_char_type = true;\n    let mut is_valid_extension_type_char_type\
    \ = true;\n    let mut is_valid_name_type_char_type_start = true;\n    let mut\
    \ is_valid_extension_type_char_type_start = true;\n    let mut is_valid_name_type_char_type_end\
    \ = true;\n    let mut is_valid_extension_type_char_type_end = true;\n    let\
    \ mut is_valid_name_type_char_type_length = true;\n    let mut is_", "    let\
    \ mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut first_char = ' ';\n    let mut last_char = ' ';\n    let mut last_three_chars\
    \ = String::new();\n    let mut valid_extensions = vec![\"txt\", \"exe\", \"dll\"\
    ];\n    let mut extension = String::new();\n\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if i == 0 {\n            first_char = c;\n        }\n    \
    \    if i == file_name.len() - 1 {\n            last_char = c;\n        }\n  \
    \      if i >= file_name.len() - 3 {\n            last_three_chars.push(c);\n\
    \        }\n    }\n\n    if digits_count > 3 || dot_count != 1 || !first_char.is_alphabetic()\
    \ || last_char == '.' {\n        return String::from(\"No\");\n    }\n\n    for\
    \ i in dot_index + 1..file_name.len() {\n        extension.push(file_name.chars().nth(i).unwrap());\n\
    \    }\n\n    if !valid_extensions.contains(&extension.as_str()) {\n        return\
    \ String::from(\"No\");\n    }\n\n    return String::from(\"Yes\");", "    let\
    \ mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot = true;\n\
    \            continue;\n        }\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n            continue;\n        }\n        if !dot {\n            if c.is_alphabetic()\
    \ {\n                before_dot = true;\n            }\n        } else {\n   \
    \         after_dot_str.push(c);\n        }\n    }\n    if digits > 3 {\n    \
    \    return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !before_dot {\n        return String::from(\"No\");\n  \
    \  }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_valid = false;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            if dot {\n                after_dot = true;\n\
    \                if file_name.ends_with(\"txt\") || file_name.ends_with(\"exe\"\
    ) || file_name.ends_with(\"dll\") {\n                    after_dot_valid = true;\n\
    \                }\n            } else {\n                before_dot = true;\n\
    \            }\n        }\n    }\n    if digits > 3 || !dot || !before_dot ||\
    \ !after_dot || !after_dot_valid {\n        \"No\".to_string()\n    } else {\n\
    \        \"Yes\".to_string()\n    }", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let mut extension = String::new();\n    let mut file_name_without_extension\
    \ = String::new();\n    let mut file_name_chars = file_name.chars();\n    let\
    \ mut first_char = file_name_chars.next();\n    let mut second_char = file_name_chars.next();\n\
    \    let mut third_char = file_name_chars.next();\n    let mut fourth_char = file_name_chars.next();\n\
    \    let mut fifth_char = file_name_chars.next();\n    let mut sixth_char = file_name_chars.next();\n\
    \    let mut seventh_char = file_name_chars.next();\n    let mut eighth_char =\
    \ file_name_chars.next();\n    let mut ninth_char = file_name_chars.next();\n\
    \    let mut tenth_char = file_name_chars.next();\n    let mut eleventh_char =\
    \ file_name_chars.next();\n    let mut twelfth_char = file_name_chars.next();\n\
    \    let mut thirteenth_char = file_name_chars.next();\n    let mut fourteenth_char\
    \ = file_name_chars.next();\n    let mut fifteenth_char = file_name_chars.next();\n\
    \    let mut sixteenth_char = file_name_chars.next();\n    let mut seventeenth_char\
    \ = file_name_chars.next();\n    let mut eighteenth_char = file_name_chars.next();\n\
    \    let mut nineteenth_char = file_name_chars.next();\n    let mut twentieth_char\
    \ = file_name_chars.next();\n    let mut twenty_first_char = file_name_chars.next();\n\
    \    let mut twenty_second_char = file_name_chars.next();\n    let mut twenty_third_char\
    \ = file_name_chars.next();\n    let mut twenty_fourth_char = file_name_chars.next();\n\
    \   ", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if dot {\n            after_dot_str.push(c);\n        } else if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n    }\n    if digits > 3 {\n \
    \       return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !before_dot {\n        return String::from(\"No\");\n  \
    \  }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digit_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut valid_extension = false;\n    let mut valid_prefix\
    \ = false;\n    let mut valid_name = true;\n    let mut i = 0;\n    while i <\
    \ file_name.len() {\n        let c = file_name.chars().nth(i).unwrap();\n    \
    \    if c.is_digit(10) {\n            digit_count += 1;\n        }\n        if\
    \ c == '.' {\n            dot_count += 1;\n            dot_index = i;\n      \
    \  }\n        i += 1;\n    }\n    if digit_count > 3 {\n        valid_name = false;\n\
    \    }\n    if dot_count != 1 {\n        valid_name = false;\n    }\n    if dot_index\
    \ == 0 {\n        valid_name = false;\n    }\n    if dot_index == file_name.len()\
    \ - 1 {\n        valid_name = false;\n    }\n    let prefix = &file_name[0..dot_index];\n\
    \    let extension = &file_name[dot_index + 1..];\n    if prefix.len() == 0 {\n\
    \        valid_name = false;\n    }\n    if prefix.chars().nth(0).unwrap().is_alphabetic()\
    \ {\n        valid_prefix = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        valid_extension = true;\n    }\n\
    \    if valid_name && valid_prefix && valid_extension {\n        return \"Yes\"\
    .to_string();\n    }\n    return \"No\".to_string();", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut ext = false;\n    let mut ext_str = String::new();\n\
    \    let mut before_dot = String::new();\n    for c in file_name.chars() {\n \
    \       if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n    \
    \        if dot {\n                ext_str.push(c);\n            } else {\n  \
    \              before_dot.push(c);\n            }\n        }\n    }\n    if digits\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if !dot {\n        return\
    \ String::from(\"No\");\n    }\n    if before_dot.is_empty() {\n        return\
    \ String::from(\"No\");\n    }\n    if ext_str == \"txt\" || ext_str == \"exe\"\
    \ || ext_str == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    let mut\
    \ after_dot_str = String::new();\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if !dot {\n            before_dot = true;\n\
    \        } else {\n            after_dot = true;\n            after_dot_str.push(c);\n\
    \        }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot || !(after_dot_str\
    \ == \"txt\" || after_dot_str == \"exe\" || after_dot_str == \"dll\") {\n    \
    \    return String::from(\"No\");\n    }\n    return String::from(\"Yes\");",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut has_dot\
    \ = false;\n    let mut has_letter = false;\n    let mut has_extension = false;\n\
    \    let mut extension_start = 0;\n    let mut extension_end = 0;\n    let mut\
    \ extension_length = 0;\n    let mut extension_is_valid = false;\n    let mut\
    \ extension_is_txt = false;\n    let mut extension_is_exe = false;\n    let mut\
    \ extension_is_dll = false;\n    let mut extension_is_empty = false;\n    let\
    \ mut extension_is_too_long = false;\n    let mut extension_is_too_short = false;\n\
    \    let mut extension_is_not_txt_exe_dll = false;\n    let mut extension_is_not_lowercase\
    \ = false;\n    let mut extension_is_not_uppercase = false;\n    let mut extension_is_not_letters\
    \ = false;\n    let mut extension_is_not_letters_or_numbers = false;\n    let\
    \ mut extension_is_not_numbers = false;\n    let mut extension_is_not_letters_or_numbers_or_underscore\
    \ = false;\n    let mut extension_is_not_letters_or_numbers_or_underscore_or_dash\
    \ = false;\n    let mut extension_is_not_letters_or_numbers_or_underscore_or_dash_or_dot\
    \ = false;\n    let mut extension_is_not_letters_or_numbers_or_underscore_or_dash_or_dot_or_space\
    \ = false;\n    let mut extension_is_not_letters_or_numbers_or_underscore_or_dash_or_dot_or_space_or_at\
    \ = false;\n    let mut extension_is_not_letters_or_numbers_or_underscore_or_dash_or_dot_or_space_or_at_or_hash\
    \ = false;\n    let mut extension_is_not_letters_or_numbers_or_underscore_or_dash_or_dot_or_space_or_at_or_hash_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_letter = false;\n    let mut is_last_char_letter\
    \ = false;\n    let mut is_last_char_dot = false;\n    let mut is_last_char_digit\
    \ = false;\n    let mut is_last_char_letter_or_digit = false;\n    let mut is_last_char_letter_or_digit_or_dot\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore = false;\n\
    \    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_hyphen = false;\n\
    \    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_hyphen_or_space\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_hyphen_or_space_or_quote\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_hyphen_or_space_or_quote_or_comma\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_hyphen_or_space_or_quote_or_comma_or_semicolon\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_hyphen_or_space_or_quote_or_comma_or_semicolon_or_colon\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_hyphen_or_space_or_quote_or_comma_or_semicolon_or_colon_or_question_mark\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_hyphen_or_space_or_quote",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_letter = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n        }\n        if !is_first_char_letter\
    \ && c.is_alphabetic() {\n            is_first_char_letter = true;\n        }\n\
    \        if c == '.' && !is_extension_valid {\n            let mut extension_chars\
    \ = file_name.chars();\n            while let Some(c) = extension_chars.next()\
    \ {\n                if c == '.' {\n                    break;\n             \
    \   }\n            }\n            while let Some(c) = extension_chars.next() {\n\
    \                extension.push(c);\n            }\n            if extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\" {\n                is_extension_valid\
    \ = true;\n            }\n        }\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || !is_first_char_letter || !is_extension_valid {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        \"Yes\".to_string()\n    } else {\n       \
    \ \"No\".to_string()\n    }", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    let mut\
    \ after_dot_valid = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            if dot {\n       \
    \         after_dot = true;\n            } else {\n                before_dot\
    \ = true;\n            }\n        } else {\n            return \"No\".to_string();\n\
    \        }\n        if after_dot {\n            if c == 't' {\n              \
    \  after_dot_valid = true;\n            } else if c == 'x' && after_dot_valid\
    \ {\n                after_dot_valid = true;\n            } else if c == 'e' &&\
    \ after_dot_valid {\n                after_dot_valid = true;\n            } else\
    \ if c == 'd' && after_dot_valid {\n                after_dot_valid = true;\n\
    \            } else if c == 'l' && after_dot_valid {\n                after_dot_valid\
    \ = true;\n            } else {\n                return \"No\".to_string();\n\
    \            }\n        }\n    }\n    if digits > 3 || !dot || !before_dot ||\
    \ !after_dot || !after_dot_valid {\n        return \"No\".to_string();\n    }\n\
    \    \"Yes\".to_string()", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    let mut\
    \ after_dot_txt = false;\n    let mut after_dot_exe = false;\n    let mut after_dot_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        }\n        if c == '.' {\n            dot = true;\n\
    \        }\n        if c.is_alphabetic() {\n            before_dot = true;\n \
    \       }\n        if c == 't' {\n            after_dot_txt = true;\n        }\n\
    \        if c == 'e' {\n            after_dot_exe = true;\n        }\n       \
    \ if c == 'd' {\n            after_dot_dll = true;\n        }\n        if c ==\
    \ 'x' && after_dot_exe {\n            after_dot = true;\n        }\n        if\
    \ c == 'l' && after_dot_dll {\n            after_dot = true;\n        }\n    \
    \    if c == 't' && after_dot_txt {\n            after_dot = true;\n        }\n\
    \    }\n    if digits > 3 || !dot || !before_dot || !after_dot {\n        return\
    \ String::from(\"No\");\n    }\n    String::from(\"Yes\")", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut valid = false;\n    let mut extension\
    \ = String::new();\n    let mut name = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            valid = true;\n        }\n    }\n    if digits > 3 || !dot || !valid\
    \ {\n        return String::from(\"No\");\n    }\n    let mut split = file_name.split('.');\n\
    \    name = split.next().unwrap().to_string();\n    extension = split.next().unwrap().to_string();\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_letter = false;\n    let mut is_extension = false;\n\
    \    let mut extension = String::new();\n    let mut extension_count = 0;\n  \
    \  let mut extension_valid = false;\n    let mut extension_valid_count = 0;\n\
    \    let mut extension_valid_count_max = 0;\n    let mut extension_valid_count_max_index\
    \ = 0;\n    let mut extension_valid_count_max_index_prev = 0;\n    let mut extension_valid_count_max_index_prev_prev\
    \ = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev = 0;\n    let\
    \ mut extension_valid_count_max_index_prev_prev_prev_prev = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev_prev_prev\
    \ = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let mut extension_valid_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_letter = true;\n    let mut is_first_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_after_first_letter\
    \ = false;\n    let mut is_after_first_dot = false;\n    let mut is_after_second_dot\
    \ = false;\n    let mut is_after_third_dot = false;\n    let mut is_after_fourth_dot\
    \ = false;\n    let mut is_after_fifth_dot = false;\n    let mut is_after_sixth_dot\
    \ = false;\n    let mut is_after_seventh_dot = false;\n    let mut is_after_eighth_dot\
    \ = false;\n    let mut is_after_ninth_dot = false;\n    let mut is_after_tenth_dot\
    \ = false;\n    let mut is_after_eleventh_dot = false;\n    let mut is_after_twelfth_dot\
    \ = false;\n    let mut is_after_thirteenth_dot = false;\n    let mut is_after_fourteenth_dot\
    \ = false;\n    let mut is_after_fifteenth_dot = false;\n    let mut is_after_sixteenth_dot\
    \ = false;\n    let mut is_after_seventeenth_dot = false;\n    let mut is_after_eighteenth_dot\
    \ = false;\n    let mut is_after_nineteenth_dot = false;\n    let mut is_after_twentieth_dot\
    \ = false;\n    let mut is_after_twenty_first_dot = false;\n    let mut is_after_twenty_second_dot\
    \ = false;\n    let mut is_after_twenty_third_dot = false;\n    let mut is_after_twenty_fourth_dot\
    \ = false;\n    let mut is_after_twenty_fifth_dot = false;\n    let mut is_after_twenty_sixth_dot\
    \ = false;\n    let mut is_after_twenty_seventh_dot = false;\n    let mut is_after_twenty_eighth",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot = true;\n\
    \            continue;\n        }\n        if dot {\n            after_dot = true;\n\
    \            after_dot_str.push(c);\n        } else {\n            if c.is_ascii_digit()\
    \ {\n                digits += 1;\n            } else {\n                before_dot\
    \ = true;\n            }\n        }\n    }\n    if digits > 3 || !dot || !before_dot\
    \ || !after_dot || !(after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\") {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot = true;\n\
    \            continue;\n        }\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n            continue;\n        }\n        if !dot {\n            if !before_dot\
    \ {\n                before_dot = c.is_alphabetic();\n            }\n        }\
    \ else {\n            after_dot_str.push(c);\n        }\n    }\n    if digits\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if !dot {\n        return\
    \ String::from(\"No\");\n    }\n    if !before_dot {\n        return String::from(\"\
    No\");\n    }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" ||\
    \ after_dot_str == \"dll\" {\n        return String::from(\"Yes\");\n    }\n \
    \   return String::from(\"No\");", "    let mut digits_count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_letter = false;\n\
    \    let mut is_extension = false;\n    let mut extension = String::new();\n \
    \   let mut extension_vec = vec![\"txt\", \"exe\", \"dll\"];\n    let mut file_name_vec:\
    \ Vec<char> = file_name.chars().collect();\n    for i in 0..file_name_vec.len()\
    \ {\n        if file_name_vec[i].is_digit(10) {\n            digits_count += 1;\n\
    \        }\n        if file_name_vec[i] == '.' {\n            dot_count += 1;\n\
    \        }\n        if file_name_vec[i].is_alphabetic() {\n            is_letter\
    \ = true;\n        }\n        if file_name_vec[i] == '.' {\n            for j\
    \ in i+1..file_name_vec.len() {\n                extension.push(file_name_vec[j]);\n\
    \            }\n            for k in 0..extension_vec.len() {\n              \
    \  if extension == extension_vec[k] {\n                    is_extension = true;\n\
    \                }\n            }\n        }\n    }\n    if digits_count > 3 ||\
    \ dot_count != 1 || !is_letter || !is_extension {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        String::from(\"Yes\")\n    } else {\n     \
    \   String::from(\"No\")\n    }", "    let mut digits = 0;\n    let mut dot =\
    \ false;\n    let mut ext = false;\n    let mut prefix = false;\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot = true;\n        } else if c.is_alphabetic()\
    \ {\n            if dot {\n                ext = true;\n            } else {\n\
    \                prefix = true;\n            }\n        }\n    }\n    if digits\
    \ > 3 || !dot || !prefix || !ext {\n        return \"No\".to_string();\n    }\n\
    \    let ext = file_name.split('.').last().unwrap();\n    if ext == \"txt\" ||\
    \ ext == \"exe\" || ext == \"dll\" {\n        return \"Yes\".to_string();\n  \
    \  }\n    \"No\".to_string()", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid = false;\n\
    \    let mut is_last_char_valid = false;\n    let mut is_extension_valid = false;\n\
    \    let mut extension = String::new();\n    let mut file_name_chars: Vec<char>\
    \ = file_name.chars().collect();\n    let mut file_name_chars_len = file_name_chars.len();\n\
    \    let mut last_char = file_name_chars[file_name_chars_len - 1];\n    let mut\
    \ first_char = file_name_chars[0];\n    let mut last_char_index = file_name_chars_len\
    \ - 1;\n    let mut first_char_index = 0;\n    let mut extension_index = 0;\n\
    \    let mut extension_len = 0;\n    let mut extension_chars: Vec<char> = Vec::new();\n\
    \    let mut extension_chars_len = 0;\n    let mut extension_chars_index = 0;\n\
    \    let mut extension_chars_last_index = 0;\n    let mut extension_chars_first_index\
    \ = 0;\n    let mut extension_chars_first_char = ' ';\n    let mut extension_chars_last_char\
    \ = ' ';\n    let mut extension_chars_first_char_is_valid = false;\n    let mut\
    \ extension_chars_last_char_is_valid = false;\n    let mut extension_chars_is_valid\
    \ = false;\n    let mut extension_chars_is_valid_txt = false;\n    let mut extension_chars_is_valid_exe\
    \ = false;\n    let mut extension_chars_is_valid_dll = false;\n    let mut extension_chars_is_valid_txt_chars:\
    \ Vec<char> = Vec::new();\n    let mut extension_chars_is_valid_exe_chars: Vec<char>\
    \ = Vec::new();\n    let mut extension_chars_is_valid_dll_chars: Vec<char> = Vec",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut after_dot_txt = false;\n    let mut\
    \ after_dot_exe = false;\n    let mut after_dot_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n        }\n        if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n        if c == 't' {\n      \
    \      after_dot_txt = true;\n        }\n        if c == 'e' {\n            after_dot_exe\
    \ = true;\n        }\n        if c == 'd' {\n            after_dot_dll = true;\n\
    \        }\n        if c == 'x' && after_dot_exe {\n            after_dot = true;\n\
    \        }\n        if c == 'l' && after_dot_dll {\n            after_dot = true;\n\
    \        }\n        if c == 't' && after_dot_txt {\n            after_dot = true;\n\
    \        }\n    }\n    if digits <= 3 && dot && before_dot && after_dot {\n  \
    \      return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n   \
    \ let mut after_dot = false;\n    let mut after_dot_txt = false;\n    let mut\
    \ after_dot_exe = false;\n    let mut after_dot_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_ascii_digit() {\n            digits += 1;\n        } else\
    \ if c == '.' {\n            dot = true;\n        } else if c.is_ascii_alphabetic()\
    \ {\n            if dot {\n                after_dot = true;\n               \
    \ if c == 't' {\n                    after_dot_txt = true;\n                }\
    \ else if c == 'e' {\n                    after_dot_exe = true;\n            \
    \    } else if c == 'd' {\n                    after_dot_dll = true;\n       \
    \         }\n            } else {\n                before_dot = true;\n      \
    \      }\n        }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot\
    \ || !(after_dot_txt || after_dot_exe || after_dot_dll) {\n        return \"No\"\
    .to_string();\n    }\n    \"Yes\".to_string()", "    let mut digits = 0;\n   \
    \ let mut dot = false;\n    let mut first_char = false;\n    let mut last_char\
    \ = false;\n    let mut last_three = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            first_char = true;\n            last_char = true;\n            last_three.push(c);\n\
    \        } else {\n            last_char = false;\n            last_three.push(c);\n\
    \        }\n        if last_three.len() > 3 {\n            last_three.remove(0);\n\
    \        }\n    }\n    if digits > 3 || !dot || !first_char || !last_char || last_three\
    \ != \"txt\" && last_three != \"exe\" && last_three != \"dll\" {\n        return\
    \ String::from(\"No\");\n    }\n    return String::from(\"Yes\");", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n   \
    \ let mut after_dot = false;\n    let mut after_dot_str = \"\";\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot = true;\n        } else if dot\
    \ {\n            after_dot = true;\n            after_dot_str.push(c);\n     \
    \   } else if c.is_alphabetic() {\n            before_dot = true;\n        }\n\
    \    }\n    if digits > 3 || !dot || !before_dot || !after_dot || after_dot_str\
    \ != \"txt\" && after_dot_str != \"exe\" && after_dot_str != \"dll\" {\n     \
    \   \"No\".to_string()\n    } else {\n        \"Yes\".to_string()\n    }", " \
    \   let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    let mut name_chars = file_name.chars();\n\
    \    let mut extension_chars = file_name.chars();\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut name_start = 0;\n    let mut\
    \ name_end = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if\
    \ c == '.' {\n            dot_count += 1;\n            extension_start = i + 1;\n\
    \        }\n        if c.is_digit(10) {\n            digits_count += 1;\n    \
    \    }\n    }\n    if digits_count > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if dot_count != 1 {\n        return String::from(\"No\");\n    }\n\
    \    for (i, c) in file_name.chars().enumerate() {\n        if c == '.' {\n  \
    \          extension_end = i;\n            name_end = i;\n            name_start\
    \ = 0;\n        }\n    }\n    for _ in 0..extension_start {\n        extension_chars.next();\n\
    \    }\n    for _ in 0..name_end {\n        name_chars.next();\n    }\n    for\
    \ _ in 0..(extension_end - extension_start) {\n        extension.push(extension_chars.next().unwrap());\n\
    \    }\n    for _ in 0..(name_end - name_start) {\n        name.push(name_chars.next().unwrap());\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        valid_extension = true;\n    }\n    if name.chars().next().unwrap().is_alphabetic()\
    \ {\n        valid_name = true;\n    }\n    if valid_extension && valid_name {\n\
    \        return String::from", "    let mut count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_digit = false;\n    let mut\
    \ is_letter = false;\n    let mut is_dot = false;\n    let mut is_ext = false;\n\
    \    let mut is_empty = false;\n    let mut is_first_letter = false;\n    let\
    \ mut is_first_digit = false;\n    let mut is_first_dot = false;\n    let mut\
    \ is_first_ext = false;\n    let mut is_first_empty = false;\n    let mut is_first_valid\
    \ = false;\n    let mut is_first_invalid = false;\n    let mut is_first_valid_ext\
    \ = false;\n    let mut is_first_invalid_ext = false;\n    let mut is_first_valid_digit\
    \ = false;\n    let mut is_first_invalid_digit = false;\n    let mut is_first_valid_letter\
    \ = false;\n    let mut is_first_invalid_letter = false;\n    let mut is_first_valid_dot\
    \ = false;\n    let mut is_first_invalid_dot = false;\n    let mut is_first_valid_empty\
    \ = false;\n    let mut is_first_invalid_empty = false;\n    let mut is_first_valid_empty_ext\
    \ = false;\n    let mut is_first_invalid_empty_ext = false;\n    let mut is_first_valid_empty_digit\
    \ = false;\n    let mut is_first_invalid_empty_digit = false;\n    let mut is_first_valid_empty_letter\
    \ = false;\n    let mut is_first_invalid_empty_letter = false;\n    let mut is_first_valid_empty_dot\
    \ = false;\n    let mut is_first_invalid_empty_dot = false;\n    let mut is_first_valid_empty_ext_digit\
    \ = false;\n    let mut is_first_invalid_empty_ext_digit = false;\n    let mut\
    \ is_first_valid_empty_ext_letter = false;\n    let mut is_first_invalid_empty_ext_letter\
    \ =", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digits\
    \ = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_prefix_start\
    \ = true;\n    let mut is_valid_extension_start = true;\n    let mut is_valid_extension_end\
    \ = true;\n    let mut is_valid_prefix_end = true;\n    let mut is_valid_extension_content\
    \ = true;\n    let mut is_valid_prefix_content = true;\n    let mut is_valid_extension_content_start\
    \ = true;\n    let mut is_valid_prefix_content_start = true;\n    let mut is_valid_extension_content_end\
    \ = true;\n    let mut is_valid_prefix_content_end = true;\n    let mut is_valid_extension_content_middle\
    \ = true;\n    let mut is_valid_prefix_content_middle = true;\n    let mut is_valid_extension_content_middle_start\
    \ = true;\n    let mut is_valid_prefix_content_middle_start = true;\n    let mut\
    \ is_valid_extension_content_middle_end = true;\n    let mut is_valid_prefix_content_middle_end\
    \ = true;\n    let mut is_valid_extension_content_middle_middle = true;\n    let\
    \ mut is_valid_prefix_content_middle_middle = true;\n    let mut is_valid_extension_content_middle_middle_start\
    \ = true;\n    let mut is_valid_prefix_content_middle_middle_start = true;\n \
    \   let mut is_valid_extension_content_middle_middle_end = true;\n    let mut\
    \ is_valid_prefix_content_middle_middle_end = true;\n    let mut is_valid_extension_content_middle",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut extension = false;\n\
    \    let mut valid = true;\n    for c in file_name.chars() {\n        match c\
    \ {\n            '0'..='9' => digits += 1,\n            '.' => {\n           \
    \     if dot {\n                    valid = false;\n                    break;\n\
    \                }\n                dot = true;\n            }\n            'a'..='z'\
    \ | 'A'..='Z' => {\n                if dot {\n                    if !extension\
    \ {\n                        extension = true;\n                    } else {\n\
    \                        valid = false;\n                        break;\n    \
    \                }\n                }\n            }\n            _ => {\n   \
    \             valid = false;\n                break;\n            }\n        }\n\
    \    }\n    if digits > 3 || !dot || !extension {\n        valid = false;\n  \
    \  }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n        \"No\"\
    .to_string()\n    }", "    let mut count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut is_digit\
    \ = false;\n    let mut is_letter = false;\n    let mut is_extension = false;\n\
    \    let mut extension = String::new();\n    let mut extension_list = vec![\"\
    txt\", \"exe\", \"dll\"];\n    let mut file_name_vec: Vec<char> = file_name.chars().collect();\n\
    \    for (i, c) in file_name_vec.iter().enumerate() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n            is_digit = true;\n        }\n      \
    \  if c.is_alphabetic() {\n            is_letter = true;\n        }\n        if\
    \ *c == '.' {\n            dot_count += 1;\n            dot_index = i;\n     \
    \   }\n    }\n    if count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if !is_digit || !is_letter {\n\
    \        is_valid = false;\n    }\n    if dot_index == 0 || dot_index == file_name_vec.len()\
    \ - 1 {\n        is_valid = false;\n    }\n    if is_valid {\n        for i in\
    \ dot_index + 1..file_name_vec.len() {\n            extension.push(file_name_vec[i]);\n\
    \        }\n        for i in extension_list.iter() {\n            if i == &extension\
    \ {\n                is_extension = true;\n            }\n        }\n        if\
    \ !is_extension {\n            is_valid = false;\n        }\n    }\n    if is_valid\
    \ {\n        return String::from(\"Yes\");\n    } else {\n        return String::from(\"\
    No\");\n    }", "    let mut digits = 0;\n    let mut dot = false;\n    let mut\
    \ before_dot = false;\n    let mut after_dot = false;\n    let mut after_dot_txt\
    \ = false;\n    let mut after_dot_exe = false;\n    let mut after_dot_dll = false;\n\
    \    for c in file_name.chars() {\n        if c >= '0' && c <= '9' {\n       \
    \     digits += 1;\n        }\n        if c == '.' {\n            dot = true;\n\
    \        }\n        if c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' {\n      \
    \      before_dot = true;\n        }\n        if c == 't' || c == 'e' || c ==\
    \ 'd' {\n            after_dot = true;\n        }\n        if c == 't' {\n   \
    \         after_dot_txt = true;\n        }\n        if c == 'e' {\n          \
    \  after_dot_exe = true;\n        }\n        if c == 'd' {\n            after_dot_dll\
    \ = true;\n        }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot\
    \ || !after_dot_txt || !after_dot_exe || !after_dot_dll {\n        return \"No\"\
    .to_string();\n    }\n    \"Yes\".to_string()", "    let mut digits = 0;\n   \
    \ let mut dot = false;\n    let mut ext = false;\n    let mut valid = true;\n\
    \    let mut after_dot = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n            after_dot = true;\n        } else if after_dot\
    \ {\n            if c == 't' {\n                ext = true;\n            } else\
    \ if c == 'x' && ext {\n                ext = true;\n            } else if c ==\
    \ 'e' && ext {\n                ext = true;\n            } else if c == 'd' &&\
    \ ext {\n                ext = true;\n            } else if c == 'l' && ext {\n\
    \                ext = true;\n            } else {\n                valid = false;\n\
    \                break;\n            }\n        } else if !c.is_alphabetic() {\n\
    \            valid = false;\n            break;\n        }\n    }\n    if digits\
    \ > 3 || !dot || !ext {\n        valid = false;\n    }\n    if valid {\n     \
    \   String::from(\"Yes\")\n    } else {\n        String::from(\"No\")\n    }",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut has_dot = false;\n\
    \    let mut has_letter = false;\n    let mut has_number = false;\n    let mut\
    \ has_extension = false;\n    let mut extension = String::new();\n    let mut\
    \ file_name_without_extension = String::new();\n    let mut file_name_without_extension_count\
    \ = 0;\n    let mut extension_count = 0;\n    let mut extension_index = 0;\n \
    \   let mut file_name_without_extension_index = 0;\n    let mut file_name_without_extension_has_letter\
    \ = false;\n    let mut file_name_without_extension_has_number = false;\n    let\
    \ mut file_name_without_extension_has_dot = false;\n    let mut file_name_without_extension_has_dot_count\
    \ = 0;\n    let mut file_name_without_extension_has_letter_count = 0;\n    let\
    \ mut file_name_without_extension_has_number_count = 0;\n    let mut file_name_without_extension_has_letter_index\
    \ = 0;\n    let mut file_name_without_extension_has_number_index = 0;\n    let\
    \ mut file_name_without_extension_has_dot_index = 0;\n    let mut file_name_without_extension_has_dot_index_count\
    \ = 0;\n    let mut file_name_without_extension_has_letter_index_count = 0;\n\
    \    let mut file_name_without_extension_has_number_index_count = 0;\n    let\
    \ mut file_name_without_extension_has_letter_index_count_index = 0;\n    let mut\
    \ file_name_without_extension_has_number_index_count_index = 0;\n    let mut file_name_without_extension_has_dot_index_count_index\
    \ = 0;\n    let mut file_name_without_extension_has_dot_index_count_index_count\
    \ = 0;\n    let mut file_name_without_extension_has_letter_index", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n   \
    \ let mut after_dot = false;\n    let mut after_dot_str = String::new();\n   \
    \ for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if dot {\n            after_dot_str.push(c);\n        } else if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n    }\n    if digits > 3 {\n \
    \       return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !before_dot {\n        return String::from(\"No\");\n  \
    \  }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits = 0;\n    let mut dot = false;\n    let mut valid\
    \ = false;\n    let mut extension = String::new();\n    let mut name = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            if dot {\n                extension.push(c);\n\
    \            } else {\n                name.push(c);\n            }\n        }\n\
    \    }\n    if digits <= 3 && dot && !name.is_empty() && name.chars().next().unwrap().is_alphabetic()\
    \ {\n        if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n            valid = true;\n        }\n    }\n    if valid {\n       \
    \ \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }", "   \
    \ let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut after_dot_txt = false;\n    let mut\
    \ after_dot_exe = false;\n    let mut after_dot_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n        }\n        if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n        if c == 't' {\n      \
    \      after_dot_txt = true;\n        }\n        if c == 'e' {\n            after_dot_exe\
    \ = true;\n        }\n        if c == 'd' {\n            after_dot_dll = true;\n\
    \        }\n        if c == 'x' {\n            after_dot_exe = true;\n       \
    \ }\n        if c == 'l' {\n            after_dot_dll = true;\n        }\n   \
    \ }\n    if digits > 3 {\n        return \"No\".to_string();\n    }\n    if !dot\
    \ {\n        return \"No\".to_string();\n    }\n    if !before_dot {\n       \
    \ return \"No\".to_string();\n    }\n    if after_dot_txt || after_dot_exe ||\
    \ after_dot_dll {\n        return \"Yes\".to_string();\n    }\n    \"No\".to_string()",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_first_letter = false;\n\
    \    let mut is_extension = false;\n    let mut is_extension_valid = false;\n\
    \    let mut extension = String::new();\n    let mut file_name = file_name.chars();\n\
    \    while let Some(c) = file_name.next() {\n        if c.is_digit(10) {\n   \
    \         digits_count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n        }\n        if c.is_alphabetic() {\n            is_first_letter\
    \ = true;\n        }\n        if c == '.' && is_first_letter {\n            is_extension\
    \ = true;\n        }\n        if is_extension {\n            extension.push(c);\n\
    \        }\n        if !c.is_whitespace() {\n            is_empty = false;\n \
    \       }\n    }\n    if digits_count > 3 || dot_count != 1 || is_empty || !is_first_letter\
    \ {\n        is_valid = false;\n    }\n    if extension == \".txt\" || extension\
    \ == \".exe\" || extension == \".dll\" {\n        is_extension_valid = true;\n\
    \    }\n    if is_valid && is_extension_valid {\n        return String::from(\"\
    Yes\");\n    }\n    String::from(\"No\")", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut first_part = false;\n    let mut second_part = false;\n\
    \    let mut first_part_start = false;\n    let mut second_part_start = false;\n\
    \    let mut second_part_end = false;\n    for c in file_name.chars() {\n    \
    \    if c.is_digit(10) {\n            digits += 1;\n        }\n        if c ==\
    \ '.' {\n            dot = true;\n        }\n        if c.is_alphabetic() {\n\
    \            if !first_part {\n                first_part = true;\n          \
    \      first_part_start = true;\n            } else if !second_part {\n      \
    \          second_part = true;\n                second_part_start = true;\n  \
    \          }\n        } else if c == '.' {\n            if first_part {\n    \
    \            first_part_start = false;\n            }\n            if second_part\
    \ {\n                second_part_start = false;\n            }\n        } else\
    \ if c == 't' || c == 'e' || c == 'x' || c == 'd' || c == 'l' {\n            if\
    \ second_part {\n                second_part_start = false;\n            }\n \
    \       } else if c == '.' {\n            if second_part {\n                second_part_end\
    \ = true;\n            }\n        }\n    }\n    if digits > 3 || !dot || !first_part\
    \ || !second_part || first_part_start || second_part_start || !second_part_end\
    \ {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "  \
    \  let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !file_name[..dot_index].chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if !(file_name[dot_index+1..] == \"\
    txt\" || file_name[dot_index+1..] == \"exe\" || file_name[dot_index+1..] == \"\
    dll\") {\n        is_valid = false;\n    }\n    if is_valid {\n        return\
    \ \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut ext = false;\n    let mut valid\
    \ = true;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n   \
    \         digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            ext = true;\n        }\n \
    \       if digits > 3 {\n            valid = false;\n            break;\n    \
    \    }\n    }\n    if !dot || !ext || digits > 3 {\n        valid = false;\n \
    \   }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n        \"No\"\
    .to_string()\n    }", "    let mut count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut dot_index = 0;\n    let mut first_letter = false;\n    let mut last_three\
    \ = false;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n        if c.is_alphabetic() {\n\
    \            first_letter = true;\n        }\n        if i > dot_index {\n   \
    \         if file_name[dot_index + 1..i + 1] == \"txt\" || file_name[dot_index\
    \ + 1..i + 1] == \"exe\" || file_name[dot_index + 1..i + 1] == \"dll\" {\n   \
    \             last_three = true;\n            }\n        }\n    }\n    if count\
    \ > 3 || dot_count != 1 || !first_letter || !last_three {\n        return \"No\"\
    .to_string();\n    }\n    \"Yes\".to_string()", "    let mut count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_digit = false;\n\
    \    let mut is_letter = false;\n    let mut is_dot = false;\n    let mut is_ext\
    \ = false;\n    let mut is_empty = false;\n    let mut is_first_letter = false;\n\
    \    let mut is_first_dot = false;\n    let mut is_first_ext = false;\n    let\
    \ mut is_first_empty = false;\n    let mut is_first_digit = false;\n    let mut\
    \ is_first_letter_valid = false;\n    let mut is_first_digit_valid = false;\n\
    \    let mut is_first_dot_valid = false;\n    let mut is_first_ext_valid = false;\n\
    \    let mut is_first_empty_valid = false;\n    let mut is_first_valid = false;\n\
    \    let mut is_second_valid = false;\n    let mut is_third_valid = false;\n \
    \   let mut is_fourth_valid = false;\n    let mut is_fifth_valid = false;\n  \
    \  let mut is_sixth_valid = false;\n    let mut is_seventh_valid = false;\n  \
    \  let mut is_eighth_valid = false;\n    let mut is_ninth_valid = false;\n   \
    \ let mut is_tenth_valid = false;\n    let mut is_eleventh_valid = false;\n  \
    \  let mut is_twelfth_valid = false;\n    let mut is_thirteenth_valid = false;\n\
    \    let mut is_fourteenth_valid = false;\n    let mut is_fifteenth_valid = false;\n\
    \    let mut is_sixteenth_valid = false;\n    let mut is_seventeenth_valid = false;\n\
    \    let mut is_eighteenth_valid = false;\n    let mut is_nineteenth_valid = false;\n\
    \    let mut is_twentieth_valid = false;\n    let mut is_twentyfirst_valid = false;\n\
    \    let mut is_twentysecond_valid = false;\n    let mut is_twentythird_valid\
    \ = false;\n    let mut", "    let mut digits = 0;\n    let mut dot = 0;\n   \
    \ let mut extension = \"\";\n    let mut name = \"\";\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot += 1;\n        } else if dot == 0 {\n          \
    \  name.push(c);\n        } else {\n            extension.push(c);\n        }\n\
    \    }\n    if digits > 3 || dot != 1 || name.is_empty() || !name.chars().next().unwrap().is_alphabetic()\
    \ || ![\"txt\", \"exe\", \"dll\"].contains(&extension) {\n        \"No\".to_string()\n\
    \    } else {\n        \"Yes\".to_string()\n    }", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot\
    \ = false;\n    let mut after_dot_str = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if dot {\n            after_dot_str.push(c);\n\
    \        } else if c.is_alphabetic() {\n            before_dot = true;\n     \
    \   }\n    }\n    if digits > 3 {\n        return String::from(\"No\");\n    }\n\
    \    if !dot {\n        return String::from(\"No\");\n    }\n    if !before_dot\
    \ {\n        return String::from(\"No\");\n    }\n    if after_dot_str == \"txt\"\
    \ || after_dot_str == \"exe\" || after_dot_str == \"dll\" {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut extension = false;\n    let mut valid =\
    \ true;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n     \
    \       digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            extension = true;\n      \
    \  }\n    }\n    if digits > 3 || !dot || !extension {\n        valid = false;\n\
    \    }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n        \"\
    No\".to_string()\n    }", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    let mut\
    \ after_dot_value = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n\
    \            dot = true;\n        } else if c.is_alphabetic() {\n            before_dot\
    \ = true;\n        } else if c.is_alphanumeric() {\n            after_dot_value.push(c);\n\
    \        }\n    }\n    if digits > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if !dot {\n        return String::from(\"No\");\n    }\n    if !before_dot\
    \ {\n        return String::from(\"No\");\n    }\n    if after_dot_value == \"\
    txt\" || after_dot_value == \"exe\" || after_dot_value == \"dll\" {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut valid = false;\n    let mut\
    \ extension = String::new();\n    let mut name = String::new();\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot = true;\n        } else if c.is_alphabetic()\
    \ {\n            if dot {\n                extension.push(c);\n            } else\
    \ {\n                name.push(c);\n            }\n        }\n    }\n    if digits\
    \ <= 3 && dot && !name.is_empty() && name.chars().next().unwrap().is_alphabetic()\
    \ {\n        if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n            valid = true;\n        }\n    }\n    if valid {\n       \
    \ return String::from(\"Yes\");\n    } else {\n        return String::from(\"\
    No\");\n    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n \
    \   let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_substring = false;\n    let mut is_valid_substring_start\
    \ = false;\n    let mut is_valid_substring_end = false;\n    let mut is_valid_substring_length\
    \ = false;\n    let mut is_valid_substring_start_letter = false;\n    let mut\
    \ is_valid_substring_end_letter = false;\n    let mut is_valid_substring_end_letter_2\
    \ = false;\n    let mut is_valid_substring_end_letter_3 = false;\n    let mut\
    \ is_valid_substring_end_letter_4 = false;\n    let mut is_valid_substring_end_letter_5\
    \ = false;\n    let mut is_valid_substring_end_letter_6 = false;\n    let mut\
    \ is_valid_substring_end_letter_7 = false;\n    let mut is_valid_substring_end_letter_8\
    \ = false;\n    let mut is_valid_substring_end_letter_9 = false;\n    let mut\
    \ is_valid_substring_end_letter_10 = false;\n    let mut is_valid_substring_end_letter_11\
    \ = false;\n    let mut is_valid_substring_end_letter_12 = false;\n    let mut\
    \ is_valid_substring_end_letter_13 = false;\n    let mut is_valid_substring_end_letter_14\
    \ = false;\n    let mut is_valid_substring_end_letter_15 = false;\n    let mut\
    \ is_valid_substring_end_letter_16 = false;\n    let mut is_valid_substring_end_letter_17\
    \ = false;\n    let mut is_valid_substring_end_letter_18 = false;\n    let mut\
    \ is_valid_substring_end_letter_19 = false;\n    let mut is_valid_substring_end_letter_20\
    \ = false;\n    let mut is_", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid = false;\n\
    \    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    let mut i = 0;\n    while i < file_name.len() {\n        let c = file_name.chars().nth(i).unwrap();\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        } else if\
    \ c == '.' {\n            dot_count += 1;\n        } else if c.is_alphabetic()\
    \ {\n            is_first_char_valid = true;\n        }\n        i += 1;\n   \
    \ }\n    if digits_count > 3 || dot_count != 1 || !is_first_char_valid {\n   \
    \     is_valid = false;\n    } else {\n        let mut i = 0;\n        while i\
    \ < file_name.len() {\n            let c = file_name.chars().nth(i).unwrap();\n\
    \            if c == '.' {\n                break;\n            }\n          \
    \  i += 1;\n        }\n        i += 1;\n        while i < file_name.len() {\n\
    \            let c = file_name.chars().nth(i).unwrap();\n            extension.push(c);\n\
    \            i += 1;\n        }\n        if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n            is_extension_valid = true;\n\
    \        }\n        if !is_extension_valid {\n            is_valid = false;\n\
    \        }\n    }\n    if is_valid {\n        return String::from(\"Yes\");\n\
    \    } else {\n        return String::from(\"No\");\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (index, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        }\n        if c == '.' {\n      \
    \      dot_count += 1;\n            dot_index = index;\n        }\n    }\n   \
    \ if digits_count > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    let prefix = &file_name[..dot_index];\n    let suffix = &file_name[dot_index+1..];\n\
    \    if prefix.is_empty() || !prefix.chars().next().unwrap().is_alphabetic() {\n\
    \        is_valid = false;\n    }\n    if suffix != \"txt\" && suffix != \"exe\"\
    \ && suffix != \"dll\" {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !file_name[..dot_index].chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if !file_name[dot_index + 1..].contains(\"\
    txt\") && !file_name[dot_index + 1..].contains(\"exe\") && !file_name[dot_index\
    \ + 1..].contains(\"dll\") {\n        is_valid = false;\n    }\n    if is_valid\
    \ {\n        return \"Yes\".to_string();\n    }\n    return \"No\".to_string();",
  "    let mut count = 0;\n    let mut flag = false;\n    let mut flag2 = false;\n\
    \    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n\
    \    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n\
    \    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 =\
    \ false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut\
    \ flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n\
    \    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19\
    \ = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let\
    \ mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n\
    \    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27\
    \ = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let\
    \ mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n\
    \    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35\
    \ = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let\
    \ mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n\
    \    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43\
    \ = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let\
    \ mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n\
    \    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51\
    \ = false;\n    let mut flag52 = false;\n    let mut flag53 = false;\n    let\
    \ mut flag54 = false;\n    let mut flag55 = false;\n    let mut flag56 = false;\n",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_valid = false;\n    let mut is_last_three_chars_valid\
    \ = false;\n    let mut is_last_char_valid = false;\n    let mut is_last_two_chars_valid\
    \ = false;\n    let mut is_last_three_chars_valid = false;\n    let mut is_last_four_chars_valid\
    \ = false;\n    let mut is_last_five_chars_valid = false;\n    let mut is_last_six_chars_valid\
    \ = false;\n    let mut is_last_seven_chars_valid = false;\n    let mut is_last_eight_chars_valid\
    \ = false;\n    let mut is_last_nine_chars_valid = false;\n    let mut is_last_ten_chars_valid\
    \ = false;\n    let mut is_last_eleven_chars_valid = false;\n    let mut is_last_twelve_chars_valid\
    \ = false;\n    let mut is_last_thirteen_chars_valid = false;\n    let mut is_last_fourteen_chars_valid\
    \ = false;\n    let mut is_last_fifteen_chars_valid = false;\n    let mut is_last_sixteen_chars_valid\
    \ = false;\n    let mut is_last_seventeen_chars_valid = false;\n    let mut is_last_eighteen_chars_valid\
    \ = false;\n    let mut is_last_nineteen_chars_valid = false;\n    let mut is_last_twenty_chars_valid\
    \ = false;\n    let mut is_last_twenty_one_chars_valid = false;\n    let mut is_last_twenty_two_chars_valid\
    \ = false;\n    let mut is_last_twenty_three_chars_valid = false;\n    let mut\
    \ is_last_twenty_four_chars_valid = false;\n    let mut is_last_twenty_five_chars_valid\
    \ = false;\n    let", "    let mut digits = 0;\n    let mut dot = false;\n   \
    \ let mut before_dot = false;\n    let mut after_dot = false;\n    let mut before_dot_str\
    \ = String::new();\n    let mut after_dot_str = String::new();\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot = true;\n            continue;\n \
    \       }\n        if !dot {\n            if c.is_alphabetic() {\n           \
    \     before_dot = true;\n            }\n            before_dot_str.push(c);\n\
    \        } else {\n            after_dot_str.push(c);\n        }\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        }\n    }\n    if digits > 3 {\n       \
    \ return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !before_dot {\n        return String::from(\"No\");\n  \
    \  }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        after_dot = true;\n    }\n    if !after_dot {\n      \
    \  return String::from(\"No\");\n    }\n    return String::from(\"Yes\");", " \
    \   let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            before_dot = true;\n        } else if c.is_alphanumeric()\
    \ {\n            after_dot_str.push(c);\n        }\n    }\n    if digits > 3 {\n\
    \        return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !before_dot {\n        return String::from(\"No\");\n  \
    \  }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ dot_index = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digits\
    \ = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_prefix_first_char\
    \ = true;\n    let mut is_valid_prefix_chars = true;\n    let mut is_valid_extension_chars\
    \ = true;\n    let mut is_valid_extension_first_char = true;\n    let mut is_valid_extension_last_char\
    \ = true;\n    let mut is_valid_extension_second_char = true;\n    let mut is_valid_extension_third_char\
    \ = true;\n    let mut is_valid_extension_fourth_char = true;\n    let mut is_valid_extension_fifth_char\
    \ = true;\n    let mut is_valid_extension_sixth_char = true;\n    let mut is_valid_extension_seventh_char\
    \ = true;\n    let mut is_valid_extension_eighth_char = true;\n    let mut is_valid_extension_ninth_char\
    \ = true;\n    let mut is_valid_extension_tenth_char = true;\n    let mut is_valid_extension_eleventh_char\
    \ = true;\n    let mut is_valid_extension_twelfth_char = true;\n    let mut is_valid_extension_thirteenth_char\
    \ = true;\n    let mut is_valid_extension_fourteenth_char = true;\n    let mut\
    \ is_valid_extension_fifteenth_char = true;\n    let mut is_valid_extension_sixteenth_char\
    \ = true;\n    let mut is_valid_extension_seventeenth_char = true;\n    let mut\
    \ is_valid_extension_eighteenth_char = true;\n    let mut is_valid_", "    let\
    \ mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if dot {\n            after_dot_str.push(c);\n        } else if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n    }\n    if digits > 3 {\n \
    \       return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !before_dot {\n        return String::from(\"No\");\n  \
    \  }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if !dot {\n            before_dot = true;\n        } else {\n            after_dot\
    \ = true;\n            after_dot_str.push(c);\n        }\n    }\n    if digits\
    \ > 3 || !dot || !before_dot || !after_dot || !(after_dot_str == \"txt\" || after_dot_str\
    \ == \"exe\" || after_dot_str == \"dll\") {\n        return String::from(\"No\"\
    );\n    }\n    return String::from(\"Yes\");", "    let mut digits = 0;\n    let\
    \ mut dot = false;\n    let mut first_char = false;\n    let mut last_char = false;\n\
    \    let mut last_three = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            first_char\
    \ = true;\n        } else if c == 't' || c == 'x' || c == 'd' {\n            last_char\
    \ = true;\n        } else if c == 'e' || c == 'l' {\n            last_char = true;\n\
    \            last_three = true;\n        } else {\n            return \"No\".to_string();\n\
    \        }\n    }\n    if digits > 3 || !dot || !first_char || !last_char || !last_three\
    \ {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "  \
    \  let mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut first_char\
    \ = true;\n    let mut first_char_valid = false;\n    let mut extension_valid\
    \ = false;\n    let mut extension = String::new();\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            first_char\
    \ = true;\n        } else if c.is_digit(10) {\n            digit_count += 1;\n\
    \        } else if first_char {\n            first_char = false;\n           \
    \ first_char_valid = c.is_alphabetic();\n        } else if c.is_alphabetic() {\n\
    \            extension.push(c);\n        }\n    }\n    if dot_count == 1 && digit_count\
    \ <= 3 && first_char_valid {\n        if extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\" {\n            extension_valid = true;\n   \
    \     }\n    }\n    if extension_valid {\n        \"Yes\".to_string()\n    } else\
    \ {\n        \"No\".to_string()\n    }", "    let mut count = 0;\n    let mut\
    \ dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut extension = String::new();\n    let mut file_name_without_extension\
    \ = String::new();\n    let mut file_name_chars = file_name.chars();\n    let\
    \ mut file_name_chars_clone = file_name.chars();\n    let mut file_name_chars_clone_clone\
    \ = file_name.chars();\n    let mut file_name_chars_clone_clone_clone = file_name.chars();\n\
    \    let mut file_name_chars_clone_clone_clone_clone = file_name.chars();\n  \
    \  let mut file_name_chars_clone_clone_clone_clone_clone = file_name.chars();\n\
    \    let mut file_name_chars_clone_clone_clone_clone_clone_clone = file_name.chars();\n\
    \    let mut file_name_chars_clone_clone_clone_clone_clone_clone_clone = file_name.chars();\n\
    \    let mut file_name_chars_clone_clone_clone_clone_clone_clone_clone_clone =\
    \ file_name.chars();\n    let mut file_name_chars_clone_clone_clone_clone_clone_clone_clone_clone_clone\
    \ = file_name.chars();\n    let mut file_name_chars_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone\
    \ = file_name.chars();\n    let mut file_name_chars_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone\
    \ = file_name.chars();\n    let mut file_name_chars_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone\
    \ = file_name.chars();\n    let mut file_name_chars_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone_clone\
    \ = file_name.chars();\n    let mut file_name_chars", "    // TODO: Implement\
    \ the function here\n    \"No\".to_string()", "    let mut digits = 0;\n    let\
    \ mut dot = false;\n    let mut extension = false;\n    let mut extension_valid\
    \ = false;\n    let mut extension_txt = false;\n    let mut extension_exe = false;\n\
    \    let mut extension_dll = false;\n    let mut extension_start = false;\n  \
    \  let mut extension_end = false;\n    let mut extension_start_valid = false;\n\
    \    let mut extension_end_valid = false;\n    let mut extension_start_letter\
    \ = false;\n    let mut extension_end_letter = false;\n    let mut extension_start_letter_valid\
    \ = false;\n    let mut extension_end_letter_valid = false;\n    let mut extension_start_letter_valid_lower\
    \ = false;\n    let mut extension_end_letter_valid_lower = false;\n    let mut\
    \ extension_start_letter_valid_upper = false;\n    let mut extension_end_letter_valid_upper\
    \ = false;\n    let mut extension_start_letter_valid_lower_valid = false;\n  \
    \  let mut extension_end_letter_valid_lower_valid = false;\n    let mut extension_start_letter_valid_upper_valid\
    \ = false;\n    let mut extension_end_letter_valid_upper_valid = false;\n    let\
    \ mut extension_start_letter_valid_lower_valid_valid = false;\n    let mut extension_end_letter_valid_lower_valid_valid\
    \ = false;\n    let mut extension_start_letter_valid_upper_valid_valid = false;\n\
    \    let mut extension_end_letter_valid_upper_valid_valid = false;\n    let mut\
    \ extension_start_letter_valid_lower_valid_valid_valid = false;\n    let mut extension_end_letter_valid_lower_valid_valid_valid\
    \ = false;\n    let mut extension_start_letter_valid_upper_valid_valid_valid =\
    \ false;\n    let mut extension_end_letter_valid_upper_valid_valid_valid = false;\n\
    \    let mut extension_start_letter_valid_lower_valid_valid_valid_valid = false;\n\
    \    let mut extension_end_letter_valid_lower_valid_valid_valid_valid = false;",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut extension_index = 0;\n    let mut extension_length = 0;\n\
    \    let mut valid_extension = false;\n    let mut valid_name = false;\n    let\
    \ mut valid_file = false;\n    let mut valid_extension_length = false;\n    let\
    \ mut valid_extension_start = false;\n    let mut valid_name_start = false;\n\
    \    let mut valid_name_length = false;\n    let mut valid_name_end = false;\n\
    \    let mut valid_file_name = false;\n    let mut valid_file_name_length = false;\n\
    \    let mut valid_file_name_start = false;\n    let mut valid_file_name_end =\
    \ false;\n    let mut valid_file_name_end_length = false;\n    let mut valid_file_name_end_start\
    \ = false;\n    let mut valid_file_name_end_end = false;\n    let mut valid_file_name_end_end_length\
    \ = false;\n    let mut valid_file_name_end_end_start = false;\n    let mut valid_file_name_end_end_end\
    \ = false;\n    let mut valid_file_name_end_end_end_length = false;\n    let mut\
    \ valid_file_name_end_end_end_start = false;\n    let mut valid_file_name_end_end_end_end\
    \ = false;\n    let mut valid_file_name_end_end_end_end_length = false;\n    let\
    \ mut valid_file_name_end_end_end_end_start = false;\n    let mut valid_file_name_end_end_end_end_end\
    \ = false;\n    let mut valid_file_name_end_end_end_end_end_length = false;\n\
    \    let mut valid_file_name_end_end_end_end_end_start = false;\n    let mut valid_file_name_end_end_end_end_end_end\
    \ = false;\n    let mut valid_file_name_end_end_end", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot\
    \ = false;\n    let mut valid_after_dot = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if !dot {\n            before_dot\
    \ = true;\n        } else {\n            after_dot = true;\n            if c ==\
    \ 't' || c == 'e' || c == 'd' {\n                valid_after_dot = true;\n   \
    \         }\n        }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot\
    \ || !valid_after_dot {\n        \"No\".to_string()\n    } else {\n        \"\
    Yes\".to_string()\n    }", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut first_char = ' ';\n    let mut\
    \ last_three_chars = \"   \";\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if i == 0 {\n            first_char = c;\n        }\n    \
    \    if i >= file_name.len() - 3 {\n            last_three_chars = &file_name[i..];\n\
    \        }\n    }\n    if digits_count > 3 || dot_count != 1 || !first_char.is_alphabetic()\
    \ ||\n        !(last_three_chars == \"txt\" || last_three_chars == \"exe\" ||\
    \ last_three_chars == \"dll\") {\n        return \"No\".to_string();\n    }\n\
    \    \"Yes\".to_string()", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut valid = false;\n    let mut extension = \"\";\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            valid = true;\n        }\n    }\n    if dot {\n        let mut parts\
    \ = file_name.split('.');\n        let first = parts.next().unwrap();\n      \
    \  extension = parts.next().unwrap();\n        if first.is_empty() {\n       \
    \     valid = false;\n        }\n    }\n    if digits > 3 || !dot || !valid ||\
    \ !(extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n\
    \        return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let\
    \ mut digits = 0;\n    let mut dot = false;\n    let mut ext = false;\n    let\
    \ mut ext_valid = false;\n    let mut file_name_valid = false;\n    let mut ext_str\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if dot {\n            ext = true;\n            ext_str.push(c);\n\
    \        }\n    }\n    if digits <= 3 && dot && ext {\n        if ext_str == \"\
    txt\" || ext_str == \"exe\" || ext_str == \"dll\" {\n            ext_valid = true;\n\
    \        }\n        if file_name.chars().next().unwrap().is_alphabetic() {\n \
    \           file_name_valid = true;\n        }\n    }\n    if file_name_valid\
    \ && ext_valid {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ valid_extension = false;\n    let mut valid_name = false;\n    let mut extension_start\
    \ = 0;\n    let mut extension_end = 0;\n    let mut name_start = 0;\n    let mut\
    \ name_end = 0;\n    for (i, c) in file_name.chars().enumerate() {\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n        } else if c == '.'\
    \ {\n            dot_count += 1;\n            extension_start = i + 1;\n     \
    \   } else if c.is_alphabetic() {\n            if !valid_name {\n            \
    \    name_start = i;\n                valid_name = true;\n            }\n    \
    \        name_end = i + 1;\n        }\n    }\n    if dot_count == 1 {\n      \
    \  extension_end = file_name.len();\n        let extension = &file_name[extension_start..extension_end];\n\
    \        if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n            valid_extension = true;\n        }\n    }\n    if digits_count\
    \ <= 3 && valid_extension && valid_name {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    let mut\
    \ after_dot_txt = false;\n    let mut after_dot_exe = false;\n    let mut after_dot_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        }\n        if c == '.' {\n            dot = true;\n\
    \        }\n        if !dot && c.is_alphabetic() {\n            before_dot = true;\n\
    \        }\n        if dot && c.is_alphabetic() {\n            after_dot = true;\n\
    \        }\n        if dot && c == 't' {\n            after_dot_txt = true;\n\
    \        }\n        if dot && c == 'e' {\n            after_dot_exe = true;\n\
    \        }\n        if dot && c == 'd' {\n            after_dot_dll = true;\n\
    \        }\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot || !(after_dot_txt\
    \ || after_dot_exe || after_dot_dll) {\n        return String::from(\"No\");\n\
    \    }\n    return String::from(\"Yes\");", "    let mut digits = 0;\n    let\
    \ mut dot = false;\n    let mut first_part = false;\n    let mut second_part =\
    \ false;\n    let mut first_part_str = String::new();\n    let mut second_part_str\
    \ = String::new();\n    for c in file_name.chars() {\n        if c == '.' {\n\
    \            dot = true;\n            continue;\n        }\n        if !first_part\
    \ {\n            if c.is_alphabetic() {\n                first_part = true;\n\
    \                first_part_str.push(c);\n            } else {\n             \
    \   return \"No\".to_string();\n            }\n        } else if !second_part\
    \ {\n            if c.is_alphabetic() {\n                second_part_str.push(c);\n\
    \            } else if c.is_digit(10) {\n                digits += 1;\n      \
    \          if digits > 3 {\n                    return \"No\".to_string();\n \
    \               }\n            } else {\n                return \"No\".to_string();\n\
    \            }\n        } else {\n            if c.is_alphabetic() {\n       \
    \         second_part_str.push(c);\n            } else if c.is_digit(10) {\n \
    \               digits += 1;\n                if digits > 3 {\n              \
    \      return \"No\".to_string();\n                }\n            } else {\n \
    \               return \"No\".to_string();\n            }\n        }\n    }\n\
    \    if !dot || !first_part || !second_part || digits > 3 {\n        return \"\
    No\".to_string();\n    }\n    if second_part_str == \"txt\" || second_part_str\
    \ == \"exe\" || second_part_str == \"dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_last_letter = false;\n    let mut is_last_digit = false;\n    let\
    \ mut is_last_dot = false;\n    let mut is_last_letter_valid = false;\n    let\
    \ mut is_last_digit_valid = false;\n    let mut is_last_dot_valid = false;\n \
    \   let mut is_last_letter_valid_count = 0;\n    let mut is_last_digit_valid_count\
    \ = 0;\n    let mut is_last_dot_valid_count = 0;\n    let mut is_last_letter_valid_count_max\
    \ = 0;\n    let mut is_last_digit_valid_count_max = 0;\n    let mut is_last_dot_valid_count_max\
    \ = 0;\n    let mut is_last_letter_valid_count_min = 0;\n    let mut is_last_digit_valid_count_min\
    \ = 0;\n    let mut is_last_dot_valid_count_min = 0;\n    let mut is_last_letter_valid_count_min_max\
    \ = 0;\n    let mut is_last_digit_valid_count_min_max = 0;\n    let mut is_last_dot_valid_count_min_max\
    \ = 0;\n    let mut is_last_letter_valid_count_min_max_valid = false;\n    let\
    \ mut is_last_digit_valid_count_min_max_valid = false;\n    let mut is_last_dot_valid_count_min_max_valid\
    \ = false;\n    let mut is_last_letter_valid_count_min_max_valid_count = 0;\n\
    \    let mut is_last_digit_valid_count_min_max_valid_count = 0;\n    let mut is_last_dot_valid_count_min_max_valid_count\
    \ = 0;\n    let mut is_last_letter_valid_count_min_max_valid_count_max = 0;\n\
    \    let mut is_last_digit_valid_", "    let mut digits = 0;\n    let mut dot\
    \ = false;\n    let mut dot_index = 0;\n    let mut start_with_letter = false;\n\
    \    let mut end_with_txt_exe_dll = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n            dot_index = i;\n      \
    \  }\n        if i == 0 && c.is_alphabetic() {\n            start_with_letter\
    \ = true;\n        }\n    }\n    if dot {\n        let end = &file_name[dot_index\
    \ + 1..];\n        if end == \"txt\" || end == \"exe\" || end == \"dll\" {\n \
    \           end_with_txt_exe_dll = true;\n        }\n    }\n    if digits <= 3\
    \ && dot && start_with_letter && end_with_txt_exe_dll {\n        \"Yes\".to_string()\n\
    \    } else {\n        \"No\".to_string()\n    }", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut has_letter = false;\n    let mut\
    \ has_extension = false;\n    let mut extension = String::new();\n    for c in\
    \ file_name.chars() {\n        if c.is_digit(10) {\n            digits_count +=\
    \ 1;\n        } else if c == '.' {\n            dot_count += 1;\n        } else\
    \ if c.is_alphabetic() {\n            has_letter = true;\n        }\n    }\n \
    \   if dot_count == 1 {\n        let mut split = file_name.split('.');\n     \
    \   let first = split.next().unwrap();\n        let second = split.next().unwrap();\n\
    \        if first.len() > 0 && second.len() > 0 {\n            extension = second.to_string();\n\
    \            has_extension = true;\n        }\n    }\n    if digits_count > 3\
    \ || dot_count != 1 || !has_letter || !has_extension {\n        return \"No\"\
    .to_string();\n    }\n    match extension.as_str() {\n        \"txt\" | \"exe\"\
    \ | \"dll\" => \"Yes\".to_string(),\n        _ => \"No\".to_string(),\n    }",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_valid = true;\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_before_dot = false;\n            is_after_dot = true;\n\
    \            continue;\n        }\n        if is_before_dot {\n            if\
    \ c.is_alphabetic() {\n                is_before_dot_valid = true;\n         \
    \   }\n        }\n        if is_after_dot {\n            if c.is_alphabetic()\
    \ {\n                is_after_dot_valid = true;\n            }\n        }\n  \
    \      if c.is_digit(10) {\n            digits_count += 1;\n        }\n    }\n\
    \    if digits_count > 3 || dot_count != 1 || !is_before_dot_valid || !is_after_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if is_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot\
    \ = false;\n    let mut after_dot_str = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n        }\n        if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n        if dot {\n           \
    \ after_dot_str.push(c);\n        }\n    }\n    if after_dot_str == \".txt\" ||\
    \ after_dot_str == \".exe\" || after_dot_str == \".dll\" {\n        after_dot\
    \ = true;\n    }\n    if digits > 3 || !dot || !before_dot || !after_dot {\n \
    \       return String::from(\"No\");\n    }\n    return String::from(\"Yes\");",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut first_letter = false;\n\
    \    let mut extension = false;\n    let mut extension_name = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            first_letter = true;\n        } else if\
    \ c.is_alphanumeric() {\n            extension_name.push(c);\n        }\n    }\n\
    \    if extension_name == \"txt\" || extension_name == \"exe\" || extension_name\
    \ == \"dll\" {\n        extension = true;\n    }\n    if digits <= 3 && dot &&\
    \ first_letter && extension {\n        return \"Yes\".to_string();\n    }\n  \
    \  return \"No\".to_string();", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_valid = true;\n    let mut is_empty = true;\n    let mut is_letter\
    \ = false;\n    let mut is_txt = false;\n    let mut is_exe = false;\n    let\
    \ mut is_dll = false;\n    for c in file_name.chars() {\n        if c == '.' {\n\
    \            dot_count += 1;\n            is_before_dot = false;\n           \
    \ is_after_dot = true;\n        } else if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        } else if c.is_alphabetic() {\n            is_letter = true;\n\
    \            if is_after_dot {\n                if c == 't' {\n              \
    \      is_txt = true;\n                } else if c == 'e' {\n                \
    \    is_exe = true;\n                } else if c == 'd' {\n                  \
    \  is_dll = true;\n                }\n            }\n        }\n        is_empty\
    \ = false;\n    }\n    if digits_count > 3 || dot_count != 1 || is_empty || !is_letter\
    \ || !(is_txt || is_exe || is_dll) {\n        is_valid = false;\n    }\n    if\
    \ is_valid {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n\
    \    }", "    let mut digits = 0;\n    let mut dot = false;\n    let mut ext =\
    \ false;\n    let mut valid = true;\n    let mut prev = ' ';\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            if prev == '.' {\n                ext = true;\n            }\n  \
    \      }\n        prev = c;\n    }\n    if digits > 3 || !dot || !ext {\n    \
    \    valid = false;\n    }\n    if valid {\n        \"Yes\".to_string()\n    }\
    \ else {\n        \"No\".to_string()\n    }", "    let mut digits = 0;\n    let\
    \ mut dot = false;\n    let mut valid = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n\
    \        if c.is_alphabetic() {\n            before_dot = true;\n        }\n \
    \       if dot {\n            after_dot_str.push(c);\n        }\n    }\n    if\
    \ after_dot_str == \".txt\" || after_dot_str == \".exe\" || after_dot_str == \"\
    .dll\" {\n        after_dot = true;\n    }\n    if digits <= 3 && dot && before_dot\
    \ && after_dot {\n        valid = true;\n    }\n    if valid {\n        return\
    \ String::from(\"Yes\");\n    } else {\n        return String::from(\"No\");\n\
    \    }", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_valid = false;\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            if dot {\n                after_dot = true;\n\
    \                if c == 't' || c == 'e' || c == 'd' {\n                    after_dot_valid\
    \ = true;\n                }\n            } else {\n                before_dot\
    \ = true;\n            }\n        }\n    }\n    if digits > 3 || !dot || !before_dot\
    \ || !after_dot || !after_dot_valid {\n        \"No\".to_string()\n    } else\
    \ {\n        \"Yes\".to_string()\n    }", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut valid = false;\n    let mut first_letter = false;\n\
    \    let mut last_three = String::new();\n    for c in file_name.chars() {\n \
    \       if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n    \
    \        first_letter = true;\n        }\n        last_three.push(c);\n      \
    \  if last_three.len() > 3 {\n            last_three.remove(0);\n        }\n \
    \   }\n    if digits <= 3 && dot && first_letter && last_three == \"txt\" || last_three\
    \ == \"exe\" || last_three == \"dll\" {\n        valid = true;\n    }\n    if\
    \ valid {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n\
    \    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_before_dot = true;\n    let mut is_valid = true;\n    let mut is_after_dot\
    \ = false;\n    let mut is_after_dot_valid = false;\n    let mut is_before_dot_valid\
    \ = false;\n    let mut is_before_dot_started = false;\n    let mut is_after_dot_started\
    \ = false;\n    let mut is_after_dot_ended = false;\n    let mut is_before_dot_ended\
    \ = false;\n    for c in file_name.chars() {\n        if c == '.' {\n        \
    \    dot_count += 1;\n            is_before_dot = false;\n            is_after_dot\
    \ = true;\n            is_after_dot_started = true;\n            is_before_dot_ended\
    \ = true;\n        } else if c.is_digit(10) {\n            digits_count += 1;\n\
    \        } else if c.is_alphabetic() {\n            if is_before_dot {\n     \
    \           is_before_dot_started = true;\n                if c.is_ascii_lowercase()\
    \ || c.is_ascii_uppercase() {\n                    is_before_dot_valid = true;\n\
    \                }\n            } else if is_after_dot {\n                is_after_dot_started\
    \ = true;\n                if c.is_ascii_lowercase() || c.is_ascii_uppercase()\
    \ {\n                    is_after_dot_valid = true;\n                }\n     \
    \       }\n        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n\
    \    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !is_before_dot_valid\
    \ {\n        is_valid = false;\n    }\n    if !is_after_dot_valid {\n        is_valid\
    \ = false;\n    }\n    if !is_before_dot_started {\n        is_valid = false;\n\
    \    }\n    if !is_after_dot_started {\n        is_valid =", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = i;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    } else {\n        let\
    \ (sub_str_before_dot, sub_str_after_dot) = file_name.split_at(dot_index);\n \
    \       if sub_str_before_dot.is_empty() || !sub_str_before_dot.chars().next().unwrap().is_alphabetic()\
    \ {\n            is_valid = false;\n        } else if sub_str_after_dot != \"\
    .txt\" && sub_str_after_dot != \".exe\" && sub_str_after_dot != \".dll\" {\n \
    \           is_valid = false;\n        }\n    }\n    if is_valid {\n        \"\
    Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }", "    let\
    \ mut digits = 0;\n    let mut dot = false;\n    let mut valid = false;\n    let\
    \ mut first_letter = false;\n    let mut last_three = String::new();\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits +=\
    \ 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n \
    \       if c.is_alphabetic() {\n            first_letter = true;\n        }\n\
    \        if dot {\n            last_three.push(c);\n        }\n    }\n    if digits\
    \ > 3 {\n        return \"No\".to_string();\n    }\n    if !dot {\n        return\
    \ \"No\".to_string();\n    }\n    if !first_letter {\n        return \"No\".to_string();\n\
    \    }\n    if last_three == \".txt\" || last_three == \".exe\" || last_three\
    \ == \".dll\" {\n        valid = true;\n    }\n    if valid {\n        return\
    \ \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut valid = false;\n    let mut ext\
    \ = String::new();\n    let mut name = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            if dot {\n                ext.push(c);\n            } else {\n  \
    \              name.push(c);\n            }\n        }\n    }\n    if digits <=\
    \ 3 && dot && !name.is_empty() && name.chars().next().unwrap().is_alphabetic()\
    \ {\n        if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n       \
    \     valid = true;\n        }\n    }\n    if valid {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut valid = false;\n    let mut valid_ext\
    \ = false;\n    let mut valid_name = false;\n    let mut ext = String::new();\n\
    \    let mut name = String::new();\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n\
    \            dot = true;\n        } else if c.is_alphabetic() {\n            valid_name\
    \ = true;\n            name.push(c);\n        } else {\n            ext.push(c);\n\
    \        }\n    }\n    if digits <= 3 && dot && valid_name {\n        valid =\
    \ true;\n    }\n    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n\
    \        valid_ext = true;\n    }\n    if valid && valid_ext {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut first_char = false;\n   \
    \ let mut extension = false;\n    let mut extension_str = String::new();\n   \
    \ for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            first_char = true;\n        } else if c.is_alphanumeric()\
    \ {\n            extension_str.push(c);\n        }\n    }\n    if digits > 3 {\n\
    \        return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !first_char {\n        return String::from(\"No\");\n  \
    \  }\n    if extension_str == \"txt\" || extension_str == \"exe\" || extension_str\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits = 0;\n    let mut dot = false;\n    let mut first_part\
    \ = false;\n    let mut second_part = false;\n    let mut second_part_str = \"\
    \";\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n         \
    \   digits += 1;\n        }\n        if c == '.' {\n            dot = true;\n\
    \        }\n        if c.is_alphabetic() {\n            first_part = true;\n \
    \       }\n        if c == '.' {\n            second_part = true;\n        }\n\
    \        if second_part {\n            second_part_str.push(c);\n        }\n \
    \   }\n    if digits > 3 {\n        return \"No\".to_string();\n    }\n    if\
    \ !dot {\n        return \"No\".to_string();\n    }\n    if !first_part {\n  \
    \      return \"No\".to_string();\n    }\n    if second_part_str != \".txt\" &&\
    \ second_part_str != \".exe\" && second_part_str != \".dll\" {\n        return\
    \ \"No\".to_string();\n    }\n    return \"Yes\".to_string();", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (index, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            digits_count += 1;\n        } else if c == '.' {\n          \
    \  dot_count += 1;\n            dot_index = index;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let (before_dot,\
    \ after_dot) = file_name.split_at(dot_index);\n    if before_dot.is_empty() ||\
    \ !before_dot.chars().next().unwrap().is_alphabetic() {\n        is_valid = false;\n\
    \    }\n    if ![\"txt\", \"exe\", \"dll\"].contains(&after_dot) {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        \"Yes\".to_string()\n    } else\
    \ {\n        \"No\".to_string()\n    }", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    let mut index = 0;\n    let mut is_extension\
    \ = false;\n    for c in file_name.chars() {\n        if c == '.' {\n        \
    \    dot_count += 1;\n            is_extension = true;\n        }\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n        }\n        if !is_extension\
    \ {\n            name.push(c);\n        } else {\n            extension.push(c);\n\
    \        }\n        index += 1;\n    }\n    if digits_count > 3 {\n        is_valid\
    \ = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if !name.is_empty() && name.chars().next().unwrap().is_alphabetic() {\n \
    \       is_valid_name = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n \
    \   }\n    if is_valid && is_valid_extension && is_valid_name {\n        return\
    \ String::from(\"Yes\");\n    }\n    return String::from(\"No\");", "    let mut\
    \ num_digits = 0;\n    let mut dot_found = false;\n    let mut extension = \"\"\
    ;\n    let mut valid_extension = false;\n    let mut valid_prefix = false;\n \
    \   let mut valid_name = false;\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            num_digits += 1;\n        } else if c == '.' {\n\
    \            dot_found = true;\n        } else if dot_found {\n            extension.push(c);\n\
    \        } else if c.is_alphabetic() {\n            valid_prefix = true;\n   \
    \     }\n    }\n    if num_digits <= 3 && dot_found && valid_prefix {\n      \
    \  if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \            valid_extension = true;\n        }\n    }\n    if valid_extension\
    \ {\n        valid_name = true;\n    }\n    if valid_name {\n        return \"\
    Yes\".to_string();\n    } else {\n        return \"No\".to_string();\n    }",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut has_extension =\
    \ false;\n    let mut has_prefix = false;\n    let mut extension = String::new();\n\
    \    let mut prefix = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n            has_extension = true;\n\
    \        }\n        if c.is_alphabetic() {\n            has_prefix = true;\n \
    \           prefix.push(c);\n        }\n        if has_extension && !dot {\n \
    \           extension.push(c);\n        }\n    }\n    if digits > 3 || !dot ||\
    \ !has_extension || !has_prefix {\n        return String::from(\"No\");\n    }\n\
    \    if extension != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n\
    \        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_txt = false;\n\
    \    let mut after_dot_exe = false;\n    let mut after_dot_dll = false;\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits +=\
    \ 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n \
    \       if c.is_alphabetic() {\n            before_dot = true;\n        }\n  \
    \      if c == 't' {\n            after_dot_txt = true;\n        }\n        if\
    \ c == 'e' {\n            after_dot_exe = true;\n        }\n        if c == 'd'\
    \ {\n            after_dot_dll = true;\n        }\n        if c == 'x' {\n   \
    \         after_dot_exe = true;\n        }\n        if c == 'l' {\n          \
    \  after_dot_dll = true;\n        }\n    }\n    if digits > 3 {\n        return\
    \ \"No\".to_string();\n    }\n    if !dot {\n        return \"No\".to_string();\n\
    \    }\n    if !before_dot {\n        return \"No\".to_string();\n    }\n    if\
    \ after_dot_txt || after_dot_exe || after_dot_dll {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut first_letter = false;\n    let mut extension = false;\n    let mut\
    \ extension_name = String::new();\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if c.is_alphabetic() {\n            first_letter\
    \ = true;\n        } else if c.is_alphanumeric() {\n            extension_name.push(c);\n\
    \        }\n    }\n    if extension_name == \"txt\" || extension_name == \"exe\"\
    \ || extension_name == \"dll\" {\n        extension = true;\n    }\n    if digits\
    \ <= 3 && dot && first_letter && extension {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut valid_extension = false;\n    let mut valid_name\
    \ = false;\n    let mut valid_name_start = false;\n    let mut valid_name_end\
    \ = false;\n    let mut valid_extension_start = false;\n    let mut valid_extension_end\
    \ = false;\n    let mut valid_extension_length = false;\n    let mut valid_name_length\
    \ = false;\n    let mut valid_dot_position = false;\n    let mut valid_name_start_position\
    \ = false;\n    let mut valid_extension_start_position = false;\n    let mut valid_extension_end_position\
    \ = false;\n    let mut valid_name_end_position = false;\n    let mut valid_name_start_char\
    \ = false;\n    let mut valid_extension_start_char = false;\n    let mut valid_extension_end_char\
    \ = false;\n    let mut valid_name_end_char = false;\n    let mut valid_name_start_char_position\
    \ = false;\n    let mut valid_extension_start_char_position = false;\n    let\
    \ mut valid_extension_end_char_position = false;\n    let mut valid_name_end_char_position\
    \ = false;\n    let mut valid_name_start_char_position_2 = false;\n    let mut\
    \ valid_extension_start_char_position_2 = false;\n    let mut valid_extension_end_char_position_2\
    \ = false;\n    let mut valid_name_end_char_position_2 = false;\n    let mut valid_name_start_char_position_3\
    \ = false;\n    let mut valid_extension_start_char_position_3 = false;\n    let\
    \ mut valid_extension_end_char_position_3 = false;\n    let mut valid_name_end_char_position_3\
    \ = false;\n    let mut valid_name_start_char_position_4 = false;\n    let mut\
    \ valid_extension_start_char_position_4 = false;\n    let mut valid_extension_end_char_position_4\
    \ =", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut first_char\
    \ = false;\n    let mut last_char = false;\n    let mut first_char_is_digit =\
    \ false;\n    let mut last_char_is_digit = false;\n    let mut first_char_is_letter\
    \ = false;\n    let mut last_char_is_letter = false;\n    let mut last_char_is_dot\
    \ = false;\n    let mut last_char_is_txt = false;\n    let mut last_char_is_exe\
    \ = false;\n    let mut last_char_is_dll = false;\n    let mut last_char_is_txt_exe_dll\
    \ = false;\n    let mut first_char_is_letter_and_last_char_is_txt_exe_dll = false;\n\
    \    let mut first_char_is_letter_and_last_char_is_txt_exe_dll_and_count_is_three\
    \ = false;\n    let mut first_char_is_letter_and_last_char_is_txt_exe_dll_and_count_is_three_and_dot_count_is_one\
    \ = false;\n    let mut first_char_is_letter_and_last_char_is_txt_exe_dll_and_count_is_three_and_dot_count_is_one_and_last_char_is_letter\
    \ = false;\n    let mut first_char_is_letter_and_last_char_is_txt_exe_dll_and_count_is_three_and_dot_count_is_one_and_last_char_is_letter_and_first_char_is_not_digit\
    \ = false;\n    let mut first_char_is_letter_and_last_char_is_txt_exe_dll_and_count_is_three_and_dot_count_is_one_and_last_char_is_letter_and_first_char_is_not_digit_and_last_char_is_not_digit\
    \ = false;\n    let mut first_char_is_letter_and_last_char_is_txt_exe_dll_and_count_",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_first_letter = true;\n    let mut is_valid_extension = false;\n\
    \    let mut extension = String::new();\n    for c in file_name.chars() {\n  \
    \      if c == '.' {\n            dot_count += 1;\n            is_before_dot =\
    \ false;\n            is_after_dot = true;\n            is_first_letter = true;\n\
    \        } else if c.is_digit(10) {\n            digits_count += 1;\n        }\
    \ else if c.is_alphabetic() {\n            if is_after_dot {\n               \
    \ extension.push(c);\n            } else if is_first_letter {\n              \
    \  is_first_letter = false;\n            }\n        } else {\n            is_valid\
    \ = false;\n            break;\n        }\n    }\n    if is_valid {\n        if\
    \ digits_count > 3 {\n            is_valid = false;\n        } else if dot_count\
    \ != 1 {\n            is_valid = false;\n        } else if is_before_dot && is_first_letter\
    \ {\n            is_valid = false;\n        } else if is_after_dot {\n       \
    \     if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n                is_valid_extension = true;\n            }\n            is_valid\
    \ = is_valid_extension;\n        }\n    }\n    if is_valid {\n        \"Yes\"\
    .to_string()\n    } else {\n        \"No\".to_string()\n    }", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n    let mut\
    \ after_dot = false;\n    let mut after_dot_txt = false;\n    let mut after_dot_exe\
    \ = false;\n    let mut after_dot_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n        }\n        if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n        if c == 't' {\n      \
    \      after_dot_txt = true;\n        }\n        if c == 'e' {\n            after_dot_exe\
    \ = true;\n        }\n        if c == 'd' {\n            after_dot_dll = true;\n\
    \        }\n        if c == 'x' {\n            after_dot_exe = true;\n       \
    \ }\n        if c == 'l' {\n            after_dot_dll = true;\n        }\n   \
    \ }\n    if digits > 3 {\n        return \"No\".to_string();\n    }\n    if !dot\
    \ {\n        return \"No\".to_string();\n    }\n    if !before_dot {\n       \
    \ return \"No\".to_string();\n    }\n    if after_dot_txt || after_dot_exe ||\
    \ after_dot_dll {\n        return \"Yes\".to_string();\n    }\n    \"No\".to_string()",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut extension = String::new();\n    let mut valid = true;\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c.is_digit(10) {\n       \
    \     count += 1;\n        }\n        if c == '.' {\n            dot_count +=\
    \ 1;\n            dot_index = i;\n        }\n    }\n    if count > 3 || dot_count\
    \ != 1 {\n        valid = false;\n    }\n    if valid {\n        extension = file_name.chars().skip(dot_index\
    \ + 1).collect();\n        if !(extension == \"txt\" || extension == \"exe\" ||\
    \ extension == \"dll\") {\n            valid = false;\n        }\n    }\n    if\
    \ valid {\n        let mut prefix = String::new();\n        for c in file_name.chars().take(dot_index)\
    \ {\n            if c.is_alphabetic() {\n                prefix.push(c);\n   \
    \         }\n        }\n        if prefix.is_empty() {\n            valid = false;\n\
    \        }\n    }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n\
    \        \"No\".to_string()\n    }", "    let mut digits = 0;\n    let mut dot\
    \ = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    let mut after_dot_str = String::new();\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        }\n        if\
    \ c == '.' {\n            dot = true;\n        }\n        if !dot && c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n        if dot && !c.is_alphabetic()\
    \ {\n            after_dot = true;\n        }\n        if after_dot {\n      \
    \      after_dot_str.push(c);\n        }\n    }\n    if digits > 3 || !dot ||\
    \ !before_dot || !after_dot || !(after_dot_str == \"txt\" || after_dot_str ==\
    \ \"exe\" || after_dot_str == \"dll\") {\n        return String::from(\"No\");\n\
    \    }\n    return String::from(\"Yes\");", "    let mut digits_count = 0;\n \
    \   let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_before_dot\
    \ = true;\n    let mut is_after_dot = false;\n    let mut is_after_dot_valid =\
    \ false;\n    let mut is_before_dot_valid = false;\n    let mut is_before_dot_started\
    \ = false;\n    let mut is_after_dot_started = false;\n    let mut before_dot\
    \ = String::new();\n    let mut after_dot = String::new();\n    for c in file_name.chars()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            is_before_dot\
    \ = false;\n            is_after_dot = true;\n            continue;\n        }\n\
    \        if is_before_dot {\n            if c.is_alphabetic() {\n            \
    \    is_before_dot_started = true;\n                before_dot.push(c);\n    \
    \        } else if c.is_digit(10) {\n                digits_count += 1;\n    \
    \        } else {\n                is_valid = false;\n                break;\n\
    \            }\n        } else if is_after_dot {\n            if c.is_alphabetic()\
    \ {\n                is_after_dot_started = true;\n                after_dot.push(c);\n\
    \            } else if c.is_digit(10) {\n                digits_count += 1;\n\
    \            } else {\n                is_valid = false;\n                break;\n\
    \            }\n        }\n    }\n    if is_before_dot_started && is_after_dot_started\
    \ {\n        is_before_dot_valid = true;\n    }\n    if after_dot == \"txt\" ||\
    \ after_dot == \"exe\" || after_dot == \"dll\" {\n        is_after_dot_valid =\
    \ true;\n    }\n    if is_valid && is_before_dot_valid && is_after_dot_valid &&\
    \ digits_count <= 3 && dot_count == 1 {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    let mut after_dot_str = String::new();\n    for c in file_name.chars() {\n\
    \        if c == '.' {\n            dot = true;\n            continue;\n     \
    \   }\n        if !dot {\n            if c.is_digit(10) {\n                digits\
    \ += 1;\n            }\n            if c.is_alphabetic() {\n                before_dot\
    \ = true;\n            }\n        } else {\n            after_dot_str.push(c);\n\
    \        }\n    }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\"\
    \ || after_dot_str == \"dll\" {\n        after_dot = true;\n    }\n    if digits\
    \ <= 3 && dot && before_dot && after_dot {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_valid = false;\n    let mut is_extension_valid\
    \ = false;\n    let mut is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut is_substring_before_dot_empty = true;\n    let mut is_substring_after_dot_empty\
    \ = true;\n    let mut is_substring_before_dot_started = false;\n    let mut is_substring_after_dot_started\
    \ = false;\n    let mut is_substring_before_dot_finished = false;\n    let mut\
    \ is_substring_after_dot_finished = false;\n    let mut is_substring_before_dot_started_with_letter\
    \ = false;\n    let mut is_substring_after_dot_started_with_letter = false;\n\
    \    let mut is_substring_before_dot_started_with_digit = false;\n    let mut\
    \ is_substring_after_dot_started_with_digit = false;\n    let mut is_substring_before_dot_started_with_underscore\
    \ = false;\n    let mut is_substring_after_dot_started_with_underscore = false;\n\
    \    let mut is_substring_before_dot_started_with_space = false;\n    let mut\
    \ is_substring_after_dot_started_with_space = false;\n    let mut is_substring_before_dot_started_with_special_char\
    \ = false;\n    let mut is_substring_after_dot_started_with_special_char = false;\n\
    \    let mut is_substring_before_dot_started_with_dot = false;\n    let mut is_substring_after_dot_started_with_dot\
    \ = false;\n    let mut is_substring_before_dot_started_with_hyphen = false;\n\
    \    let mut is_substring_after_dot_started_with_hyphen = false;\n    let mut\
    \ is_sub", "    let mut digits = 0;\n    let mut dot = false;\n    let mut after_dot\
    \ = false;\n    let mut after_dot_str = String::new();\n    let mut before_dot_str\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        }\n        if c == '.' {\n            dot\
    \ = true;\n        }\n        if dot {\n            after_dot = true;\n      \
    \      after_dot_str.push(c);\n        } else {\n            before_dot_str.push(c);\n\
    \        }\n    }\n    if digits > 3 || !dot || before_dot_str.is_empty() || !before_dot_str.chars().next().unwrap().is_alphabetic()\
    \ || !after_dot || !(after_dot_str == \".txt\" || after_dot_str == \".exe\" ||\
    \ after_dot_str == \".dll\") {\n        \"No\".to_string()\n    } else {\n   \
    \     \"Yes\".to_string()\n    }", "    let mut digits = 0;\n    let mut dot =\
    \ false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n  \
    \  let mut valid_after_dot = false;\n    for c in file_name.chars() {\n      \
    \  if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n\
    \            dot = true;\n        } else if c.is_alphabetic() {\n            before_dot\
    \ = true;\n        } else if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n\
    \            after_dot = true;\n        }\n    }\n    if after_dot {\n       \
    \ if file_name.ends_with(\"txt\") || file_name.ends_with(\"exe\") || file_name.ends_with(\"\
    dll\") {\n            valid_after_dot = true;\n        }\n    }\n    if digits\
    \ <= 3 && dot && before_dot && valid_after_dot {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut ext = false;\n    let mut valid = true;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let\
    \ mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n   \
    \ let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n\
    \    let mut g = 0;\n    let mut h = 0;\n    let mut ii = 0;\n    let mut jj =\
    \ 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut\
    \ nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n   \
    \ let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu =\
    \ 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut\
    \ yy = 0;\n    let mut zz = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n   \
    \ let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff =\
    \ 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut iii = 0;\n    let\
    \ mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm =\
    \ 0;\n    let", "    let mut digits = 0;\n    let mut dot = false;\n    let mut\
    \ before_dot = false;\n    let mut after_dot = false;\n    let mut after_dot_str\
    \ = String::new();\n    for c in file_name.chars() {\n        if c == '.' {\n\
    \            dot = true;\n            continue;\n        }\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n            continue;\n        }\n        if !dot\
    \ {\n            if !before_dot {\n                before_dot = c.is_alphabetic();\n\
    \            }\n        } else {\n            after_dot_str.push(c);\n       \
    \ }\n    }\n    if digits > 3 {\n        return String::from(\"No\");\n    }\n\
    \    if !dot {\n        return String::from(\"No\");\n    }\n    if !before_dot\
    \ {\n        return String::from(\"No\");\n    }\n    if after_dot_str == \"txt\"\
    \ || after_dot_str == \"exe\" || after_dot_str == \"dll\" {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut first_char = false;\n    let mut extension\
    \ = false;\n    let mut extension_str = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            first_char = true;\n        } else if c.is_alphanumeric() {\n   \
    \         extension_str.push(c);\n        }\n    }\n    if digits > 3 {\n    \
    \    return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !first_char {\n        return String::from(\"No\");\n  \
    \  }\n    if extension_str == \"txt\" || extension_str == \"exe\" || extension_str\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits = 0;\n    let mut dot = false;\n    let mut valid\
    \ = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    let mut after_dot_valid = false;\n    for c in file_name.chars() {\n    \
    \    if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.'\
    \ {\n            dot = true;\n        } else if c.is_alphabetic() {\n        \
    \    if dot {\n                after_dot = true;\n            } else {\n     \
    \           before_dot = true;\n            }\n        }\n    }\n    if digits\
    \ <= 3 && dot && before_dot && after_dot {\n        let mut after_dot_str = String::new();\n\
    \        let mut after_dot_iter = file_name.split('.');\n        after_dot_iter.next();\n\
    \        after_dot_str = after_dot_iter.next().unwrap().to_string();\n       \
    \ if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str ==\
    \ \"dll\" {\n            after_dot_valid = true;\n        }\n    }\n    if digits\
    \ <= 3 && dot && before_dot && after_dot && after_dot_valid {\n        valid =\
    \ true;\n    }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n  \
    \      \"No\".to_string()\n    }", "    let mut digits = 0;\n    let mut dot =\
    \ false;\n    let mut valid = false;\n    let mut before_dot = false;\n    let\
    \ mut after_dot = false;\n    let mut after_dot_valid = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n        }\n        if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n        if c == '.' && after_dot\
    \ {\n            after_dot_valid = true;\n        }\n        if c == '.' && !after_dot\
    \ {\n            after_dot = true;\n        }\n    }\n    if digits <= 3 && dot\
    \ && before_dot && after_dot_valid {\n        valid = true;\n    }\n    if valid\
    \ {\n        return \"Yes\".to_string();\n    } else {\n        return \"No\"\
    .to_string();\n    }", "    let mut digits = 0;\n    let mut dot = false;\n  \
    \  let mut valid = false;\n    let mut first_letter = false;\n    let mut extension\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            first_letter = true;\n   \
    \     } else if c == 't' {\n            extension = true;\n        }\n    }\n\
    \    if digits <= 3 && dot && first_letter && extension {\n        valid = true;\n\
    \    }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n        \"\
    No\".to_string()\n    }", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut dot_index = 0;\n    let mut valid_extension = false;\n   \
    \ let mut valid_name = false;\n    let mut valid_file = false;\n    let mut extension\
    \ = String::new();\n    let mut name = String::new();\n\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n\n    if dot_count == 1 {\n        extension = file_name.chars().skip(dot_index\
    \ + 1).collect();\n        name = file_name.chars().take(dot_index).collect();\n\
    \        valid_extension = extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\";\n        valid_name = name.chars().next().unwrap().is_alphabetic();\n\
    \    }\n\n    valid_file = digits_count <= 3 && valid_extension && valid_name;\n\
    \n    if valid_file {\n        return String::from(\"Yes\");\n    } else {\n \
    \       return String::from(\"No\");\n    }", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut extension = String::new();\n\
    \    let mut prefix = String::new();\n    for c in file_name.chars() {\n     \
    \   if c.is_digit(10) {\n            digits_count += 1;\n        }\n        if\
    \ c == '.' {\n            dot_count += 1;\n        }\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let mut split\
    \ = file_name.split('.');\n    prefix = split.next().unwrap().to_string();\n \
    \   extension = split.next().unwrap().to_string();\n    if prefix.len() == 0 {\n\
    \        is_valid = false;\n    }\n    if extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n    }\n\
    \    if prefix.chars().next().unwrap().is_alphabetic() {\n        is_valid_prefix\
    \ = true;\n    }\n    if is_valid && is_valid_extension && is_valid_prefix {\n\
    \        return \"Yes\".to_string();\n    }\n    return \"No\".to_string();",
  "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n\
    \    let mut first_letter = false;\n    let mut extension = false;\n    let mut\
    \ extension_index = 0;\n    let mut extension_length = 0;\n    let mut extension_string\
    \ = String::new();\n    for (index, ch) in file_name.chars().enumerate() {\n \
    \       if ch.is_digit(10) {\n            count += 1;\n        } else if ch ==\
    \ '.' {\n            dot_count += 1;\n            dot_index = index;\n       \
    \ } else if ch.is_alphabetic() {\n            first_letter = true;\n        }\n\
    \    }\n    if count > 3 || dot_count != 1 || !first_letter {\n        return\
    \ String::from(\"No\");\n    }\n    extension_index = dot_index + 1;\n    extension_length\
    \ = file_name.len() - extension_index;\n    extension_string = file_name[extension_index..].to_string();\n\
    \    if extension_length == 3 {\n        if extension_string == \"txt\" || extension_string\
    \ == \"exe\" || extension_string == \"dll\" {\n            extension = true;\n\
    \        }\n    }\n    if extension {\n        return String::from(\"Yes\");\n\
    \    } else {\n        return String::from(\"No\");\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_letter = true;\n    let mut is_first_letter_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension_index\
    \ = 0;\n    let mut extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n        if is_first_letter {\n            if c.is_alphabetic() {\n\
    \                is_first_letter_valid = true;\n                is_first_letter\
    \ = false;\n            }\n        }\n        if i > dot_index {\n           \
    \ extension.push(c);\n        }\n    }\n    if digits_count > 3 {\n        is_valid\
    \ = false;\n    }\n    if dot_count != 1 {\n        is_valid = false;\n    }\n\
    \    if !is_first_letter_valid {\n        is_valid = false;\n    }\n    if extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n        is_extension_valid\
    \ = true;\n    }\n    if !is_extension_valid {\n        is_valid = false;\n  \
    \  }\n    if is_valid {\n        return String::from(\"Yes\");\n    }\n    return\
    \ String::from(\"No\");", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut valid = false;\n    let mut extension = String::new();\n    let mut\
    \ name = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if dot {\n            extension.push(c);\n        } else\
    \ {\n            name.push(c);\n        }\n    }\n    if digits <= 3 && dot &&\
    \ !name.is_empty() && name.chars().next().unwrap().is_alphabetic() {\n       \
    \ if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \            valid = true;\n        }\n    }\n    if valid {\n        \"Yes\"\
    .to_string()\n    } else {\n        \"No\".to_string()\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_valid = true;\n    let mut\
    \ is_first_letter = true;\n    let mut is_first_letter_valid = false;\n    let\
    \ mut is_extension_valid = false;\n    let mut extension = String::new();\n  \
    \  for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_first_letter = true;\n        }\n        if is_first_letter {\n   \
    \         if c.is_alphabetic() {\n                is_first_letter_valid = true;\n\
    \                is_first_letter = false;\n            }\n        }\n        if\
    \ c == '.' {\n            extension = file_name.chars().skip_while(|&c| c != '.').skip(1).collect();\n\
    \            if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n                is_extension_valid = true;\n            }\n        }\n\
    \    }\n    if digits_count > 3 || dot_count != 1 || !is_first_letter_valid ||\
    \ !is_extension_valid {\n        is_valid = false;\n    }\n    if is_valid {\n\
    \        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_substring_before_dot_valid = false;\n    let mut is_substring_after_dot_valid\
    \ = false;\n    let mut substring_after_dot = String::new();\n    let mut substring_before_dot\
    \ = String::new();\n    let mut i = 0;\n    while i < file_name.len() {\n    \
    \    if file_name.chars().nth(i).unwrap().is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if file_name.chars().nth(i).unwrap() == '.' {\n  \
    \          dot_count += 1;\n        }\n        i += 1;\n    }\n    if digits_count\
    \ > 3 || dot_count != 1 {\n        is_valid = false;\n    }\n    let mut i = 0;\n\
    \    while i < file_name.len() {\n        if file_name.chars().nth(i).unwrap()\
    \ == '.' {\n            let mut j = i + 1;\n            while j < file_name.len()\
    \ {\n                substring_after_dot.push(file_name.chars().nth(j).unwrap());\n\
    \                j += 1;\n            }\n            break;\n        }\n     \
    \   substring_before_dot.push(file_name.chars().nth(i).unwrap());\n        i +=\
    \ 1;\n    }\n    if substring_before_dot.len() > 0 {\n        let mut i = 0;\n\
    \        while i < substring_before_dot.len() {\n            if substring_before_dot.chars().nth(i).unwrap().is_alphabetic()\
    \ {\n                is_substring_before_dot_valid = true;\n                break;\n\
    \            }\n            i += 1;\n        }\n    }\n    if substring_after_dot\
    \ == \"txt\" || substring_after_dot == \"exe\" || substring_after_dot == \"dll\"\
    \ {\n        is_substring_after_dot_valid = true;\n    }", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut extension = false;\n    let mut\
    \ extension_name = String::new();\n    let mut extension_name_valid = false;\n\
    \    let mut extension_name_valid_list = vec![\"txt\", \"exe\", \"dll\"];\n  \
    \  let mut extension_name_valid_list_iter = extension_name_valid_list.iter();\n\
    \    let mut extension_name_valid_list_iter_next = extension_name_valid_list_iter.next();\n\
    \    let mut extension_name_valid_list_iter_next_unwrap = extension_name_valid_list_iter_next.unwrap();\n\
    \    let mut extension_name_valid_list_iter_next_unwrap_clone = extension_name_valid_list_iter_next_unwrap.clone();\n\
    \    let mut extension_name_valid_list_iter_next_unwrap_clone_clone = extension_name_valid_list_iter_next_unwrap_clone.clone();\n\
    \    let mut extension_name_valid_list_iter_next_unwrap_clone_clone_clone = extension_name_valid_list_iter_next_unwrap_clone_clone.clone();\n\
    \    let mut extension_name_valid_list_iter_next_unwrap_clone_clone_clone_clone\
    \ = extension_name_valid_list_iter_next_unwrap_clone_clone_clone.clone();\n  \
    \  let mut extension_name_valid_list_iter_next_unwrap_clone_clone_clone_clone_clone\
    \ = extension_name_valid_list_iter_next_unwrap_clone_clone_clone_clone.clone();\n\
    \    let mut extension_name_valid_list_iter_next_unwrap_clone_clone_clone_clone_clone_clone\
    \ = extension_name_valid_list_iter_next_unwrap_clone_clone_clone_clone_clone.clone();\n\
    \    let mut extension_name_valid_list_iter_next_unwrap_clone_clone_clone_clone_clone_clone_clone\
    \ = extension_name_valid_list_iter_next_unwrap_clone_clone_clone_clone_clone_clone.clone();\n\
    \    let mut", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n  \
    \  let mut dot_index = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension\
    \ = false;\n    let mut is_valid_prefix = false;\n    let mut is_valid_digits\
    \ = true;\n    let mut is_valid_dot = true;\n    let mut is_valid_extension_length\
    \ = true;\n    let mut is_valid_prefix_length = true;\n    let mut is_valid_extension_char\
    \ = true;\n    let mut is_valid_prefix_char = true;\n    let mut is_valid_extension_char_count\
    \ = true;\n    let mut is_valid_prefix_char_count = true;\n    let mut is_valid_extension_char_count_2\
    \ = true;\n    let mut is_valid_prefix_char_count_2 = true;\n    let mut is_valid_extension_char_count_3\
    \ = true;\n    let mut is_valid_prefix_char_count_3 = true;\n    let mut is_valid_extension_char_count_4\
    \ = true;\n    let mut is_valid_prefix_char_count_4 = true;\n    let mut is_valid_extension_char_count_5\
    \ = true;\n    let mut is_valid_prefix_char_count_5 = true;\n    let mut is_valid_extension_char_count_6\
    \ = true;\n    let mut is_valid_prefix_char_count_6 = true;\n    let mut is_valid_extension_char_count_7\
    \ = true;\n    let mut is_valid_prefix_char_count_7 = true;\n    let mut is_valid_extension_char_count_8\
    \ = true;\n    let mut is_valid_prefix_char_count_8 = true;\n    let mut is_valid_extension_char_count_9\
    \ = true;\n    let mut is_valid_prefix_char_count_9 = true;\n    let mut is_valid_extension_char_count_10\
    \ = true;\n    let mut is_valid_prefix_char_count_10 =", "    let mut digits =\
    \ 0;\n    let mut dot = false;\n    let mut alpha = false;\n    let mut suffix\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            alpha = true;\n        } else\
    \ if c == 't' || c == 'e' || c == 'x' || c == 'd' {\n            suffix = true;\n\
    \        }\n    }\n    if digits > 3 || !dot || !alpha || !suffix {\n        return\
    \ \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let mut digits =\
    \ 0;\n    let mut dot = false;\n    let mut valid = false;\n    let mut first_letter\
    \ = false;\n    let mut extension = false;\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n    \
    \        first_letter = true;\n        } else if c == 't' {\n            extension\
    \ = true;\n        }\n    }\n    if digits <= 3 && dot && first_letter && extension\
    \ {\n        valid = true;\n    }\n    if valid {\n        return \"Yes\".to_string();\n\
    \    } else {\n        return \"No\".to_string();\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut first_char_is_letter = false;\n\
    \    let mut last_three_chars = String::new();\n    let mut last_char = ' ';\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \   }\n        if !first_char_is_letter && c.is_alphabetic() {\n            first_char_is_letter\
    \ = true;\n        }\n        if c != '.' {\n            last_three_chars.push(c);\n\
    \        }\n        last_char = c;\n    }\n    if digits_count > 3 || dot_count\
    \ != 1 || !first_char_is_letter || last_char == '.' {\n        return String::from(\"\
    No\");\n    }\n    if last_three_chars.len() > 3 {\n        last_three_chars.remove(0);\n\
    \    }\n    if last_three_chars == \"txt\" || last_three_chars == \"exe\" || last_three_chars\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut valid = true;\n    let mut extension = String::new();\n  \
    \  let mut valid_extension = false;\n    let mut valid_prefix = false;\n    let\
    \ mut valid_digit = true;\n    let mut valid_length = true;\n    let mut valid_dot\
    \ = true;\n    let mut valid_extension_length = true;\n    let mut valid_prefix_length\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            count += 1;\n        }\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        }\n    }\n    if count > 3 {\n  \
    \      valid_digit = false;\n    }\n    if dot_count != 1 {\n        valid_dot\
    \ = false;\n    }\n    if dot_index == 0 || dot_index == file_name.len() - 1 {\n\
    \        valid_length = false;\n    }\n    if valid_length {\n        extension\
    \ = file_name[dot_index + 1..].to_string();\n        if extension == \"txt\" ||\
    \ extension == \"exe\" || extension == \"dll\" {\n            valid_extension\
    \ = true;\n        }\n        if valid_extension {\n            if file_name[..dot_index].len()\
    \ > 3 {\n                valid_prefix_length = false;\n            }\n       \
    \     if file_name[..dot_index].len() < 1 {\n                valid_prefix_length\
    \ = false;\n            }\n            for c in file_name[..dot_index].chars()\
    \ {\n                if c.is_alphabetic() {\n                    valid_prefix\
    \ = true;\n                }\n            }\n        }\n    }\n    valid = valid_digit\
    \ && valid_dot && valid_length && valid_extension && valid_prefix && valid_prefix_length\
    \ && valid_extension_length;\n    if valid {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut ext = false;\n    let mut first_letter = false;\n\
    \    let mut ext_txt = false;\n    let mut ext_exe = false;\n    let mut ext_dll\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        }\n        if c == '.' {\n            dot = true;\n\
    \        }\n        if c == '.' && !ext {\n            ext = true;\n        }\n\
    \        if c.is_alphabetic() && !first_letter {\n            first_letter = true;\n\
    \        }\n        if ext && c == 't' {\n            ext_txt = true;\n      \
    \  }\n        if ext && c == 'e' {\n            ext_exe = true;\n        }\n \
    \       if ext && c == 'd' {\n            ext_dll = true;\n        }\n    }\n\
    \    if digits > 3 || !dot || !first_letter || !ext || !(ext_txt || ext_exe ||\
    \ ext_dll) {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()",
  "    let mut dot_count = 0;\n    let mut digit_count = 0;\n    let mut first_char\
    \ = false;\n    let mut last_three = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digit_count += 1;\n        }\n \
    \       if c == '.' {\n            dot_count += 1;\n        }\n        if !first_char\
    \ && c.is_alphabetic() {\n            first_char = true;\n        }\n        if\
    \ c.is_alphabetic() {\n            last_three.push(c);\n        }\n    }\n   \
    \ if dot_count == 1 && digit_count <= 3 && first_char &&\n        (last_three\
    \ == \"txt\" || last_three == \"exe\" || last_three == \"dll\") {\n        return\
    \ \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut digits =\
    \ 0;\n    let mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot\
    \ = false;\n    let mut after_dot_value = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if dot {\n            after_dot\
    \ = true;\n            after_dot_value.push(c);\n        } else {\n          \
    \  before_dot = true;\n        }\n    }\n    if digits > 3 || !dot || !before_dot\
    \ || !after_dot || ![\"txt\", \"exe\", \"dll\"].contains(&after_dot_value.as_str())\
    \ {\n        \"No\".to_string()\n    } else {\n        \"Yes\".to_string()\n \
    \   }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ after_dot = false;\n    let mut after_dot_str = String::new();\n    let mut\
    \ before_dot_str = String::new();\n    for c in file_name.chars() {\n        if\
    \ c == '.' {\n            dot_count += 1;\n            after_dot = true;\n   \
    \     } else if c.is_digit(10) {\n            digits_count += 1;\n        } else\
    \ if after_dot {\n            after_dot_str.push(c);\n        } else {\n     \
    \       before_dot_str.push(c);\n        }\n    }\n    if digits_count > 3 ||\
    \ dot_count != 1 || before_dot_str.is_empty() || !before_dot_str.chars().next().unwrap().is_alphabetic()\
    \ {\n        return String::from(\"No\");\n    }\n    if after_dot_str == \"txt\"\
    \ || after_dot_str == \"exe\" || after_dot_str == \"dll\" {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits_count =\
    \ 0;\n    let mut dot_count = 0;\n    let mut first_char_is_letter = false;\n\
    \    let mut last_three_chars = String::new();\n    let mut last_char_is_letter\
    \ = false;\n    let mut last_char_is_dot = false;\n    let mut last_char_is_digit\
    \ = false;\n    let mut last_char_is_underscore = false;\n    let mut last_char_is_hyphen\
    \ = false;\n    let mut last_char_is_space = false;\n    let mut last_char_is_comma\
    \ = false;\n    let mut last_char_is_semicolon = false;\n    let mut last_char_is_colon\
    \ = false;\n    let mut last_char_is_slash = false;\n    let mut last_char_is_backslash\
    \ = false;\n    let mut last_char_is_question_mark = false;\n    let mut last_char_is_exclamation_mark\
    \ = false;\n    let mut last_char_is_apostrophe = false;\n    let mut last_char_is_quotation_mark\
    \ = false;\n    let mut last_char_is_left_parenthesis = false;\n    let mut last_char_is_right_parenthesis\
    \ = false;\n    let mut last_char_is_left_bracket = false;\n    let mut last_char_is_right_bracket\
    \ = false;\n    let mut last_char_is_left_brace = false;\n    let mut last_char_is_right_brace\
    \ = false;\n    let mut last_char_is_left_angle_bracket = false;\n    let mut\
    \ last_char_is_right_angle_bracket = false;\n    let mut last_char_is_ampersand\
    \ = false;\n    let mut last_char_is_at_sign = false;\n    let mut last_char_is_hash_sign\
    \ = false;\n    let mut last_char_is_dollar_sign = false;\n    let mut last_char_is_percent_sign\
    \ = false;\n    let mut last_char_is_caret = false;\n", "    let mut digits =\
    \ 0;\n    let mut dot = false;\n    let mut valid = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot = true;\n\
    \            continue;\n        }\n        if !dot {\n            if c.is_alphabetic()\
    \ {\n                before_dot = true;\n            }\n            if c.is_digit(10)\
    \ {\n                digits += 1;\n            }\n        } else {\n         \
    \   after_dot_str.push(c);\n        }\n    }\n    if digits <= 3 && dot && before_dot\
    \ {\n        if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n            valid = true;\n        }\n    }\n    if valid {\n\
    \        return String::from(\"Yes\");\n    }\n    return String::from(\"No\"\
    );", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_before_dot = true;\n    let mut is_after_dot = false;\n\
    \    let mut is_first_letter = true;\n    let mut is_first_after_dot = true;\n\
    \    let mut is_after_dot_valid = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            is_before_dot = false;\n            is_after_dot = true;\n\
    \            is_first_after_dot = true;\n        } else if is_before_dot {\n \
    \           if is_first_letter {\n                if !c.is_alphabetic() {\n  \
    \                  is_valid = false;\n                    break;\n           \
    \     }\n                is_first_letter = false;\n            }\n           \
    \ if c.is_digit(10) {\n                digits_count += 1;\n            }\n   \
    \     } else if is_after_dot {\n            if is_first_after_dot {\n        \
    \        if !c.is_alphabetic() {\n                    is_valid = false;\n    \
    \                break;\n                }\n                is_first_after_dot\
    \ = false;\n            }\n            after_dot_str.push(c);\n        }\n   \
    \ }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n    if dot_count\
    \ != 1 {\n        is_valid = false;\n    }\n    if after_dot_str == \"txt\" ||\
    \ after_dot_str == \"exe\" || after_dot_str == \"dll\" {\n        is_after_dot_valid\
    \ = true;\n    }\n    if is_valid && is_after_dot_valid {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut num_digits = 0;\n\
    \    let mut dot_found = false;\n    let mut dot_index = 0;\n    let mut last_char\
    \ = ' ';\n    for (i, c) in file_name.chars().enumerate() {\n        if c.is_digit(10)\
    \ {\n            num_digits += 1;\n        }\n        if c == '.' {\n        \
    \    dot_found = true;\n            dot_index = i;\n        }\n        last_char\
    \ = c;\n    }\n    if num_digits > 3 || !dot_found || dot_index == 0 || !last_char.is_alphabetic()\
    \ {\n        return \"No\".to_string();\n    }\n    let ext = &file_name[dot_index\
    \ + 1..];\n    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n     \
    \   return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n   \
    \ let mut after_dot = false;\n    let mut after_dot_str = String::new();\n   \
    \ for c in file_name.chars() {\n        if c == '.' {\n            dot = true;\n\
    \            continue;\n        }\n        if !dot {\n            if !before_dot\
    \ {\n                if !c.is_ascii_alphabetic() {\n                    return\
    \ \"No\".to_string();\n                }\n                before_dot = true;\n\
    \            }\n        } else {\n            if !after_dot {\n              \
    \  if !c.is_ascii_alphabetic() {\n                    return \"No\".to_string();\n\
    \                }\n                after_dot = true;\n            }\n       \
    \     after_dot_str.push(c);\n        }\n        if c.is_ascii_digit() {\n   \
    \         digits += 1;\n        }\n    }\n    if digits > 3 {\n        return\
    \ \"No\".to_string();\n    }\n    if !dot {\n        return \"No\".to_string();\n\
    \    }\n    if !before_dot {\n        return \"No\".to_string();\n    }\n    if\
    \ !after_dot {\n        return \"No\".to_string();\n    }\n    if after_dot_str\
    \ != \"txt\" && after_dot_str != \"exe\" && after_dot_str != \"dll\" {\n     \
    \   return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut valid = false;\n    let mut\
    \ extension = \"\";\n    for (i, c) in file_name.chars().enumerate() {\n     \
    \   if c.is_digit(10) {\n            digits += 1;\n        }\n        if c ==\
    \ '.' {\n            dot = true;\n            extension = &file_name[i+1..];\n\
    \        }\n        if i == 0 && c.is_ascii_alphabetic() {\n            valid\
    \ = true;\n        }\n    }\n    if digits > 3 || !dot || !valid || extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n        return\
    \ \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let mut digits =\
    \ 0;\n    let mut dot = false;\n    let mut ext = false;\n    let mut valid =\
    \ true;\n    let mut before_dot = false;\n    let mut after_dot = false;\n   \
    \ for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n\
    \        if !before_dot && c.is_alphabetic() {\n            before_dot = true;\n\
    \        }\n        if dot && !after_dot && c.is_alphabetic() {\n            after_dot\
    \ = true;\n        }\n        if dot && after_dot && !c.is_alphabetic() {\n  \
    \          valid = false;\n            break;\n        }\n    }\n    if digits\
    \ > 3 {\n        valid = false;\n    }\n    if !dot {\n        valid = false;\n\
    \    }\n    if !before_dot {\n        valid = false;\n    }\n    if !after_dot\
    \ {\n        valid = false;\n    }\n    if after_dot {\n        let ext = &file_name[file_name.find('.').unwrap()\
    \ + 1..];\n        if ext != \"txt\" && ext != \"exe\" && ext != \"dll\" {\n \
    \           valid = false;\n        }\n    }\n    if valid {\n        \"Yes\"\
    .to_string()\n    } else {\n        \"No\".to_string()\n    }", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut first_part = false;\n    let mut\
    \ second_part = false;\n    let mut second_part_str = String::new();\n    for\
    \ c in file_name.chars() {\n        if c == '.' {\n            dot = true;\n \
    \           continue;\n        }\n        if !dot {\n            if c.is_digit(10)\
    \ {\n                digits += 1;\n            }\n            if !first_part &&\
    \ c.is_alphabetic() {\n                first_part = true;\n            }\n   \
    \     } else {\n            second_part_str.push(c);\n        }\n    }\n    if\
    \ digits > 3 {\n        return String::from(\"No\");\n    }\n    if !dot {\n \
    \       return String::from(\"No\");\n    }\n    if !first_part {\n        return\
    \ String::from(\"No\");\n    }\n    if second_part_str == \"txt\" || second_part_str\
    \ == \"exe\" || second_part_str == \"dll\" {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n    let\
    \ mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    let mut after_dot_str = String::new();\n    for c in file_name.chars() {\n\
    \        if c == '.' {\n            dot = true;\n            continue;\n     \
    \   }\n        if !dot {\n            if c.is_digit(10) {\n                digits\
    \ += 1;\n            }\n            if c.is_alphabetic() {\n                before_dot\
    \ = true;\n            }\n        } else {\n            after_dot_str.push(c);\n\
    \        }\n    }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\"\
    \ || after_dot_str == \"dll\" {\n        after_dot = true;\n    }\n    if digits\
    \ <= 3 && dot && before_dot && after_dot {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits_count = 0;\n\
    \    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_empty = true;\n    let mut is_letter = false;\n    let\
    \ mut is_extension = false;\n    let mut extension = String::new();\n    for (i,\
    \ c) in file_name.chars().enumerate() {\n        if c == '.' {\n            dot_count\
    \ += 1;\n            dot_index = i;\n        } else if c.is_digit(10) {\n    \
    \        digits_count += 1;\n        } else if c.is_alphabetic() {\n         \
    \   is_empty = false;\n            is_letter = true;\n        }\n    }\n    if\
    \ digits_count > 3 || dot_count != 1 || !is_letter || is_empty {\n        is_valid\
    \ = false;\n    } else {\n        extension = file_name.chars().skip(dot_index\
    \ + 1).collect();\n        if extension == \"txt\" || extension == \"exe\" ||\
    \ extension == \"dll\" {\n            is_extension = true;\n        }\n    }\n\
    \    if is_valid && is_extension {\n        return String::from(\"Yes\");\n  \
    \  } else {\n        return String::from(\"No\");\n    }", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut ext = false;\n    let mut first_char\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            first_char = true;\n     \
    \   } else if c == 't' {\n            ext = true;\n        } else if c == 'x'\
    \ && ext {\n            ext = true;\n        } else if c == 'e' && ext {\n   \
    \         ext = true;\n        } else if c == 'd' && ext {\n            ext =\
    \ true;\n        } else if c == 'l' && ext {\n            ext = true;\n      \
    \  } else {\n            return \"No\".to_string();\n        }\n    }\n    if\
    \ digits > 3 || !dot || !first_char || !ext {\n        return \"No\".to_string();\n\
    \    }\n    \"Yes\".to_string()", "    let mut digits = 0;\n    let mut dot =\
    \ false;\n    let mut valid = false;\n    let mut before_dot = false;\n    let\
    \ mut after_dot = false;\n    let mut after_dot_txt = false;\n    let mut after_dot_exe\
    \ = false;\n    let mut after_dot_dll = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n        }\n        if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n        if c == 't' {\n      \
    \      after_dot_txt = true;\n        }\n        if c == 'e' {\n            after_dot_exe\
    \ = true;\n        }\n        if c == 'd' {\n            after_dot_dll = true;\n\
    \        }\n    }\n    if digits <= 3 && dot && before_dot {\n        if after_dot_txt\
    \ {\n            valid = true;\n        }\n        if after_dot_exe {\n      \
    \      valid = true;\n        }\n        if after_dot_dll {\n            valid\
    \ = true;\n        }\n    }\n    if valid {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    let mut after_dot_str = String::new();\n    for c in file_name.chars() {\n\
    \        if c.is_digit(10) {\n            digits += 1;\n        } else if c ==\
    \ '.' {\n            dot = true;\n        } else if !dot {\n            before_dot\
    \ = c.is_alphabetic();\n        } else {\n            after_dot_str.push(c);\n\
    \        }\n    }\n    after_dot = after_dot_str == \"txt\" || after_dot_str ==\
    \ \"exe\" || after_dot_str == \"dll\";\n    if digits <= 3 && dot && before_dot\
    \ && after_dot {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n\
    \    }", "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut\
    \ is_valid = true;\n    let mut is_first_char_valid = false;\n    let mut is_last_char_valid\
    \ = false;\n    let mut is_last_three_chars_valid = false;\n    let mut is_first_char_letter\
    \ = false;\n    let mut is_last_char_letter = false;\n    let mut is_last_three_chars_letter\
    \ = false;\n    let mut is_first_char_digit = false;\n    let mut is_last_char_digit\
    \ = false;\n    let mut is_last_three_chars_digit = false;\n    let mut is_first_char_dot\
    \ = false;\n    let mut is_last_char_dot = false;\n    let mut is_last_three_chars_dot\
    \ = false;\n    let mut is_first_char_underscore = false;\n    let mut is_last_char_underscore\
    \ = false;\n    let mut is_last_three_chars_underscore = false;\n    let mut is_first_char_hyphen\
    \ = false;\n    let mut is_last_char_hyphen = false;\n    let mut is_last_three_chars_hyphen\
    \ = false;\n    let mut is_first_char_space = false;\n    let mut is_last_char_space\
    \ = false;\n    let mut is_last_three_chars_space = false;\n    let mut is_first_char_special\
    \ = false;\n    let mut is_last_char_special = false;\n    let mut is_last_three_chars_special\
    \ = false;\n    let mut is_first_char_valid_special = false;\n    let mut is_last_char_valid_special\
    \ = false;\n    let mut is_last_three_chars_valid_special = false;\n    let mut\
    \ is_first_char_valid_special_2 = false;\n    let mut is_last_char_valid_special_2\
    \ = false;\n    let mut is_last_three_chars_valid_special_2 = false;\n    let\
    \ mut is_first_", "    let mut digits = 0;\n    let mut dot = false;\n    let\
    \ mut extension = false;\n    let mut valid = true;\n    let mut extension_string\
    \ = String::new();\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        }\n        if c == '.' {\n            dot\
    \ = true;\n        }\n        if dot && c != '.' {\n            extension_string.push(c);\n\
    \        }\n    }\n    if digits > 3 {\n        valid = false;\n    }\n    if\
    \ !dot {\n        valid = false;\n    }\n    if !extension_string.is_empty() {\n\
    \        if extension_string == \"txt\" || extension_string == \"exe\" || extension_string\
    \ == \"dll\" {\n            extension = true;\n        }\n    }\n    if !extension\
    \ {\n        valid = false;\n    }\n    if valid {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    let mut after_dot_txt = false;\n    let mut after_dot_exe = false;\n    let\
    \ mut after_dot_dll = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        }\n        if c == '.' {\n            dot\
    \ = true;\n        }\n        if c.is_alphabetic() {\n            before_dot =\
    \ true;\n        }\n        if c == 't' {\n            after_dot_txt = true;\n\
    \        }\n        if c == 'e' {\n            after_dot_exe = true;\n       \
    \ }\n        if c == 'd' {\n            after_dot_dll = true;\n        }\n   \
    \     if c == 'x' {\n            after_dot_exe = true;\n        }\n        if\
    \ c == 'l' {\n            after_dot_dll = true;\n        }\n    }\n    if digits\
    \ > 3 {\n        return \"No\".to_string();\n    }\n    if !dot {\n        return\
    \ \"No\".to_string();\n    }\n    if !before_dot {\n        return \"No\".to_string();\n\
    \    }\n    if after_dot_txt || after_dot_exe || after_dot_dll {\n        return\
    \ \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut digits =\
    \ 0;\n    let mut dot = false;\n    let mut before_dot = false;\n    let mut after_dot\
    \ = false;\n    let mut after_dot_str = String::new();\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if dot {\n            after_dot_str.push(c);\n\
    \        } else if c.is_alphabetic() {\n            before_dot = true;\n     \
    \   }\n    }\n    if digits <= 3 && dot && before_dot {\n        match after_dot_str.as_str()\
    \ {\n            \"txt\" | \"exe\" | \"dll\" => after_dot = true,\n          \
    \  _ => (),\n        }\n    }\n    if digits <= 3 && dot && before_dot && after_dot\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_first_char_valid = false;\n    let mut is_last_char_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    let mut first_char = ' ';\n    let mut last_char = ' ';\n    let mut is_empty\
    \ = true;\n    let mut is_dot_valid = false;\n    let mut is_digit_valid = false;\n\
    \    let mut is_first_char_digit = false;\n    let mut is_last_char_digit = false;\n\
    \    let mut is_first_char_dot = false;\n    let mut is_last_char_dot = false;\n\
    \    let mut is_first_char_letter = false;\n    let mut is_last_char_letter =\
    \ false;\n    let mut is_first_char_letter_valid = false;\n    let mut is_last_char_letter_valid\
    \ = false;\n    let mut is_first_char_letter_upper = false;\n    let mut is_last_char_letter_upper\
    \ = false;\n    let mut is_first_char_letter_lower = false;\n    let mut is_last_char_letter_lower\
    \ = false;\n    let mut is_first_char_letter_upper_valid = false;\n    let mut\
    \ is_last_char_letter_upper_valid = false;\n    let mut is_first_char_letter_lower_valid\
    \ = false;\n    let mut is_last_char_letter_lower_valid = false;\n    let mut\
    \ is_first_char_letter_upper_valid_1 = false;\n    let mut is_last_char_letter_upper_valid_1\
    \ = false;\n    let mut is_first_char_letter_lower_valid_1 = false;\n    let mut\
    \ is_last_char_letter_lower_valid_1 = false;\n    let mut is_first_char_letter_upper_valid_2\
    \ = false;\n    let mut is_last_char_letter_upper_valid_2 = false;\n    let",
  "    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut valid_extension\
    \ = false;\n    let mut valid_name = false;\n    let mut extension = String::new();\n\
    \    let mut name = String::new();\n    let mut extension_index = 0;\n    let\
    \ mut name_index = 0;\n    let mut i = 0;\n    for c in file_name.chars() {\n\
    \        if c == '.' {\n            dot_count += 1;\n            extension_index\
    \ = i;\n        }\n        if c.is_digit(10) {\n            digits_count += 1;\n\
    \        }\n        i += 1;\n    }\n    if digits_count > 3 {\n        return\
    \ String::from(\"No\");\n    }\n    if dot_count != 1 {\n        return String::from(\"\
    No\");\n    }\n    name_index = extension_index;\n    for c in file_name.chars()\
    \ {\n        if name_index > 0 {\n            name.push(c);\n            name_index\
    \ -= 1;\n        }\n        if extension_index < file_name.len() {\n         \
    \   extension.push(c);\n            extension_index += 1;\n        }\n    }\n\
    \    if name.len() == 0 {\n        return String::from(\"No\");\n    }\n    if\
    \ name.chars().next().unwrap().is_alphabetic() {\n        valid_name = true;\n\
    \    }\n    if extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\" {\n        valid_extension = true;\n    }\n    if valid_name && valid_extension\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_txt = false;\n\
    \    let mut after_dot_exe = false;\n    let mut after_dot_dll = false;\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits +=\
    \ 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n \
    \       if c.is_alphabetic() {\n            before_dot = true;\n        }\n  \
    \      if c == 't' {\n            after_dot_txt = true;\n        }\n        if\
    \ c == 'e' {\n            after_dot_exe = true;\n        }\n        if c == 'd'\
    \ {\n            after_dot_dll = true;\n        }\n        if c == 'x' {\n   \
    \         after_dot_exe = true;\n        }\n        if c == 'l' {\n          \
    \  after_dot_dll = true;\n        }\n    }\n    if digits > 3 {\n        return\
    \ \"No\".to_string();\n    }\n    if !dot {\n        return \"No\".to_string();\n\
    \    }\n    if !before_dot {\n        return \"No\".to_string();\n    }\n    if\
    \ after_dot_txt || after_dot_exe || after_dot_dll {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut digits = 0;\n    let mut dot = false;\n\
    \    let mut before_dot = false;\n    let mut after_dot = false;\n    let mut\
    \ after_dot_str = String::new();\n    for c in file_name.chars() {\n        if\
    \ c.is_digit(10) {\n            digits += 1;\n        } else if c == '.' {\n \
    \           dot = true;\n        } else if dot {\n            after_dot_str.push(c);\n\
    \        } else if c.is_alphabetic() {\n            before_dot = true;\n     \
    \   }\n    }\n    if digits > 3 {\n        return String::from(\"No\");\n    }\n\
    \    if !dot {\n        return String::from(\"No\");\n    }\n    if !before_dot\
    \ {\n        return String::from(\"No\");\n    }\n    if after_dot_str == \"txt\"\
    \ || after_dot_str == \"exe\" || after_dot_str == \"dll\" {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut extension = false;\n    let mut valid =\
    \ true;\n    let mut extension_valid = false;\n    let mut extension_valid_list\
    \ = vec![\"txt\", \"exe\", \"dll\"];\n    let mut extension_valid_list_iter =\
    \ extension_valid_list.iter();\n    let mut extension_valid_list_iter_mut = extension_valid_list.iter_mut();\n\
    \    let mut extension_valid_list_iter_mut_next = extension_valid_list_iter_mut.next();\n\
    \    let mut extension_valid_list_iter_mut_next_clone = extension_valid_list_iter_mut_next.clone();\n\
    \    let mut extension_valid_list_iter_mut_next_clone_unwrap = extension_valid_list_iter_mut_next_clone.unwrap();\n\
    \    let mut extension_valid_list_iter_mut_next_clone_unwrap_clone = extension_valid_list_iter_mut_next_clone_unwrap.clone();\n\
    \    let mut extension_valid_list_iter_mut_next_clone_unwrap_clone_clone = extension_valid_list_iter_mut_next_clone_unwrap_clone.clone();\n\
    \    let mut extension_valid_list_iter_mut_next_clone_unwrap_clone_clone_clone\
    \ = extension_valid_list_iter_mut_next_clone_unwrap_clone_clone.clone();\n   \
    \ let mut extension_valid_list_iter_mut_next_clone_unwrap_clone_clone_clone_clone\
    \ = extension_valid_list_iter_mut_next_clone_unwrap_clone_clone_clone.clone();\n\
    \    let mut extension_valid_list_iter_mut_next_clone_unwrap_clone_clone_clone_clone_clone\
    \ = extension_valid_list_iter_mut_next_clone_unwrap_clone_clone_clone_clone.clone();\n\
    \    let mut extension_valid_list_iter_mut_next_clone_unwrap_clone_clone_clone_clone_clone_clone\
    \ = extension_valid_list_iter_mut_next_clone_unwrap_clone_clone_clone_", "   \
    \ let mut digits = 0;\n    let mut dot = false;\n    let mut prefix = false;\n\
    \    let mut suffix = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        } else if c == '.' {\n            dot =\
    \ true;\n        } else if c.is_alphabetic() {\n            prefix = true;\n \
    \       } else if c == 't' {\n            suffix = true;\n        }\n    }\n \
    \   if digits > 3 || !dot || !prefix || !suffix {\n        return \"No\".to_string();\n\
    \    }\n    \"Yes\".to_string()", "    let mut digits = 0;\n    let mut dot =\
    \ false;\n    let mut extension = false;\n    let mut valid = true;\n    for c\
    \ in file_name.chars() {\n        if c.is_digit(10) {\n            digits += 1;\n\
    \        } else if c == '.' {\n            dot = true;\n        } else if c.is_alphabetic()\
    \ {\n            if dot {\n                extension = true;\n            }\n\
    \        } else {\n            valid = false;\n            break;\n        }\n\
    \    }\n    if digits > 3 || !dot || !extension || !valid {\n        \"No\".to_string()\n\
    \    } else {\n        \"Yes\".to_string()\n    }", "    let mut digits = 0;\n\
    \    let mut dot = false;\n    let mut after_dot = false;\n    let mut before_dot\
    \ = false;\n    let mut before_dot_len = 0;\n    let mut after_dot_len = 0;\n\
    \    let mut after_dot_txt = false;\n    let mut after_dot_exe = false;\n    let\
    \ mut after_dot_dll = false;\n    for c in file_name.chars() {\n        if c.is_digit(10)\
    \ {\n            digits += 1;\n        }\n        if c == '.' {\n            dot\
    \ = true;\n            before_dot = true;\n        }\n        if before_dot {\n\
    \            if c.is_alphabetic() {\n                before_dot_len += 1;\n  \
    \          }\n        }\n        if dot {\n            after_dot = true;\n   \
    \     }\n        if after_dot {\n            if c.is_alphabetic() {\n        \
    \        after_dot_len += 1;\n            }\n        }\n        if after_dot_len\
    \ == 3 {\n            if c == 't' {\n                after_dot_txt = true;\n \
    \           }\n            if c == 'e' {\n                after_dot_exe = true;\n\
    \            }\n            if c == 'd' {\n                after_dot_dll = true;\n\
    \            }\n        }\n    }\n    if digits > 3 {\n        return \"No\".to_string();\n\
    \    }\n    if !dot {\n        return \"No\".to_string();\n    }\n    if before_dot_len\
    \ == 0 {\n        return \"No\".to_string();\n    }\n    if !after_dot_txt &&\
    \ !after_dot_exe && !after_dot_dll {\n        return \"No\".to_string();\n   \
    \ }\n    return \"Yes\".to_string();", "    let mut digits_count = 0;\n    let\
    \ mut dot_count = 0;\n    let mut is_valid = true;\n    let mut is_first_char_valid\
    \ = false;\n    let mut is_extension_valid = false;\n    let mut extension = String::new();\n\
    \    let mut file_name_without_extension = String::new();\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c == '.' {\n            dot_count += 1;\n            if dot_count\
    \ > 1 {\n                is_valid = false;\n                break;\n         \
    \   }\n            file_name_without_extension = file_name[..i].to_string();\n\
    \            extension = file_name[i + 1..].to_string();\n        }\n        if\
    \ c.is_digit(10) {\n            digits_count += 1;\n            if digits_count\
    \ > 3 {\n                is_valid = false;\n                break;\n         \
    \   }\n        }\n        if i == 0 {\n            if c.is_alphabetic() {\n  \
    \              is_first_char_valid = true;\n            } else {\n           \
    \     is_valid = false;\n                break;\n            }\n        }\n  \
    \  }\n    if is_valid {\n        if extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\" {\n            is_extension_valid = true;\n        }\n\
    \    }\n    if is_valid && is_first_char_valid && is_extension_valid {\n     \
    \   return \"Yes\".to_string();\n    }\n    return \"No\".to_string();", "   \
    \ let mut digits = 0;\n    let mut dot = false;\n    let mut ext = false;\n  \
    \  let mut first_letter = false;\n    let mut last_letter = false;\n    let mut\
    \ last_letter_index = 0;\n    let mut last_dot_index = 0;\n    let mut last_digit_index\
    \ = 0;\n    let mut last_digit = 0;\n    let mut last_dot = 0;\n    let mut last_letter\
    \ = 0;\n    let mut last_letter_index = 0;\n    let mut last_dot_index = 0;\n\
    \    let mut last_digit_index = 0;\n    let mut last_digit = 0;\n    let mut last_dot\
    \ = 0;\n    let mut last_letter = 0;\n    let mut last_letter_index = 0;\n   \
    \ let mut last_dot_index = 0;\n    let mut last_digit_index = 0;\n    let mut\
    \ last_digit = 0;\n    let mut last_dot = 0;\n    let mut last_letter = 0;\n \
    \   let mut last_letter_index = 0;\n    let mut last_dot_index = 0;\n    let mut\
    \ last_digit_index = 0;\n    let mut last_digit = 0;\n    let mut last_dot = 0;\n\
    \    let mut last_letter = 0;\n    let mut last_letter_index = 0;\n    let mut\
    \ last_dot_index = 0;\n    let mut last_digit_index = 0;\n    let mut last_digit\
    \ = 0;\n    let mut last_dot = 0;\n    let mut last_letter = 0;\n    let mut last_letter_index\
    \ = 0;\n    let mut last_dot_index = 0;\n    let mut last_digit_index = 0;\n \
    \   let mut last_digit = 0;\n    let mut last_dot = 0;\n    let mut last_letter\
    \ = 0;\n    let mut last_letter_index = 0;\n    let mut last_dot_index = 0;\n\
    \    let mut last_digit_index = 0;\n    let mut last_digit = 0;\n    let mut last_dot\
    \ = 0;\n    let mut last_letter = 0;\n    let mut last_", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut ext = false;\n    let mut ext_valid\
    \ = false;\n    let mut ext_valid_list = vec![\"txt\", \"exe\", \"dll\"];\n  \
    \  let mut ext_valid_list_iter = ext_valid_list.iter();\n    let mut ext_valid_list_iter_next\
    \ = ext_valid_list_iter.next();\n    let mut ext_valid_list_iter_next_str = ext_valid_list_iter_next.unwrap();\n\
    \    let mut ext_valid_list_iter_next_str_chars = ext_valid_list_iter_next_str.chars();\n\
    \    let mut ext_valid_list_iter_next_str_chars_next = ext_valid_list_iter_next_str_chars.next();\n\
    \    let mut ext_valid_list_iter_next_str_chars_next_char = ext_valid_list_iter_next_str_chars_next.unwrap();\n\
    \    let mut ext_valid_list_iter_next_str_chars_next_char_is_alpha = ext_valid_list_iter_next_str_chars_next_char.is_alphabetic();\n\
    \    let mut ext_valid_list_iter_next_str_chars_next_char_is_alpha_uppercase =\
    \ ext_valid_list_iter_next_str_chars_next_char.is_uppercase();\n    let mut ext_valid_list_iter_next_str_chars_next_char_is_alpha_lowercase\
    \ = ext_valid_list_iter_next_str_chars_next_char.is_lowercase();\n    let mut\
    \ ext_valid_list_iter_next_str_chars_next_char_is_digit = ext_valid_list_iter_next_str_chars_next_char.is_digit(10);\n\
    \    let mut ext_valid_list_iter_next_str_chars_next_char_is_alphanumeric = ext_valid_list_iter_next_str_chars_next_char.is_alphanumeric();\n",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut valid = false;\n\
    \    let mut extension = String::new();\n    let mut name = String::new();\n \
    \   for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if c.is_alphabetic() {\n            name.push(c);\n        } else {\n      \
    \      extension.push(c);\n        }\n    }\n    if digits <= 3 && dot && !name.is_empty()\
    \ && name.chars().next().unwrap().is_alphabetic() {\n        if extension == \"\
    txt\" || extension == \"exe\" || extension == \"dll\" {\n            valid = true;\n\
    \        }\n    }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n\
    \        \"No\".to_string()\n    }", "    let mut digits = 0;\n    let mut dot\
    \ = false;\n    let mut before_dot = false;\n    let mut after_dot = false;\n\
    \    let mut valid_extension = false;\n    for c in file_name.chars() {\n    \
    \    if c.is_digit(10) {\n            digits += 1;\n        } else if c == '.'\
    \ {\n            dot = true;\n        } else if c.is_alphabetic() {\n        \
    \    before_dot = true;\n        } else if c == 't' || c == 'x' || c == 'd' {\n\
    \            after_dot = true;\n        } else if c == 'e' || c == 'l' {\n   \
    \         if after_dot {\n                valid_extension = true;\n          \
    \  }\n        }\n    }\n    if digits > 3 || !dot || !before_dot || !valid_extension\
    \ {\n        \"No\".to_string()\n    } else {\n        \"Yes\".to_string()\n \
    \   }", "    let mut digits = 0;\n    let mut dot = false;\n    let mut valid\
    \ = false;\n    let mut first_letter = false;\n    let mut last_three = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n\
    \        if !first_letter && c.is_alphabetic() {\n            first_letter = true;\n\
    \        }\n        if dot {\n            last_three.push(c);\n        }\n   \
    \ }\n    if digits > 3 {\n        return \"No\".to_string();\n    }\n    if !dot\
    \ {\n        return \"No\".to_string();\n    }\n    if !first_letter {\n     \
    \   return \"No\".to_string();\n    }\n    if last_three == \".txt\" || last_three\
    \ == \".exe\" || last_three == \".dll\" {\n        valid = true;\n    }\n    if\
    \ valid {\n        return \"Yes\".to_string();\n    }\n    return \"No\".to_string();",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut ext = false;\n \
    \   let mut valid = true;\n    let mut before_dot = false;\n    let mut after_dot\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        }\n        if c == '.' {\n            dot = true;\n\
    \        }\n        if c == '.' && !before_dot {\n            valid = false;\n\
    \        }\n        if c == '.' && after_dot {\n            valid = false;\n \
    \       }\n        if c == '.' && !after_dot {\n            before_dot = true;\n\
    \        }\n        if c != '.' && after_dot {\n            ext = true;\n    \
    \    }\n        if c == '.' && after_dot {\n            after_dot = false;\n \
    \       }\n        if c != '.' && !after_dot {\n            after_dot = true;\n\
    \        }\n    }\n    if digits > 3 {\n        valid = false;\n    }\n    if\
    \ !dot {\n        valid = false;\n    }\n    if !ext {\n        valid = false;\n\
    \    }\n    if valid {\n        return \"Yes\".to_string();\n    }\n    return\
    \ \"No\".to_string();", "    let mut digits = 0;\n    let mut dot = false;\n \
    \   let mut valid = false;\n    let mut has_letter = false;\n    let mut has_extension\
    \ = false;\n    for c in file_name.chars() {\n        if c.is_digit(10) {\n  \
    \          digits += 1;\n        } else if c == '.' {\n            dot = true;\n\
    \        } else if c.is_alphabetic() {\n            has_letter = true;\n     \
    \   } else if c == '.' {\n            has_extension = true;\n        }\n    }\n\
    \    if digits <= 3 && dot && has_letter && has_extension {\n        valid = true;\n\
    \    }\n    if valid {\n        \"Yes\".to_string()\n    } else {\n        \"\
    No\".to_string()\n    }", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_first_letter = true;\n  \
    \  let mut is_first_dot = true;\n    let mut is_after_dot = false;\n    let mut\
    \ is_valid_after_dot = false;\n    let mut is_valid_before_dot = false;\n    let\
    \ mut is_valid_digits_count = false;\n    let mut is_valid_dot_count = false;\n\
    \    let mut is_valid_extension = false;\n    let mut extension = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits_count\
    \ += 1;\n        }\n        if c == '.' {\n            dot_count += 1;\n     \
    \       is_after_dot = true;\n            is_first_dot = false;\n        }\n \
    \       if is_after_dot && !is_first_dot {\n            extension.push(c);\n \
    \       }\n        if c.is_alphabetic() {\n            if is_first_letter {\n\
    \                is_first_letter = false;\n                if c.is_lowercase()\
    \ || c.is_uppercase() {\n                    is_valid_before_dot = true;\n   \
    \             }\n            }\n        }\n    }\n    if digits_count <= 3 {\n\
    \        is_valid_digits_count = true;\n    }\n    if dot_count == 1 {\n     \
    \   is_valid_dot_count = true;\n    }\n    if extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\" {\n        is_valid_extension = true;\n \
    \   }\n    if is_valid_before_dot && is_valid_digits_count && is_valid_dot_count\
    \ && is_valid_extension {\n        is_valid = true;\n    } else {\n        is_valid\
    \ = false;\n    }\n    if is_valid {\n        return \"Yes\".to_string();\n  \
    \  } else {\n        return \"No\".to_string();\n    }", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut is_first_char_letter = false;\n\
    \    let mut is_last_char_letter = false;\n    let mut is_last_char_dot = false;\n\
    \    let mut is_last_char_digit = false;\n    let mut is_last_char_letter_or_digit\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot = false;\n    let\
    \ mut is_last_char_letter_or_digit_or_dot_or_underscore = false;\n    let mut\
    \ is_last_char_letter_or_digit_or_dot_or_underscore_or_dash = false;\n    let\
    \ mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space = false;\n\
    \    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_percent\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_percent_or_dollar\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_percent_or_dollar_or_ampersand\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_percent_or_dollar_or_ampersand_or_star\
    \ = false;\n    let mut is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_percent_or_dollar_or_ampersand_or_star_or_open_paren\
    \ = false;\n", "    let mut digits = 0;\n    let mut dot = false;\n    let mut\
    \ prefix = false;\n    let mut suffix = false;\n    for c in file_name.chars()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        } else if\
    \ c == '.' {\n            dot = true;\n        } else if c.is_alphabetic() {\n\
    \            prefix = true;\n        } else if c == '.' {\n            suffix\
    \ = true;\n        }\n    }\n    if digits > 3 || !dot || !prefix || !suffix {\n\
    \        return \"No\".to_string();\n    }\n    \"Yes\".to_string()", "    let\
    \ mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if dot {\n            after_dot_str.push(c);\n        } else if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n    }\n    if digits > 3 {\n \
    \       return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !before_dot {\n        return String::from(\"No\");\n  \
    \  }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut count = 0;\n    let mut dot_count = 0;\n    let mut is_valid\
    \ = true;\n    let mut is_digit = false;\n    let mut is_alpha = false;\n    let\
    \ mut is_dot = false;\n    let mut is_txt = false;\n    let mut is_exe = false;\n\
    \    let mut is_dll = false;\n    let mut is_empty = false;\n    let mut is_ext\
    \ = false;\n    let mut is_ext_empty = false;\n    let mut is_ext_valid = false;\n\
    \    let mut is_ext_invalid = false;\n    let mut is_ext_valid_txt = false;\n\
    \    let mut is_ext_valid_exe = false;\n    let mut is_ext_valid_dll = false;\n\
    \    let mut is_ext_invalid_txt = false;\n    let mut is_ext_invalid_exe = false;\n\
    \    let mut is_ext_invalid_dll = false;\n    let mut is_ext_invalid_txt_exe =\
    \ false;\n    let mut is_ext_invalid_txt_dll = false;\n    let mut is_ext_invalid_exe_dll\
    \ = false;\n    let mut is_ext_invalid_txt_exe_dll = false;\n    let mut is_ext_invalid_txt_exe_dll_empty\
    \ = false;\n    let mut is_ext_invalid_txt_exe_dll_empty_alpha = false;\n    let\
    \ mut is_ext_invalid_txt_exe_dll_empty_alpha_digit = false;\n    let mut is_ext_invalid_txt_exe_dll_empty_alpha_digit_dot\
    \ = false;\n    let mut is_ext_invalid_txt_exe_dll_empty_alpha_digit_dot_txt =\
    \ false;\n    let mut is_ext_invalid_txt_exe_dll_empty_alpha_digit_dot_exe = false;\n\
    \    let mut is_ext_invalid_txt_exe_dll_empty_alpha_digit_dot_dll = false;\n \
    \   let mut is_ext_invalid_txt_exe_dll_empty_alpha_digit_dot_txt_", "    let mut\
    \ digits = 0;\n    let mut dot = false;\n    let mut dot_pos = 0;\n    let mut\
    \ first_char = false;\n    let mut last_char = false;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits += 1;\n        }\n      \
    \  if c == '.' {\n            dot = true;\n            dot_pos = i;\n        }\n\
    \        if i == 0 {\n            first_char = c.is_alphabetic();\n        }\n\
    \        if i == file_name.len() - 1 {\n            last_char = c.is_alphabetic();\n\
    \        }\n    }\n    if digits > 3 || !dot || !first_char || !last_char {\n\
    \        return \"No\".to_string();\n    }\n    let ext = &file_name[dot_pos +\
    \ 1..];\n    if ext == \"txt\" || ext == \"exe\" || ext == \"dll\" {\n       \
    \ return \"Yes\".to_string();\n    }\n    \"No\".to_string()", "    let mut digits\
    \ = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n    let mut\
    \ after_dot = false;\n    let mut after_dot_str = String::new();\n    for c in\
    \ file_name.chars() {\n        if c == '.' {\n            dot = true;\n      \
    \      continue;\n        }\n        if !dot {\n            if c.is_digit(10)\
    \ {\n                digits += 1;\n            }\n            if c.is_alphabetic()\
    \ {\n                before_dot = true;\n            }\n        } else {\n   \
    \         after_dot_str.push(c);\n        }\n    }\n    if digits > 3 {\n    \
    \    return String::from(\"No\");\n    }\n    if !dot || !before_dot {\n     \
    \   return String::from(\"No\");\n    }\n    if after_dot_str == \"txt\" || after_dot_str\
    \ == \"exe\" || after_dot_str == \"dll\" {\n        return String::from(\"Yes\"\
    );\n    }\n    return String::from(\"No\");", "    let mut digits = 0;\n    let\
    \ mut dot = false;\n    let mut extension = false;\n    let mut valid = true;\n\
    \    let mut first_letter = false;\n    for c in file_name.chars() {\n       \
    \ if c.is_digit(10) {\n            digits += 1;\n        }\n        if c == '.'\
    \ {\n            dot = true;\n        }\n        if c == '.' && !first_letter\
    \ {\n            valid = false;\n        }\n        if c.is_alphabetic() {\n \
    \           first_letter = true;\n        }\n        if c == '.' && !extension\
    \ {\n            extension = true;\n        }\n    }\n    if digits > 3 || !dot\
    \ || !valid || !extension {\n        return \"No\".to_string();\n    }\n    let\
    \ mut extension_valid = false;\n    let mut extension_string = \"\".to_string();\n\
    \    for c in file_name.chars() {\n        if c == '.' {\n            extension_valid\
    \ = true;\n        }\n        if extension_valid {\n            extension_string.push(c);\n\
    \        }\n    }\n    if extension_string == \".txt\" || extension_string ==\
    \ \".exe\" || extension_string == \".dll\" {\n        return \"Yes\".to_string();\n\
    \    }\n    return \"No\".to_string();", "    let mut digits = 0;\n    let mut\
    \ dot = false;\n    let mut extension = false;\n    let mut extension_valid =\
    \ false;\n    let mut extension_length = 0;\n    let mut extension_start = false;\n\
    \    let mut extension_end = false;\n    let mut extension_start_valid = false;\n\
    \    let mut extension_end_valid = false;\n    let mut extension_start_length\
    \ = 0;\n    let mut extension_end_length = 0;\n    let mut extension_start_letter\
    \ = false;\n    let mut extension_end_letter = false;\n    let mut extension_start_letter_valid\
    \ = false;\n    let mut extension_end_letter_valid = false;\n    let mut extension_start_letter_upper\
    \ = false;\n    let mut extension_end_letter_upper = false;\n    let mut extension_start_letter_upper_valid\
    \ = false;\n    let mut extension_end_letter_upper_valid = false;\n    let mut\
    \ extension_start_letter_lower = false;\n    let mut extension_end_letter_lower\
    \ = false;\n    let mut extension_start_letter_lower_valid = false;\n    let mut\
    \ extension_end_letter_lower_valid = false;\n    let mut extension_start_letter_valid_length\
    \ = 0;\n    let mut extension_end_letter_valid_length = 0;\n    let mut extension_start_letter_valid_length_valid\
    \ = false;\n    let mut extension_end_letter_valid_length_valid = false;\n   \
    \ let mut extension_start_letter_valid_length_valid_length = 0;\n    let mut extension_end_letter_valid_length_valid_length\
    \ = 0;\n    let mut extension_start_letter_valid_length_valid_length_valid = false;\n\
    \    let mut extension_end_letter_valid_length_valid_length_valid = false;\n \
    \   let mut extension_start_letter_valid_length_valid_length_valid_length = 0;\n\
    \    let mut extension_end_letter_valid_length_valid_length_valid_length = 0;\n\
    \    let mut extension_start_letter_valid_length_valid_length_valid_length_valid\
    \ = false;\n   ", "    let mut digits = 0;\n    let mut dot = false;\n    let\
    \ mut first_part = false;\n    let mut second_part = false;\n    let mut first_part_start\
    \ = false;\n    let mut second_part_start = false;\n    let mut first_part_end\
    \ = false;\n    let mut second_part_end = false;\n    let mut first_part_len =\
    \ 0;\n    let mut second_part_len = 0;\n    for c in file_name.chars() {\n   \
    \     if c.is_digit(10) {\n            digits += 1;\n        }\n        if c ==\
    \ '.' {\n            dot = true;\n            first_part_end = true;\n       \
    \ }\n        if first_part_end && !second_part_start {\n            second_part_start\
    \ = true;\n        }\n        if !first_part_start && c.is_alphabetic() {\n  \
    \          first_part_start = true;\n        }\n        if first_part_start &&\
    \ !first_part_end {\n            first_part_len += 1;\n        }\n        if second_part_start\
    \ && !second_part_end {\n            second_part_len += 1;\n        }\n      \
    \  if second_part_start && second_part_len == 3 {\n            second_part_end\
    \ = true;\n        }\n    }\n    if digits > 3 {\n        return \"No\".to_string();\n\
    \    }\n    if !dot {\n        return \"No\".to_string();\n    }\n    if !first_part_start\
    \ || !first_part_end || first_part_len == 0 {\n        return \"No\".to_string();\n\
    \    }\n    if !second_part_start || !second_part_end || second_part_len != 3\
    \ {\n        return \"No\".to_string();\n    }\n    let second_part = &file_name[(file_name.len()\
    \ - 3)..];\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot = false;\n\
    \    let mut after_dot = false;\n    let mut after_dot_str = String::new();\n\
    \    for c in file_name.chars() {\n        if c.is_digit(10) {\n            digits\
    \ += 1;\n        } else if c == '.' {\n            dot = true;\n        } else\
    \ if dot {\n            after_dot_str.push(c);\n        } else if c.is_alphabetic()\
    \ {\n            before_dot = true;\n        }\n    }\n    if digits > 3 {\n \
    \       return String::from(\"No\");\n    }\n    if !dot {\n        return String::from(\"\
    No\");\n    }\n    if !before_dot {\n        return String::from(\"No\");\n  \
    \  }\n    if after_dot_str == \"txt\" || after_dot_str == \"exe\" || after_dot_str\
    \ == \"dll\" {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");", "    let mut digits = 0;\n    let mut dot = false;\n    let mut before_dot\
    \ = false;\n    let mut after_dot = false;\n    let mut after_dot_txt = false;\n\
    \    let mut after_dot_exe = false;\n    let mut after_dot_dll = false;\n    for\
    \ c in file_name.chars() {\n        if c.is_digit(10) {\n            digits +=\
    \ 1;\n        }\n        if c == '.' {\n            dot = true;\n        }\n \
    \       if c.is_alphabetic() {\n            before_dot = true;\n        }\n  \
    \      if c == 't' {\n            after_dot_txt = true;\n        }\n        if\
    \ c == 'e' {\n            after_dot_exe = true;\n        }\n        if c == 'd'\
    \ {\n            after_dot_dll = true;\n        }\n        if c == 'x' {\n   \
    \         after_dot_exe = true;\n        }\n        if c == 'l' {\n          \
    \  after_dot_dll = true;\n        }\n    }\n    if digits > 3 {\n        return\
    \ \"No\".to_string();\n    }\n    if !dot {\n        return \"No\".to_string();\n\
    \    }\n    if !before_dot {\n        return \"No\".to_string();\n    }\n    if\
    \ after_dot_txt || after_dot_exe || after_dot_dll {\n        return \"Yes\".to_string();\n\
    \    }\n    \"No\".to_string()", "    let mut digits_count = 0;\n    let mut dot_count\
    \ = 0;\n    let mut first_char_is_letter = false;\n    let mut last_three_chars\
    \ = String::new();\n    let mut last_char_is_letter = false;\n    let mut last_char_is_dot\
    \ = false;\n    let mut last_char_is_digit = false;\n    let mut last_char_is_letter_or_digit\
    \ = false;\n    let mut last_char_is_letter_or_digit_or_dot = false;\n    let\
    \ mut last_char_is_letter_or_digit_or_dot_or_underscore = false;\n    let mut\
    \ last_char_is_letter_or_digit_or_dot_or_underscore_or_dash = false;\n    let\
    \ mut last_char_is_letter_or_digit_or_dot_or_underscore_or_dash_or_space = false;\n\
    \    let mut last_char_is_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at\
    \ = false;\n    let mut last_char_is_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_hash\
    \ = false;\n    let mut last_char_is_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_hash_or_dollar\
    \ = false;\n    let mut last_char_is_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_hash_or_dollar_or_percent\
    \ = false;\n    let mut last_char_is_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_hash_or_dollar_or_percent_or_ampersand\
    \ = false;\n    let mut last_char_is_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_at_or_hash_or_dollar_or_percent_or_",
  "    let mut digits = 0;\n    let mut dot = false;\n    let mut ext = false;\n \
    \   let mut ext_txt = false;\n    let mut ext_exe = false;\n    let mut ext_dll\
    \ = false;\n    let mut ext_start = false;\n    let mut ext_end = false;\n   \
    \ let mut ext_len = 0;\n    let mut ext_txt_len = 0;\n    let mut ext_exe_len\
    \ = 0;\n    let mut ext_dll_len = 0;\n    let mut ext_txt_start = false;\n   \
    \ let mut ext_exe_start = false;\n    let mut ext_dll_start = false;\n    let\
    \ mut ext_txt_end = false;\n    let mut ext_exe_end = false;\n    let mut ext_dll_end\
    \ = false;\n    let mut ext_txt_start_idx = 0;\n    let mut ext_exe_start_idx\
    \ = 0;\n    let mut ext_dll_start_idx = 0;\n    let mut ext_txt_end_idx = 0;\n\
    \    let mut ext_exe_end_idx = 0;\n    let mut ext_dll_end_idx = 0;\n    let mut\
    \ ext_txt_found = false;\n    let mut ext_exe_found = false;\n    let mut ext_dll_found\
    \ = false;\n    let mut ext_txt_found_idx = 0;\n    let mut ext_exe_found_idx\
    \ = 0;\n    let mut ext_dll_found_idx = 0;\n    let mut ext_txt_found_len = 0;\n\
    \    let mut ext_exe_found_len = 0;\n    let mut ext_dll_found_len = 0;\n    let\
    \ mut ext_txt_found_start = false;\n    let mut ext_exe_found_start = false;\n\
    \    let mut ext_dll_found_start = false;\n    let mut ext_txt_found_end = false;\n\
    \    let mut ext_exe_found_end = false;\n    let mut ext_dll_found_end = false;\n\
    \    let mut ext_txt_found_start_idx = 0;\n    let mut ext_", "    let mut digits_count\
    \ = 0;\n    let mut dot_count = 0;\n    let mut dot_index = 0;\n    let mut is_valid\
    \ = true;\n    for (i, c) in file_name.chars().enumerate() {\n        if c ==\
    \ '.' {\n            dot_count += 1;\n            dot_index = i;\n        }\n\
    \        if c.is_digit(10) {\n            digits_count += 1;\n        }\n    \
    \    if !c.is_digit(10) && !c.is_alphabetic() && c != '.' {\n            is_valid\
    \ = false;\n        }\n    }\n    if digits_count > 3 || dot_count != 1 || dot_index\
    \ == 0 || !is_valid {\n        return String::from(\"No\");\n    }\n    let extension\
    \ = &file_name[dot_index + 1..];\n    if extension != \"txt\" && extension !=\
    \ \"exe\" && extension != \"dll\" {\n        return String::from(\"No\");\n  \
    \  }\n    return String::from(\"Yes\");", "    let file_name = file_name.as_str();\n\
    \    let mut digits_count = 0;\n    let mut dot_count = 0;\n    let mut dot_index\
    \ = 0;\n    let mut is_valid = true;\n    let mut is_valid_extension = false;\n\
    \    let valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    let mut extension\
    \ = \"\";\n    let mut extension_index = 0;\n    for (i, c) in file_name.chars().enumerate()\
    \ {\n        if c.is_digit(10) {\n            digits_count += 1;\n        }\n\
    \        if c == '.' {\n            dot_count += 1;\n            dot_index = i;\n\
    \        }\n    }\n    if digits_count > 3 {\n        is_valid = false;\n    }\n\
    \    if dot_count != 1 {\n        is_valid = false;\n    }\n    if !file_name[0..dot_index].chars().next().unwrap().is_alphabetic()\
    \ {\n        is_valid = false;\n    }\n    if dot_index == file_name.len() - 1\
    \ {\n        is_valid = false;\n    }\n    extension = &file_name[dot_index +\
    \ 1..];\n    for (i, ext) in valid_extensions.iter().enumerate() {\n        if\
    \ ext == extension {\n            is_valid_extension = true;\n            extension_index\
    \ = i;\n        }\n    }\n    if !is_valid_extension {\n        is_valid = false;\n\
    \    }\n    if is_valid {\n        return \"Yes\".to_string();\n    } else {\n\
    \        return \"No\".to_string();\n    }"]
stop_tokens:
- "\n}"
