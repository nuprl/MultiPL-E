{
  "name": "mbpp_583_catalan_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function which returns nth catalan number.\n(define (catalan_number num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate catalan_number))\n    (check-equal? (candidate 10) 16796)\n    (check-equal? (candidate 9) 4862)\n    (check-equal? (candidate 7) 429)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (factorial (- num 1)) (factorial (- (* 2 num) 1)))\n           (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (cond\n      [(= num 0) 1]\n      [(= num 1) 1]\n      [else (+ (* num (catalan-helper (- num 1)))\n               (catalan-helper (- num 1)))]))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (if (zero? num)\n      1\n      (+ (* num (catalan_number (- num 1)))\n         (catalan_number (- num 2)))))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n           (* (catalan-helper (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (define (factorial n)\n      (if (= n 0)\n          1\n          (* n (factorial (- n 1)))))\n    (/ (factorial (* 2 n))\n       (* (factorial n) (factorial (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1))) (catalan-helper (- n 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan_helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan_helper (- n 1)))\n           (catalan_helper (- n 1)))))\n  (catalan_helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ n (* 2 (- num n))) (+ n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 n) 1)))))\n  (catalan-helper num))\n",
    "  (if (= num 0)\n      1\n      (let loop ([i 0] [sum 0])\n        (if (= i num)\n            sum\n            (loop (+ i 1) (+ (* (* (catalan_number (- num 1)) (catalan_number (- i 1))) (/ 1 (+ num i))) sum))))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper num)\n    (cond\n      [(= num 0) 1]\n      [(= num 1) 1]\n      [else\n       (+ (* (catalan-helper (- num 1))\n             (+ (catalan-helper (- num 2))\n                (catalan-helper (- num 1))))\n          (* (catalan-helper (- num 2))\n             (catalan-helper (- num 1))))]))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (if (= k 0)\n        1\n        (/ (* n (- n 1))\n           (* k (- k 1)))))\n  (define (catalan n)\n    (if (= n 0)\n        1\n        (+ (catalan (- n 1))\n           (* (binomial (* 2 n) n)\n              (/ 1 (factorial n))))))\n  (catalan num))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n         (* (catalan_number (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n"
  ]
}