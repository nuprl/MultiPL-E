{
  "name": "mbpp_63_max_difference",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum difference between available pairs in the given list list.\n(define (max_difference test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_difference))\n    (check-equal? (candidate (list (list 3 5) (list 1 7) (list 10 3) (list 1 2))) 7)\n    (check-equal? (candidate (list (list 4 6) (list 2 17) (list 9 13) (list 11 12))) 15)\n    (check-equal? (candidate (list (list 12 35) (list 21 27) (list 13 23) (list 41 22))) 23)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (difference a b)\n    (if (&gt; a b) (- a b) (- b a)))\n  (define (max_difference_helper test_list max_difference)\n    (if (null? test_list)\n        max_difference\n        (let ([current_difference (difference (car test_list) (cadr test_list))])\n          (if (&gt; current_difference max_difference)\n              (max_difference_helper (cdr test_list) current_difference)\n              (max_difference_helper (cdr test_list) max_difference)))))\n  (max_difference_helper test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [else\n     (let* ([max_diff (max_difference (cdr test_list))]\n            [max_diff_with_first (max (- (car test_list) (car (cdr test_list))) max_diff)])\n       (max max_diff_with_first (max_difference (cdr test_list))))]))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else (max (- (first test_list) (second test_list))\n               (max_difference (rest test_list)))]))\n",
    "  (define (max_difference_helper test_list max_difference)\n    (cond\n      [(null? test_list) max_difference]\n      [(null? (cdr test_list)) max_difference]\n      [else\n       (let ([difference (- (car test_list) (cadr test_list))])\n         (if (&gt; difference max_difference)\n             (max_difference_helper (cdr test_list) difference)\n             (max_difference_helper (cdr test_list) max_difference)))]))\n  (max_difference_helper test_list 0))\n",
    "  (define (helper list max_diff)\n    (if (null? list)\n        max_diff\n        (let ((diff (- (car list) (cadr list))))\n          (if (&gt; diff max_diff)\n              (helper (cdr list) diff)\n              (helper (cdr list) max_diff)))))\n  (helper test_list 0))\n",
    "  (let loop ([test_list test_list] [max_difference 0])\n    (if (null? test_list)\n        max_difference\n        (let ([difference (abs (- (car test_list) (cadr test_list)))])\n          (if (&gt; difference max_difference)\n              (loop (cdr test_list) difference)\n              (loop (cdr test_list) max_difference))))))\n",
    "  (apply max (map (lambda (x y) (- y x)) test_list (cdr test_list))))\n",
    "  (cond\n    [(null? test_list) 0]\n    [else\n     (let* ([max_diff (max_difference (cdr test_list))]\n            [diff (abs (- (car test_list) (car (cdr test_list))))])\n       (if (> diff max_diff)\n           diff\n           max_diff))]))\n",
    "  (let loop ([test_list test_list]\n             [max_difference 0])\n    (if (null? test_list)\n        max_difference\n        (let* ([first_number (car test_list)]\n               [second_number (cadr test_list)]\n               [difference (- second_number first_number)])\n          (if (&gt; difference max_difference)\n              (loop (cdr test_list) difference)\n              (loop (cdr test_list) max_difference))))))\n",
    "  (define (max_difference_helper test_list max_difference)\n    (cond\n      [(null? test_list) max_difference]\n      [(null? (cdr test_list)) max_difference]\n      [else\n       (let ([difference (- (car test_list) (cadr test_list))])\n         (if (&gt; difference max_difference)\n             (max_difference_helper (cdr test_list) difference)\n             (max_difference_helper (cdr test_list) max_difference)))]))\n  (max_difference_helper test_list 0))\n",
    "  (define (max_difference_helper test_list max_difference)\n    (cond\n      [(empty? test_list) max_difference]\n      [else\n       (let* ([first_element (first test_list)]\n              [rest_of_list (rest test_list)]\n              [max_difference_rest (max_difference_helper rest_of_list max_difference)]\n              [max_difference_new (max (- first_element (first rest_of_list)) max_difference_rest)])\n         (max_difference_helper rest_of_list max_difference_new))]))\n  (max_difference_helper test_list 0))\n",
    "  (let ([max_difference 0]\n        [max_value (car test_list)]\n        [min_value (car test_list)])\n    (for ([i (in-list test_list)])\n      (if (&gt; i max_value)\n          (set! max_value i))\n      (if (&lt; i min_value)\n          (set! min_value i)))\n    (set! max_difference (- max_value min_value))\n    max_difference))\n",
    "  (define (max_difference_helper test_list max_difference)\n    (if (null? test_list)\n        max_difference\n        (let* ([max_difference (if (&gt; (- (car test_list) (cadr test_list)) max_difference)\n                                  (- (car test_list) (cadr test_list))\n                                  max_difference)]\n               [test_list (cdr test_list)])\n          (max_difference_helper test_list max_difference))))\n  (max_difference_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else (max (abs (- (first test_list) (second test_list)))\n               (max_difference (rest test_list)))]))\n",
    "  (define (max_difference_helper test_list max_difference)\n    (if (null? test_list)\n        max_difference\n        (let ((current_difference (- (car test_list) (cadr test_list))))\n          (if (&gt; current_difference max_difference)\n              (max_difference_helper (cdr test_list) current_difference)\n              (max_difference_helper (cdr test_list) max_difference)))))\n  (max_difference_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let* ([first-elem (first test_list)]\n            [rest-list (rest test_list)]\n            [max-diff (max_difference rest-list)]\n            [diff (abs (- first-elem (first rest-list)))])\n       (if (> diff max-diff)\n           diff\n           max-diff))]))\n",
    "  (if (null? test_list)\n      0\n      (let* ([max (apply max test_list)]\n             [min (apply min test_list)])\n        (- max min))))\n",
    "  (define (max_difference_helper test_list max_difference)\n    (cond\n      [(empty? test_list) max_difference]\n      [(empty? (rest test_list)) max_difference]\n      [else\n       (let ([difference (- (first test_list) (second test_list))])\n         (if (&gt; difference max_difference)\n             (max_difference_helper (rest test_list) difference)\n             (max_difference_helper (rest test_list) max_difference)))]))\n  (max_difference_helper test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else\n     (let* ([max_diff (max_difference (cdr test_list))]\n            [diff (abs (- (car test_list) (car (cdr test_list))))])\n       (if (> diff max_diff)\n           diff\n           max_diff))]))\n",
    "  (define (max_difference_helper test_list max_diff)\n    (cond [(empty? test_list) max_diff]\n          [(empty? (rest test_list)) max_diff]\n          [else (max_difference_helper (rest test_list) (max max_diff (abs (- (first test_list) (first (rest test_list))))))]))\n  (max_difference_helper test_list 0))\n"
  ]
}