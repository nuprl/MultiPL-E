{
  "name": "mbpp_223_is_majority",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (if (= n 0)\n      #f\n      (if (= (first arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (rest arr) (- n 1) x))\n          (is_majority (rest arr) n x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7po6gif4.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7po6gif4.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8uehsek4.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8uehsek4.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "/tmp/tmpe8ej57i6.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpe8ej57i6.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (if (> n (/ (length arr) 2)) true (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpecgl55p6.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpecgl55p6.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= n 0) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprwb6p_iw.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprwb6p_iw.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ajo1769.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ajo1769.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:17:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:18:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:19:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (> i (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9eqj8n9.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9eqj8n9.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9eqj8n9.rkt:23:4\n\nlist-ref: index too large for list\n  index: 4\n  in: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfn4ffvz8.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfn4ffvz8.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper lst n x)\n    (cond [(empty? lst) #f]\n          [(= x (first lst)) (if (> n (/ (length lst) 2)) #t (helper (rest lst) (+ n 1) x))]\n          [else (helper (rest lst) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8ztayxdz.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8ztayxdz.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) false]\n    [(= (car arr) x)\n     (if (>= n (/ (length arr) 2))\n         true\n         (is_majority (cdr arr) (- n 1) x))]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6gz1iyd.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6gz1iyd.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x count)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority_helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority_helper (cdr arr) (- n 1) x count)]))\n  (if (> (/ n 2) (is_majority_helper arr n x 0)) #f #t))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf4hrvpz.rkt:17:4\n\n>: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf4hrvpz.rkt:18:4\n\n>: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf4hrvpz.rkt:19:4\n\n>: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf4hrvpz.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_iter arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority_iter (rest arr) (- n 1) x)]\n      [else (is_majority_iter (rest arr) (- n 1) x)]))\n  (is_majority_iter arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_0ufj7bc.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_0ufj7bc.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvpycs7gi.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvpycs7gi.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) (if (>= (/ n 2) (count arr x)) true false)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_8q0xzr.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 3 3 3 10)\n  argument position: 1st\n  other arguments...:\n   3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_8q0xzr.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 4 4 6 6)\n  argument position: 1st\n  other arguments...:\n   4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_8q0xzr.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(1 1 1 2 2)\n  argument position: 1st\n  other arguments...:\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_8q0xzr.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(1 1 2 2)\n  argument position: 1st\n  other arguments...:\n   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) false]\n      [(= x (car arr)) (or (helper (cdr arr) (- n 1) x) true)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr401nny9.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr401nny9.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) true (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3osavz1d.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3osavz1d.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) (is_majority-helper arr n x (+ i 1))]\n      [(> i (/ n 2)) #t]\n      [else #f]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd__ivszb.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (&gt;= (/ n 2) (count-occurrences arr x))\n           #t\n           #f)]\n      [else (is_majority-helper (rest arr) n x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "/tmp/tmpub9mxyf_.rkt:11:14: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is-majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "/tmp/tmpx485r2rz.rkt:10:3: is-majority-helper: unbound identifier\n  in: is-majority-helper\n  location...:\n   /tmp/tmpx485r2rz.rkt:10:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (= (modulo n 2) 0)\n      (helper arr (/ n 2) x)\n      (helper arr (/ (+ n 1) 2) x)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfqlrc79y.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfqlrc79y.rkt:21:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (or (helper (cdr arr) (- n 1) x) #t)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbsxh68pr.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbsxh68pr.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "/tmp/tmpe8ej57i6.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpe8ej57i6.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond [(= n 0) #f]\n        [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n        [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxwvitdk5.rkt:14:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxwvitdk5.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxwvitdk5.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (if (> n 1) (helper (cdr arr) (- n 1) x) #t)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9d9m30wb.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9d9m30wb.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d9m30wb.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (= (helper arr n x) (/ n 2)) #t #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdjlketc9.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdjlketc9.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdjlketc9.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdjlketc9.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphufm8_6_.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphufm8_6_.rkt:23:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7imbw03.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7imbw03.rkt:21:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7imbw03.rkt:22:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq7imbw03.rkt:23:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:17:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:18:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:19:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdyu8tde_.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdyu8tde_.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (if (= n 0)\n      #f\n      (if (= (first arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (rest arr) (- n 1) x))\n          (is_majority (rest arr) (- n 1) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9a06odu8.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9a06odu8.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (>= (+ i (/ n 2)) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp633ckcps.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp633ckcps.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp633ckcps.rkt:23:4\n\nlist-ref: index too large for list\n  index: 4\n  in: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (let ([mid (quotient n 2)])\n    (if (= x (list-ref arr mid))\n        (if (= mid 0)\n            #t\n            (if (= x (list-ref arr (- mid 1)))\n                (is_majority arr (- mid 1) x)\n                #t))\n        (if (&lt; x (list-ref arr mid))\n            (is_majority (take arr mid) mid x)\n            (is_majority (drop arr mid) (- n mid) x)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "/tmp/tmp_9pws62m.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 15\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (+ i 1) (/ n 2))\n           #t\n           (helper arr n x (+ i 1)))]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4__i8yvc.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4__i8yvc.rkt:21:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4__i8yvc.rkt:22:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4__i8yvc.rkt:23:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (let ([mid (quotient n 2)])\n    (if (= (vector-ref arr mid) x)\n        (if (= (vector-ref arr (- mid 1)) x)\n            (is_majority (subvector arr 0 mid) mid x)\n            (if (= (vector-ref arr (+ mid 1)) x)\n                (is_majority (subvector arr (+ mid 1) (- n 1)) (- n 1) x)\n                #t))\n        (if (&lt; (vector-ref arr mid) x)\n            (is_majority (subvector arr (+ mid 1) (- n 1)) (- n 1) x)\n            (is_majority (subvector arr 0 mid) mid x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "/tmp/tmpgemtng3w.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (list-ref arr i)) #t)\n          (else (is-majority-helper arr n x (+ i 1)))))\n  (is-majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "/tmp/tmpwuz08u3l.rkt:8:17: is-majority-helper: unbound identifier\n  in: is-majority-helper\n  location...:\n   /tmp/tmpwuz08u3l.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptcw_tkpk.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptcw_tkpk.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (let ([mid (quotient n 2)])\n    (if (= (list-ref arr mid) x)\n        (if (= (list-ref arr (- mid 1)) x)\n            (is_majority (sublist arr 0 mid) mid x)\n            #t)\n        (if (&gt; (list-ref arr mid) x)\n            (is_majority (sublist arr 0 mid) mid x)\n            (is_majority (sublist arr mid) (- n mid) x)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "/tmp/tmpcf85oweg.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "/tmp/tmpe8ej57i6.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpe8ej57i6.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) #t)\n          (else (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmrtbh3g_.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmrtbh3g_.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) (if (>= i (/ n 2)) #t (helper arr n x (+ i 1)))]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkk_vr2q.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkk_vr2q.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkk_vr2q.rkt:20:4\n\nlist-ref: index too large for list\n  index: 4\n  in: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmproywdrjw.rkt:17:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmproywdrjw.rkt:18:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmproywdrjw.rkt:19:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmproywdrjw.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: 3\n  argument position: 1st\n  other arguments...:\n   '(3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: 4\n  argument position: 1st\n  other arguments...:\n   '(4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcqx64j3j.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcqx64j3j.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfn4ffvz8.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfn4ffvz8.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (recur i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (recur (+ i 1))]))\n  (recur 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcpzh3wu9.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcpzh3wu9.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcqx64j3j.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcqx64j3j.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54r61vjl.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54r61vjl.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp54r61vjl.rkt:23:4\n\nlist-ref: index too large for list\n  index: 4\n  in: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (helper (+ i 1))]))\n  (helper 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1605tuf5.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1605tuf5.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (let loop ([i 0])\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (loop (+ i 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp467ls_de.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp467ls_de.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= n 0) #f]\n      [(= x (list-ref arr i))\n       (if (>= (* 2 i) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpops9o6xc.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpops9o6xc.rkt:22:4\n\nlist-ref: index too large for list\n  index: 5\n  in: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpops9o6xc.rkt:23:4\n\nlist-ref: index too large for list\n  index: 4\n  in: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x count)\n    (cond ((= n 0)\n           (if (> count (/ n 2))\n               #t\n               #f))\n          ((= (car arr) x)\n           (helper (cdr arr) (- n 1) x (+ count 1)))\n          (else\n           (helper (cdr arr) (- n 1) x count))))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1p1rgwas.rkt:22:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1p1rgwas.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (first arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (is_majority-helper (rest arr) (- n 1) x))\n            (is_majority-helper (rest arr) n x))))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn0ji0ufo.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn0ji0ufo.rkt:23:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) true false)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppua4q_0p.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: 3\n  argument position: 1st\n  other arguments...:\n   '(3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppua4q_0p.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: 4\n  argument position: 1st\n  other arguments...:\n   '(4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppua4q_0p.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppua4q_0p.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprh_uopb2.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprh_uopb2.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprh_uopb2.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) #t]\n      [else (helper (rest arr) n x)]))\n  (if (helper arr n x)\n      (if (> (count_occurrences arr n x) (/ n 2))\n          #t\n          #f)\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "/tmp/tmpqoyujejb.rkt:11:14: count_occurrences: unbound identifier\n  in: count_occurrences\n  location...:\n   /tmp/tmpqoyujejb.rkt:11:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond [(= n 0) #f]\n          [(= x (car arr)) (or (helper (cdr arr) (- n 1) x) #t)]\n          [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxm6upb1z.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxm6upb1z.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (> n 0)\n      (helper arr n x)\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzi0h11tt.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzi0h11tt.rkt:21:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (+ i 1) (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxpkkr8k.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxpkkr8k.rkt:21:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxpkkr8k.rkt:22:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxpkkr8k.rkt:23:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28l2p9lc.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28l2p9lc.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (&gt; n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "/tmp/tmpps4pqd0m.rkt:10:18: read-syntax: missing `]` to close `[` on line 8, found instead `)`\n  possible cause: indentation suggests a missing `]` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x)\n       (if (&gt; n (/ (length arr) 2))\n           #t\n           (helper (cdr arr) (- n 1) x))]\n      [else (helper (cdr arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "/tmp/tmplk77b8ke.rkt:11:40: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-iter arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (>= (+ i (/ n 2)) n)\n           #t\n           (is_majority-iter arr n x (+ i 1)))]\n      [else (is_majority-iter arr n x (+ i 1))]))\n  (is_majority-iter arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkzlmj2f8.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkzlmj2f8.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzlmj2f8.rkt:23:4\n\nlist-ref: index too large for list\n  index: 4\n  in: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (search-for-x arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (search-for-x (rest arr) (- n 1) x)]\n      [else (search-for-x (rest arr) (- n 1) x)]))\n  (if (= (search-for-x arr n x) #f)\n      #f\n      (> (search-for-x arr n x) (/ n 2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm9q6f1qs.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm9q6f1qs.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm9q6f1qs.rkt:21:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm9q6f1qs.rkt:22:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x start end)\n    (cond [(= start end) #f]\n          [(= (arr start) x)\n           (if (>= (+ start (quotient n 2)) end)\n               #t\n               (is_majority-helper arr n x (+ start 1) end))]\n          [else (is_majority-helper arr n x (+ start 1) end)]))\n  (is_majority-helper arr n x 0 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl_orcda.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl_orcda.rkt:20:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl_orcda.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl_orcda.rkt:22:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) #f]\n    [(= n 1) (= (car arr) x)]\n    [else\n     (cond\n       [(= (car arr) x)\n        (if (>= n 2)\n            (is_majority (cdr arr) (- n 2) x)\n            #t)]\n       [else\n        (is_majority (cdr arr) (- n 1) x)])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpny1i80sb.rkt:23:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphzguzyzu.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphzguzyzu.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (let ([mid (quotient n 2)])\n    (if (= (list-ref arr mid) x)\n        (if (= (list-ref arr (- mid 1)) x)\n            (is_majority (sublist arr 0 mid) mid x)\n            #t)\n        (if (= (list-ref arr (- mid 1)) x)\n            (is_majority (sublist arr mid) mid x)\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "/tmp/tmpi0i6nyms.rkt:8:26: sublist: unbound identifier\n  in: sublist\n  location...:\n   /tmp/tmpi0i6nyms.rkt:8:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "/tmp/tmpbqrjfe6p.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpbqrjfe6p.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= (list-ref arr i) x) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_sthvtt.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_sthvtt.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x count)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) (is_majority_helper (cdr arr) (- n 1) x (+ count 1)))\n          ((&gt; count (/ n 2)) #t)\n          (else (is_majority_helper (cdr arr) (- n 1) x count))))\n  (is_majority_helper arr n x 0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "/tmp/tmpr54d9f94.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= (list-ref arr i) x) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_sthvtt.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_sthvtt.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x left right)\n    (cond\n      [(= left right) #f]\n      [(= (array-ref arr left) x)\n       (if (> (+ left right) n)\n           #t\n           (is_majority_helper arr n x (+ left 1) right))]\n      [else (is_majority_helper arr n x (+ left 1) right)]))\n  (is_majority_helper arr n x 0 (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "/tmp/tmpf60b4o0c.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpf60b4o0c.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (&gt;= (/ n 2) (add1 (helper (rest arr) n x))) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "/tmp/tmpvj2jvjo1.rkt:10:18: read-syntax: missing `]` to close `[` on line 8, found instead `)`\n  possible cause: indentation suggests a missing `]` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= (list-ref arr i) x) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_sthvtt.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_sthvtt.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (first arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (rest arr) (- n 1) x))\n            (helper (rest arr) n x))))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvc7v1r2w.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvc7v1r2w.rkt:23:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (let ([mid (quotient n 2)])\n    (if (= x (list-ref arr mid))\n        (if (= (count x arr) (quotient n 2))\n            #t\n            #f)\n        #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63r69ujc.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: 3\n  argument position: 1st\n  other arguments...:\n   '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63r69ujc.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: 4\n  argument position: 1st\n  other arguments...:\n   '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63r69ujc.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (&gt;= (+ i (quotient n 2)) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "/tmp/tmpv9d682qq.rkt:11:48: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:17:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:18:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:19:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond [(empty? arr) #f]\n          [(= x (first arr)) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n          [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvfdmvgjo.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvfdmvgjo.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (list-ref arr i)) #t)\n          (else (is-majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "/tmp/tmp0h7ko1ja.rkt:8:17: is-majority-helper: unbound identifier\n  in: is-majority-helper\n  location...:\n   /tmp/tmp0h7ko1ja.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (= n 1)\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2lkva02n.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2lkva02n.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2lkva02n.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) (if (>= i (/ n 2)) #t (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptp3xhta5.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptp3xhta5.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptp3xhta5.rkt:20:4\n\nlist-ref: index too large for list\n  index: 4\n  in: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (is_majority-helper (cdr arr) (- n 1) x)]\n      [else (is_majority-helper (cdr arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwtlqdd2n.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwtlqdd2n.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwtlqdd2n.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "/tmp/tmpe8ej57i6.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpe8ej57i6.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "/tmp/tmpe8ej57i6.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpe8ej57i6.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i))\n       (if (>= (- n i) (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps2io853z.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps2io853z.rkt:23:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (&gt; count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "/tmp/tmpiql06zvg.rkt:10:20: read-syntax: missing `]` to close `[` on line 7, found instead `)`\n  possible cause: indentation suggests a missing `]` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (if (= n 0)\n      #f\n      (if (= x (car arr))\n          (if (>= (/ n 2) (count_occurrences arr x))\n              #t\n              #f)\n          (is_majority (cdr arr) (- n 1) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "/tmp/tmp70hqq37_.rkt:8:27: count_occurrences: unbound identifier\n  in: count_occurrences\n  location...:\n   /tmp/tmp70hqq37_.rkt:8:27\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x count)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (helper (cdr arr) (- n 1) x count)]))\n  (if (> (helper arr n x 0) (/ n 2))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2abbw5fg.rkt:19:4\n\n>: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2abbw5fg.rkt:20:4\n\n>: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2abbw5fg.rkt:21:4\n\n>: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2abbw5fg.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvpycs7gi.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvpycs7gi.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority_helper (rest arr) n x (+ count 1))]\n      [else (is_majority_helper (rest arr) n x count)]))\n  (is_majority_helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (is_majority-helper (cdr arr) (- n 1) x)\n            (is_majority-helper (cdr arr) (- n 1) x))))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2wn0c1mh.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2wn0c1mh.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2wn0c1mh.rkt:21:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= n (/ n 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps85yymaq.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps85yymaq.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdyu8tde_.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdyu8tde_.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28l2p9lc.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28l2p9lc.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= (array-ref arr i) x) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "/tmp/tmpwrub82ot.rkt:7:15: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpwrub82ot.rkt:7:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfn4ffvz8.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfn4ffvz8.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdz_rbxtv.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (add1 (helper (rest arr) n x))) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5by7z2z.rkt:17:4\n\nadd1: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5by7z2z.rkt:18:4\n\nadd1: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5by7z2z.rkt:19:4\n\nadd1: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5by7z2z.rkt:20:4\n\nadd1: contract violation\n  expected: number?\n  given: #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (let ([mid (quotient n 2)])\n    (if (equal? (list-ref arr mid) x)\n        (if (equal? (list-ref arr (+ mid 1)) x)\n            #t\n            #f)\n        #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2onzl4lv.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2onzl4lv.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x count)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1)))\n          ((&gt; count (/ n 2)) #t)\n          (else (is_majority-helper (cdr arr) (- n 1) x count))))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "/tmp/tmpkj56nrkr.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:17:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:18:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:19:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (if (= n 0)\n      #f\n      (if (= (car arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (cdr arr) (- n 1) x))\n          (is_majority (cdr arr) (- n 1) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnk517hx5.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnk517hx5.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority_helper arr n x (+ i 1)))]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjibtyyy4.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjibtyyy4.rkt:21:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjibtyyy4.rkt:22:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjibtyyy4.rkt:23:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "/tmp/tmpe8ej57i6.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpe8ej57i6.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjr13ybw8.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjr13ybw8.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6rqg1whi.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6rqg1whi.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6rqg1whi.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (>= (* n 2) (length arr))\n           #t\n           (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5jxcdv7.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5jxcdv7.rkt:23:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (= count (/ n 2))]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmrr_1p2n.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmrr_1p2n.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) #f]\n    [(= (car arr) x) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoml_6g49.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoml_6g49.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoml_6g49.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (if (or (= n 0) (= n 1))\n        #f\n        (let ([mid (quotient n 2)])\n          (if (= x (list-ref arr mid))\n              (if (or (= (list-ref arr (- mid 1)) x) (= (list-ref arr (+ mid 1)) x))\n                  #t\n                  (if (&gt; mid 0)\n                      (helper (sublist arr 0 mid) mid x)\n                      (helper (sublist arr (+ mid 1) n) (- n (+ mid 1)) x)))\n              (if (&lt; x (list-ref arr mid))\n                  (helper (sublist arr 0 mid) mid x)\n                  (helper (sublist arr (+ mid 1) n) (- n (+ mid 1)) x))))))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "/tmp/tmpu99dwsg6.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvpycs7gi.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvpycs7gi.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28l2p9lc.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28l2p9lc.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) false]\n    [(= (car arr) x) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2k1c5m1r.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2k1c5m1r.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2k1c5m1r.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (helper (cdr arr) (- n 1) x)\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiw8z7upf.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiw8z7upf.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiw8z7upf.rkt:21:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptcw_tkpk.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptcw_tkpk.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpabsd2jyz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpabsd2jyz.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) #t]\n      [else (is_majority-helper (cdr arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkmh9uutu.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkmh9uutu.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (list-ref arr i)) #t)\n          (else (is_majority_helper arr n x (+ i 1)))))\n  (is_majority_helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp357sm4k_.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp357sm4k_.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr))\n       (if (= n 1)\n           #t\n           (is_majority-helper (cdr arr) (- n 1) x))]\n      [else (is_majority-helper (cdr arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9oz0wlgl.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9oz0wlgl.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oz0wlgl.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond ((= n 0) #f)\n          ((= x (car arr)) #t)\n          (else (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64l_2mfz.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64l_2mfz.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (&gt; n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "/tmp/tmpps4pqd0m.rkt:10:18: read-syntax: missing `]` to close `[` on line 8, found instead `)`\n  possible cause: indentation suggests a missing `]` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nqfvubz.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "/tmp/tmpe8ej57i6.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpe8ej57i6.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:17:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:18:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:19:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x count)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (if (> (/ n 2) (is_majority-helper arr n x 0))\n      #f\n      #t))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdm6udslh.rkt:19:4\n\n>: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdm6udslh.rkt:20:4\n\n>: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdm6udslh.rkt:21:4\n\n>: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdm6udslh.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (&gt; n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "/tmp/tmpj2t_rqsn.rkt:10:18: read-syntax: missing `]` to close `[` on line 8, found instead `)`\n  possible cause: indentation suggests a missing `]` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:17:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:18:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:19:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgxmrndo.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i))\n       (if (>= (+ i 1) (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8ogh3l2.rkt:20:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 2 3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8ogh3l2.rkt:21:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8ogh3l2.rkt:22:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8ogh3l2.rkt:23:4\n\nvector-ref: contract violation\n  expected: vector?\n  given: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (if (= n 0)\n      #f\n      (let* ([mid (quotient n 2)]\n             [mid-elem (list-ref arr mid)])\n        (if (= x mid-elem)\n            (if (>= n 2)\n                (if (= x (list-ref arr (- mid 1)))\n                    (is_majority arr mid x)\n                    #t)\n                #t)\n            (if (< x mid-elem)\n                (is_majority (sublist arr 0 mid) mid x)\n                (is_majority (sublist arr (+ mid 1) n) (- n (+ mid 1)) x))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "/tmp/tmp9mlflxr6.rkt:16:30: sublist: unbound identifier\n  in: sublist\n  location...:\n   /tmp/tmp9mlflxr6.rkt:16:30\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (if (&gt; n 0)\n      (is_majority-helper arr n x)\n      #f))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "/tmp/tmptngcme4q.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (if (= n 0)\n      #f\n      (if (= x (car arr))\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (cdr arr) (- n 1) x))\n          (is_majority (cdr arr) (- n 1) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqc5lzed.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqc5lzed.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (if (= n 0)\n      #f\n      (if (= x (car arr))\n          (if (>= (/ n 2) (count x arr))\n              #t\n              #f)\n          (is_majority (cdr arr) (- n 1) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdaguhdsy.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: 3\n  argument position: 1st\n  other arguments...:\n   '(3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdaguhdsy.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: 4\n  argument position: 1st\n  other arguments...:\n   '(4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdaguhdsy.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdaguhdsy.rkt:21:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvpycs7gi.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvpycs7gi.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (or (is_majority (cdr arr) (- n 1) x) #t)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpse1hjces.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpse1hjces.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: 3\n  argument position: 1st\n  other arguments...:\n   '(3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: 4\n  argument position: 1st\n  other arguments...:\n   '(4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (is_majority-helper (cdr arr) (- n 1) x)\n            (is_majority-helper (cdr arr) (- n 1) x))))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2wn0c1mh.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2wn0c1mh.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2wn0c1mh.rkt:21:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (>= (+ i 1) (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbclpa6wn.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbclpa6wn.rkt:23:4\n\nlist-ref: index too large for list\n  index: 4\n  in: '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr)\n       (if (>= count (/ n 2)) #t #f)]\n      [(= (first arr) x)\n       (is_majority-helper (rest arr) n x (+ count 1))]\n      [else\n       (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqzrthlz.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) #t]\n      [else (helper (rest arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphc_coogb.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphc_coogb.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (if (= n 0)\n      #f\n      (if (= (car arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (cdr arr) (- n 1) x))\n          (is_majority (cdr arr) (- n 1) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnk517hx5.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnk517hx5.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (= (helper arr n x) (- n (/ n 2))) #t #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4j69t6r0.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4j69t6r0.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4j69t6r0.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4j69t6r0.rkt:20:4\n\n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphzguzyzu.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphzguzyzu.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x)]\n      [else #f]))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx20dfkww.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx20dfkww.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (= n 1)\n           #t\n           (helper (rest arr) (- n 1) x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_f5iw30w.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_f5iw30w.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptcw_tkpk.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptcw_tkpk.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (cond\n    [(= n 0) #f]\n    [(= (first arr) x) (is_majority (rest arr) (- n 1) x)]\n    [else (is_majority (rest arr) (- n 1) x)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxa8inc0t.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxa8inc0t.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxa8inc0t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= n (/ n 2)) #t (helper (rest arr) (- n 1) x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe34dwptm.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe34dwptm.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "/tmp/tmpe8ej57i6.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpe8ej57i6.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x))\n          (else (is_majority-helper (cdr arr) (- n 1) x))))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4q79_2i8.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4q79_2i8.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4q79_2i8.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x))\n          (else (is_majority-helper (cdr arr) (- n 1) x))))\n  (is_majority-helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4q79_2i8.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4q79_2i8.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4q79_2i8.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (if (= n 0)\n      #f\n      (if (= (car arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (cdr arr) (- n 1) x))\n          (is_majority (cdr arr) (- n 1) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnk517hx5.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnk517hx5.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "/tmp/tmpe8ej57i6.rkt:8:11: array-ref: unbound identifier\n  in: array-ref\n  location...:\n   /tmp/tmpe8ej57i6.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp4jw6szt.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: 3\n  argument position: 1st\n  other arguments...:\n   '(3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp4jw6szt.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: 4\n  argument position: 1st\n  other arguments...:\n   '(4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp4jw6szt.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp4jw6szt.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x count)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123101,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphe38bkdm.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphe38bkdm.rkt:19:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphe38bkdm.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (= n 1)\n           #t\n           (helper (rest arr) (- n 1) x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_f5iw30w.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_f5iw30w.rkt:22:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwfiw6n1.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (&gt;= (/ n 2) (count-occurrences arr x))\n           #t\n           #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123100,
      "stdout": "",
      "stderr": "/tmp/tmpgmwngj9k.rkt:11:14: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: 3\n  argument position: 1st\n  other arguments...:\n   '(3 3 3 3 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: 4\n  argument position: 1st\n  other arguments...:\n   '(4 4 4 6 6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 1 2 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfegi63oa.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: 1\n  argument position: 1st\n  other arguments...:\n   '(1 1 2 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcqx64j3j.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcqx64j3j.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}