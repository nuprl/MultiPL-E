{
  "name": "mbpp_633_pair_xor_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of xor of all pairs of numbers in the given list.\n(define (pair_xor_Sum arr n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pair_xor_Sum))\n    (check-equal? (candidate (list 5 9 7 6) 4) 47)\n    (check-equal? (candidate (list 7 3 5) 3) 12)\n    (check-equal? (candidate (list 7 3) 2) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n i))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 0)\n      0\n      (xor (list-ref arr n) (pair_xor_Sum arr (- n 1)))))\n",
    "  (define (helper arr n)\n    (if (= n 0)\n        0\n        (xor (car arr) (helper (cdr arr) (- n 1)))))\n  (define (xor a b)\n    (if (= a b)\n        0\n        1))\n  (define (sum_of_xor arr n)\n    (if (= n 1)\n        0\n        (+ (helper arr n) (sum_of_xor arr (- n 1)))))\n  (sum_of_xor arr n))\n",
    "  (if (= n 1)\n      0\n      (begin\n        (define (xor a b)\n          (if (= a 0)\n              b\n              (if (= b 0)\n                  a\n                  (if (= a b)\n                      0\n                      1))))\n        (+ (xor (list-ref arr 0) (list-ref arr 1))\n           (pair_xor_Sum (cdr arr) (- n 1))))))\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (- n 1))\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (cond [(empty? arr) 0]\n        [else (+ (xor (first arr) (first (rest arr))) (pair_xor_Sum (rest arr) (- n 1)))]))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(= n 0) sum]\n      [else (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (xor (car arr) (car (cdr arr)))))])\n    )\n  (pair_xor_Sum_helper arr n 0)\n  )\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n result)\n    (if (= n 0)\n        result\n        (pair_xor_Sum_helper (cdr arr) (- n 1) (+ result (xor (car arr) (car (cdr arr)))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(= n 0) sum]\n      [else (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (xor (car arr) (car (cdr arr)))))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (helper arr n)\n    (cond\n      [(= n 1) 0]\n      [(= n 2) (logxor (car arr) (cadr arr))]\n      [else (+ (helper arr (- n 1)) (logxor (car arr) (list-ref arr (- n 1))))]))\n  (helper arr n))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (cond\n    [(= n 1) 0]\n    [else (+ (logxor (list-ref arr 0) (list-ref arr (- n 1))) (pair_xor_Sum arr (- n 1)))]))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr (- n 1)))\n         (pair_xor_Sum arr (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n i))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i sum)\n    (if (= i n)\n        sum\n        (pair_xor_Sum_helper arr n (+ i 1) (+ sum (xor (list-ref arr i) (list-ref arr (+ i 1)))))))\n  (pair_xor_Sum_helper arr n 0 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (xor a b)\n    (if (and (zero? a) (zero? b))\n        0\n        (if (or (zero? a) (zero? b))\n            (if (zero? a) b a)\n            (bitwise-xor a b))))\n  (define (helper arr n sum)\n    (if (zero? n)\n        sum\n        (helper (cdr arr) (- n 1) (+ sum (xor (car arr) (car (cdr arr)))))))\n  (helper arr (- n 1) 0))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(empty? arr) sum]\n      [else (pair_xor_Sum_helper (cdr arr) n (+ sum (xor (car arr) n)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr (- n 1)))\n         (pair_xor_Sum arr (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(null? arr) sum]\n      [else (pair_xor_Sum_helper (cdr arr) n (+ sum (xor (car arr) n)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i acc)\n    (cond\n      [(= i n) acc]\n      [else (pair_xor_Sum_helper arr n (+ i 1) (+ acc (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))))]))\n  (pair_xor_Sum_helper arr n 0 0))\n",
    "  (define (sum_xor_pair arr n i)\n    (if (= i n)\n        0\n        (+ (logxor (list-ref arr i) (list-ref arr (+ i 1)))\n           (sum_xor_pair arr n (+ i 2)))))\n  (sum_xor_pair arr n 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (- n 1)) sum]\n      [else (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1)))))])))\n",
    "  (cond\n    [(= n 1) 0]\n    [(= n 2) (logxor (car arr) (cadr arr))]\n    [else (+ (logxor (car arr) (cadr arr)) (pair_xor_Sum (cdr arr) (- n 1)))]))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (if (= n 0)\n        sum\n        (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (apply xor (car arr) (cdr arr))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond [(= i n) 0]\n          [else (xor (list-ref arr i) (list-ref arr (+ i 1)))\n                (+ (pair_xor_Sum_helper arr n (+ i 2))\n                   (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      (car arr)\n      (xor (car arr) (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (define (pair_xor_Sum_helper arr n acc)\n    (if (= n 0)\n        acc\n        (pair_xor_Sum_helper (cdr arr) (- n 1) (+ acc (xor (car arr) (car (cdr arr)))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(= i n) sum]\n          [else (loop (+ i 1) (+ sum (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))))])))\n",
    "  (cond\n    [(= n 1) 0]\n    [else\n     (let ([x (car arr)])\n       (+ x (pair_xor_Sum (cdr arr) (- n 1))\n          (pair_xor_Sum (cdr arr) (- n 2))\n          (pair_xor_Sum (cdr arr) (- n 3))\n          (pair_xor_Sum (cdr arr) (- n 4))\n          (pair_xor_Sum (cdr arr) (- n 5))\n          (pair_xor_Sum (cdr arr) (- n 6))\n          (pair_xor_Sum (cdr arr) (- n 7))\n          (pair_xor_Sum (cdr arr) (- n 8))\n          (pair_xor_Sum (cdr arr) (- n 9))\n          (pair_xor_Sum (cdr arr) (- n 10))\n          (pair_xor_Sum (cdr arr) (- n 11))\n          (pair_xor_Sum (cdr arr) (- n 12))\n          (pair_xor_Sum (cdr arr) (- n 13))\n          (pair_xor_Sum (cdr arr) (- n 14))\n          (pair_xor_Sum (cdr arr) (- n 15))\n          (pair_xor_Sum (cdr arr) (- n 16))\n          (pair_xor_Sum (cdr arr) (- n 17))\n          (pair_xor_Sum (cdr arr) (- n 18))\n          (pair_xor_Sum (cdr arr) (- n 19))\n          (pair_xor_Sum (cdr arr) (- n 20))\n          (pair_xor_Sum (cdr arr) (- n 21))\n          (pair_xor_Sum (cdr arr) (- n 22))\n          (pair_xor_Sum (cdr arr) (- n 23))\n          (pair_xor_Sum (cdr arr) (- n 24))\n          (pair_xor_Sum (cdr arr) (- n 25))\n          (pair_xor_Sum (cdr arr) (- n 26))\n          (pair_xor_Sum (cdr arr)",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i sum)\n    (if (= i n)\n        sum\n        (pair_xor_Sum_helper arr n (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1)))))))\n  (pair_xor_Sum_helper arr n 0 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (xor (list-ref arr n) (pair_xor_Sum arr (- n 1)))]))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i n) sum]\n      [else\n       (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1)))))\n       ])))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1))) + (pair_xor_Sum_helper arr n (+ i 2))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (if (= n 0)\n        sum\n        (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (apply xor (car arr))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond ((= i n) 0)\n          (else (logxor (list-ref arr i) (list-ref arr (+ i 1)) (pair_xor_Sum_helper arr n (+ i 2))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr (- n 1))) (pair_xor_Sum arr (- n 1)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(= i n) sum]\n          [else (loop (+ i 1) (+ sum (xor (list-ref arr i) (list-ref arr (+ i 1)))))])\n    )\n  )\n",
    "  (cond\n    [(= n 1) 0]\n    [else\n     (let ([x (car arr)])\n       (+ x (pair_xor_Sum (cdr arr) (- n 1))\n          (pair_xor_Sum arr (- n 1))\n          (* x (pair_xor_Sum (cdr arr) (- n 1)))))]))\n",
    "  (cond\n    [(= n 1) 0]\n    [else (xor (list-ref arr 0) (list-ref arr (- n 1))) + (pair_xor_Sum arr (- n 1))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (cond ((= i (- n 1)) sum)\n          (else (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1)))))))))\n",
    "  (if (= n 1)\n      (list-ref arr 0)\n      (logxor (list-ref arr (- n 1)) (pair_xor_Sum arr (- n 1)))))\n",
    "  (let ([sum 0])\n    (for ([i (in-range n)])\n      (for ([j (in-range i n)])\n        (set! sum (+ sum (bitwise-xor (list-ref arr i) (list-ref arr j))))))\n    sum))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else (+ (xor (first arr) (second arr)) (pair_xor_Sum (rest arr) (- n 1)))]))\n",
    "  (cond\n    [(= n 1) 0]\n    [else (+ (logxor (list-ref arr 0) (list-ref arr (- n 1))) (pair_xor_Sum arr (- n 1)))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (cond\n    [(= n 1) 0]\n    [else\n     (+ (logxor (list-ref arr 0) (list-ref arr 1))\n        (pair_xor_Sum (cdr arr) (- n 1)))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (cond ((= i (- n 1)) sum)\n          (else (loop (+ i 1) (+ sum (xor (list-ref arr i) (list-ref arr (+ i 1)))))))))\n",
    "  (cond\n    [(= n 1) 0]\n    [else\n     (let ([x (car arr)])\n       (+ (xor x (pair_xor_Sum (cdr arr) (- n 1)))\n          (pair_xor_Sum (cdr arr) (- n 1))))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else (xor (car arr) (car (cdr arr))) + (pair_xor_Sum (cdr arr) (- n 1))]))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (cond ((= i n) sum)\n          (else (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1)))))))))\n",
    "  (define (helper arr n sum)\n    (cond\n      [(= n 0) sum]\n      [else (helper arr (- n 1) (+ sum (xor (list-ref arr (- n 1)) (list-ref arr (- n 2)))))]))\n  (helper arr n 0))\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond ((= n 1) sum)\n          ((= n 2) (+ (logxor (car arr) (cadr arr)) sum))\n          (else (pair_xor_Sum_helper (cdr arr) (- n 1) (+ (logxor (car arr) (cadr arr)) sum)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (sum_xor_pair arr n)\n    (cond ((= n 1) 0)\n          ((= n 2) (logxor (car arr) (cadr arr)))\n          (else (+ (logxor (car arr) (cadr arr)) (sum_xor_pair (cdr arr) (- n 1))))))\n  (sum_xor_pair arr n))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (+ (logxor (list-ref arr i) (list-ref arr (+ i 1)))\n           (pair_xor_Sum_helper arr n (+ i 2)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(= n 0) sum]\n      [else (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (xor (car arr) (car (cdr arr)))))])\n    )\n  (pair_xor_Sum_helper arr n 0)\n  )\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (if (= n 0)\n        sum\n        (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (xor (car arr) (car (cdr arr)))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond [(= i n) 0]\n          [else (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))\n                (+ (pair_xor_Sum_helper arr n (+ i 2))\n                   (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (xor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (helper arr n sum)\n    (cond\n      [(= n 0) sum]\n      [else (helper (cdr arr) (- n 1) (+ sum (logxor (car arr) (car (cdr arr)))))]))\n  (helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1))) (+ (pair_xor_Sum_helper arr n (+ i 1)) (pair_xor_Sum_helper arr n (+ i 2)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(= i n) sum]\n          [else (loop (+ i 1) (+ sum (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))))])))\n",
    "  (define (pair_xor_Sum_iter arr n sum)\n    (cond\n      [(= n 0) sum]\n      [else (pair_xor_Sum_iter arr (- n 1) (+ sum (xor (list-ref arr n) (list-ref arr (- n 1)))))]))\n  (pair_xor_Sum_iter arr n 0))\n",
    "  (let ([sum 0])\n    (for ([i (in-range n)])\n      (for ([j (in-range i+1 n)])\n        (set! sum (+ sum (bitwise-xor (list-ref arr i) (list-ref arr j))))))\n    sum))\n",
    "  (if (= n 1)\n      0\n      (+ (xor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (+ (logxor (list-ref arr i) (list-ref arr (+ i 1)))\n           (pair_xor_Sum_helper arr n (+ i 2)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (cond\n    [(= n 1) 0]\n    [else\n     (let ([x (car arr)])\n       (+ x (pair_xor_Sum (cdr arr) (- n 1)) (xor x (car (cdr arr))) (pair_xor_Sum (cdr arr) (- n 2))))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i n) sum]\n      [else (loop (+ i 1) (+ sum (xor (list-ref arr i) (list-ref arr (+ i 1)))))])))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr (- n 1)))\n         (pair_xor_Sum arr (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(= n 0) sum]\n      [else (pair_xor_Sum_helper arr (- n 1) (+ sum (xor (list-ref arr n) (list-ref arr (- n 1)))))]))\n  (pair_xor_Sum_helper arr (- n 1) 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (bitwise-xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (helper arr n sum)\n    (if (= n 0)\n        sum\n        (helper (cdr arr) (- n 1) (+ sum (logxor (car arr) (car (cdr arr)))))))\n  (helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (if (= n 0)\n        sum\n        (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (xor (car arr) (car (cdr arr)))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else\n       (+ (logxor (list-ref arr i) (list-ref arr (+ i 1)))\n          (pair_xor_Sum_helper arr n (+ i 2)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (cond\n    [(= n 1) 0]\n    [else\n     (+ (logxor (list-ref arr 0) (list-ref arr 1))\n        (pair_xor_Sum (cdr arr) (- n 1)))]))\n",
    "  (define (helper arr n)\n    (cond\n      [(empty? arr) 0]\n      [else (xor (first arr) (second arr))]))\n  (define (xor a b)\n    (cond\n      [(= a b) 0]\n      [else 1]))\n  (define (sum arr n)\n    (cond\n      [(empty? arr) 0]\n      [else (+ (first arr) (sum (rest arr) (- n 1)))]))\n  (sum (map helper arr n) n))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (xor (list-ref arr 0) (list-ref arr 1))]))\n",
    "  (if (= n 1)\n      (list-ref arr 0)\n      (logxor (list-ref arr (- n 1)) (pair_xor_Sum arr (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (cond\n    [(= n 1) 0]\n    [else (+ (logxor (list-ref arr 0) (list-ref arr 1))\n              (pair_xor_Sum (cdr arr) (- n 1)))]))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n acc)\n    (if (= n 0)\n        acc\n        (pair_xor_Sum_helper (cdr arr) (- n 1) (+ acc (xor (car arr) (car (cdr arr)))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (+ (logxor (list-ref arr i) (list-ref arr (+ i 1)))\n           (pair_xor_Sum_helper arr n (+ i 2)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond ((= i n) 0)\n          ((= i (+ n 1)) 0)\n          (else (+ (logxor (list-ref arr i) (list-ref arr (+ i 1))) (pair_xor_Sum_helper arr n (+ i 1))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1))) (pair_xor_Sum_helper arr n (+ i 2))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (xor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (let loop ((i 0) (j 1) (sum 0))\n    (cond\n      [(= i n) sum]\n      [(= j n) (loop (+ i 1) (+ i 2) sum)]\n      [else (loop i (+ j 1) (+ sum (xor (list-ref arr i) (list-ref arr j))))])))\n",
    "  (cond\n    [(= n 1) 0]\n    [else (logxor (list-ref arr 0) (list-ref arr 1))]))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      (car arr)\n      (xor (car arr) (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (cond\n    [(= n 1) (list-ref arr 0)]\n    [(= n 2) (xor (list-ref arr 0) (list-ref arr 1))]\n    [else (xor (pair_xor_Sum arr (- n 1)) (list-ref arr (- n 1)))]))\n",
    "  (if (= n 1)\n      (list-ref arr 0)\n      (bitwise-xor (list-ref arr (- n 1)) (pair_xor_Sum arr (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (if (= n 0)\n        sum\n        (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (xor (car arr) (car (cdr arr)))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond ((= i n) 0)\n          ((= i (+ n 1)) 0)\n          (else (+ (logxor (list-ref arr i) (list-ref arr (+ i 1)))\n                   (pair_xor_Sum_helper arr n (+ i 1))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (xor a b)\n    (bitwise-xor a b))\n  (define (sum_of_xor arr n)\n    (if (= n 1)\n        0\n        (+ (xor (list-ref arr 0) (list-ref arr (- n 1)))\n           (sum_of_xor (list-tail arr) (- n 1)))))\n  (sum_of_xor arr n))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (cond\n    [(= n 1) (list-ref arr 0)]\n    [else\n     (let ([x (list-ref arr 0)])\n       (+ x (pair_xor_Sum (cdr arr) (- n 1))))]))\n",
    "  (cond\n    [(= n 1) 0]\n    [else (xor (list-ref arr 0) (list-ref arr 1))]))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))\n    )\n  )\n  (pair_xor_Sum_helper arr n 0)\n)\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i n) sum]\n      [else (loop (+ i 1) (+ sum (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))))])))\n",
    "  (define (helper arr n sum)\n    (cond\n      [(= n 1) sum]\n      [else (helper (cdr arr) (- n 1) (+ sum (logxor (car arr) (car (cdr arr)))))]))\n  (helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond ((= n 0) sum)\n          ((= n 1) sum)\n          (else (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (xor (car arr) (car (cdr arr))))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (- n 1))\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (if (= n 0)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr (- n 1))) (pair_xor_Sum arr (- n 1)))))\n",
    "  (if (= n 1)\n      (car arr)\n      (xor (car arr) (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(empty? arr) sum]\n      [else (pair_xor_Sum_helper (cdr arr) n (+ sum (xor (car arr) n)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (xor (list-ref arr 0) (list-ref arr 1)) (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (cond\n    [(= n 1) 0]\n    [else (xor (list-ref arr 0) (list-ref arr (- n 1))) + (pair_xor_Sum arr (- n 1))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([x (first arr)])\n       (+ (xor x n) (pair_xor_Sum (rest arr) n)))]))\n",
    "  (cond\n    [(= n 1) 0]\n    [else\n     (let ([x (car arr)])\n       (+ x (pair_xor_Sum (cdr arr) (- n 1))\n          (pair_xor_Sum (cdr arr) (- n 2))\n          (pair_xor_Sum (cdr arr) (- n 3))\n          (pair_xor_Sum (cdr arr) (- n 4))\n          (pair_xor_Sum (cdr arr) (- n 5))\n          (pair_xor_Sum (cdr arr) (- n 6))\n          (pair_xor_Sum (cdr arr) (- n 7))\n          (pair_xor_Sum (cdr arr) (- n 8))\n          (pair_xor_Sum (cdr arr) (- n 9))\n          (pair_xor_Sum (cdr arr) (- n 10))\n          (pair_xor_Sum (cdr arr) (- n 11))\n          (pair_xor_Sum (cdr arr) (- n 12))\n          (pair_xor_Sum (cdr arr) (- n 13))\n          (pair_xor_Sum (cdr arr) (- n 14))\n          (pair_xor_Sum (cdr arr) (- n 15))\n          (pair_xor_Sum (cdr arr) (- n 16))\n          (pair_xor_Sum (cdr arr) (- n 17))\n          (pair_xor_Sum (cdr arr) (- n 18))\n          (pair_xor_Sum (cdr arr) (- n 19))\n          (pair_xor_Sum (cdr arr) (- n 20))\n          (pair_xor_Sum (cdr arr) (- n 21))\n          (pair_xor_Sum (cdr arr) (- n 22))\n          (pair_xor_Sum (cdr arr) (- n 23))\n          (pair_xor_Sum (cdr arr) (- n 24))\n          (pair_xor_Sum (cdr arr) (- n 25))\n          (pair_xor_Sum (cdr arr) (- n 26))\n          (pair_xor_Sum (cdr arr)",
    "  (cond\n    [(= n 1) 0]\n    [(= n 2) (logxor (car arr) (cadr arr))]\n    [else (+ (logxor (car arr) (cadr arr)) (pair_xor_Sum (cdr arr) (- n 1)))]))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (cond\n    [(= n 1) 0]\n    [else (xor (list-ref arr 0) (list-ref arr 1))\n          (+ (pair_xor_Sum arr (- n 1))\n             (pair_xor_Sum (cdr arr) (- n 1)))]))\n",
    "  (cond\n    [(= n 1) 0]\n    [else\n     (let ([x (car arr)])\n       (+ x (pair_xor_Sum (cdr arr) (- n 1)) (xor x (car (cdr arr))) (pair_xor_Sum (cdr arr) (- n 2))))]))\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (cond\n    [(= n 1) 0]\n    [(= n 2) (xor (list-ref arr 0) (list-ref arr 1))]\n    [else (+ (xor (list-ref arr 0) (list-ref arr 1)) (pair_xor_Sum (cdr arr) (- n 1)))]))\n",
    "  (define (sum_xor_pair arr n)\n    (if (= n 1)\n        0\n        (+ (logxor (list-ref arr 0) (list-ref arr (- n 1)))\n           (sum_xor_pair arr (- n 1)))))\n  (sum_xor_pair arr n))\n",
    "  (cond [(empty? arr) 0]\n        [else (+ (xor (first arr) (first (rest arr)))\n                 (pair_xor_Sum (rest (rest arr)) (- n 1)))]))\n",
    "  (define (pair_xor_Sum_iter arr n sum)\n    (cond\n      [(= n 0) sum]\n      [else\n       (pair_xor_Sum_iter (cdr arr) (- n 1)\n                          (+ sum (logxor (car arr) (car (cdr arr)))))\n      ]))\n  (pair_xor_Sum_iter arr n 0))\n",
    "  (cond\n    [(= n 1) 0]\n    [else (+ (logxor (list-ref arr 0) (list-ref arr 1)) (pair_xor_Sum (cdr arr) (- n 1)))]))\n",
    "  (if (= n 1)\n      0\n      (+ (xor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond ((= i n) 0)\n          (else (logxor (list-ref arr i) (list-ref arr (+ i 1)) (pair_xor_Sum_helper arr n (+ i 2))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (xor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (helper arr n sum)\n    (if (= n 0)\n        sum\n        (helper (cdr arr) (- n 1) (+ sum (logxor (car arr) (car (cdr arr)))))))\n  (helper arr n 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond ((= i n) 0)\n          ((= i (+ n -1)) 0)\n          (else (+ (logxor (list-ref arr i) (list-ref arr (+ i 1)))\n                   (pair_xor_Sum_helper arr n (+ i 1))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i n) sum]\n      [else (loop (+ i 1) (+ sum (xor (list-ref arr i) (list-ref arr (+ i 1)))))])))\n",
    "  (if (zero? n) 0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (helper arr n)\n    (if (= n 0)\n        0\n        (xor (car arr) (helper (cdr arr) (- n 1)))))\n  (define (xor x y)\n    (if (and (zero? x) (zero? y))\n        0\n        (if (and (zero? x) (not (zero? y)))\n            y\n            (if (and (not (zero? x)) (zero? y))\n                x\n                (if (and (not (zero? x)) (not (zero? y)))\n                    1\n                    0)))))\n  (define (sum_xor arr n)\n    (if (= n 0)\n        0\n        (+ (helper arr n) (sum_xor arr (- n 1)))))\n  (sum_xor arr n))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (- n 1))\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 1))\n               (pair_xor_Sum_helper arr n (+ i 2)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (cond ((= i n) sum)\n          (else (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1)))))))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(= n 1) sum]\n      [else (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (logxor (car arr) (car (cdr arr)))))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (cond\n    [(= n 1) 0]\n    [else\n     (let ([x (car arr)])\n       (+ (xor x (pair_xor_Sum (cdr arr) (- n 1)))\n          (pair_xor_Sum (cdr arr) (- n 1))))]))\n",
    "  (define (helper arr n sum)\n    (cond\n      [(= n 0) sum]\n      [else (helper arr (- n 1) (+ sum (xor (list-ref arr (- n 1)) (list-ref arr (- n 2)))))]))\n  (helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(empty? arr) sum]\n      [(empty? (rest arr)) sum]\n      [else (pair_xor_Sum_helper (rest arr) n (+ sum (bitwise-xor (first arr) (first (rest arr)))))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (if (= n 0)\n        sum\n        (pair_xor_Sum_helper (cdr arr) (- n 1) (+ sum (xor (car arr) (car (cdr arr)))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i sum)\n    (if (= i n)\n        sum\n        (pair_xor_Sum_helper arr n (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1)))))))\n  (pair_xor_Sum_helper arr n 0 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond ((= i n) 0)\n          ((= i (+ n -1)) 0)\n          (else (+ (logxor (list-ref arr i) (list-ref arr (+ i 1)))\n                   (pair_xor_Sum_helper arr n (+ i 1))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (- n 1)) sum]\n      [else (loop (+ i 1) (+ sum (xor (list-ref arr i) (list-ref arr (+ i 1)))))])))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (xor (list-ref arr i) (pair_xor_Sum_helper arr n (+ i 1)))\n    )\n  )\n  (pair_xor_Sum_helper arr n 0)\n)\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (- n 1))\n        sum\n        (loop (+ i 1) (+ sum (logxor (list-ref arr i) (list-ref arr (+ i 1))))))))\n",
    "  (if (zero? n)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n sum)\n    (cond\n      [(empty? arr) sum]\n      [(empty? (rest arr)) sum]\n      [else (pair_xor_Sum_helper (rest arr) n (+ sum (xor (first arr) (first (rest arr)))))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_iter arr n sum)\n    (cond\n      [(empty? arr) sum]\n      [else\n       (pair_xor_Sum_iter (rest arr) n (+ sum (xor (first arr) n)))]))\n  (pair_xor_Sum_iter arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i n) sum]\n      [else (loop (+ i 1) (+ sum (xor (list-ref arr i) (list-ref arr (+ i 1)))))])))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2)) (pair_xor_Sum_helper arr n i))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond ((= i n) 0)\n          (else (logxor (list-ref arr i) (list-ref arr (+ i 1)) (pair_xor_Sum_helper arr n (+ i 2))))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (cond\n      [(= i n) 0]\n      [else (bitwise-xor (list-ref arr i) (list-ref arr (+ i 1)))\n            (+ (pair_xor_Sum_helper arr n (+ i 2))\n               (pair_xor_Sum_helper arr n (+ i 1)))]))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (xor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (define (pair_xor_Sum_helper arr n i)\n    (if (= i n)\n        0\n        (+ (logxor (list-ref arr i) (list-ref arr (+ i 1)))\n           (pair_xor_Sum_helper arr n (+ i 2)))))\n  (pair_xor_Sum_helper arr n 0))\n",
    "  (if (= n 1)\n      0\n      (+ (xor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (if (= n 1)\n      0\n      (+ (logxor (list-ref arr 0) (list-ref arr 1))\n         (pair_xor_Sum (cdr arr) (- n 1)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (cond ((= i (- n 1)) sum)\n          (else (loop (+ i 1) (+ sum (xor (list-ref arr i) (list-ref arr (+ i 1)))))))))\n"
  ]
}