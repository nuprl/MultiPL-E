{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove characters from the first string which are present in the second string.\n(define (remove_dirty_chars string second_string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_dirty_chars))\n    (check-equal? (candidate \"probasscurve\" \"pros\") \"bacuve\")\n    (check-equal? (candidate \"digitalindia\" \"talent\") \"digiidi\")\n    (check-equal? (candidate \"exoticmiles\" \"toxic\") \"emles\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) (reverse result)]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (cons (first string) result))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (string-join\n   (filter (lambda (char) (not (string-contains second_string char)))\n           (string->list string))\n   \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string acc)\n    (cond\n      [(empty? string) (reverse acc)]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string acc)]\n      [else (remove_dirty_chars_iter (rest string) second_string (cons (first string) acc))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string)\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (string-empty? string)\n        \"\"\n        (if (string-contains second_string (string-ref string 0))\n            (remove_dirty_chars_iter (substring string 1) second_string)\n            (string-append (string (string-ref string 0)) (remove_dirty_chars_iter (substring string 1) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (string-append (filter (lambda (char) (not (string-contains second_string char))) string)))\n",
    "  (for/list ([char (in-string string)])\n    (if (member char second_string)\n        #f\n        char)))\n",
    "  (string-join (filter (lambda (char) (not (string-contains second_string char))) (string->list string)) \"\"))\n",
    "  (string-append\n   (filter (lambda (char) (not (member char second_string))) string)))\n"
  ]
}