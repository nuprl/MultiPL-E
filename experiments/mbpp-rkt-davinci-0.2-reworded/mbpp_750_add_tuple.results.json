{
  "name": "mbpp_750_add_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (add_tuple (first test_list) test_tup)\n                (add_tuple (rest test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsrus1sb_.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsrus1sb_.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsrus1sb_.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 7\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_list)\n      test_tup\n      (cons (cons (car test_list) test_tup)\n            (add_tuple (cdr test_list) test_tup))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkq50r5z2.rkt:15:4\nactual:     '((5 9 10) (6 9 10) (7 9 10) 9 10)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkq50r5z2.rkt:16:4\nactual:     '((6 10 11) (7 10 11) (8 10 11) 10 11)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkq50r5z2.rkt:17:4\nactual:     '((7 11 12) (8 11 12) (9 11 12) 11 12)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) (cons test_tup empty)]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (first test_list) (first test_tup))\n                (add_tuple (rest test_list) (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfi_f6nd.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfi_f6nd.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfi_f6nd.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond [(empty? test_list) empty]\n        [else (cons (add_tuple (rest test_list) test_tup)\n                    (add (first test_list) (first test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "/tmp/tmppy88xwbc.rkt:7:21: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmppy88xwbc.rkt:7:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(null? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) (cons test_tup empty)]\n    [(equal? (first test_list) test_tup) test_list]\n    [else (cons (first test_list) (add_tuple (rest test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp25nw27p9.rkt:15:4\nactual:     '(5 6 7 (9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp25nw27p9.rkt:16:4\nactual:     '(6 7 8 (10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp25nw27p9.rkt:17:4\nactual:     '(7 8 9 (11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cons test_tup test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk5aw6930.rkt:12:4\nactual:     '((9 10) 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk5aw6930.rkt:13:4\nactual:     '((10 11) 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk5aw6930.rkt:14:4\nactual:     '((11 12) 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (cons x test_tup)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:12:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:13:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:14:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (cons x test_tup)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:12:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:13:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:14:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(null? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_list)\n      test_tup\n      (cons (cons (car test_list) (car test_tup))\n            (add_tuple (cdr test_list) (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnrojkrh0.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnrojkrh0.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnrojkrh0.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (cons x test_tup)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:12:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:13:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:14:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) (cons test_tup empty)]\n    [(cons? test_list) (cons test_tup test_list)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpllx4uaon.rkt:14:4\nactual:     '((9 10) 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpllx4uaon.rkt:15:4\nactual:     '((10 11) 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpllx4uaon.rkt:16:4\nactual:     '((11 12) 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(null? test_list) test_tup]\n    [(null? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_list)\n      test_tup\n      (cons (car test_list) (add_tuple (cdr test_list) test_tup))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) empty]\n    [else (cons (cons (car test_list) test_tup)\n                (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptf92nbnq.rkt:15:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptf92nbnq.rkt:16:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptf92nbnq.rkt:17:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (cons x test_tup)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:12:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:13:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:14:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (add1 (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpocf8ag4z.rkt:16:4\n\nadd1: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpocf8ag4z.rkt:17:4\n\nadd1: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpocf8ag4z.rkt:18:4\n\nadd1: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5zf_gyr.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5zf_gyr.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5zf_gyr.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (cons (car test_list) test_tup)\n                (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4qn9q9m.rkt:15:4\nactual:     '((5 9 10) (6 9 10) (7 9 10) 9 10)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4qn9q9m.rkt:16:4\nactual:     '((6 10 11) (7 10 11) (8 10 11) 10 11)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph4qn9q9m.rkt:17:4\nactual:     '((7 11 12) (8 11 12) (9 11 12) 11 12)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) empty]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (first test_list) (first test_tup))\n                (add_tuple (rest test_list) (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8hr6wcx.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8hr6wcx.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8hr6wcx.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) (cons test_tup empty)]\n    [else (cons test_tup test_list)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacc6t19.rkt:14:4\nactual:     '((9 10) 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacc6t19.rkt:15:4\nactual:     '((10 11) 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacc6t19.rkt:16:4\nactual:     '((11 12) 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (first test_list) (add_tuple (rest test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_list)\n      test_tup\n      (cons (car test_list) (add_tuple (cdr test_list) test_tup))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (first test_list) (first test_tup))\n                (add_tuple (rest test_list) (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf28m9f2t.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf28m9f2t.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf28m9f2t.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (first test_list) (add_tuple (rest test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_tup)\n      test_list\n      (add_tuple (cons (car test_tup) test_list) (cdr test_tup))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2bv8sn8_.rkt:14:4\nactual:     '(10 9 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2bv8sn8_.rkt:15:4\nactual:     '(11 10 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2bv8sn8_.rkt:16:4\nactual:     '(12 11 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(cons? test_list) (cons (add_tuple (car test_list) test_tup)\n                             (add_tuple (cdr test_list) test_tup))]\n    [else (add_tuple (cdr test_list) test_tup)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50apcgg9.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: 5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50apcgg9.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50apcgg9.rkt:18:4\n\ncdr: contract violation\n  expected: pair?\n  given: 7\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_tup)\n      test_list\n      (add_tuple (append test_list (list (car test_tup))) (cdr test_tup))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list (list test_tup)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmfmw7l60.rkt:12:4\nactual:     '(5 6 7 (9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmfmw7l60.rkt:13:4\nactual:     '(6 7 8 (10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmfmw7l60.rkt:14:4\nactual:     '(7 8 9 (11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (cons x test_tup)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:12:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:13:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:14:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) (cons test_tup empty)]\n    [else (cons test_tup test_list)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacc6t19.rkt:14:4\nactual:     '((9 10) 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacc6t19.rkt:15:4\nactual:     '((10 11) 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacc6t19.rkt:16:4\nactual:     '((11 12) 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_tup)\n      test_list\n      (cons (car test_tup) (add_tuple test_list (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jq680s6.rkt:14:4\nactual:     '(9 10 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jq680s6.rkt:15:4\nactual:     '(10 11 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jq680s6.rkt:16:4\nactual:     '(11 12 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (cons x test_tup)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:12:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:13:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:14:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_list)\n      test_tup\n      (cons (car test_list) (add_tuple (cdr test_list) test_tup))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond [(empty? test_list) test_tup]\n        [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_tup)\n      test_list\n      (cons (car test_tup) (add_tuple test_list (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jq680s6.rkt:14:4\nactual:     '(9 10 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jq680s6.rkt:15:4\nactual:     '(10 11 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jq680s6.rkt:16:4\nactual:     '(11 12 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond [(empty? test_list) test_tup]\n        [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_list) (car test_tup))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:16:4\nactual:     '((5 . 9) (6 . 10) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:17:4\nactual:     '((6 . 10) (7 . 11) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pho8ttt.rkt:18:4\nactual:     '((7 . 11) (8 . 12) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_list)\n      test_tup\n      (cons (car test_list) (add_tuple (cdr test_list) test_tup))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (cons x test_tup)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:12:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:13:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:14:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (if (null? test_tup)\n      test_list\n      (cons (car test_tup) (add_tuple test_list (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jq680s6.rkt:14:4\nactual:     '(9 10 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jq680s6.rkt:15:4\nactual:     '(10 11 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jq680s6.rkt:16:4\nactual:     '(11 12 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (cons x test_tup)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:12:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:13:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:14:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (add_tuple (first test_list) test_tup)\n                (add_tuple (rest test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsrus1sb_.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsrus1sb_.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsrus1sb_.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 7\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) (list test_tup)]\n    [(empty? test_tup) test_list]\n    [else (cons (cons (car test_tup) (car test_list))\n                (add_tuple (cdr test_list) (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7u1q6a0l.rkt:16:4\nactual:     '((9 . 5) (10 . 6) 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7u1q6a0l.rkt:17:4\nactual:     '((10 . 6) (11 . 7) 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7u1q6a0l.rkt:18:4\nactual:     '((11 . 7) (12 . 8) 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) (list test_tup)]\n    [(equal? (first test_list) test_tup) test_list]\n    [else (cons test_tup test_list)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi8zbkwm1.rkt:15:4\nactual:     '((9 10) 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi8zbkwm1.rkt:16:4\nactual:     '((10 11) 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi8zbkwm1.rkt:17:4\nactual:     '((11 12) 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (first test_list) (add_tuple (rest test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cons (car test_tup) (cons (car (cdr test_tup)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfb0evhkr.rkt:12:4\nactual:     '(9 10 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfb0evhkr.rkt:13:4\nactual:     '(10 11 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfb0evhkr.rkt:14:4\nactual:     '(11 12 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (+ x (car test_tup))) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:12:4\nactual:     '(14 15 16)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:13:4\nactual:     '(16 17 18)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyi7py5l.rkt:14:4\nactual:     '(18 19 20)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (map (lambda (x) (cons x test_tup)) test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:12:4\nactual:     '((5 9 10) (6 9 10) (7 9 10))\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:13:4\nactual:     '((6 10 11) (7 10 11) (8 10 11))\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphneautc1.rkt:14:4\nactual:     '((7 11 12) (8 11 12) (9 11 12))\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [(empty? test_tup) test_list]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) (cons test_tup empty)]\n    [else (cons test_tup test_list)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacc6t19.rkt:14:4\nactual:     '((9 10) 5 6 7)\nexpected:   '(5 6 7 9 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacc6t19.rkt:15:4\nactual:     '((10 11) 6 7 8)\nexpected:   '(6 7 8 10 11)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxacc6t19.rkt:16:4\nactual:     '((11 12) 7 8 9)\nexpected:   '(7 8 9 11 12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1666123177,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_tuple (cdr test_list) test_tup))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12))\n))\n\n(test-humaneval)",
      "timestamp": 1665510437,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}