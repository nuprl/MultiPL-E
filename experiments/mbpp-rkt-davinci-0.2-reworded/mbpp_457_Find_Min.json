{
  "name": "mbpp_457_Find_Min",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the sublist having minimum length.\n(define (Find_Min lst)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Min))\n    (check-equal? (candidate (list (list 1) (list 1 2) (list 1 2 3))) (list 1))\n    (check-equal? (candidate (list (list 1 1) (list 1 1 1) (list 1 2 7 8))) (list 1 1))\n    (check-equal? (candidate (list (list \"x\") (list \"x\" \"y\") (list \"x\" \"y\" \"z\"))) (list \"x\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else\n     (let* ([sub1 (car lst)]\n            [sub2 (car (cdr lst))]\n            [sub3 (Find_Min (cdr (cdr lst)))])\n       (cond\n         [(< (length sub1) (length sub2))\n          (if (< (length sub1) (length sub3))\n              sub1\n              sub3)]\n         [(< (length sub2) (length sub1))\n          (if (< (length sub2) (length sub3))\n              sub2\n              sub3)]))]))\n",
    "  (if (null? lst)\n      '()\n      (letrec ([sublst (lambda (lst)\n                         (if (null? lst)\n                             '()\n                             (cons (car lst) (sublst (cdr lst)))))]\n               [sublst_len (lambda (lst)\n                             (if (null? lst)\n                                 0\n                                 (+ 1 (sublst_len (cdr lst)))))]\n               [min_len (lambda (lst)\n                          (if (null? (cdr lst))\n                              (sublst_len (car lst))\n                              (min (sublst_len (car lst)) (min_len (cdr lst)))))]\n               [min_sublst (lambda (lst)\n                             (if (null? (cdr lst))\n                                 (car lst)\n                                 (if (= (sublst_len (car lst)) (min_len lst))\n                                     (car lst)\n                                     (min_sublst (cdr lst)))))]\n               [min_sublst_len (lambda (lst)\n                                 (sublst_len (min_sublst lst)))]\n               [min_sublst_len_lst (lambda (lst)\n                                     (if (null? lst)\n                                         '()\n                                         (if (= (sublst_len (car lst)) (min_sublst_len lst))\n                                             (cons (car lst) (min_sublst_len_lst (cdr lst)))\n                                             (min_sublst_len_lst (cdr lst)))))]\n               [min_sublst_len_lst_len (lambda (lst)\n                                         (if (null? lst)\n                                             0\n                                             (+ 1 (min_sublst_len_lst_len (cdr lst)))))]\n               [min_sublst_len_lst_len_lst (lambda (lst)\n                                             (if (null? lst)\n                ",
    "  (cond\n    [(empty? lst) empty]\n    [(empty? (rest lst)) (first lst)]\n    [else (if (< (length (first lst)) (length (first (rest lst))))\n              (first lst)\n              (Find_Min (rest lst)))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (< (length (car lst)) (length (car (cdr lst))))\n              (car lst)\n              (car (cdr lst)))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (< (length (car lst)) (length (cadr lst)))\n             (car lst)\n             (cadr lst))]))\n",
    "  (if (null? lst)\n      '()\n      (if (null? (cdr lst))\n          (car lst)\n          (if (< (length (car lst)) (length (car (cdr lst))))\n              (Find_Min (cons (car lst) (cdr (cdr lst))))\n              (Find_Min (cdr lst))))))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (< (length (car lst)) (length (cadr lst)))\n              (car lst)\n              (cadr lst))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [(empty? (rest lst)) lst]\n    [else\n     (if (< (length (first lst)) (length (first (rest lst))))\n         (Find_Min (cons (first lst) (rest (rest lst))))\n         (Find_Min (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [(empty? (rest lst)) (first lst)]\n    [else\n     (let* ([min (Find_Min (rest lst))]\n            [min-len (length min)])\n       (if (< min-len (length (first lst)))\n           min\n           (first lst)))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else\n     (let* ([sub1 (car lst)]\n            [sub2 (car (cdr lst))]\n            [sub3 (Find_Min (cdr (cdr lst)))])\n       (cond\n         [(< (length sub1) (length sub2))\n          (if (< (length sub1) (length sub3))\n              sub1\n              sub3)]\n         [(< (length sub2) (length sub3)) sub2]\n         [else sub3]))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else\n     (let* ([lst1 (car lst)]\n            [lst2 (car (cdr lst))]\n            [lst3 (cdr (cdr lst))])\n       (if (< (length lst1) (length lst2))\n           (Find_Min (cons lst1 lst3))\n           (Find_Min (cons lst2 lst3))))]))\n",
    "  (if (null? lst)\n      '()\n      (let loop ((lst lst) (min (car lst)) (min-len (length (car lst))) (sublst '()))\n        (if (null? lst)\n            (reverse sublst)\n            (let ((len (length (car lst))))\n              (if (< len min-len)\n                  (loop (cdr lst) (car lst) len (list (car lst)))\n                  (if (= len min-len)\n                      (loop (cdr lst) min min-len (cons (car lst) sublst))\n                      (loop (cdr lst) min min-len sublst))))))))\n",
    "  (cond\n    [(empty? lst) empty]\n    [(empty? (rest lst)) (first lst)]\n    [else (if (< (length (first lst)) (length (Find_Min (rest lst))))\n             (first lst)\n             (Find_Min (rest lst)))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else\n     (let ([x (car lst)]\n           [y (car (cdr lst))])\n       (if (< (length x) (length y))\n           x\n           y))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else\n     (let* ([sub1 (car lst)]\n            [sub2 (car (cdr lst))]\n            [sub3 (Find_Min (cdr lst))])\n       (cond\n         [(< (length sub1) (length sub2))\n          (if (< (length sub1) (length sub3))\n              sub1\n              sub3)]\n         [(< (length sub2) (length sub3)) sub2]\n         [else sub3]))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (< (length (car lst)) (length (cadr lst)))\n             (car lst)\n             (cadr lst))]))\n",
    "  (if (null? lst)\n      '()\n      (if (null? (cdr lst))\n          (car lst)\n          (if (< (length (car lst)) (length (car (cdr lst))))\n              (car lst)\n              (car (cdr lst))))))\n",
    "  (cond [(empty? lst) empty]\n        [(empty? (rest lst)) (first lst)]\n        [else (if (< (length (first lst)) (length (first (rest lst))))\n                  (first lst)\n                  (Find_Min (rest lst)))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (< (length (car lst)) (length (car (cdr lst))))\n              (car lst)\n              (car (cdr lst)))]))\n",
    "  (let loop ((lst lst) (min-lst '()))\n    (cond ((null? lst) min-lst)\n          ((null? min-lst) (loop (cdr lst) (car lst)))\n          ((&lt; (length (car lst)) (length min-lst)) (loop (cdr lst) (car lst)))\n          (else (loop (cdr lst) min-lst)))))\n"
  ]
}