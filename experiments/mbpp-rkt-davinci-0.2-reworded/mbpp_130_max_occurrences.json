{
  "name": "mbpp_130_max_occurrences",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the item with maximum frequency in a given list.\n(define (max_occurrences nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_occurrences))\n    (check-equal? (candidate (list 2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2)) 2)\n    (check-equal? (candidate (list 2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18)) 8)\n    (check-equal? (candidate (list 10 20 20 30 40 90 80 50 30 20 50 10)) 20)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (letrec ([count (lambda (nums)\n                    (cond [(empty? nums) '()]\n                          [else (cons (list (first nums) (length (filter (lambda (n) (= n (first nums))) nums)))\n                                      (count (filter (lambda (n) (not (= n (first nums)))) nums)))]))]\n           [max-count (lambda (nums)\n                        (cond [(empty? nums) 0]\n                              [(> (second (first nums)) (max-count (rest nums))) (second (first nums))]\n                              [else (max-count (rest nums))]))]\n           [max-occurrences (lambda (nums)\n                              (cond [(empty? nums) '()]\n                                    [(= (second (first nums)) (max-count (count nums))) (first (first nums))]\n                                    [else (max-occurrences (rest nums))]))])\n    (max-occurrences (count nums))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (cond [(empty? nums) max-num]\n          [else\n           (let ([num (first nums)])\n             (loop (rest nums)\n                   (if (> (count num nums) max-count)\n                       num\n                       max-num)\n                   (if (> (count num nums) max-count)\n                       (count num nums)\n                       max-count)))])))\n",
    "  (let ([max-num (apply max nums)]\n        [max-count 0])\n    (for ([num nums])\n      (let ([count (count num nums)])\n        (when (> count max-count)\n          (set! max-count count)\n          (set! max-num num))))\n    max-num))\n",
    "  (define (occurrences nums num)\n    (if (null? nums)\n        0\n        (if (= num (car nums))\n            (+ 1 (occurrences (cdr nums) num))\n            (occurrences (cdr nums) num))))\n  (define (max_occurrences_helper nums max_num max_occurrence)\n    (if (null? nums)\n        max_num\n        (let ((occurrence (occurrences nums (car nums))))\n          (if (> occurrence max_occurrence)\n              (max_occurrences_helper (cdr nums) (car nums) occurrence)\n              (max_occurrences_helper (cdr nums) max_num max_occurrence)))))\n  (max_occurrences_helper nums 0 0))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max occurrences)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (define (helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (helper (rest nums) max-num max-count)]))\n  (helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let loop ((nums nums) (max 0) (max-occurrences 0))\n    (cond ((null? nums) max)\n          ((> (count (car nums) nums) max-occurrences)\n           (loop (cdr nums) (car nums) (count (car nums) nums)))\n          (else (loop (cdr nums) max max-occurrences)))))\n",
    "  (define (occurrences nums num)\n    (if (null? nums)\n        0\n        (+ (if (= num (car nums)) 1 0)\n           (occurrences (cdr nums) num))))\n  (define (max_occurrences_helper nums max-num max-occurrences)\n    (if (null? nums)\n        max-num\n        (let ((num (car nums))\n              (occurrences (occurrences nums num)))\n          (if (> occurrences max-occurrences)\n              (max_occurrences_helper (cdr nums) num occurrences)\n              (max_occurrences_helper (cdr nums) max-num max-occurrences)))))\n  (max_occurrences_helper nums 0 0))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond ((null? nums) max-num)\n          ((= (count (car nums) nums) max-count)\n           (max_occurrences-helper (cdr nums) (car nums) (count (car nums) nums)))\n          ((&gt; (count (car nums) nums) max-count)\n           (max_occurrences-helper (cdr nums) (car nums) (count (car nums) nums)))\n          (else (max_occurrences-helper (cdr nums) max-num max-count))))\n  (max_occurrences-helper nums (car nums) (count (car nums) nums)))\n</code>\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (+ (if (= (car nums) num) 1 0)\n           (count-occurrences (cdr nums) num))))\n  (define (max-occurrence nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count-occurrences nums (car nums))))\n          (if (> count max-count)\n              (max-occurrence (cdr nums) (car nums) count)\n              (max-occurrence (cdr nums) max-num max-count)))))\n  (max-occurrence nums 0 0))\n",
    "  (define (max_occurrences_iter nums max_num max_count)\n    (cond\n      [(empty? nums) max_num]\n      [(= (first nums) max_num)\n       (max_occurrences_iter (rest nums) max_num (+ max_count 1))]\n      [(> (count (first nums) nums) max_count)\n       (max_occurrences_iter (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_iter (rest nums) max_num max_count)]))\n  (max_occurrences_iter nums (first nums) (count (first nums) nums)))\n",
    "  (let ([max-num (apply max nums)]\n        [max-count 0])\n    (for ([n nums])\n      (when (= n max-num)\n        (set! max-count (+ max-count 1))))\n    (list max-num max-count)))\n</code>\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([num (car nums)]\n              [rest (cdr nums)])\n          (helper rest (if (assoc num acc)\n                           (let ([old-count (cdr (assoc num acc))])\n                             (cons (cons num (+ 1 old-count)) (remove (assoc num acc) acc)))\n                           (cons (cons num 1) acc))))))\n  (let ([acc (helper nums '())])\n    (let ([max-count (apply max (map cdr acc))])\n      (filter (lambda (pair) (= (cdr pair) max-count)) acc))))\n"
  ]
}