{
  "name": "mbpp_130_max_occurrences",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the item with maximum frequency in a given list.\n(define (max_occurrences nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_occurrences))\n    (check-equal? (candidate (list 2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2)) 2)\n    (check-equal? (candidate (list 2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18)) 8)\n    (check-equal? (candidate (list 10 20 20 30 40 90 80 50 30 20 50 10)) 20)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (letrec ([count (lambda (nums)\n                    (cond [(empty? nums) '()]\n                          [else (cons (list (first nums) (length (filter (lambda (n) (= n (first nums))) nums)))\n                                      (count (filter (lambda (n) (not (= n (first nums)))) nums)))]))]\n           [max-count (lambda (nums)\n                        (cond [(empty? nums) 0]\n                              [(> (second (first nums)) (max-count (rest nums))) (second (first nums))]\n                              [else (max-count (rest nums))]))]\n           [max-occurrences (lambda (nums)\n                              (cond [(empty? nums) '()]\n                                    [(= (second (first nums)) (max-count (count nums))) (first (first nums))]\n                                    [else (max-occurrences (rest nums))]))])\n    (max-occurrences (count nums))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (cond [(empty? nums) max-num]\n          [else\n           (let ([num (first nums)])\n             (loop (rest nums)\n                   (if (> (count num nums) max-count)\n                       num\n                       max-num)\n                   (if (> (count num nums) max-count)\n                       (count num nums)\n                       max-count)))])))\n",
    "  (let ([max-num (apply max nums)]\n        [max-count 0])\n    (for ([num nums])\n      (let ([count (count num nums)])\n        (when (> count max-count)\n          (set! max-count count)\n          (set! max-num num))))\n    max-num))\n",
    "  (define (occurrences nums num)\n    (if (null? nums)\n        0\n        (if (= num (car nums))\n            (+ 1 (occurrences (cdr nums) num))\n            (occurrences (cdr nums) num))))\n  (define (max_occurrences_helper nums max_num max_occurrence)\n    (if (null? nums)\n        max_num\n        (let ((occurrence (occurrences nums (car nums))))\n          (if (> occurrence max_occurrence)\n              (max_occurrences_helper (cdr nums) (car nums) occurrence)\n              (max_occurrences_helper (cdr nums) max_num max_occurrence)))))\n  (max_occurrences_helper nums 0 0))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max occurrences)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (define (helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (helper (rest nums) max-num max-count)]))\n  (helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let loop ((nums nums) (max 0) (max-occurrences 0))\n    (cond ((null? nums) max)\n          ((> (count (car nums) nums) max-occurrences)\n           (loop (cdr nums) (car nums) (count (car nums) nums)))\n          (else (loop (cdr nums) max max-occurrences)))))\n",
    "  (define (occurrences nums num)\n    (if (null? nums)\n        0\n        (+ (if (= num (car nums)) 1 0)\n           (occurrences (cdr nums) num))))\n  (define (max_occurrences_helper nums max-num max-occurrences)\n    (if (null? nums)\n        max-num\n        (let ((num (car nums))\n              (occurrences (occurrences nums num)))\n          (if (> occurrences max-occurrences)\n              (max_occurrences_helper (cdr nums) num occurrences)\n              (max_occurrences_helper (cdr nums) max-num max-occurrences)))))\n  (max_occurrences_helper nums 0 0))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond ((null? nums) max-num)\n          ((= (count (car nums) nums) max-count)\n           (max_occurrences-helper (cdr nums) (car nums) (count (car nums) nums)))\n          ((&gt; (count (car nums) nums) max-count)\n           (max_occurrences-helper (cdr nums) (car nums) (count (car nums) nums)))\n          (else (max_occurrences-helper (cdr nums) max-num max-count))))\n  (max_occurrences-helper nums (car nums) (count (car nums) nums)))\n</code>\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (+ (if (= (car nums) num) 1 0)\n           (count-occurrences (cdr nums) num))))\n  (define (max-occurrence nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count-occurrences nums (car nums))))\n          (if (> count max-count)\n              (max-occurrence (cdr nums) (car nums) count)\n              (max-occurrence (cdr nums) max-num max-count)))))\n  (max-occurrence nums 0 0))\n",
    "  (define (max_occurrences_iter nums max_num max_count)\n    (cond\n      [(empty? nums) max_num]\n      [(= (first nums) max_num)\n       (max_occurrences_iter (rest nums) max_num (+ max_count 1))]\n      [(> (count (first nums) nums) max_count)\n       (max_occurrences_iter (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_iter (rest nums) max_num max_count)]))\n  (max_occurrences_iter nums (first nums) (count (first nums) nums)))\n",
    "  (let ([max-num (apply max nums)]\n        [max-count 0])\n    (for ([n nums])\n      (when (= n max-num)\n        (set! max-count (+ max-count 1))))\n    (list max-num max-count)))\n</code>\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([num (car nums)]\n              [rest (cdr nums)])\n          (helper rest (if (assoc num acc)\n                           (let ([old-count (cdr (assoc num acc))])\n                             (cons (cons num (+ 1 old-count)) (remove (assoc num acc) acc)))\n                           (cons (cons num 1) acc))))))\n  (let ([acc (helper nums '())])\n    (let ([max-count (apply max (map cdr acc))])\n      (filter (lambda (pair) (= (cdr pair) max-count)) acc))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([occurrences (make-hash)])\n    (for ([n nums])\n      (hash-update! occurrences n add1 0))\n    (let ([max-occurrence 0])\n      (for ([n nums])\n        (let ([occurrence (hash-ref occurrences n 0)])\n          (when (> occurrence max-occurrence)\n            (set! max-occurrence occurrence))))\n      max-occurrence)))\n",
    "  (letrec ([occurrences (for/hash ([n nums])\n                           (hash-ref occurrences n (\u03bb () 0))\n                           (hash-update occurrences n add1))]\n           [max-occurrence (apply max (hash-values occurrences))])\n    (for/hash ([n (hash-keys occurrences)])\n      (when (= (hash-ref occurrences n) max-occurrence)\n        (hash n (hash-ref occurrences n))))))\n",
    "  (define (helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (helper (rest nums) max-num max-count)]))\n  (helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([max-occurrences (apply max (map length (group nums)))]\n        [max-occurrences-nums (filter (lambda (n) (= (length n) max-occurrences)) (group nums))])\n    (if (= (length max-occurrences-nums) 1)\n        (car (car max-occurrences-nums))\n        (error \"More than one number with max occurrences\"))))\n",
    "  (define (helper nums max-occurrences max-occurrence)\n    (cond ((null? nums) max-occurrence)\n          ((= (count (car nums) nums) max-occurrences)\n           (helper (cdr nums) max-occurrences (car nums)))\n          ((&gt; (count (car nums) nums) max-occurrences)\n           (helper (cdr nums) (count (car nums) nums) (car nums)))\n          (else (helper (cdr nums) max-occurrences max-occurrence))))\n  (helper nums 0 0))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (cond\n      [(empty? nums) max-num]\n      [(= (count (first nums) nums) max-count)\n       (loop (rest nums) (first nums) (count (first nums) nums))]\n      [(> (count (first nums) nums) max-count)\n       (loop (rest nums) (first nums) (count (first nums) nums))]\n      [else (loop (rest nums) max-num max-count)])))\n",
    "  (let loop ([nums nums] [max-num (car nums)] [max-count 0])\n    (if (null? nums)\n        max-num\n        (let ([count (count (car nums) nums)])\n          (if (> count max-count)\n              (loop (cdr nums) (car nums) count)\n              (loop (cdr nums) max-num max-count))))))\n",
    "  (let ((counts (map (lambda (x) (list x (count x nums))) nums)))\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([occurrences (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second occurrences))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (count n nums)) nums)])\n    (apply max (map (lambda (n) (list n (list-ref counts n))) nums))))\n",
    "  (cond\n    [(empty? nums) '()]\n    [(= (length nums) 1) (first nums)]\n    [else\n     (let* ([max-occurrences (max_occurrences (rest nums))]\n            [max-occurrences-count (count max-occurrences nums)]\n            [first-count (count (first nums) nums)])\n       (if (> max-occurrences-count first-count)\n           max-occurrences\n           (first nums)))]))\n",
    "  (let ([counts (map (lambda (num) (list num (count num nums))) nums)])\n    (apply max (map (lambda (num-count) (cadr num-count)) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) (remdup nums))])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (let ([counts (for/hash ([n nums])\n                  (values n (count n nums)))])\n    (for/first ([(n . c) (in-hash counts)])\n      (when (= c (apply max (hash-values counts)))\n        n))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max-occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max-occurrences-helper (rest nums) max-num (+ 1 max-count))]\n      [else (max-occurrences-helper (rest nums) (first nums) 1)]))\n  (max-occurrences-helper nums (first nums) 1))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (let ((max-occurrences 0)\n        (max-occurrences-item '()))\n    (for ([n nums])\n      (let ((occurrences (count n nums)))\n        (when (> occurrences max-occurrences)\n          (set! max-occurrences occurrences)\n          (set! max-occurrences-item n))))\n    max-occurrences-item))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (count num)\n    (length (filter (lambda (x) (= x num)) nums)))\n  (define (max_occurrence nums)\n    (if (null? nums)\n        (error \"No numbers in list\")\n        (if (null? (cdr nums))\n            (car nums)\n            (if (> (count (car nums)) (count (car (cdr nums))))\n                (max_occurrence (cons (car nums) (cdr (cdr nums))))\n                (max_occurrence (cdr nums))))))\n  (max_occurrence nums))\n",
    "  (define (helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (helper (cdr nums) num count)\n              (helper (cdr nums) max-num max-count)))))\n  (helper nums (car nums) (count (car nums) nums)))\n",
    "  (let ([counts (map (lambda (n) (count n nums)) nums)])\n    (apply max (map (lambda (n) (count n counts)) counts))))\n",
    "  (let ([counts (map (lambda (n) (count n nums)) nums)])\n    (apply max (map (lambda (n) (list n (list-ref counts n))) nums))))\n",
    "  (letrec ([occurrences (for/fold ([occurrences '()]) ([num nums])\n                          (let ([occurrence (assoc num occurrences)])\n                            (if occurrence\n                                (cons (cons num (add1 (cdr occurrence)))\n                                      (remove occurrence occurrences))\n                                (cons (cons num 1) occurrences))))])\n    (apply max (map cdr occurrences))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (car n) (cadr n))) counts))))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (loop (cdr nums) num count)\n              (loop (cdr nums) max-num max-count))))))\n",
    "  (letrec ([count (lambda (n nums)\n                    (cond [(empty? nums) 0]\n                          [(= n (first nums)) (+ 1 (count n (rest nums)))]\n                          [else (count n (rest nums))]))]\n           [max-occurrences (lambda (nums)\n                              (cond [(empty? nums) 0]\n                                    [else (max (count (first nums) nums)\n                                               (max-occurrences (rest nums)))]))])\n    (cond [(empty? nums) 0]\n          [else (first (filter (lambda (n) (= (count n nums) (max-occurrences nums)))\n                               nums))])))\n",
    "  (letrec ([count (lambda (n)\n                    (length (filter (lambda (x) (= x n)) nums)))]\n           [max-count (lambda (nums)\n                        (cond [(empty? nums) 0]\n                              [(> (count (first nums)) (max-count (rest nums)))\n                               (count (first nums))]\n                              [else (max-count (rest nums))]))]\n           [max-occurrences (lambda (nums)\n                              (cond [(empty? nums) 0]\n                                    [(= (count (first nums)) (max-count nums))\n                                     (first nums)]\n                                    [else (max-occurrences (rest nums))]))])\n    (max-occurrences nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (letrec ([count (lambda (n)\n                    (length (filter (lambda (x) (= x n)) nums)))])\n    (apply max (map count nums))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([freqs (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second freqs))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (count-occurrences nums num)\n    (cond ((null? nums) 0)\n          ((= num (car nums)) (+ 1 (count-occurrences (cdr nums) num)))\n          (else (count-occurrences (cdr nums) num))))\n  (define (max-occurrence nums)\n    (cond ((null? nums) 0)\n          ((&gt; (count-occurrences nums (car nums)) (max-occurrence (cdr nums)))\n           (car nums))\n          (else (max-occurrence (cdr nums)))))\n  (max-occurrence nums))\n",
    "  (let ([counts (map (lambda (num) (list num (count num nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([occurrences (make-hash)])\n    (for ([num nums])\n      (hash-update occurrences num add1 0))\n    (let ([max-occurrence 0]\n          [max-occurrence-num 0])\n      (hash-for-each occurrences\n        (lambda (num occurrence)\n          (when (> occurrence max-occurrence)\n            (set! max-occurrence occurrence)\n            (set! max-occurrence-num num))))\n      max-occurrence-num)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let ([max-occurrences (apply max (map length (group nums)))]\n        [max-occurrences-nums (filter (lambda (num) (= max-occurrences (length num))) (group nums))])\n    (if (= 1 (length max-occurrences-nums))\n        (car max-occurrences-nums)\n        (error \"More than one max-occurrence\"))))\n",
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map car counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second freqs))))\n",
    "  (letrec ([count (lambda (n) (length (filter (lambda (x) (= x n)) nums)))]\n           [max-count (lambda (n) (apply max (map count nums)))]\n           [max-occurrences (lambda (n) (filter (lambda (x) (= (count x) n)) nums))])\n    (max-occurrences (max-count 0))))\n",
    "  (let ((max-occurrences 0)\n        (max-occurrence-num 0))\n    (for ([num nums])\n      (let ((occurrences (count num nums)))\n        (when (&gt; occurrences max-occurrences)\n          (set! max-occurrences occurrences)\n          (set! max-occurrence-num num))))\n    max-occurrence-num))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max_occurrences_helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_helper (rest nums) max-num max-count)]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (let loop ([nums nums] [max-occurrences 0] [max-occurrence-num 0])\n    (if (null? nums)\n        max-occurrence-num\n        (let* ([num (car nums)]\n               [occurrences (count num nums)])\n          (if (> occurrences max-occurrences)\n              (loop (cdr nums) occurrences num)\n              (loop (cdr nums) max-occurrences max-occurrence-num))))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let loop ((nums nums)\n             (max-num 0)\n             (max-count 0))\n    (cond ((null? nums) max-num)\n          ((> (count (car nums) nums) max-count)\n           (loop (cdr nums) (car nums) (count (car nums) nums)))\n          (else (loop (cdr nums) max-num max-count)))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let ([counts (map (lambda (n) (count n nums)) nums)])\n    (apply max (map (lambda (n) (list n (list-ref counts n))) nums))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (max_occurrences_helper (cdr nums) num count)\n              (max_occurrences_helper (cdr nums) max-num max-count)))))\n  (max_occurrences_helper nums 0 0))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (letrec ([count (lambda (n nums)\n                    (if (null? nums)\n                        0\n                        (+ (if (equal? n (car nums))\n                               1\n                               0)\n                           (count n (cdr nums)))))\n            [max (lambda (nums)\n                   (if (null? nums)\n                       0\n                       (max (cdr nums)\n                            (count (car nums) nums))))])\n    (max nums)))\n",
    "  (letrec ([count (lambda (n lst)\n                    (cond [(empty? lst) 0]\n                          [(= n (first lst)) (+ 1 (count n (rest lst)))]\n                          [else (count n (rest lst))]))]\n           [max-count (lambda (lst)\n                        (cond [(empty? lst) 0]\n                              [(> (count (first lst) lst) (max-count (rest lst)))\n                               (count (first lst) lst)]\n                              [else (max-count (rest lst))]))]\n           [max-occurrences (lambda (lst)\n                              (cond [(empty? lst) 0]\n                                    [(= (count (first lst) lst) (max-count lst))\n                                     (first lst)]\n                                    [else (max-occurrences (rest lst))]))])\n    (max-occurrences nums)))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) (car acc)]\n      [(member (car nums) (cdr nums)) (helper (cdr nums) (cons (car nums) acc))]\n      [else (helper (cdr nums) acc)]))\n  (helper nums (list)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences_helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_helper (rest nums) max-num max-count)]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (apply max (map (lambda (x) (length (filter (lambda (y) (= x y)) nums))) nums)))\n",
    "  (let ((max-occurrences 0)\n        (max-occurrences-item 0))\n    (for ([num nums])\n      (let ((occurrences (count num nums)))\n        (when (&gt; occurrences max-occurrences)\n          (set! max-occurrences occurrences)\n          (set! max-occurrences-item num))))\n    max-occurrences-item))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second occurrences))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second freqs))))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second occurrences))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (c) (cadr c)) counts))))\n",
    "  (define (count n)\n    (count-occurrences n nums))\n  (define (max-count n1 n2)\n    (if (> (count n1) (count n2))\n        n1\n        n2))\n  (foldl max-count (car nums) (cdr nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (define (count nums)\n    (cond\n      [(empty? nums) 0]\n      [(equal? (first nums) (first (helper nums '()))) (+ 1 (count (rest nums)))]\n      [else (count (rest nums))]))\n  (define (max_count nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(> (count nums) acc) (max_count (rest nums) (count nums))]\n      [else (max_count (rest nums) acc)]))\n  (define (max_occurrences_helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(= (count nums) (max_count nums 0)) (max_occurrences_helper (rest nums) (cons (first nums) acc))]\n      [else (max_occurrences_helper (rest nums) acc)]))\n  (max_occurrences_helper nums '()))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (helper (cdr nums) num count)\n              (helper (cdr nums) max-num max-count)))))\n  (helper nums 0 0))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (letrec ([count (lambda (n nums)\n                    (cond [(empty? nums) 0]\n                          [(= n (first nums)) (+ 1 (count n (rest nums)))]\n                          [else (count n (rest nums))]))]\n           [max (lambda (nums)\n                  (cond [(empty? nums) 0]\n                        [(> (count (first nums) nums) (max (rest nums))) (first nums)]\n                        [else (max (rest nums))]))])\n    (max nums)))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) (car acc)]\n      [(member (car nums) (cdr nums)) (helper (cdr nums) (cons (car nums) acc))]\n      [else (helper (cdr nums) acc)]))\n  (helper nums (list)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max occurrences)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map first counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond ((null? nums) max-num)\n          ((= (count (car nums) nums) max-count)\n           (max_occurrences-helper (cdr nums) (car nums) max-count))\n          ((&gt; (count (car nums) nums) max-count)\n           (max_occurrences-helper (cdr nums) (car nums) (count (car nums) nums)))\n          (else (max_occurrences-helper (cdr nums) max-num max-count))))\n  (max_occurrences-helper nums (car nums) (count (car nums) nums)))\n",
    "  (define (max_occurrences_iter nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max_occurrences_iter (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (max_occurrences_iter (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_iter (rest nums) max-num max-count)]))\n  (max_occurrences_iter nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (for/hash ([n nums])\n                  (values n (count n nums)))]\n        [max-count (apply max (hash-values counts))])\n    (hash-ref counts max-count)))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ((counts (map (lambda (n) (list n (count n nums))) nums)))\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (define (max-occurrences-iter nums max-num max-occurrences)\n    (cond [(empty? nums) max-num]\n          [else\n           (let ((num (first nums))\n                 (rest (rest nums)))\n             (cond [(= num max-num)\n                    (max-occurrences-iter rest max-num (+ max-occurrences 1))]\n                   [else\n                    (max-occurrences-iter rest num 1)]))]))\n  (max-occurrences-iter nums 0 0))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) freqs))))\n",
    "  (let ([freqs (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second freqs))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond [(empty? nums) max-num]\n          [else\n           (define current-num (first nums))\n           (define current-count (count current-num nums))\n           (if (> current-count max-count)\n               (max_occurrences-helper (rest nums) current-num current-count)\n               (max_occurrences-helper (rest nums) max-num max-count))]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([occurrences (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second occurrences))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (if (= (car nums) num)\n            (+ 1 (count-occurrences (cdr nums) num))\n            (count-occurrences (cdr nums) num))))\n  (define (max-occurrence nums)\n    (if (null? nums)\n        0\n        (if (= (count-occurrences nums (car nums))\n              (count-occurrences nums (max-occurrence (cdr nums))))\n            (car nums)\n            (max-occurrence (cdr nums)))))\n  (max-occurrence nums))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (f) (car f)) freqs))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (letrec ([count (lambda (n nums)\n                    (cond [(empty? nums) 0]\n                          [(= n (first nums)) (+ 1 (count n (rest nums)))]\n                          [else (count n (rest nums))]))]\n           [max_count (lambda (nums)\n                        (cond [(empty? nums) 0]\n                              [else (max (count (first nums) nums)\n                                         (max_count (rest nums)))]))])\n    (let ([max_count (max_count nums)])\n      (cond [(empty? nums) '()]\n            [(= max_count (count (first nums) nums)) (first nums)]\n            [else (max_occurrences (rest nums))]))))\n",
    "  (define (count num)\n    (length (filter (lambda (x) (= x num)) nums)))\n  (define (max_count nums)\n    (if (null? (cdr nums))\n        (count (car nums))\n        (max (count (car nums)) (max_count (cdr nums)))))\n  (define (max_occurrence_helper nums max)\n    (if (null? nums)\n        '()\n        (if (= (count (car nums)) max)\n            (cons (car nums) (max_occurrence_helper (cdr nums) max))\n            (max_occurrence_helper (cdr nums) max))))\n  (max_occurrence_helper nums (max_count nums)))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences_helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_helper (rest nums) max-num max-count)]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (letrec ([count (lambda (nums)\n                    (cond [(empty? nums) empty]\n                          [else (cons (list (first nums) (count-occurrences (first nums) nums))\n                                      (count (remove (first nums) nums)))]))]\n           [max-count (lambda (counts)\n                        (cond [(empty? counts) empty]\n                              [(> (length (first counts)) (length (first (rest counts))))\n                               (max-count (cons (first counts) empty))]\n                              [else (max-count (rest counts))]))])\n    (max-count (count nums))))\n",
    "  (apply max (map (lambda (x) (length (filter (lambda (y) (= x y)) nums))) nums)))\n",
    "  (define (max-occurrences-helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (max-occurrences-helper (cdr nums) num count)\n              (max-occurrences-helper (cdr nums) max-num max-count)))))\n  (max-occurrences-helper nums 0 0))\n",
    "  (let ((occurrences (hash)))\n    (for ([n nums])\n      (hash-update occurrences n add1 0))\n    (let ((max-occurrence 0)\n          (max-occurrence-key '()))\n      (hash-map (lambda (k v)\n                  (if (&gt; v max-occurrence)\n                      (begin\n                        (set! max-occurrence v)\n                        (set! max-occurrence-key k))))\n                occurrences)\n      max-occurrence-key)))\n",
    "  (define (max-occurrences-helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count (car nums) nums)))\n          (if (> count max-count)\n              (max-occurrences-helper (cdr nums) (car nums) count)\n              (max-occurrences-helper (cdr nums) max-num max-count)))))\n  (max-occurrences-helper nums 0 0))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (if (= (car nums) num)\n            (+ 1 (count-occurrences (cdr nums) num))\n            (count-occurrences (cdr nums) num))))\n  (define (max-occurrences nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count-occurrences nums (car nums))))\n          (if (&gt; count max-count)\n              (max-occurrences (cdr nums) (car nums) count)\n              (max-occurrences (cdr nums) max-num max-count)))))\n  (max-occurrences nums 0 0))\n</code>\n",
    "  (define (max_occurrences_iter nums max-num max-count)\n    (cond ((null? nums) max-num)\n          ((= (count (car nums) nums) max-count)\n           (max_occurrences_iter (cdr nums) (car nums) max-count))\n          ((&gt; (count (car nums) nums) max-count)\n           (max_occurrences_iter (cdr nums) (car nums) (count (car nums) nums)))\n          (else (max_occurrences_iter (cdr nums) max-num max-count))))\n  (max_occurrences_iter nums 0 0))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let* ([n (car nums)]\n               [occurrences (assoc n acc)]\n               [new-acc (if occurrences\n                            (cons (cons n (+ 1 (cdr occurrences)))\n                                  (remove occurrences acc))\n                            (cons (cons n 1) acc))])\n          (helper (cdr nums) new-acc))))\n  (let* ([acc (helper nums '())]\n         [max-occurrence (apply max (map cdr acc))])\n    (filter (lambda (pair) (= (cdr pair) max-occurrence)) acc)))\n",
    "  (let ((max-occurrences 0)\n        (max-occurrence-item 0))\n    (for ([num nums])\n      (let ((occurrences (count num nums)))\n        (when (> occurrences max-occurrences)\n          (set! max-occurrences occurrences)\n          (set! max-occurrence-item num))))\n    max-occurrence-item))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (l) (list (cadr l) (car l))) counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second freqs))))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(assoc (first nums) acc) (helper (rest nums) (assoc (first nums) acc))]\n      [else (helper (rest nums) (cons (cons (first nums) 1) acc))]))\n  (define (max_occurrences_helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(> (cdr (assoc (first nums) acc)) (cdr (assoc (first acc) acc))) (max_occurrences_helper (rest nums) (assoc (first nums) acc))]\n      [else (max_occurrences_helper (rest nums) acc)]))\n  (max_occurrences_helper nums (helper nums '())))\n",
    "  (letrec ([occurrences (for/fold ([occurrences '()]) ([num nums])\n                          (let ([count (if (assoc num occurrences)\n                                           (cdr (assoc num occurrences))\n                                           0)])\n                            (cons (cons num (add1 count)) occurrences)))])\n    (apply max (map cdr occurrences))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (define (max_occurrences_iter nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max_occurrences_iter (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (max_occurrences_iter (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_iter (rest nums) max-num max-count)]))\n  (max_occurrences_iter nums (first nums) (count (first nums) nums)))\n",
    "  (define (helper nums max_num max_count)\n    (cond\n      [(empty? nums) max_num]\n      [(= (first nums) max_num) (helper (rest nums) max_num (+ max_count 1))]\n      [(> (count (first nums) nums) max_count) (helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (helper (rest nums) max_num max_count)]))\n  (helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map first counts))))\n",
    "  (define (max_occurrences_helper nums max_num max_occurrences)\n    (cond\n      [(empty? nums) max_num]\n      [(= (first nums) max_num) (max_occurrences_helper (rest nums) max_num (+ max_occurrences 1))]\n      [(> (count (first nums) nums) max_occurrences) (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_helper (rest nums) max_num max_occurrences)]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ((occurrences (hash)))\n    (for ([num nums])\n      (hash-update occurrences num add1 0))\n    (let ((max-occurrence 0))\n      (for ([num nums])\n        (let ((occurrence (hash-ref occurrences num 0)))\n          (when (&gt; occurrence max-occurrence)\n            (set! max-occurrence occurrence))))\n      max-occurrence)))\n",
    "  (let ([counts (map (lambda (num) (list num (count num nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([freq (make-hash)])\n    (for ([n nums])\n      (hash-update! freq n add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (hash-ref freq max-freq))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (c) (list (cadr c) (car c))) counts))))\n",
    "  (let ([occurrences (hash)])\n    (for ([n nums])\n      (hash-update occurrences n add1 0))\n    (let ([max-occurrence (apply max (hash-values occurrences))])\n      (hash-ref occurrences max-occurrence))))\n",
    "  (define (helper nums)\n    (cond\n      [(empty? nums) empty]\n      [else (cons (list (first nums) (count (first nums) nums))\n                  (helper (remove (first nums) nums)))]))\n  (define (count num lst)\n    (cond\n      [(empty? lst) 0]\n      [(= num (first lst)) (+ 1 (count num (rest lst)))]\n      [else (count num (rest lst))]))\n  (define (max_count lst)\n    (cond\n      [(empty? lst) 0]\n      [(> (second (first lst)) (max_count (rest lst))) (second (first lst))]\n      [else (max_count (rest lst))]))\n  (define (max_occurrences_helper lst)\n    (cond\n      [(empty? lst) empty]\n      [(= (second (first lst)) (max_count lst)) (first (first lst))]\n      [else (max_occurrences_helper (rest lst))]))\n  (max_occurrences_helper (helper nums)))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max occurrences)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (lst) (list (cadr lst) (car lst))) counts))))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (if (= (car nums) num)\n            (+ 1 (count-occurrences (cdr nums) num))\n            (count-occurrences (cdr nums) num))))\n  (define (max-occurrence nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count-occurrences nums (car nums))))\n          (if (> count max-count)\n              (max-occurrence (cdr nums) (car nums) count)\n              (max-occurrence (cdr nums) max-num max-count)))))\n  (max-occurrence nums 0 0))\n",
    "  (letrec ([occurrences (for/hash ([n nums])\n                          (hash-update n add1 0 occurrences))])\n    (hash-ref occurrences (apply max (hash-keys occurrences)))))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([curr (car nums)]\n              [rest (cdr nums)])\n          (if (member curr acc)\n              (helper rest (cons (list curr (add1 (cadr (assoc curr acc))))\n                                 (remove (lambda (x) (equal? (car x) curr)) acc)))\n              (helper rest (cons (list curr 1) acc))))))\n  (car (sort (helper nums '())\n             (lambda (x y) (&gt; (cadr x) (cadr y))))))\n</code>\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (if (= (car nums) num)\n            (+ 1 (count-occurrences (cdr nums) num))\n            (count-occurrences (cdr nums) num))))\n  (define (max-occurrence nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count-occurrences nums (car nums))))\n          (if (> count max-count)\n              (max-occurrence (cdr nums) (car nums) count)\n              (max-occurrence (cdr nums) max-num max-count)))))\n  (max-occurrence nums 0 0))\n",
    "  (define (max-occurrences-iter nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max-occurrences-iter (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max-occurrences-iter (rest nums) (first nums) (count (first nums) nums))]\n      [else (max-occurrences-iter (rest nums) max-num max-count)]))\n  (max-occurrences-iter nums (first nums) (count (first nums) nums)))\n",
    "  (define (max_occurrences_iter nums max_num max_count)\n    (cond\n      [(empty? nums) max_num]\n      [(= (first nums) max_num) (max_occurrences_iter (rest nums) max_num (+ max_count 1))]\n      [(> (count (first nums) nums) max_count) (max_occurrences_iter (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_iter (rest nums) max_num max_count)]))\n  (max_occurrences_iter nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond [(empty? nums) max-num]\n          [else\n           (let ([num (first nums)])\n             (cond [(= num max-num)\n                    (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n                   [else\n                    (max_occurrences-helper (rest nums) num 1)]))]))\n  (max_occurrences-helper nums (first nums) 1))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([max-occurrences (apply max (map length (group nums)))])\n    (filter (lambda (x) (= (length x) max-occurrences)) (group nums))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max-occurrences-helper nums max-num max-count)\n    (cond ((null? nums) max-num)\n          ((= (count (car nums) nums) max-count)\n           (max-occurrences-helper (cdr nums) (car nums) max-count))\n          ((&gt; (count (car nums) nums) max-count)\n           (max-occurrences-helper (cdr nums) (car nums) (count (car nums) nums)))\n          (else (max-occurrences-helper (cdr nums) max-num max-count))))\n  (max-occurrences-helper nums (car nums) (count (car nums) nums)))\n</code>\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let* ([n (car nums)]\n               [n-count (count n nums)]\n               [acc-count (count (car acc) nums)])\n          (if (> n-count acc-count)\n              (helper (cdr nums) (list n))\n              (helper (cdr nums) acc)))))\n  (car (helper nums (list (car nums)))))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let* ([n (car nums)]\n               [new-acc (if (assoc n acc)\n                            (let ([new-count (+ (cdr (assoc n acc)) 1)])\n                              (cons (cons n new-count) (remove (lambda (x) (equal? (car x) n)) acc)))\n                            (cons (cons n 1) acc))])\n          (helper (cdr nums) new-acc))))\n  (let* ([acc (helper nums '())]\n         [max-count (apply max (map cdr acc))]\n         [max-nums (filter (lambda (x) (= (cdr x) max-count)) acc)])\n    max-nums))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (define (helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count (car nums) nums)))\n          (if (> count max-count)\n              (helper (cdr nums) (car nums) count)\n              (helper (cdr nums) max-num max-count)))))\n  (helper nums (car nums) 0))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n</code>\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (letrec ([count (lambda (n)\n                    (length (filter (lambda (x) (= x n)) nums)))]\n           [max-count (lambda (nums)\n                        (if (null? nums)\n                            0\n                            (max (count (car nums))\n                                 (max-count (cdr nums)))))]\n           [max-occurrences (lambda (nums)\n                              (if (null? nums)\n                                  '()\n                                  (if (= (count (car nums)) (max-count nums))\n                                      (cons (car nums) (max-occurrences (cdr nums)))\n                                      (max-occurrences (cdr nums)))))]\n           [max-occurrences-helper (lambda (nums)\n                                     (if (null? nums)\n                                         '()\n                                         (if (= (count (car nums)) (max-count nums))\n                                             (cons (car nums) (max-occurrences-helper (cdr nums)))\n                                             (max-occurrences-helper (cdr nums)))))]\n           [max-occurrences-helper2 (lambda (nums)\n                                      (if (null? nums)\n                                          '()\n                                          (if (= (count (car nums)) (max-count nums))\n                                              (cons (car nums) (max-occurrences-helper2 (cdr nums)))\n                                              (max-occurrences-helper2 (cdr nums)))))]\n           [max-occurrences-helper3 (lambda (nums)\n                                      (if (null? nums)\n                                          '()\n                                          (if (= (count (car nums)) (max-count nums))\n                                              (cons (car nums) (max-occurrences-helper3 (cdr nums)))\n                                              (max-occurrences-helper3 (cdr nums)))))]\n           [max-occurrences-helper4 (lambda (nums)\n                                      (if (null? nums)\n                                          '",
    "  (let ((counts (map (lambda (x) (list x (count x nums))) nums)))\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [else\n       (max_occurrences-helper (rest nums) (first nums) 1)]))\n  (max_occurrences-helper nums (first nums) 1))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second freqs))))\n",
    "  (let ([counts (map (\u03bb (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([freq (make-hash)])\n    (for ([num nums])\n      (hash-update! freq num add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (hash-ref freq max-freq))))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (cond ((null? nums) max-num)\n          ((= max-count (count (car nums) nums))\n           (max_occurrences_helper (cdr nums) (car nums) max-count))\n          ((> max-count (count (car nums) nums))\n           (max_occurrences_helper (cdr nums) max-num max-count))\n          (else (max_occurrences_helper (cdr nums) (car nums) (count (car nums) nums)))))\n  (max_occurrences_helper nums (car nums) (count (car nums) nums)))\n",
    "  (define (helper nums)\n    (cond [(empty? nums) empty]\n          [else (cons (list (first nums) (count (first nums) nums))\n                     (helper (remove (first nums) nums)))]))\n  (define (count num lst)\n    (cond [(empty? lst) 0]\n          [(= num (first lst)) (+ 1 (count num (rest lst)))]\n          [else (count num (rest lst))]))\n  (define (max_occurrences_helper lst)\n    (cond [(empty? lst) empty]\n          [(empty? (rest lst)) (first lst)]\n          [else (if (> (second (first lst)) (second (first (rest lst))))\n                   (first lst)\n                   (max_occurrences_helper (rest lst)))]))\n  (max_occurrences_helper (helper nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (apply max (map (lambda (x) (length (filter (lambda (y) (= x y)) nums))) nums)))\n"
  ]
}