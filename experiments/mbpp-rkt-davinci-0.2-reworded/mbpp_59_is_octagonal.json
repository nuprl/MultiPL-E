{
  "name": "mbpp_59_is_octagonal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth octagonal number.\n(define (is_octagonal n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_octagonal))\n    (check-equal? (candidate 5) 65)\n    (check-equal? (candidate 10) 280)\n    (check-equal? (candidate 15) 645)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt)\n                 (* 2 n-sqrt)\n                 1)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (floor n-sqrt)])\n    (and (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let ((a (sqrt (+ (* 2 n) (* 2 (sqrt 2))))))\n    (and (integer? a)\n         (= n (* (- a 1) (/ (- a 1) 2))))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (integer? (/ (+ x 1) 2)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= x (floor x))\n         (= x (+ 1 (sqrt (+ (* 2 n) (* 3 1))))))))\n",
    "  (let loop ((i 1))\n    (if (&gt; (* i (1+ i)) n)\n        #f\n        (if (= (* i (1+ i)) n)\n            #t\n            (loop (1+ i))))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 3 n-sqrt) 1)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ([d (- (sqrt (+ (* 8 n) 1)) 1)])\n    (and (integer? d) (= (modulo d 4) 1))))\n",
    "  (let ((x (sqrt (+ (* 4 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ([m (sqrt (+ (* 8 n) 1))])\n    (and (integer? m) (= (modulo m 4) 1))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (integer? (/ (+ x 1) 2)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x) (= (modulo x 2) 1))))\n",
    "  (let ([x (sqrt (+ (* 2 n) (* 3 1)))])\n    (and (integer? x) (= x (floor x)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (integer? n-sqrt)])\n    (and (integer? n)\n         (integer? (/ (+ n-sqrt 1) 3))\n         (integer? (/ (- n-sqrt 1) 3))\n         (not n-sqrt-int))))\n",
    "  (let ((x (sqrt (+ (* 2 n) 1))))\n    (and (integer? x)\n         (integer? (/ x 2)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= x (floor x))\n         (= 1 (modulo x 2)))))\n",
    "  (let ([n2 (* n n)])\n    (and (integer? (/ (+ (sqrt (+ (* 3 n2) 1)) 1) 3))\n         (integer? (/ (+ (sqrt (+ (* 3 n2) 1)) -1) 3)))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n (* i i (+ i 1) (* 3 i -2))) #t]\n      [(> n (* i i (+ i 1) (* 3 i -2))) (loop n (+ i 1))]\n      [else #f])))\n"
  ]
}