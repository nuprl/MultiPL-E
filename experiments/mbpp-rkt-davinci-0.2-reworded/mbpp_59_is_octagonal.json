{
  "name": "mbpp_59_is_octagonal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth octagonal number.\n(define (is_octagonal n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_octagonal))\n    (check-equal? (candidate 5) 65)\n    (check-equal? (candidate 10) 280)\n    (check-equal? (candidate 15) 645)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt)\n                 (* 2 n-sqrt)\n                 1)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (floor n-sqrt)])\n    (and (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let ((a (sqrt (+ (* 2 n) (* 2 (sqrt 2))))))\n    (and (integer? a)\n         (= n (* (- a 1) (/ (- a 1) 2))))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (integer? (/ (+ x 1) 2)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= x (floor x))\n         (= x (+ 1 (sqrt (+ (* 2 n) (* 3 1))))))))\n",
    "  (let loop ((i 1))\n    (if (&gt; (* i (1+ i)) n)\n        #f\n        (if (= (* i (1+ i)) n)\n            #t\n            (loop (1+ i))))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 3 n-sqrt) 1)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ([d (- (sqrt (+ (* 8 n) 1)) 1)])\n    (and (integer? d) (= (modulo d 4) 1))))\n",
    "  (let ((x (sqrt (+ (* 4 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ([m (sqrt (+ (* 8 n) 1))])\n    (and (integer? m) (= (modulo m 4) 1))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (integer? (/ (+ x 1) 2)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x) (= (modulo x 2) 1))))\n",
    "  (let ([x (sqrt (+ (* 2 n) (* 3 1)))])\n    (and (integer? x) (= x (floor x)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (integer? n-sqrt)])\n    (and (integer? n)\n         (integer? (/ (+ n-sqrt 1) 3))\n         (integer? (/ (- n-sqrt 1) 3))\n         (not n-sqrt-int))))\n",
    "  (let ((x (sqrt (+ (* 2 n) 1))))\n    (and (integer? x)\n         (integer? (/ x 2)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= x (floor x))\n         (= 1 (modulo x 2)))))\n",
    "  (let ([n2 (* n n)])\n    (and (integer? (/ (+ (sqrt (+ (* 3 n2) 1)) 1) 3))\n         (integer? (/ (+ (sqrt (+ (* 3 n2) 1)) -1) 3)))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n (* i i (+ i 1) (* 3 i -2))) #t]\n      [(> n (* i i (+ i 1) (* 3 i -2))) (loop n (+ i 1))]\n      [else #f])))\n",
    "  (let* ((sqrt-n (sqrt n))\n         (sqrt-n-int (inexact->exact (floor sqrt-n))))\n    (and (integer? sqrt-n)\n         (= n (* (expt sqrt-n-int 3) (+ sqrt-n-int 1) 2)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m) (= (truncate m) m))))\n",
    "  (let ([n (sqrt (+ (* 2 n) 1))])\n    (and (integer? n)\n         (integer? (+ n 1)))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= (truncate n-sqrt) n-sqrt)\n         (= (modulo n-sqrt 2) 1))))\n",
    "  (let ([d (- (* 8 n) 1)])\n    (and (integer? (sqrt d))\n         (= d (* (sqrt d) (sqrt d))))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (if (= n-sqrt n-sqrt-int)\n        (let* ([k n-sqrt-int]\n               [k-sqr (* k k)])\n          (and (integer? k)\n               (= k-sqr (+ k-sqr (* 3 k) 2))\n               (not (= k 1))))\n        #f)))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 4) 1))))\n",
    "  (let ([x (sqrt (+ (* 2 n) (* 3 1)))])\n    (and (integer? x)\n         (= x (round x)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int (sqrt (expt n-sqrt-int 2) 2)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (= n-sqrt-int n-sqrt)\n         (= (modulo n-sqrt-int 2) 1))))\n",
    "  (let ([m (sqrt (+ (* 2 n) 1))])\n    (and (integer? m)\n         (= (round m) m))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (= (* m (1+ m)) (* 2 n)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= x (floor x))\n         (= (mod x 4) 1))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (integer? (+ n-sqrt 1))\n         (integer? (- n-sqrt 1))\n         (integer? (/ (- n-sqrt 1) 3)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (= (modulo m 1) 0)\n         (= (modulo m 2) 1))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (integer? (+ n-sqrt 1))\n         (= n (* (+ n-sqrt 1) (- n-sqrt 1) 2)))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let loop ((i 1))\n    (if (&gt; (* i (1+ i)) (* 2 n))\n        #f\n        (if (= (* i (1+ i)) (* 2 n))\n            #t\n            (loop (1+ i))))))\n",
    "  (let ([x (sqrt (+ (* 2 n) (* 2 (sqrt 2))))])\n    (and (integer? x)\n         (= n (+ (* x (- x 1)) (* 2 (sqrt 2)))))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (= (floor n-sqrt) n-sqrt)\n         (= (modulo n-sqrt 2) 1))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= x (floor x))\n         (= 1 (modulo x 2)))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= (truncate n-sqrt) n-sqrt)\n         (= (modulo n-sqrt 2) 1))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1))))\n    (and (integer? x) (= x (floor x)))))\n",
    "  (let ([n (sqrt (+ (* 2 n) 1))])\n    (and (integer? n)\n         (integer? (+ n 1)))))\n",
    "  (let ((sqrt-n (sqrt n)))\n    (and (integer? sqrt-n)\n         (= (truncate sqrt-n) sqrt-n)\n         (integer? (sqrt (+ (* 2 sqrt-n) 1)))\n         (= (truncate (sqrt (+ (* 2 sqrt-n) 1))) (sqrt (+ (* 2 sqrt-n) 1))))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt-int n-sqrt-int)\n                 (* 3 n-sqrt-int)\n                 1)))))\n",
    "  (let loop ((i 1))\n    (cond ((= n (* i (1+ i) (* 2 i -1))) #t)\n          ((&gt; n (* i (1+ i) (* 2 i -1))) (loop (+ i 1)))\n          (else #f))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-floor (floor n-sqrt)])\n    (and (= n-sqrt-floor n-sqrt)\n         (= (- n (* n-sqrt-floor n-sqrt-floor))\n            (* n-sqrt-floor 2)))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and\n     (integer? n-sqrt)\n     (integer? (+ n-sqrt 1))\n     (integer? (- n-sqrt 1))\n     (integer? (/ (+ n-sqrt 1) 2))\n     (integer? (/ (- n-sqrt 1) 2)))))\n",
    "  (let ([x (sqrt (+ (* 2 n) (* 3 1)))])\n    (and (integer? x)\n         (integer? (- x 1)))))\n",
    "  (let ((m (sqrt (+ (* 8 n) 1))))\n    (and (integer? m) (= (mod m 2) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) (* 3 (expt -1)))))\n        (n (sqrt (+ (* 2 n) (* 3 (expt 1))))))\n    (and (integer? m) (integer? n))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let* ((a 1)\n         (b (- n 1))\n         (c (- (* 2 n) 1)))\n    (and (integer? (sqrt b))\n         (integer? (sqrt c)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let* ([n_sqrt (sqrt n)]\n         [n_sqrt_int (inexact->exact (floor n_sqrt))])\n    (and (= n_sqrt_int n_sqrt)\n         (= (modulo n_sqrt_int 2) 1))))\n",
    "  (let ([x (sqrt (+ (* 2 n) (* 2 (sqrt 2))))])\n    (and (integer? x)\n         (= x (sqrt (+ (* 2 n) (* 2 (sqrt 2))))))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (= n-sqrt n-sqrt-int)\n         (= 1 (modulo n-sqrt-int 2)))))\n",
    "  (let* ([n-sq (sqr n)]\n         [n-sq-sq (sqr n-sq)])\n    (and (integer? (sqrt n-sq-sq))\n         (= (sqrt n-sq-sq) (sqrt n-sq)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? m) (= (modulo m 1) 0))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= x (floor x))\n         (= 1 (modulo x 2)))))\n",
    "  (let* ([n-sqr (sqr n)]\n         [n-sqr-sqr (sqr n-sqr)])\n    (and (integer? n-sqr)\n         (integer? n-sqr-sqr)\n         (= n-sqr-sqr (+ (* 3 n-sqr) 1)))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (= (truncate m) m)\n         (= n (* (- m 1) (/ (- m 1) 2))))))\n",
    "  (let ((m (sqrt (+ (* 8 n) 1))))\n    (and (integer? m) (= (modulo m 2) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (= (modulo m 2) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 0.25))))\n    (and (integer? m)\n         (= (truncate m) m)\n         (= n (* (- m 1) (- m 1) (* 2 m -1)))\n         m)))\n",
    "  (let ([d (- (sqrt (+ (* 8 n) 1)) 1)])\n    (and (integer? d)\n         (= (* 3 (- d 1)) (- n (* d d))))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 3 n-sqrt) 1)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 0.25))))\n    (and (integer? m) (= (truncate m) m)\n         (= (* 2 m (1+ m)) n))))\n",
    "  (let loop ([i 1])\n    (cond [(= n (* i (1+ i) (* 2 i -1))) #t]\n          [(&gt; n (* i (1+ i) (* 2 i -1))) (loop (+ i 1))]\n          [else #f])))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (integer? (+ n-sqrt 1))\n         (integer? (* 2 n-sqrt 1)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x) (= (modulo x 4) 1))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (integer? (/ x 2)))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= (round n-sqrt) n-sqrt)\n         (= n (* n-sqrt (+ n-sqrt 1)) 2))))\n",
    "  (let ((m (sqrt (+ (* 2 n) (* 2 (sqrt 2))))))\n    (and (integer? m)\n         (= (* 2 n) (- (* m m) (* m (sqrt 2)))))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (let ([m (quotient (+ n-sqrt 1) 2)])\n           (and (integer? m)\n                (= n (* m (+ m 1) (- m 2) 3)))))))\n",
    "  (let ([x (sqrt (+ (* 2 n) 1))])\n    (and (integer? x)\n         (= (truncate x) x)\n         (= (modulo x 2) 1))))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= n (* i (1+ i) (* 2 i -1))) #t]\n      [(> n (* i (1+ i) (* 2 i -1))) #f]\n      [else (loop (+ i 1))])))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (integer? (+ (* 2 n) 1))\n         (= (expt m 2) (+ (* 2 n) 1)))))\n",
    "  (let ([d (- (sqrt (+ (* 8 n) 1)) 1)])\n    (and (integer? d)\n         (= (* 3 (- d 1)) (- n (* 2 d))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i i (3 i - 2)))\n        #t\n        (if (&lt; n (* i i (3 i - 2)))\n            #f\n            (loop n (+ i 1))))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1))))\n    (and (integer? x)\n         (= x (floor x))\n         (= x (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1))))))\n",
    "  (let ([d (- (* 8 n) 1)])\n    (and (integer? (sqrt d))\n         (= (sqrt d) (floor (sqrt d)))\n         (= (sqrt d) (+ 1 (floor (/ (sqrt d) 3)))))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 3 n-sqrt) 2)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact n-sqrt)])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 4)))))\n",
    "  (let* ([n-root (floor (sqrt (+ 1 (* 8 n))))]\n         [n-root-1 (- n-root 1)])\n    (and (= (* n-root-1 n-root-1) (+ 1 (* 8 n)))\n         (= n-root-1 (mod n-root 3)))))\n",
    "  (let loop ((i 1))\n    (if (&gt; (* i (1+ i)) n)\n        #f\n        (if (= (* i (1+ i)) n)\n            #t\n            (loop (1+ i))))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 3 n-sqrt) 1)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 (sqrt 3)) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (integer? n-sqrt)])\n    (and (= n-sqrt-int 1)\n         (= (modulo n-sqrt 2) 1))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= (modulo x 1) 0)\n         (= (modulo x 2) 1))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x) (= (modulo x 1) 0))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1))))\n    (and (integer? x)\n         (= x (floor x))\n         (= 1 (modulo x 2)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (= (* m m) (+ (* 2 n) 1)))))\n",
    "  (let ((s (sqrt (+ (* 8 n) 1))))\n    (and (integer? s)\n         (= (modulo s 2) 1))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) 1))))\n    (and (integer? x)\n         (= (truncate x) x)\n         (= (* (- x 1) x) (* 2 n)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (floor n-sqrt)])\n    (and (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i i (- 2 i)))\n        #t\n        (if (&lt; n (* i i (- 2 i)))\n            #f\n            (loop n (+ i 1))))))\n",
    "  (let ([d (- (* 8 n) 1)])\n    (and (integer? (sqrt d))\n         (= (truncate (sqrt d)) (sqrt d)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) 1))))\n    (and (integer? x)\n         (= (truncate x) x)\n         (exact->inexact x))))\n",
    "  (let ([d (- (* 8 n) 1)])\n    (and (integer? (sqrt d))\n         (= (sqrt d) (truncate (sqrt d))))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 3 n-sqrt) 1)))))\n",
    "  (let loop ((i 1))\n    (cond ((= n (* i (+ i 3))) #t)\n          ((&gt; n (* i (+ i 3))) (loop (+ i 1)))\n          (else #f))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= (round n-sqrt) n-sqrt)\n         (= (modulo n-sqrt 2) 1))))\n",
    "  (let ([d (- (sqrt (+ (* 8 n) 1)) 1)])\n    (and (integer? d)\n         (= (* 3 (- d 1)) (- n (* d d))))))\n",
    "  (let loop ((i 0) (n n))\n    (if (= i n)\n        #t\n        (if (&gt; (octagonal i) n)\n            #f\n            (loop (+ i 1) n)))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x) (= (modulo x 1) 0))))\n",
    "  (let* ([n2 (* n n)]\n         [n3 (* n n2)]\n         [n4 (* n n3)])\n    (and (integer? (/ (+ n3 1) 3))\n         (integer? (/ (+ n4 1) 2)))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int n-sqrt)\n         (= 1 (modulo (- n-sqrt-int 1) 6)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? m) (= m (quotient m 2)))))\n",
    "  (let ((r (sqrt (+ (* 2 n) (* 3 (expt -1)))))\n        (r2 (sqrt (+ (* 2 n) (* 3 (expt -1) (* 2 (expt -1)))))))\n    (and (integer? r) (integer? r2))))\n",
    "  (let ([x (sqrt (+ (* 2 n) (* 3 1)))])\n    (and (integer? x)\n         (or (= x (floor x))\n             (= x (ceiling x))))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (= (floor n-sqrt) n-sqrt)\n         (= (modulo n-sqrt 2) 1))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int (sqrt (1+ (* 8 n)))))))\n",
    "  (let ([m (sqrt (+ (* 2 n) 1))])\n    (and (integer? m) (= (modulo m 2) 1))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (= n-sqrt n-sqrt-int)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let* ([n2 (* n n)]\n         [d (- (* 2 n) 1)])\n    (and (integer? (/ n2 d))\n         (= (modulo n2 d) 0))))\n",
    "  (let ([x (sqrt (+ (* 2 n) (* 3 1)))])\n    (and (integer? x)\n         (= x (floor x)))))\n",
    "  (let ([d (sqrt (+ (* 8 n) 1))])\n    (and (integer? d)\n         (= (modulo d 4) 1))))\n",
    "  (let ([x (sqrt (+ (* 2 n) 1))])\n    (and (integer? x)\n         (= (round x) x))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= (round n-sqrt) n-sqrt)\n         (= (modulo n-sqrt 2) 1))))\n",
    "  (let ([m (sqrt (+ (* 2 n) 1))])\n    (and (integer? m)\n         (= (modulo m 1) 0)\n         (= (modulo m 2) 1))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (= (truncate m) m)\n         (= n (* (- m 1) (/ (- m 1) 2))))))\n",
    "  (let ([d (- (* 8 n) 1)])\n    (and (integer? (sqrt d))\n         (= (sqrt d) (floor (sqrt d)))\n         (= (modulo d 3) 2))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact n-sqrt)])\n    (and (= n-sqrt n-sqrt-int)\n         (= 1 (modulo n-sqrt-int 2)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (truncate x) x)\n         (= (modulo x 4) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 3) (* 8 n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo (- d 1) 6) 0))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1))))\n    (and (integer? x)\n         (= (truncate x) x))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= n (* n-sqrt (+ n-sqrt 1)))\n         (= (modulo n 100) n-sqrt))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (= (octagonal i) n)\n            #t\n            (loop (+ i 1))))))\n",
    "  (let* ([s (sqrt (+ (* 2 n) 1))])\n    (and (integer? s) (= (modulo s 2) 1))))\n",
    "  (let* ([n2 (* n n)]\n         [a1 (- 1 (* 8 n2))]\n         [a2 (+ 1 (* 8 n2))])\n    (and (integer? (sqrt a1))\n         (integer? (sqrt a2)))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 3 n-sqrt) 1)))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (let ([m (octagonal i)])\n          (if (&gt; m n)\n              #f\n              (loop (+ i 1)))))))\n",
    "  (let ((m (isqrt n)))\n    (and (= m (floor m))\n         (= n (* m (+ m 1) (+ m 2) (/ 2)))\n         #t)))\n",
    "  (let ([n (sqrt (+ (* 2 n) 1))])\n    (and (integer? n)\n         (integer? (+ n 1)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= x (floor x)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1))))\n    (and (integer? m)\n         (= (truncate m) m)\n         (= n (* m (+ m 1) (/ 2 2)))\n         (not (= n 0)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (integer? (+ (* 2 m) 1)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (= (expt m 2) (+ (* 2 n) 1)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (floor n-sqrt)])\n    (and (= n-sqrt n-sqrt-int)\n         (= (modulo n-sqrt-int 4) 3))))\n",
    "  (let ((m (sqrt (+ (* 8 n) 1))))\n    (and (integer? m) (= (modulo m 2) 1))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int (sqrt (1+ (* 8 n)))))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= (modulo x 1) 0)\n         (= (modulo x 2) 1))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (= n-sqrt-int n-sqrt)\n         (= 1 (modulo (- n-sqrt-int 1) 6)))))\n",
    "  (let loop ((i 1))\n    (if (= n (* i (1+ i) (* 2 i 1)))\n        #t\n        (if (&lt; n (* i (1+ i) (* 2 i 1)))\n            #f\n            (loop (+ i 1))))))\n",
    "  (let* ([n (sqrt (+ (* 8 n) 1))]\n         [n (floor n)])\n    (and (= (modulo n 2) 1)\n         (= (modulo n 4) 3)\n         (= (modulo n 8) 5))))\n",
    "  (let loop ([i 1])\n    (if (= n (* i (1+ i) (* 2 i 1)))\n        #t\n        (if (&lt; n (* i (1+ i) (* 2 i 1)))\n            #f\n            (loop (+ i 1))))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 (expt 2 8))))))\n    (and (integer? x)\n         (integer? (- x 1)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (floor n-sqrt)])\n    (and (= n-sqrt (floor n-sqrt))\n         (= 1 (modulo n-sqrt-int 3))\n         (= 1 (modulo n-sqrt-int 4)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (= x (floor x))\n         (= (* 2 n) (- (* x x) (* 3 x) 1)))))\n",
    "  (let ((delta (sqrt (+ (* 8 n) 1))))\n    (and (integer? delta)\n         (= (modulo delta 2) 1))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (= (expt m 2) (+ (* 2 n) 1)))))\n",
    "  (let ((n2 (sqr n)))\n    (and (integer? (sqrt n2))\n         (= (sqr (sqrt n2)) n2)\n         (= (modulo (sqrt n2) 3) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m) (= (mod m 1) 0)\n         (= n (* (- m 1) (/ (- m 1) 2))))))\n",
    "  (let loop ((i 1))\n    (if (= n (* i (1+ i) (* 2 i 1)))\n        #t\n        (if (&lt; n (* i (1+ i) (* 2 i 1)))\n            #f\n            (loop (+ i 1))))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact n-sqrt)])\n    (and (integer? n-sqrt)\n         (integer? (/ n-sqrt-int 2)))))\n",
    "  (let ((s (sqrt (+ 1 (* 8 n)))))\n    (and (= (floor s) s)\n         (= (modulo s 4) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? m)\n         (= m (truncate m))\n         (= (* 2 n) (- (* m m) (* 3 m) 1)))))\n",
    "  (let* ([n2 (sqr n)]\n         [n3 (expt n 3)]\n         [n4 (sqr n2)])\n    (and (integer? (sqrt (- n3 (* 2 n4))))\n         (integer? (sqrt (+ n3 (* 2 n4)))))))\n",
    "  (let* ([m (sqrt (+ (* 2 n) 1))])\n    (and (integer? m)\n         (= (truncate m) m)\n         (= n (* (- m 1) (/ (- m 1) 2))))))\n",
    "  (let ([n2 (+ (* n n) n)])\n    (let loop ([i 1])\n      (if (&lt;= (* i i) n2)\n          (if (= (* i i) n2)\n              #t\n              (loop (+ i 1)))\n          #f))))\n",
    "  (let ((m (sqrt (+ (* 8 n) 1))))\n    (and (integer? m)\n         (= (modulo m 2) 1))))\n",
    "  (let loop ([n n] [i 1])\n    (cond [(= n (* i (1+ i) (* 2 i -1))) #t]\n          [(> n (* i (1+ i) (* 2 i -1))) (loop n (1+ i))]\n          [else #f])))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x) (= (modulo x 2) 1))))\n",
    "  (let ([m (sqrt (+ (* 2 n) (* 2 (sqrt 2))))])\n    (and (integer? m)\n         (integer? (- m (sqrt 2))))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= (round n-sqrt) n-sqrt)\n         (= (mod n-sqrt 2) 1))))\n",
    "  (let loop ((i 1))\n    (if (= n (* i (1+ i) (1+ (* 2 i))))\n        #t\n        (if (&lt; n (* i (1+ i) (1+ (* 2 i))))\n            #f\n            (loop (+ i 1))))))\n",
    "  (let* ([n (sqrt (+ (* 2 n) 1))])\n    (and (integer? n)\n         (= (modulo n 1) 0)\n         (integer? (/ n 2)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 (sqrt 3)) 1))))\n    (and (integer? x)\n         (= x (truncate x))\n         (= (modulo x 2) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (integer? (+ (* m m) m)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 1)))))\n    (and (integer? x)\n         (integer? (- x 3)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (floor n-sqrt)])\n    (and (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (integer? (+ (* 2 m) 1)))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 3 (sqrt 3)) 1))))\n    (and (integer? x) (= (modulo x 1) 0))))\n",
    "  (let ((m (sqrt (+ (* 2 n) (* 3 (expt -1)))))\n        (n (sqrt (+ (* 2 n) (* 3 (expt 1))))))\n    (and (integer? m) (integer? n))))\n",
    "  (let loop ([n n] [i 1])\n    (if (zero? n)\n        #t\n        (if (zero? (modulo n 8))\n            (loop (quotient n 8) (add1 i))\n            #f))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x) (= (modulo x 2) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m) (= (truncate m) m))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (1+ i) (* 2 i -1)))\n        #t\n        (if (&lt; n (* i (1+ i) (* 2 i -1)))\n            #f\n            (loop n (+ i 1))))))\n",
    "  (let* ([a 1]\n         [b -2]\n         [c (- n 2)])\n    (and (integer? (sqrt (+ (* b b) (* 4 a c))))\n         (= (sqrt (+ (* b b) (* 4 a c)))\n            (sqrt (+ (* b b) (* 4 a c)))))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x) (= (modulo x 2) 1))))\n",
    "  (let ([d (- (* 8 n) 1)])\n    (and (integer? (sqrt d))\n         (= (sqrt d) (floor (sqrt d)))\n         (= (modulo d 3) 2))))\n"
  ]
}