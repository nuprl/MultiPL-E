{
  "name": "mbpp_120_max_product_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (map list list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (* y z)) x)) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (list (abs (car x)) (abs (cadr x)))) (partition 2 list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cadr x) (cadr y))) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) (map (lambda (x) (list x (cdr x))) list1)))))\n)\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y))) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cdr x) (cdr y))) x)) (map (lambda (x) (map (lambda (y) (cons (car x) y)) (cdr x))) list1)))))\n</code>\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list (abs x) (abs y))) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y))) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cdr x) (cdr y))) (cdr list1))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n)\n</code>\nI'm not sure if this is the most efficient way to do this, but it works.\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (map list list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list (abs x) (abs y))) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map list list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (list (list-ref x 0) (list-ref y 0) (list-ref z 0))) (cdr x))) (cdr y))) (cdr list1))))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) (map (lambda (x) (list x (cdr x))) list1)))))\n)\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n",
    "  (let loop ([list1 list1]\n             [max-product 0])\n    (cond [(empty? list1) max-product]\n          [else (let* ([tuple (first list1)]\n                       [list2 (second tuple)]\n                       [list3 (third tuple)]\n                       [product (apply * (map abs (append list2 list3)))]\n                       [max-product (if (> product max-product) product max-product)])\n                  (loop (rest list1) max-product))])))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list (abs x) (abs y))) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (apply * (car list1))\n          (max_product_tuple (cdr list1)))]))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (* y z)) x)) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (combinations 2 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map * x)) (map (lambda (x) (map list (cdr x))) (map (lambda (x) (map list x)) (map (lambda (x) (map list x)) list1))))))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cdr x) (cdr y))) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (combinations 2 list1))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (let loop ([list1 list1]\n             [max-product 0])\n    (if (null? list1)\n        max-product\n        (let* ([tuple (car list1)]\n               [product (* (abs (car tuple)) (abs (cadr tuple)))])\n          (if (&gt; product max-product)\n              (loop (cdr list1) product)\n              (loop (cdr list1) max-product))))))\n</code>\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1))))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (define (max_product_tuple_helper list1 max)\n    (if (null? list1)\n        max\n        (let* ((tuple (car list1))\n               (product (abs (* (car tuple) (cadr tuple)))))\n          (if (> product max)\n              (max_product_tuple_helper (cdr list1) product)\n              (max_product_tuple_helper (cdr list1) max)))))\n  (max_product_tuple_helper list1 0))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n)\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n",
    "  (apply max (map (lambda (x) (apply * (map abs x))) (map list list1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (apply max (map (lambda (x) (* (abs x) (abs (cdr x)))) (map (lambda (x) (cons (car x) (car (cdr x)))) list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1))))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) (map (lambda (x) (sort x '>)) (map (lambda (x) (map abs x)) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (map list list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (list (list-ref x 0) (list-ref x 1) (list-ref y 0) (list-ref y 1) (list-ref z 0) (list-ref z 1))) (cdr x))) (cdr y))) (cdr list1))))))\n",
    "  (apply max (map (lambda (x)\n                    (apply * x))\n                  (map (lambda (x)\n                         (map abs x))\n                       (map (lambda (x)\n                              (map (lambda (y)\n                                     (list (car x) (car y)))\n                                   (cdr x)))\n                            (map (lambda (x)\n                                   (cons (car list1) x))\n                                (cdr list1)))))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list (abs x) (abs y))) list1)) list1)))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (* y z)) x)) x)) list1)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (let*\n         ([list2 (rest list1)]\n          [max-product (max_product_tuple list2)]\n          [product (apply * (car list1))]\n          [product2 (apply * (car list2))])\n       (max max-product (max product product2)))]))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (define (max_product_tuple_helper list1 max)\n    (if (null? list1)\n        max\n        (let* ([tuple (car list1)]\n               [product (abs (* (car tuple) (cadr tuple)))]\n               [max (if (&gt; product max) product max)])\n          (max_product_tuple_helper (cdr list1) max))))\n  (max_product_tuple_helper list1 0))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cdr x) (cdr y))) (cdr list1))) list1)))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (define (max_product_tuple_helper list1 list2 max)\n    (cond ((null? list1) max)\n          ((null? list2) (max_product_tuple_helper (cdr list1) (cdr list1) max))\n          ((> (* (car list1) (car list2)) max) (max_product_tuple_helper list1 (cdr list2) (* (car list1) (car list2))))\n          (else (max_product_tuple_helper list1 (cdr list2) max))))\n  (max_product_tuple_helper list1 list1 0))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x y) (* (abs x) (abs y))) list1 (cdr list1))))\n",
    "  (apply max (map * list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map list list1))))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n"
  ]
}