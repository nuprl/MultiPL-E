{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find nth centered hexagonal number.\n(define (centered_hexagonal_number n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate centered_hexagonal_number))\n    (check-equal? (candidate 10) 271)\n    (check-equal? (candidate 2) 7)\n    (check-equal? (candidate 9) 217)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n sum)\n    (if (= n 1)\n        sum\n        (centered_hexagonal_number_iter (- n 1) (+ sum (* 6 n)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (* n (+ n 1) (/ (+ 1 1))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let loop ([n n] [i 0] [sum 0])\n    (if (= n i)\n        sum\n        (loop n (+ i 1) (+ sum (* i 2) 1)))))\n",
    "  (letrec ([nth-centered-hexagonal (lambda (n)\n                                     (if (= n 1)\n                                         1\n                                         (+ (* 6 (- n 1))\n                                            (nth-centered-hexagonal (- n 1)))))])\n    (nth-centered-hexagonal n)))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 1) (/ n 2))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i i i i i i i))))))\n",
    "  (let loop ([n n])\n    (if (zero? n)\n        0\n        (+ (centered_hexagonal_number (- n 1))\n           (* 6 (- n 1))))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 2))))))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 0)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (* i i))))))\n",
    "  (define (nth_hexagonal_number n)\n    (* n (+ n 1) (/ (+ n 1) 2)))\n  (define (nth_triangular_number n)\n    (/ (* n (+ n 1)) 2))\n  (define (nth_pentagonal_number n)\n    (/ (* n (+ (* 3 n) 1)) 2))\n  (define (nth_centered_square_number n)\n    (* n (+ n 1) (+ (* 2 n) 1)))\n  (define (nth_centered_octagonal_number n)\n    (* n (+ (* 3 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_decagonal_number n)\n    (* n (+ (* 4 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_dodecagonal_number n)\n    (* n (+ (* 5 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_icosagonal_number n)\n    (* n (+ (* 6 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_triacontagonal_number n)\n    (* n (+ (* 7 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_tetracontagonal_number n)\n    (* n (+ (* 8 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_pentacontagonal_number n)\n    (* n (+ (* 9 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_hexacontagonal_number n)\n    (* n (+ (* 10 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_heptacontagonal_number n)\n    (* n (+ (* 11 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_octacontagonal_number n)\n    (* n (+ (* 12 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_enneacontagonal_number n)\n    (* n (+ (* 13 n) 1) (+ (* 2 n) 1)))\n  (define (nth",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (- n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n"
  ]
}