{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find nth centered hexagonal number.\n(define (centered_hexagonal_number n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate centered_hexagonal_number))\n    (check-equal? (candidate 10) 271)\n    (check-equal? (candidate 2) 7)\n    (check-equal? (candidate 9) 217)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n sum)\n    (if (= n 1)\n        sum\n        (centered_hexagonal_number_iter (- n 1) (+ sum (* 6 n)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (* n (+ n 1) (/ (+ 1 1))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let loop ([n n] [i 0] [sum 0])\n    (if (= n i)\n        sum\n        (loop n (+ i 1) (+ sum (* i 2) 1)))))\n",
    "  (letrec ([nth-centered-hexagonal (lambda (n)\n                                     (if (= n 1)\n                                         1\n                                         (+ (* 6 (- n 1))\n                                            (nth-centered-hexagonal (- n 1)))))])\n    (nth-centered-hexagonal n)))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 1) (/ n 2))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i i i i i i i))))))\n",
    "  (let loop ([n n])\n    (if (zero? n)\n        0\n        (+ (centered_hexagonal_number (- n 1))\n           (* 6 (- n 1))))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 2))))))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 0)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (* i i))))))\n",
    "  (define (nth_hexagonal_number n)\n    (* n (+ n 1) (/ (+ n 1) 2)))\n  (define (nth_triangular_number n)\n    (/ (* n (+ n 1)) 2))\n  (define (nth_pentagonal_number n)\n    (/ (* n (+ (* 3 n) 1)) 2))\n  (define (nth_centered_square_number n)\n    (* n (+ n 1) (+ (* 2 n) 1)))\n  (define (nth_centered_octagonal_number n)\n    (* n (+ (* 3 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_decagonal_number n)\n    (* n (+ (* 4 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_dodecagonal_number n)\n    (* n (+ (* 5 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_icosagonal_number n)\n    (* n (+ (* 6 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_triacontagonal_number n)\n    (* n (+ (* 7 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_tetracontagonal_number n)\n    (* n (+ (* 8 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_pentacontagonal_number n)\n    (* n (+ (* 9 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_hexacontagonal_number n)\n    (* n (+ (* 10 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_heptacontagonal_number n)\n    (* n (+ (* 11 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_octacontagonal_number n)\n    (* n (+ (* 12 n) 1) (+ (* 2 n) 1)))\n  (define (nth_centered_enneacontagonal_number n)\n    (* n (+ (* 13 n) 1) (+ (* 2 n) 1)))\n  (define (nth",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (- n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ((n (if (odd? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let loop ([i 1] [sum 1])\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (* 6 i))))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 1) (+ i 2) (+ i 3) (+ i 4))))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (* n (+ n 1) (/ (+ 1 1) 2)))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (- n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (+ (* n (- n 2)) 1)))\n",
    "  (let ([n (if (even? n) (quotient n 2) (+ 1 (quotient n 2)))])\n    (* n (+ n 1) 3)))\n",
    "  (* n (+ 2 n)))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (* n (+ n 1) (/ (+ 1 1))))\n",
    "  (let ([n (add1 n)])\n    (if (even? n)\n        (let ([n (quotient n 2)])\n          (add1 (* n (add1 (* n 2)))))\n        (let ([n (quotient n 2)])\n          (* (add1 (* n 2)) n)))))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ((n (if (= n 0) 1 n)))\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (* n (+ n 1) 6))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (2*n-1)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (let ([n (add1 n)])\n    (if (even? n)\n        (let ([n (quotient n 2)])\n          (add1 (* n (+ n 1))))\n        (let ([n (quotient n 2)])\n          (* n (+ n 2))))))\n",
    "  (let ([n (+ n 1)])\n    (* n (+ n 1) (- (* 2 n) 1))))\n",
    "  (let ([n (if (odd? n) n (+ 1 n))])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 1) (+ sum (* i 6))))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (let ([n (exact->inexact n)])\n    (inexact->exact (+ (* n n) n))))\n",
    "  (let ([n (if (odd? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let* ([n2 (* n n)]\n         [n3 (* n n2)])\n    (+ (* 2 n3) (* 3 n2) n)))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (cond\n      [(= n 1) sum]\n      [(= n 2) (+ sum i)]\n      [else (loop (- n 1) (+ i 4) (+ sum i))])))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n i)\n        (expt i 2)\n        (loop n (+ i 1)))))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (quotient (* n (+ n 1)) 2)))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ([n (add1 n)])\n    (if (zero? n)\n        0\n        (add1 (* 6 (centered_hexagonal_number (sub1 n)))))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ((n2 (* n n)))\n    (+ n2 n2 (- n 1))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ([n (add1 n)])\n    (quotient (* n (+ n 1)) 2)))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 6 (- n 1))))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (if (= n 1) 1\n      (+ (centered_hexagonal_number (- n 1)) (* 6 (- n 1)))))\n",
    "  (+ (* n n) (* n 1)))\n",
    "  (let ([n (add1 n)])\n    (let loop ([i 1])\n      (if (= i n)\n          (* i (add1 (* 2 i)))\n          (loop (add1 i))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (letrec ([nth-hexagonal (lambda (n)\n                            (if (= n 1)\n                                1\n                                (+ nth-hexagonal (- n 1) (* 2 n))))])\n    (nth-hexagonal n)))\n",
    "  (letrec ([h (lambda (n) (* n (+ n 1) (/ 2)))])\n    (h n)))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ n 2))))\n",
    "  (let ([n (if (odd? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (2*n-1)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ((n (if (odd? n) (add1 n) n)))\n    (quotient (* n (add1 n)) 2)))\n",
    "  (let ([n (add1 n)])\n    (quotient (* n (+ n 1)) 2)))\n",
    "  (let ([n (if (even? n) (- n 1) n)])\n    (+ (* n (1+ n)) 1)))\n",
    "  (define (nth_centered_hexagonal_number n)\n    (if (= n 1)\n        1\n        (+ (nth_centered_hexagonal_number (- n 1)) (* 6 (- n 1)))))\n  (nth_centered_hexagonal_number n))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (let ([n (exact->inexact n)])\n    (round (* n (1+ n) (/ 3 2)))))\n",
    "  (let ((n2 (* n n)))\n    (+ (* 2 n2) n2)))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 0)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (hexagonal_number n)))))\n  (centered_hexagonal_number_iter n 0))\n",
    "  (let ((n (if (even? n) (- n 1) n)))\n    (+ (* n n) n)))\n",
    "  (letrec ([nth_hexagonal (lambda (n)\n                            (if (= n 1)\n                                1\n                                (+ nth_hexagonal (- n 1) (* 2 n))))])\n    (nth_hexagonal n)))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (- n 1) 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ((n (if (odd? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 4))))))\n",
    "  (let ([n (add1 n)])\n    (// (+ (* 3 n) 1) 2)))\n",
    "  (let ((n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))))\n    (* n (+ n 1) 3)))\n",
    "  (define (centered_hexagonal_number_iter n i)\n    (if (= n 1)\n        i\n        (centered_hexagonal_number_iter (- n 1) (+ i (* 2 i)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (2*n-1)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (if (odd? n) n (+ 1 n))])\n    (* n (+ n 2))))\n",
    "  (let ([n (+ n 1)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (let* ([n (exact->inexact n)]\n         [n (if (even? n) (floor (/ n 2)) (ceiling (/ n 2)))]\n         [n (+ n 1)])\n    (* n (+ n 1) 3)))\n",
    "  (let ((n (if (odd? n) (+ n 1) n)))\n    (* n (+ n 2))))\n",
    "  (letrec ([nth_hexagonal_number (lambda (n)\n                                   (if (= n 1)\n                                       1\n                                       (+ n (nth_hexagonal_number (- n 1)))))])\n    (nth_hexagonal_number (* n 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ((n (if (odd? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ((n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))))\n    (* n (+ n 1) 3)))\n",
    "  (let ([n (exact->inexact n)])\n    (round (* n (1+ n) 3))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (nth_triangular_number n)))))\n  (centered_hexagonal_number_iter n 0))\n",
    "  (let ((n (if (odd? n) n (+ n 1))))\n    (let ((n (quotient n 2)))\n      (let ((n (+ n 1)))\n        (* n n)))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let loop ([n n])\n    (if (= n 1)\n        1\n        (+ (loop (- n 1)) (* 6 n)))))\n",
    "  (let ([n (add1 n)])\n    (if (even? n)\n        (expt n 2)\n        (expt (- n 1) 2))))\n",
    "  (let ((n (if (odd? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let ([n (add1 n)])\n    (if (even? n)\n        (let ([n (quotient n 2)])\n          (add1 (* n (+ n 1))))\n        (let ([n (quotient n 2)])\n          (* n (+ n 1))))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* n 2) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (add1 n)])\n    (let ([n2 (add1 (* 2 n))])\n      (let ([n3 (add1 (* 3 n))])\n        (let ([n4 (add1 (* 4 n))])\n          (let ([n5 (add1 (* 5 n))])\n            (let ([n6 (add1 (* 6 n))])\n              (let ([n7 (add1 (* 7 n))])\n                (let ([n8 (add1 (* 8 n))])\n                  (let ([n9 (add1 (* 9 n))])\n                    (let ([n10 (add1 (* 10 n))])\n                      (let ([n11 (add1 (* 11 n))])\n                        (let ([n12 (add1 (* 12 n))])\n                          (let ([n13 (add1 (* 13 n))])\n                            (let ([n14 (add1 (* 14 n))])\n                              (let ([n15 (add1 (* 15 n))])\n                                (let ([n16 (add1 (* 16 n))])\n                                  (let ([n17 (add1 (* 17 n))])\n                                    (let ([n18 (add1 (* 18 n))])\n                                      (let ([n19 (add1 (* 19 n))])\n                                        (let ([n20 (add1 (* 20 n))])\n                                          (let ([n21 (add1 (* 21 n))])\n                                            (let ([n22 (add1 (* 22 n))])\n                                              (let ([n23 (add1 (* 23 n))])\n                                                (let ([n24 (add1 (* 24 n))])\n                                                  (let ([n25 (add1 (* 25 n))])\n                                                    (let ([n26 (add1 (* 26 n))])\n                                                      (let ([n27 (add1 (* 27 n))])\n                                                        (let ([n28 (add1 (* 28 n))])\n                                                          (let ([n29 (add1 (* 29 n))])\n                                                            (let ([n30 (add1 (* 30 n))])\n                                                              (let ([n31 (add1 (* 31 n))])\n                                                                (let ([n32 (add1 (* 32 n))",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 1) (/ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 2))))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n 1) i]\n      [else (loop (- n 1) (+ i 6))])))\n",
    "  (let ((n (if (even? n) (- n 1) n)))\n    (* n (+ n 2))))\n",
    "  (let ([n (modulo n 6)])\n    (cond\n      [(= n 0) (* 2 n)]\n      [(= n 1) (+ 1 (* 4 n))]\n      [(= n 2) (+ 2 (* 4 n))]\n      [(= n 3) (+ 3 (* 4 n))]\n      [(= n 4) (+ 4 (* 4 n))]\n      [(= n 5) (+ 5 (* 4 n))])))\n",
    "  (let ([n (+ n 1)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (cond\n      [(= n 1) sum]\n      [else (loop (- n 1) (+ i 1) (+ sum (* i 6)))])))\n",
    "  (let ([n (exact->inexact n)])\n    (exact->inexact (* 2 n (n + 1) (n + 2)))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 4))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let loop ([n n])\n    (if (zero? n)\n        0\n        (+ (loop (- n 1))\n           (* 2 n)\n           1))))\n",
    "  (let ([n (add1 n)])\n    (expt (- n 1) 3)))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ([n (add1 n)])\n    (let ([n2 (expt n 2)])\n      (let ([n3 (expt n 3)])\n        (let ([n4 (expt n 4)])\n          (let ([n5 (expt n 5)])\n            (let ([n6 (expt n 6)])\n              (let ([n7 (expt n 7)])\n                (let ([n8 (expt n 8)])\n                  (let ([n9 (expt n 9)])\n                    (let ([n10 (expt n 10)])\n                      (let ([n11 (expt n 11)])\n                        (let ([n12 (expt n 12)])\n                          (let ([n13 (expt n 13)])\n                            (let ([n14 (expt n 14)])\n                              (let ([n15 (expt n 15)])\n                                (let ([n16 (expt n 16)])\n                                  (let ([n17 (expt n 17)])\n                                    (let ([n18 (expt n 18)])\n                                      (let ([n19 (expt n 19)])\n                                        (let ([n20 (expt n 20)])\n                                          (let ([n21 (expt n 21)])\n                                            (let ([n22 (expt n 22)])\n                                              (let ([n23 (expt n 23)])\n                                                (let ([n24 (expt n 24)])\n                                                  (let ([n25 (expt n 25)])\n                                                    (let ([n26 (expt n 26)])\n                                                      (let ([n27 (expt n 27)])\n                                                        (let ([n28 (expt n 28)])\n                                                          (let ([n29 (expt n 29)])\n                                                            (let ([n30 (expt n 30)])\n                                                              (let ([n31 (expt n 31)])\n                                                                (let ([n32 (expt n 32)])\n                                                                  (let ([n33 (expt n 33)])\n                                                                    (let ([n34 (expt",
    "  (let ([n (sub1 n)])\n    (if (zero? n)\n        1\n        (+ (* 6 n) centered_hexagonal_number (sub1 n)))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (hexagonal_number n)))))\n  (centered_hexagonal_number_iter n 0))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (* n (+ n 1) (* 3 n -1)))\n",
    "  (letrec ([nth-hexagonal (lambda (n)\n                            (if (= n 1)\n                                1\n                                (+ nth-hexagonal (- n 1) (* 2 n))))])\n    (nth-hexagonal n)))\n",
    "  (let loop ([n n])\n    (cond\n      [(= n 1) 1]\n      [else (+ (loop (- n 1)) (* 6 n))])))\n",
    "  (let ([n (if (even? n) (- n 1) n)])\n    (+ (* n n) n (/ n 2))))\n",
    "  (let loop ([n n] [i 0] [sum 0])\n    (if (= n 0)\n        sum\n        (loop (- n 1) (+ i 1) (+ sum (* i 6))))))\n",
    "  (let ([n (if (odd? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let ((n (sub1 n)))\n    (if (even? n)\n        (let ((n (quotient n 2)))\n          (+ (* n n) n))\n        (let ((n (quotient n 2)))\n          (+ (* (add1 n) (add1 n)) n)))))\n",
    "  (let ((n2 (* n n)))\n    (+ (* n2 n2) (* n2 n) (* n n) n)))\n",
    "  (let ((n (sub1 n)))\n    (if (even? n)\n        (let ((n (quotient n 2)))\n          (+ (* n n) n))\n        (let ((n (quotient n 2)))\n          (+ (* n n) n n 1)))))\n",
    "  (letrec ([nth-hexagonal (lambda (n) (if (= n 1) 1 (+ n (nth-hexagonal (- n 1)))))])\n    (nth-hexagonal n)))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (if (= n 1)\n      1\n      (+ (* 6 (- n 1)) (centered_hexagonal_number (- n 1)))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ([n (if (even? n) (- n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ((n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))))\n    (* n (+ n 1) 3)))\n",
    "  (let ([n (add1 n)])\n    (if (even? n)\n        (let ([n (quotient n 2)])\n          (add1 (* n (add1 (* n 2)))))\n        (let ([n (quotient n 2)])\n          (* n (add1 (* n 2)))))))\n",
    "  (let ((n2 (* n 2)))\n    (+ (* n2 n2) n2)))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (&lt; n i)\n        sum\n        (loop (- n 1) (+ i 1) (+ sum (* i 2) 1)))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (nth_triangular_number n)))))\n  (centered_hexagonal_number_iter n 0))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))])\n    (* n (+ n 1))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ((n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))))\n    (* n (+ n 1))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (quotient (* n (1+ n)) 2)))\n",
    "  (let loop ([i 1] [n n])\n    (if (= i n)\n        (let ([n (+ i 1)])\n          (* (+ n 1) (+ n 2)))\n        (loop (+ i 1) n))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 2))))))\n",
    "  (let ([n (add1 n)])\n    (if (even? n)\n        (let ([m (quotient n 2)])\n          (add1 (* m (add1 (* m 2)))))\n        (let ([m (quotient (add1 n) 2)])\n          (* m (add1 (* m 2)))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 4))))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let ((nth-triangular-number (lambda (n)\n                                 (* n (+ n 1) (/ 1 2)))))\n    (let ((nth-centered-hexagonal-number (lambda (n)\n                                           (- (nth-triangular-number n)\n                                              (nth-triangular-number (- n 1))))))\n      (nth-centered-hexagonal-number n))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n sum)\n    (if (= n 1)\n        sum\n        (centered_hexagonal_number_iter (- n 1) (+ sum (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (let ([n (add1 n)])\n    (if (odd? n)\n        (let ([n (quotient n 2)])\n          (let ([n (add1 n)])\n            (let ([n (expt n 2)])\n              (let ([n (add1 n)])\n                (let ([n (quotient n 3)])\n                  (let ([n (add1 n)])\n                    (let ([n (quotient n 2)])\n                      n))))))))\n    (let ([n (quotient n 2)])\n      (let ([n (add1 n)])\n        (let ([n (expt n 2)])\n          (let ([n (add1 n)])\n            (let ([n (quotient n 3)])\n              (let ([n (add1 n)])\n                (let ([n (quotient n 2)])\n                  n)))))))))\n",
    "  (if (= n 1)\n      1\n      (+ (centered_hexagonal_number (- n 1)) (* 6 (- n 1)))))\n",
    "  (let ((n (if (odd? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (* i 2))))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 4))))))\n",
    "  (define (centered_hexagonal_number_iter n sum)\n    (if (= n 1)\n        sum\n        (centered_hexagonal_number_iter (- n 1) (+ sum (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (add1 n)])\n    (expt (- n 1) 3)))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 1) (+ sum (* i 6))))))\n",
    "  (let loop ((i 1) (n n))\n    (if (= i n)\n        (+ (* 3 (- i 1) i) 1)\n        (loop (+ i 1) n))))\n",
    "  (letrec ([nth_hexagonal (lambda (n)\n                            (if (= n 1)\n                                1\n                                (+ nth_hexagonal (- n 1) (* 2 n))))])\n    (nth_hexagonal n)))\n",
    "  (let ([n (modulo n 6)])\n    (cond\n      [(= n 0) (* 2 n)]\n      [(= n 1) (* 2 (+ n 1))]\n      [(= n 2) (* 2 (- n 1))]\n      [(= n 3) (* 2 (- n 1))]\n      [(= n 4) (* 2 (+ n 1))]\n      [(= n 5) (* 2 n)])))\n",
    "  (let loop ([n n])\n    (if (= n 1)\n        1\n        (+ (loop (- n 1)) (* 6 n)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (define (nth_centered_hexagonal_number n)\n    (if (= n 1)\n        1\n        (+ (nth_centered_hexagonal_number (- n 1)) (* 6 (- n 1)))))\n  (nth_centered_hexagonal_number n))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (if (= n 1)\n      1\n      (+ (* 6 (- n 1)) (centered_hexagonal_number (- n 1)))))\n",
    "  (let ((n-1 (- n 1)))\n    (+ (* n-1 n-1) n-1)))\n",
    "  (let ([n2 (* n 2)])\n    (+ (* n2 n2) n2 1)))\n",
    "  (let* ([n2 (* n n)]\n         [n3 (* n n2)])\n    (+ (* 2 n3) (* 3 n2) n)))\n",
    "  (let ((n (floor n)))\n    (if (= n 0)\n        0\n        (+ (centered_hexagonal_number (- n 1))\n           (* 6 (- n 1))))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (quotient (* n (1+ n)) 2)))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (let ([n (if (odd? n) n (+ n 1))])\n    (quotient (* n (- 3 n)) 2)))\n"
  ]
}