{
  "name": "mbpp_724_power_base_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(= power 0) 1]\n    [else\n     (sum-digits (expt base power))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([base-power (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= base-power 0) 0]\n         [else\n          (+ (remainder base-power 10)\n             (power_base_sum base power))]))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (modulo base 10) (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )))\n  (power_base_sum_iter base power 0)\n)\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (+ (modulo base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (cond\n    [(= power 1) base]\n    [else\n     (sum-digits\n      (expt base power))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power-base-sum-iter base power 0))\n"
  ]
}