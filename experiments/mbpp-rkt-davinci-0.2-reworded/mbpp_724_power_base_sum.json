{
  "name": "mbpp_724_power_base_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(= power 0) 1]\n    [else\n     (sum-digits (expt base power))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([base-power (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= base-power 0) 0]\n         [else\n          (+ (remainder base-power 10)\n             (power_base_sum base power))]))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (modulo base 10) (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )))\n  (power_base_sum_iter base power 0)\n)\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (+ (modulo base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (cond\n    [(= power 1) base]\n    [else\n     (sum-digits\n      (expt base power))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power-base-sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (sub1 power) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n",
    "  (cond ((= power 0) 1)\n        ((= power 1) base)\n        (else (sum-digits (expt base power)))))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 1)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (modulo base 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))\n                (quotient base 10))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (sum-digits (expt base power)))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum base))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond ((= power 0) acc)\n          ((= power 1) (sum-digits base acc))\n          (else (power_base_sum_helper base (- power 1) (sum-digits (expt base power) acc)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n",
    "  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power-base-sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (sum-digits\n      (expt base power))]))\n",
    "  (define (power_base_sum_helper base power)\n    (if (= power 1)\n        base\n        (+ (remainder base 10)\n           (power_base_sum_helper (quotient base 10) (- power 1)))))\n  (power_base_sum_helper base power))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_iter base (- power 1) (+ acc (base_sum base))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power)\n    (cond ((= power 0) 1)\n          ((= power 1) base)\n          (else (* base (power_base_sum_helper base (- power 1))))))\n  (define (sum_digits number)\n    (cond ((= number 0) 0)\n          (else (+ (modulo number 10) (sum_digits (quotient number 10))))))\n  (sum_digits (power_base_sum_helper base power)))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (sub1 power) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_helper base (- power 1) (+ sum base)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (sum_digits n)\n    (if (= n 0)\n        0\n        (+ (remainder n 10) (sum_digits (quotient n 10)))))\n  (sum_digits (expt base power)))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond [(= power 0) sum]\n          [(= power 1) (+ sum base)]\n          [else (power_base_sum-iter base (- power 1) (+ sum base))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond\n      [(= power 0) acc]\n      [else (power_base_sum_helper base (- power 1) (+ acc (modulo base 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum-iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum-iter base (- power 1) (+ acc base))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (let ([base-power (* base (expt base (- power 1)))])\n       (cond\n         [(= base-power 0) 0]\n         [else\n          (+ (remainder base-power 10)\n             (power_base_sum base power))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (pbs-helper base power)\n    (if (= power 0)\n        0\n        (+ (remainder (expt base power) 10)\n           (pbs-helper base (- power 1)))))\n  (pbs-helper base power))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (define (power_base_sum_iter base power sum)\n       (cond\n         [(= power 0) sum]\n         [else (power_base_sum_iter base (- power 1) (+ sum (expt base power)))]))\n     (power_base_sum_iter base power 0)]))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (expt base power)))))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (sum-digits (expt base power))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [(= power 1) base]\n    [else\n     (let* ([base-str (number->string base)]\n            [base-str-len (string-length base-str)]\n            [base-str-len-1 (- base-str-len 1)]\n            [base-str-len-2 (- base-str-len 2)]\n            [base-str-len-3 (- base-str-len 3)]\n            [base-str-len-4 (- base-str-len 4)]\n            [base-str-len-5 (- base-str-len 5)]\n            [base-str-len-6 (- base-str-len 6)]\n            [base-str-len-7 (- base-str-len 7)]\n            [base-str-len-8 (- base-str-len 8)]\n            [base-str-len-9 (- base-str-len 9)]\n            [base-str-len-10 (- base-str-len 10)]\n            [base-str-len-11 (- base-str-len 11)]\n            [base-str-len-12 (- base-str-len 12)]\n            [base-str-len-13 (- base-str-len 13)]\n            [base-str-len-14 (- base-str-len 14)]\n            [base-str-len-15 (- base-str-len 15)]\n            [base-str-len-16 (- base-str-len 16)]\n            [base-str-len-17 (- base-str-len 17)]\n            [base-str-len-18 (- base-str-len 18)]\n            [base-str-len-19 (- base-str-len 19)]\n            [base-str-len-20 (- base-str-len 20)]\n            [base-str-len-21 (- base-str-len 21)]\n            [base-str-len-22 (- base-str-len 22)]\n            [base-str-len-23 (- base-str-len 23)]\n            [base-str-len-24 (- base-str-len 24)]\n            [base-str-len-25 (- base-str-len 25)]\n            [base-",
    "  (if (= power 0)\n      1\n      (sum-digits (expt base power))))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (cond [(= power 0) 1]\n        [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((zero? power) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let loop ([base base] [power power])\n       (cond\n         [(= power 1) base]\n         [else\n          (let ([new-base (modulo (* base base) 10)])\n            (loop new-base (- power 1)))\n          ]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (sub1 power) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (helper base power)\n    (cond ((= power 0) 1)\n          ((= power 1) base)\n          (else (* base (helper base (- power 1))))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (sum-digits (helper base power)))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (define (helper base power)\n       (cond\n         [(= power 0) 0]\n         [else\n          (+ (modulo base 10) (helper (quotient base 10) (- power 1)))]))\n     (helper base power)]))\n",
    "  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power-base-sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n               (quotient base 10))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum base))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(zero? power) 0]\n    [else (+ (remainder base 10) (power_base_sum base (- power 1)))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 1)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power result)\n    (cond ((= power 0) result)\n          ((= power 1) (+ result base))\n          (else (power_base_sum_iter base (- power 1) (+ result base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power_base_sum_iter base power result)\n    (if (= power 0)\n        result\n        (power_base_sum_iter base (- power 1) (+ result (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([base-power (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(< base-power 10) base-power]\n         [else\n          (+ (modulo base-power 10) (power_base_sum base (- power 1)))]))]))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum-iter base (- power 1) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_iter base (- power 1) (+ acc (base_sum base)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [(= power 1) base]\n    [else (+ (modulo base 10) (power_base_sum base (- power 1)))]))\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (modulo base 10) (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum-iter base (- power 1) (+ acc (sum-digits (expt base power))))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum-iter base (- power 1) (+ acc (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (cond\n    [(zero? power) 1]\n    [else\n     (let ([base-sum (sum-digits base)])\n       (sum-digits (* base-sum (power_base_sum base (- power 1)))))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum base power))]))]))\n",
    "  (cond\n    [(zero? power) 1]\n    [else\n     (let ([base-power (expt base power)])\n       (cond\n         [(zero? base-power) 0]\n         [else\n          (+ (remainder base-power 10)\n             (power_base_sum base (- power 1)))]))]))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (+ (modulo base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 1) (sum_digits (+ base sum))]\n      [else (power_base_sum_iter base (- power 1) (+ base sum))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond [(= power 0) sum]\n          [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10)\n             (power_base_sum base power))]))]))\n",
    "  (if (= power 0)\n      0\n      (modulo (+ (* base (power_base_sum base (- power 1)))\n                (power_base_sum base (- power 1)))\n             10)))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power-base-sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power-base-sum-iter base (- power 1) (+ sum (expt base power)))]))\n  (power-base-sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_helper base (- power 1) (+ sum (modulo base 10))))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (remainder (expt base power) 10)\n             (power_base_sum base (- power 1)))]))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_iter base power acc)\n    (cond\n      [(= power 0) acc]\n      [else (power_base_sum_iter base (- power 1) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n"
  ]
}