{
  "name": "mbpp_409_min_product_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map * (apply append (map (lambda (x) (list (car x) (cdr x))) list1)))))\n",
    "  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n",
    "  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n",
    "  (apply min (map * list1)))\n",
    "  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply min (map * list1)))\n"
  ]
}