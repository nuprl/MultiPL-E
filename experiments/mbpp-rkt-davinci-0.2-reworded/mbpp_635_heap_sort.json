{
  "name": "mbpp_635_heap_sort",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort the given list.\n(define (heap_sort iterable)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate heap_sort))\n    (check-equal? (candidate (list 1 3 5 7 9 2 4 6 8 0)) (list 0 1 2 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 25 35 22 85 14 65 75 25 58)) (list 14 22 25 25 35 58 65 75 85))\n    (check-equal? (candidate (list 7 1 9 5)) (list 1 5 7 9))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond ((= i j) lst)\n            ((= i 0) (cons (list-ref lst j) (swap-helper (list-tail lst) i (- j 1))))\n            ((= j 0) (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) j)))\n            (else (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) (- j 1))))))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (cond ((= i 0) lst)\n            ((< (list-ref lst i) (list-ref lst (- i 1)))\n             (heapify-helper (swap lst i (- i 1)) (- i 1)))\n            (else (heapify-helper lst (- i 1)))))\n    (heapify-helper lst i))\n  (define (heapify-all lst)\n    (cond ((null? lst) '())\n          ((= (length lst) 1) lst)\n          (else (heapify-all (heapify lst (- (length lst) 1))))))\n  (define (sort-helper lst)\n    (cond ((null? lst) '())\n          ((= (length lst) 1) lst)\n          (else (cons (list-ref lst 0) (sort-helper (heapify-all (swap lst 0 (- (length lst) 1))))))))\n  (sort-helper (heapify-all iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond ((= i j) lst)\n            ((= i 0) (cons (list-ref lst j) (swap-helper (list-tail lst) i (- j 1))))\n            ((= j 0) (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) j)))\n            (else (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) (- j 1))))))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (cond ((< i 0) lst)\n            ((< (list-ref lst i) (list-ref lst (- i 1))) (heapify-helper (swap lst i (- i 1)) (- i 1)))\n            (else (heapify-helper lst (- i 1)))))\n    (heapify-helper lst i))\n  (define (heapify-all lst i)\n    (cond ((< i 0) lst)\n          (else (heapify-all (heapify lst i) (- i 1)))))\n  (define (heap-sort-helper lst)\n    (cond ((null? lst) '())\n          (else (cons (list-ref lst 0) (heap-sort-helper (heapify-all (swap lst 0 (- (length lst) 1)) (- (length lst) 2)))))))\n  (heap-sort-helper iterable))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (let ([tmp (list-ref iterable i)])\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) tmp)))\n    (define (sift-down start end)\n      (let ([root start])\n        (while (< (* 2 root) end)\n          (let ([child (* 2 root)])\n            (if (and (< (+ child 1) end)\n                     (< (list-ref iterable child)\n                        (list-ref iterable (+ child 1))))\n                (set! child (+ child 1)))\n            (if (< (list-ref iterable root)\n                   (list-ref iterable child))\n                (begin\n                  (swap root child)\n                  (set! root child))\n                (set! root end))))))\n    (let ([start (/ (length iterable) 2)])\n      (while (> start 0)\n        (set! start (- start 1))\n        (sift-down start (length iterable))))\n    iterable)\n  (define (sort iterable)\n    (let ([end (length iterable)])\n      (while (> end 1)\n        (swap 0 (- end 1))\n        (set! end (- end 1))\n        (sift-down 0 end))))\n  (sort (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down i)\n      (define left (+ i i))\n      (define right (+ left 1))\n      (define largest\n        (cond\n          [(> left (length iterable)) i]\n          [(> right (length iterable))\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable i)) left]\n             [else i])]\n          [else\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable right))\n              (cond\n                [(> (list-ref iterable left) (list-ref iterable i)) left]\n                [else i])]\n             [else\n              (cond\n                [(> (list-ref iterable right) (list-ref iterable i)) right]\n                [else i])])]))\n      (when (/= largest i)\n        (swap i largest)\n        (sift-down largest)))\n    (define (heapify-iter i)\n      (when (< i (length iterable))\n        (heapify-iter (+ i 1))\n        (sift-down i)))\n    (heapify-iter 0)\n    iterable)\n  (define (sort-iter iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down i)\n      (define left (+ i i))\n      (define right (+ left 1))\n      (define largest\n        (cond\n          [(> left (length iterable)) i]\n          [(> right (length iterable))\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable i)) left]",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable)\n                        (insert (first iterable) heap))))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (if (empty? heap)\n        empty\n        (cons (find-min heap)\n              (heap-sort-iter (delete-min heap)))))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond\n        [(empty? iterable) heap]\n        [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap sorted)\n    (cond\n      [(empty? heap) sorted]\n      [else (heap-sort-iter (delete-min heap) (cons (find-min heap) sorted))]))\n  (heap-sort-iter (heapify iterable) empty))\n",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(zero? i) (cons (list-ref lst j) (swap-helper (list-tail lst) i (- j 1)))]\n        [(zero? j) (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) j))]\n        [else (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) (- j 1)))]))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (define (left-child i) (+ i 1))\n      (define (right-child i) (+ i 2))\n      (define (parent i) (quotient i 2))\n      (define (max-child i)\n        (define (max-child-helper lst i)\n          (cond\n            [(zero? i) (list-ref lst 0)]\n            [(zero? (modulo i 2)) (max-child-helper (list-tail lst) (- i 1))]\n            [else (max-child-helper (list-tail lst) (- i 2))]))\n        (max-child-helper lst i))\n      (define (heapify-helper-helper lst i)\n        (cond\n          [(zero? i) lst]\n          [(> (max-child i) (list-ref lst i)) (heapify-helper-helper (swap lst (max-child i) i) (parent i))]\n          [else (heapify-helper-helper lst (parent i))]))\n      (heapify-helper-helper lst i))\n    (heapify-helper lst i))\n  (define (heap-sort-helper lst)\n    (cond\n      [(empty? lst) '()]\n      [else (cons (max-child (length lst)) (heap",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left (+ i 1)]\n                 [right (+ i 2)]\n                 [largest (if (&lt; left (length iterable))\n                              (if (&lt; right (length iterable))\n                                  (if (&gt; (list-ref iterable left)\n                                          (list-ref iterable right))\n                                      left\n                                      right)\n                                  left)\n                              i)])\n            (if (&gt; (list-ref iterable largest)\n                    (list-ref iterable i))\n                (begin\n                  (set! iterable (swap iterable i largest))\n                  (heapify-helper iterable largest))\n                (heapify-helper iterable (+ i 1))))\n          iterable))\n    (heapify-helper iterable 0))\n  (define (swap iterable i j)\n    (let* ([temp (list-ref iterable i)]\n           [iterable (list-set iterable i (list-ref iterable j))])\n      (list-set iterable j temp)))\n  (define (sort iterable)\n    (if (&gt; (length iterable) 1)\n        (begin\n          (set! iterable (swap iterable 0 (sub1 (length iterable))))\n          (set! iterable (sort (sublist iterable 0 (sub1 (length iterable)))))\n          (set! iterable (heapify iterable))\n          (append (list (list-ref iterable 0)) iterable))\n        iterable))\n  (sort (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond\n        [(empty? iterable) heap]\n        [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter iterable heap)\n    (cond\n      [(empty? heap) iterable]\n      [else (heap-sort-iter (cons (find-min heap) iterable) (delete-min heap))]))\n  (heap-sort-iter empty (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (cond ((null? iterable) '())\n                ((= i 0) (cons (list-ref iterable j) (swap-helper (cdr iterable) i (- j 1))))\n                ((= j 0) (cons (list-ref iterable i) (swap-helper (cdr iterable) (- i 1) j)))\n                (else (cons (list-ref iterable i) (swap-helper (cdr iterable) (- i 1) (- j 1))))))\n        (swap-helper iterable i j))\n      (define (heapify-helper-helper iterable i)\n        (cond ((null? iterable) '())\n              ((= i 0) iterable)\n              ((< (list-ref iterable i) (list-ref iterable (- i 1)))\n               (heapify-helper-helper (swap iterable i (- i 1)) (- i 1)))\n              (else (heapify-helper-helper iterable (- i 1)))))\n      (heapify-helper-helper iterable i))\n    (define (heapify-helper-helper iterable i)\n      (cond ((null? iterable) '())\n            ((= i 0) iterable)\n            (else (heapify-helper-helper (heapify-helper iterable i) (- i 1)))))\n    (heapify-helper-helper iterable (- (length iterable) 1)))\n  (define (heap_sort-helper iterable)\n    (cond ((null? iterable) '())\n          (else (cons (list-ref iterable 0) (heap_sort-helper (heapify (cdr iterable)))))))\n  (heap_sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left (+ i 1)]\n                 [right (+ i 2)]\n                 [largest (if (&lt; left (length iterable))\n                              (if (&lt; right (length iterable))\n                                  (if (&gt; (list-ref iterable left)\n                                          (list-ref iterable right))\n                                      left\n                                      right)\n                                  left)\n                              i)])\n            (if (&gt; (list-ref iterable largest)\n                    (list-ref iterable i))\n                (begin\n                  (set! iterable (swap iterable i largest))\n                  (heapify-helper iterable largest)))\n            (heapify-helper iterable (+ i 1))))\n      iterable)\n    (heapify-helper iterable 0))\n  (define (swap iterable i j)\n    (define (swap-helper iterable i j)\n      (if (&lt; i (length iterable))\n          (if (equal? i j)\n              iterable\n              (begin\n                (set-car! (list-ref iterable i) (list-ref iterable j))\n                (set-car! (list-ref iterable j) (list-ref iterable i))\n                (swap-helper iterable (+ i 1) (+ j 1))))\n          iterable))\n    (swap-helper iterable i j))\n  (define (sort iterable)\n    (if (&gt; (length iterable) 1)\n        (begin\n          (set! iterable (swap iterable 0 (- (length iterable) 1)))\n          (set! iterable (sort (list-tail iterable)))\n          (set! iterable (heapify iterable))\n          iterable)\n        iterable))\n  (define (list-tail iterable)\n    (if (&gt; (length iterable) 1)\n        (list-tail (cdr iterable))\n        iterable))\n  (define (list-ref iterable i)\n    (if (",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (define (left i)\n        (+ i 1))\n      (define (right i)\n        (+ i 2))\n      (define (parent i)\n        (quotient (- i 1) 2))\n      (define (max-heapify iterable i)\n        (define (largest iterable i)\n          (define (left i)\n            (+ i 1))\n          (define (right i)\n            (+ i 2))\n          (define (parent i)\n            (quotient (- i 1) 2))\n          (define l (left i))\n          (define r (right i))\n          (define largest\n            (cond\n              [(> (list-ref iterable i) (list-ref iterable l)) i]\n              [else l]))\n          (cond\n            [(> (list-ref iterable largest) (list-ref iterable r)) largest]\n            [else r]))\n        (define l (left i))\n        (define r (right i))\n        (define largest (largest iterable i))\n        (cond\n          [(> (list-ref iterable i) (list-ref iterable largest))\n           (swap i largest)\n           (max-heapify iterable largest)]\n          [else #f]))\n      (define (build-max-heap iterable)\n        (define (build-max-heap-helper iterable i)\n          (define (left i)\n            (+ i 1))\n          (define (right i)\n            (+ i 2))\n          (define (parent i)\n            (quotient (- i 1) 2))\n          (define l (left i))\n          (define r (right i))\n          (cond\n            [(> l (length iterable)) #f]\n            [else\n             (max-heapify iterable i)\n            ",
    "  (define (swap! list i j)\n    (define (swap-helper list i j)\n      (cond\n        [(= i j) list]\n        [else\n         (define (swap-helper-helper list i j)\n           (cond\n             [(= i j) list]\n             [else\n              (cons (list-ref list j)\n                    (swap-helper-helper (list-tail list) (+ i 1) j))]))\n         (swap-helper-helper (list-tail list) (+ i 1) j)]))\n    (swap-helper list i j))\n  (define (heapify list i)\n    (define (heapify-helper list i)\n      (cond\n        [(= i 0) list]\n        [else\n         (define (heapify-helper-helper list i)\n           (cond\n             [(= i 0) list]\n             [else\n              (define (heapify-helper-helper-helper list i)\n                (cond\n                  [(= i 0) list]\n                  [else\n                   (define (heapify-helper-helper-helper-helper list i)\n                     (cond\n                       [(= i 0) list]\n                       [else\n                        (define (heapify-helper-helper-helper-helper-helper list i)\n                          (cond\n                            [(= i 0) list]\n                            [else\n                             (define (heapify-helper-helper-helper-helper-helper-helper list i)\n                               (cond\n                                 [(= i 0) list]\n                                 [else\n                                  (define (heapify-helper-helper-helper-helper-helper-helper-helper list i)\n                                    (cond\n                                      [(= i 0) list]\n                                      [else\n                                       (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper list i)\n                                         (cond\n                                           [(= i 0) list]\n                                           [else\n                                ",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable)\n                        (insert (first iterable) heap))))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (if (empty? heap)\n        empty\n        (cons (find-min heap)\n              (heap-sort-iter (delete-min heap)))))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (swap iterable i j)\n      (define (swap-helper iterable i j)\n        (if (zero? i)\n            (cons (list-ref iterable j)\n                  (swap-helper (list-remove iterable j)\n                               (- i 1)\n                               (- j 1)))\n            (cons (list-ref iterable i)\n                  (swap-helper (list-remove iterable i)\n                               (- i 1)\n                               (- j 1)))))\n      (swap-helper iterable (- (length iterable) 1) (- (length iterable) 2)))\n    (define (heapify-helper iterable)\n      (if (null? iterable)\n          '()\n          (cons (car iterable)\n                (heapify-helper (swap (cdr iterable)\n                                      (- (length (cdr iterable)) 1)\n                                      (- (length (cdr iterable)) 2))))))\n    (heapify-helper iterable))\n  (define (heap_sort-helper iterable)\n    (if (null? iterable)\n        '()\n        (cons (car iterable)\n              (heap_sort-helper (heapify (cdr iterable))))))\n  (heap_sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap"
  ]
}