{
  "name": "mbpp_635_heap_sort",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort the given list.\n(define (heap_sort iterable)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate heap_sort))\n    (check-equal? (candidate (list 1 3 5 7 9 2 4 6 8 0)) (list 0 1 2 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 25 35 22 85 14 65 75 25 58)) (list 14 22 25 25 35 58 65 75 85))\n    (check-equal? (candidate (list 7 1 9 5)) (list 1 5 7 9))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond ((= i j) lst)\n            ((= i 0) (cons (list-ref lst j) (swap-helper (list-tail lst) i (- j 1))))\n            ((= j 0) (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) j)))\n            (else (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) (- j 1))))))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (cond ((= i 0) lst)\n            ((< (list-ref lst i) (list-ref lst (- i 1)))\n             (heapify-helper (swap lst i (- i 1)) (- i 1)))\n            (else (heapify-helper lst (- i 1)))))\n    (heapify-helper lst i))\n  (define (heapify-all lst)\n    (cond ((null? lst) '())\n          ((= (length lst) 1) lst)\n          (else (heapify-all (heapify lst (- (length lst) 1))))))\n  (define (sort-helper lst)\n    (cond ((null? lst) '())\n          ((= (length lst) 1) lst)\n          (else (cons (list-ref lst 0) (sort-helper (heapify-all (swap lst 0 (- (length lst) 1))))))))\n  (sort-helper (heapify-all iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond ((= i j) lst)\n            ((= i 0) (cons (list-ref lst j) (swap-helper (list-tail lst) i (- j 1))))\n            ((= j 0) (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) j)))\n            (else (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) (- j 1))))))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (cond ((< i 0) lst)\n            ((< (list-ref lst i) (list-ref lst (- i 1))) (heapify-helper (swap lst i (- i 1)) (- i 1)))\n            (else (heapify-helper lst (- i 1)))))\n    (heapify-helper lst i))\n  (define (heapify-all lst i)\n    (cond ((< i 0) lst)\n          (else (heapify-all (heapify lst i) (- i 1)))))\n  (define (heap-sort-helper lst)\n    (cond ((null? lst) '())\n          (else (cons (list-ref lst 0) (heap-sort-helper (heapify-all (swap lst 0 (- (length lst) 1)) (- (length lst) 2)))))))\n  (heap-sort-helper iterable))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (let ([tmp (list-ref iterable i)])\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) tmp)))\n    (define (sift-down start end)\n      (let ([root start])\n        (while (< (* 2 root) end)\n          (let ([child (* 2 root)])\n            (if (and (< (+ child 1) end)\n                     (< (list-ref iterable child)\n                        (list-ref iterable (+ child 1))))\n                (set! child (+ child 1)))\n            (if (< (list-ref iterable root)\n                   (list-ref iterable child))\n                (begin\n                  (swap root child)\n                  (set! root child))\n                (set! root end))))))\n    (let ([start (/ (length iterable) 2)])\n      (while (> start 0)\n        (set! start (- start 1))\n        (sift-down start (length iterable))))\n    iterable)\n  (define (sort iterable)\n    (let ([end (length iterable)])\n      (while (> end 1)\n        (swap 0 (- end 1))\n        (set! end (- end 1))\n        (sift-down 0 end))))\n  (sort (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down i)\n      (define left (+ i i))\n      (define right (+ left 1))\n      (define largest\n        (cond\n          [(> left (length iterable)) i]\n          [(> right (length iterable))\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable i)) left]\n             [else i])]\n          [else\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable right))\n              (cond\n                [(> (list-ref iterable left) (list-ref iterable i)) left]\n                [else i])]\n             [else\n              (cond\n                [(> (list-ref iterable right) (list-ref iterable i)) right]\n                [else i])])]))\n      (when (/= largest i)\n        (swap i largest)\n        (sift-down largest)))\n    (define (heapify-iter i)\n      (when (< i (length iterable))\n        (heapify-iter (+ i 1))\n        (sift-down i)))\n    (heapify-iter 0)\n    iterable)\n  (define (sort-iter iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down i)\n      (define left (+ i i))\n      (define right (+ left 1))\n      (define largest\n        (cond\n          [(> left (length iterable)) i]\n          [(> right (length iterable))\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable i)) left]",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable)\n                        (insert (first iterable) heap))))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (if (empty? heap)\n        empty\n        (cons (find-min heap)\n              (heap-sort-iter (delete-min heap)))))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond\n        [(empty? iterable) heap]\n        [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap sorted)\n    (cond\n      [(empty? heap) sorted]\n      [else (heap-sort-iter (delete-min heap) (cons (find-min heap) sorted))]))\n  (heap-sort-iter (heapify iterable) empty))\n",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(zero? i) (cons (list-ref lst j) (swap-helper (list-tail lst) i (- j 1)))]\n        [(zero? j) (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) j))]\n        [else (cons (list-ref lst i) (swap-helper (list-tail lst) (- i 1) (- j 1)))]))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (define (left-child i) (+ i 1))\n      (define (right-child i) (+ i 2))\n      (define (parent i) (quotient i 2))\n      (define (max-child i)\n        (define (max-child-helper lst i)\n          (cond\n            [(zero? i) (list-ref lst 0)]\n            [(zero? (modulo i 2)) (max-child-helper (list-tail lst) (- i 1))]\n            [else (max-child-helper (list-tail lst) (- i 2))]))\n        (max-child-helper lst i))\n      (define (heapify-helper-helper lst i)\n        (cond\n          [(zero? i) lst]\n          [(> (max-child i) (list-ref lst i)) (heapify-helper-helper (swap lst (max-child i) i) (parent i))]\n          [else (heapify-helper-helper lst (parent i))]))\n      (heapify-helper-helper lst i))\n    (heapify-helper lst i))\n  (define (heap-sort-helper lst)\n    (cond\n      [(empty? lst) '()]\n      [else (cons (max-child (length lst)) (heap",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left (+ i 1)]\n                 [right (+ i 2)]\n                 [largest (if (&lt; left (length iterable))\n                              (if (&lt; right (length iterable))\n                                  (if (&gt; (list-ref iterable left)\n                                          (list-ref iterable right))\n                                      left\n                                      right)\n                                  left)\n                              i)])\n            (if (&gt; (list-ref iterable largest)\n                    (list-ref iterable i))\n                (begin\n                  (set! iterable (swap iterable i largest))\n                  (heapify-helper iterable largest))\n                (heapify-helper iterable (+ i 1))))\n          iterable))\n    (heapify-helper iterable 0))\n  (define (swap iterable i j)\n    (let* ([temp (list-ref iterable i)]\n           [iterable (list-set iterable i (list-ref iterable j))])\n      (list-set iterable j temp)))\n  (define (sort iterable)\n    (if (&gt; (length iterable) 1)\n        (begin\n          (set! iterable (swap iterable 0 (sub1 (length iterable))))\n          (set! iterable (sort (sublist iterable 0 (sub1 (length iterable)))))\n          (set! iterable (heapify iterable))\n          (append (list (list-ref iterable 0)) iterable))\n        iterable))\n  (sort (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond\n        [(empty? iterable) heap]\n        [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter iterable heap)\n    (cond\n      [(empty? heap) iterable]\n      [else (heap-sort-iter (cons (find-min heap) iterable) (delete-min heap))]))\n  (heap-sort-iter empty (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (cond ((null? iterable) '())\n                ((= i 0) (cons (list-ref iterable j) (swap-helper (cdr iterable) i (- j 1))))\n                ((= j 0) (cons (list-ref iterable i) (swap-helper (cdr iterable) (- i 1) j)))\n                (else (cons (list-ref iterable i) (swap-helper (cdr iterable) (- i 1) (- j 1))))))\n        (swap-helper iterable i j))\n      (define (heapify-helper-helper iterable i)\n        (cond ((null? iterable) '())\n              ((= i 0) iterable)\n              ((< (list-ref iterable i) (list-ref iterable (- i 1)))\n               (heapify-helper-helper (swap iterable i (- i 1)) (- i 1)))\n              (else (heapify-helper-helper iterable (- i 1)))))\n      (heapify-helper-helper iterable i))\n    (define (heapify-helper-helper iterable i)\n      (cond ((null? iterable) '())\n            ((= i 0) iterable)\n            (else (heapify-helper-helper (heapify-helper iterable i) (- i 1)))))\n    (heapify-helper-helper iterable (- (length iterable) 1)))\n  (define (heap_sort-helper iterable)\n    (cond ((null? iterable) '())\n          (else (cons (list-ref iterable 0) (heap_sort-helper (heapify (cdr iterable)))))))\n  (heap_sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left (+ i 1)]\n                 [right (+ i 2)]\n                 [largest (if (&lt; left (length iterable))\n                              (if (&lt; right (length iterable))\n                                  (if (&gt; (list-ref iterable left)\n                                          (list-ref iterable right))\n                                      left\n                                      right)\n                                  left)\n                              i)])\n            (if (&gt; (list-ref iterable largest)\n                    (list-ref iterable i))\n                (begin\n                  (set! iterable (swap iterable i largest))\n                  (heapify-helper iterable largest)))\n            (heapify-helper iterable (+ i 1))))\n      iterable)\n    (heapify-helper iterable 0))\n  (define (swap iterable i j)\n    (define (swap-helper iterable i j)\n      (if (&lt; i (length iterable))\n          (if (equal? i j)\n              iterable\n              (begin\n                (set-car! (list-ref iterable i) (list-ref iterable j))\n                (set-car! (list-ref iterable j) (list-ref iterable i))\n                (swap-helper iterable (+ i 1) (+ j 1))))\n          iterable))\n    (swap-helper iterable i j))\n  (define (sort iterable)\n    (if (&gt; (length iterable) 1)\n        (begin\n          (set! iterable (swap iterable 0 (- (length iterable) 1)))\n          (set! iterable (sort (list-tail iterable)))\n          (set! iterable (heapify iterable))\n          iterable)\n        iterable))\n  (define (list-tail iterable)\n    (if (&gt; (length iterable) 1)\n        (list-tail (cdr iterable))\n        iterable))\n  (define (list-ref iterable i)\n    (if (",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (define (left i)\n        (+ i 1))\n      (define (right i)\n        (+ i 2))\n      (define (parent i)\n        (quotient (- i 1) 2))\n      (define (max-heapify iterable i)\n        (define (largest iterable i)\n          (define (left i)\n            (+ i 1))\n          (define (right i)\n            (+ i 2))\n          (define (parent i)\n            (quotient (- i 1) 2))\n          (define l (left i))\n          (define r (right i))\n          (define largest\n            (cond\n              [(> (list-ref iterable i) (list-ref iterable l)) i]\n              [else l]))\n          (cond\n            [(> (list-ref iterable largest) (list-ref iterable r)) largest]\n            [else r]))\n        (define l (left i))\n        (define r (right i))\n        (define largest (largest iterable i))\n        (cond\n          [(> (list-ref iterable i) (list-ref iterable largest))\n           (swap i largest)\n           (max-heapify iterable largest)]\n          [else #f]))\n      (define (build-max-heap iterable)\n        (define (build-max-heap-helper iterable i)\n          (define (left i)\n            (+ i 1))\n          (define (right i)\n            (+ i 2))\n          (define (parent i)\n            (quotient (- i 1) 2))\n          (define l (left i))\n          (define r (right i))\n          (cond\n            [(> l (length iterable)) #f]\n            [else\n             (max-heapify iterable i)\n            ",
    "  (define (swap! list i j)\n    (define (swap-helper list i j)\n      (cond\n        [(= i j) list]\n        [else\n         (define (swap-helper-helper list i j)\n           (cond\n             [(= i j) list]\n             [else\n              (cons (list-ref list j)\n                    (swap-helper-helper (list-tail list) (+ i 1) j))]))\n         (swap-helper-helper (list-tail list) (+ i 1) j)]))\n    (swap-helper list i j))\n  (define (heapify list i)\n    (define (heapify-helper list i)\n      (cond\n        [(= i 0) list]\n        [else\n         (define (heapify-helper-helper list i)\n           (cond\n             [(= i 0) list]\n             [else\n              (define (heapify-helper-helper-helper list i)\n                (cond\n                  [(= i 0) list]\n                  [else\n                   (define (heapify-helper-helper-helper-helper list i)\n                     (cond\n                       [(= i 0) list]\n                       [else\n                        (define (heapify-helper-helper-helper-helper-helper list i)\n                          (cond\n                            [(= i 0) list]\n                            [else\n                             (define (heapify-helper-helper-helper-helper-helper-helper list i)\n                               (cond\n                                 [(= i 0) list]\n                                 [else\n                                  (define (heapify-helper-helper-helper-helper-helper-helper-helper list i)\n                                    (cond\n                                      [(= i 0) list]\n                                      [else\n                                       (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper list i)\n                                         (cond\n                                           [(= i 0) list]\n                                           [else\n                                ",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable)\n                        (insert (first iterable) heap))))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (if (empty? heap)\n        empty\n        (cons (find-min heap)\n              (heap-sort-iter (delete-min heap)))))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (swap iterable i j)\n      (define (swap-helper iterable i j)\n        (if (zero? i)\n            (cons (list-ref iterable j)\n                  (swap-helper (list-remove iterable j)\n                               (- i 1)\n                               (- j 1)))\n            (cons (list-ref iterable i)\n                  (swap-helper (list-remove iterable i)\n                               (- i 1)\n                               (- j 1)))))\n      (swap-helper iterable (- (length iterable) 1) (- (length iterable) 2)))\n    (define (heapify-helper iterable)\n      (if (null? iterable)\n          '()\n          (cons (car iterable)\n                (heapify-helper (swap (cdr iterable)\n                                      (- (length (cdr iterable)) 1)\n                                      (- (length (cdr iterable)) 2))))))\n    (heapify-helper iterable))\n  (define (heap_sort-helper iterable)\n    (if (null? iterable)\n        '()\n        (cons (car iterable)\n              (heap_sort-helper (heapify (cdr iterable))))))\n  (heap_sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (begin\n            (heapify-helper iterable (+ i 1))\n            (define parent (quotient i 2))\n            (define left-child (+ i 1))\n            (define right-child (+ i 2))\n            (define max-child (if (&lt; left-child (length iterable))\n                                  (if (&lt; right-child (length iterable))\n                                      (if (&gt; (list-ref iterable left-child)\n                                              (list-ref iterable right-child))\n                                          left-child\n                                          right-child)\n                                      left-child)\n                                  i))\n            (if (&gt; (list-ref iterable max-child)\n                    (list-ref iterable parent))\n                (begin\n                  (define temp (list-ref iterable max-child))\n                  (set-car! (list-ref iterable max-child) (list-ref iterable parent))\n                  (set-car! (list-ref iterable parent) temp)\n                  (heapify-helper iterable parent))))))\n    (heapify-helper iterable 0))\n  (define (sort-helper iterable)\n    (if (not (empty? iterable))\n        (begin\n          (define temp (list-ref iterable 0))\n          (set-car! (list-ref iterable 0) (list-ref iterable (- (length iterable) 1)))\n          (set-car! (list-ref iterable (- (length iterable) 1)) temp)\n          (sort-helper (heapify (sublist iterable 0 (- (length iterable) 1)))))))\n  (sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (largest iterable i)\n        (define (largest-helper iterable i largest)\n          (cond\n            [(> (vector-ref iterable i) (vector-ref iterable largest))\n             (largest-helper iterable (right i) i)]\n            [(> (vector-ref iterable (left i)) (vector-ref iterable largest))\n             (largest-helper iterable (right i) (left i))]\n            [else\n             largest]))\n        (largest-helper iterable i i))\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (vector-set! iterable i (vector-ref iterable j))\n          (vector-set! iterable j (vector-ref iterable i)))\n        (swap-helper iterable i j))\n      (define (heapify-helper-helper iterable i)\n        (define (heapify-helper-helper-helper iterable i)\n          (define (heapify-helper-helper-helper-helper iterable i)\n            (define (heapify-helper-helper-helper-helper-helper iterable i)\n              (define (heapify-helper-helper-helper-helper-helper-helper iterable i)\n                (define (heapify-helper-helper-helper-helper-helper-helper-helper iterable i)\n                  (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper iterable i)\n                    (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable i)\n                      (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-hel",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (if (= i j)\n              iterable\n              (swap-helper (begin\n                             (define (swap-helper-helper iterable i j)\n                               (if (= i j)\n                                   iterable\n                                   (swap-helper-helper (begin\n                                                         (define (swap-helper-helper-helper iterable i j)\n                                                           (if (= i j)\n                                                               iterable\n                                                               (swap-helper-helper-helper (begin\n                                                                                           (define (swap-helper-helper-helper-helper iterable i j)\n                                                                                             (if (= i j)\n                                                                                                 iterable\n                                                                                                 (swap-helper-helper-helper-helper (begin\n                                                                                                                                     (define (swap-helper-helper-helper-helper-helper iterable i j)\n                                                                                                                                       (if (= i j)\n                                                                                                                                           iterable\n                                                                                                                                           (swap-helper-helper-helper-helper-helper (begin\n                                                                                                                                                                                           (define (swap-helper-helper-helper-helper-helper-helper iterable i j)\n                                                                                                                                                                                             (if (= i j)\n                                                                                                                                                                                                 iterable\n                                                                                                                                                                                                 (swap-helper-helper-helper-helper-helper-helper (begin\n                                                                                                                                                                                                                                                             (define (swap-helper-helper-helper-helper-helper-helper-helper iterable i j)\n                                                                ",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (let ((left-child (+ 2 i))\n            (right-child (+ 2 i 1)))\n        (if (not (or (and (list? iterable) (< left-child (length iterable)))\n                     (and (vector? iterable) (< left-child (vector-length iterable)))))\n            iterable\n            (let ((left-child-value (if (list? iterable)\n                                        (list-ref iterable left-child)\n                                        (vector-ref iterable left-child)))\n                  (right-child-value (if (list? iterable)\n                                         (list-ref iterable right-child)\n                                         (vector-ref iterable right-child)))\n                  (current-value (if (list? iterable)\n                                     (list-ref iterable i)\n                                     (vector-ref iterable i))))\n              (if (and (not (null? right-child-value))\n                       (> right-child-value left-child-value))\n                  (let ((temp (if (list? iterable)\n                                  (list-ref iterable right-child)\n                                  (vector-ref iterable right-child))))\n                    (if (list? iterable)\n                        (set-car! (list-ref iterable right-child) current-value)\n                        (vector-set! iterable right-child current-value))\n                    (if (list? iterable)\n                        (set-car! (list-ref iterable i) temp)\n                        (vector-set! iterable i temp))\n                    (heapify-helper iterable right-child))\n                  (let ((temp (if (list? iterable)\n                                  (list-ref iterable left-child)\n                                  (vector-ref iterable left-child))))\n                    (if (list? iterable)\n                        (set-car! (list-ref iterable left-child) current-value)\n                        (vector-set! iterable left-child current-value))\n                    (if (list? iterable)\n                        (set-car! (list-ref iterable i) temp)\n                        (vector",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-help lst i j)\n        (cond\n          [(null? lst) '()]\n          [(= i 0) (cons (list-ref lst j) (swap-help (cdr lst) (- i 1) (- j 1)))]\n          [(= j 0) (cons (list-ref lst i) (swap-help (cdr lst) (- i 1) (- j 1)))]\n          [else (cons (car lst) (swap-help (cdr lst) (- i 1) (- j 1)))]))\n      (swap-help lst i j))\n    (define (heapify-help iterable)\n      (define (heapify-help-help iterable)\n        (cond\n          [(null? iterable) '()]\n          [(null? (cdr iterable)) (list (car iterable))]\n          [(> (car iterable) (cadr iterable)) (cons (car iterable) (heapify-help-help (cdr iterable)))]\n          [else (cons (cadr iterable) (heapify-help-help (cons (car iterable) (cddr iterable))))]))\n      (define (heapify-help-help-help iterable)\n        (cond\n          [(null? iterable) '()]\n          [(null? (cdr iterable)) (list (car iterable))]\n          [(> (car iterable) (cadr iterable)) (cons (car iterable) (heapify-help-help-help (cdr iterable)))]\n          [else (cons (cadr iterable) (heapify-help-help-help (cons (car iterable) (cddr iterable))))]))\n      (define (heapify-help-help-help-help iterable)\n        (cond\n          [(null? iterable) '()]\n          [(null? (cdr iterable)) (list (car iterable))]\n          [(> (car iterable) (cadr iterable)) (cons (car iterable) (heapify",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (heapify-recursive iterable i)\n      (define left-child (+ i 1))\n      (define right-child (+ i 2))\n      (define largest\n        (cond\n          [(> i (sub1 (length iterable))) i]\n          [(> (list-ref iterable i) (list-ref iterable left-child)) i]\n          [else left-child]))\n      (define largest\n        (cond\n          [(> (list-ref iterable largest) (list-ref iterable right-child)) largest]\n          [else right-child]))\n      (when (not (= i largest))\n        (swap i largest)\n        (heapify-recursive iterable largest)))\n    (define (build-heap iterable)\n      (for ([i (in-range (quotient (length iterable) 2) -1 -1)])\n        (heapify-recursive iterable i)))\n    (define (sort-heap iterable)\n      (define (sort-heap-recursive iterable i)\n        (swap 0 i)\n        (heapify-recursive iterable 0)\n        (when (> i 0)\n          (sort-heap-recursive iterable (sub1 i))))\n      (sort-heap-recursive iterable (sub1 (length iterable))))\n    (define (sort iterable)\n      (build-heap iterable)\n      (sort-heap iterable))\n    (sort iterable))\n  (heapify iterable))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (begin\n            (heapify-helper iterable (+ i 1))\n            (define (swap i j)\n              (define (swap-helper iterable i j)\n                (if (null? iterable)\n                    '()\n                    (if (= i 0)\n                        (cons (list-ref iterable j)\n                              (swap-helper (cdr iterable) i (- j 1)))\n                        (cons (car iterable)\n                              (swap-helper (cdr iterable) (- i 1) j)))))\n              (swap-helper iterable i j))\n            (define (max-heapify iterable i)\n              (define (left i)\n                (+ i 1))\n              (define (right i)\n                (+ i 2))\n              (define (largest iterable i l r)\n                (if (&gt; (list-ref iterable l) (list-ref iterable i))\n                    (if (&gt; (list-ref iterable l) (list-ref iterable r))\n                        l\n                        r)\n                    (if (&gt; (list-ref iterable r) (list-ref iterable i))\n                        r\n                        i)))\n              (define (max-heapify-helper iterable i)\n                (if (&lt; i (length iterable))\n                    (begin\n                      (define l (left i))\n                      (define r (right i))\n                      (define largest-index (largest iterable i l r))\n                      (if (= largest-index i)\n                          iterable\n                          (begin\n                            (swap iterable i largest-index)\n                            (max-heapify-helper iterable largest-index))))\n                    iterable))\n              (max-heapify-helper iterable i))\n            (max-heapify iterable i))\n          iterable))\n    (heapify-helper iterable 0))\n  (define (build-heap iterable)\n    (define (build-heap-helper iterable",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (define (sift-down i)\n        (define (left-child i)\n          (+ (* 2 i) 1))\n        (define (right-child i)\n          (+ (* 2 i) 2))\n        (define (parent i)\n          (quotient i 2))\n        (define (swap-down i)\n          (define l (left-child i))\n          (define r (right-child i))\n          (define largest\n            (cond [(> (list-ref iterable l) (list-ref iterable i)) l]\n                  [(> (list-ref iterable r) (list-ref iterable i)) r]\n                  [else i]))\n          (swap i largest)\n          (sift-down largest))\n        (if (&lt; i (length iterable))\n            (swap-down i)))\n      (define (build-heap)\n        (for ([i (in-range (quotient (length iterable) 2) -1 -1)])\n          (sift-down i)))\n      (build-heap))\n    (heapify-helper iterable))\n  (define (sort-helper iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (heap-sort-helper iterable)\n      (define (sift-down i)\n        (define (left-child i)\n          (+ (* 2 i) 1))\n        (define (right-child i)\n          (+ (* 2 i) 2))\n        (define (parent i)\n          (quotient i 2))\n        (define (sw",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(empty? lst) empty]\n        [(= i j) lst]\n        [(= (first lst) i) (cons j (swap-help (rest lst) i j))]\n        [(= (first lst) j) (cons i (swap-help (rest lst) i j))]\n        [else (cons (first lst) (swap-help (rest lst) i j))]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i (first lst)) lst]\n        [(= i (first (rest lst))) (cons i (rest (rest lst)))]\n        [else (cons (first lst) (heapify-help (rest lst) i))]))\n    (heapify-help lst i))\n  (define (heapify-down lst i)\n    (define (heapify-down-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i (first lst)) lst]\n        [(= i (first (rest lst))) (cons i (rest (rest lst)))]\n        [else (cons (first lst) (heapify-down-help (rest lst) i))]))\n    (heapify-down-help lst i))\n  (define (heapify-up lst i)\n    (define (heapify-up-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i (first lst)) lst]\n        [(= i (first (rest lst))) (cons i (rest (rest lst)))]\n        [else (cons (first lst) (heapify-up-help (rest lst) i))]))\n    (heapify-up-help lst i))\n  (define (build-heap l",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond [(empty? iterable) heap]\n            [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (sort-iter heap sorted)\n    (cond [(empty? heap) sorted]\n          [else (sort-iter (delete-min heap) (cons (min heap) sorted))]))\n  (sort-iter (heapify iterable) empty))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left (+ i 1)]\n                 [right (+ i 2)]\n                 [largest (if (&lt; left (length iterable))\n                              (if (&lt; right (length iterable))\n                                  (if (&gt; (list-ref iterable left)\n                                          (list-ref iterable right))\n                                      left\n                                      right)\n                                  left)\n                              i)])\n            (if (&gt; (list-ref iterable largest)\n                    (list-ref iterable i))\n                (begin\n                  (set! iterable (swap iterable i largest))\n                  (heapify-helper iterable largest)))\n            (heapify-helper iterable (+ i 1))))\n      iterable)\n    (heapify-helper iterable 0))\n  (define (swap iterable i j)\n    (define (swap-helper iterable i j)\n      (if (&lt; i (length iterable))\n          (if (= i j)\n              (cons (list-ref iterable i)\n                    (swap-helper iterable (+ i 1) j))\n              (cons (list-ref iterable j)\n                    (swap-helper iterable (+ i 1) j)))\n          '()))\n    (swap-helper iterable 0 j))\n  (define (sort iterable)\n    (if (&gt; (length iterable) 1)\n        (begin\n          (set! iterable (swap iterable 0 (- (length iterable) 1)))\n          (set! iterable (heapify (sort (cdr iterable))))\n          (cons (car iterable) iterable))\n        iterable))\n  (sort (heapify iterable)))\n</code>\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (cond [(empty? iterable) empty]\n            [(empty? (rest iterable))\n             (list (first iterable))]\n            [else\n             (let ([left (heapify-helper (take iterable (/ (length iterable) 2)))])\n               (let ([right (heapify-helper (drop iterable (/ (length iterable) 2)))])\n                 (let ([merged (merge left right)])\n                   (if (&lt; (first merged) (second merged))\n                       (cons (first merged) (rest merged))\n                       (cons (second merged) (cons (first merged) (drop merged 2)))))))]))\n      (heapify-helper iterable))\n  (define (heap-sort-helper iterable)\n    (cond [(empty? iterable) empty]\n          [else\n           (cons (first iterable) (heap-sort-helper (rest iterable)))]))\n  (heap-sort-helper (heapify iterable)))\n</code>\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (if (zero? i)\n          (cons (list-ref lst j) (swap-help (list-ref lst j) (- i 1) (- j 1)))\n          (cons (list-ref lst i) (swap-help (list-ref lst i) (- i 1) (- j 1)))))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (if (zero? i)\n          lst\n          (let* ((left-child (+ (* 2 i) 1))\n                 (right-child (+ (* 2 i) 2))\n                 (left-child-value (list-ref lst left-child))\n                 (right-child-value (list-ref lst right-child))\n                 (max-value (if (and (not (null? left-child-value))\n                                     (not (null? right-child-value)))\n                                (if (> left-child-value right-child-value)\n                                    left-child\n                                    right-child)\n                                (if (not (null? left-child-value))\n                                    left-child\n                                    right-child))))\n            (if (and (not (null? max-value))\n                     (> (list-ref lst max-value) (list-ref lst i)))\n                (heapify (swap lst i max-value) max-value)\n                (heapify-help lst (- i 1)))))))\n    (heapify-help lst i))\n  (define (heap-sort-help lst i)\n    (if (zero? i)\n        lst\n        (let* ((last-index (- (length lst) 1))\n               (heapified-list (heapify lst last-index)))\n          (heap-sort-help (swap heapified-list 0 last-index) (- i 1)))))\n  (heap-sort-help iterable (- (length iterable) 1)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(empty? lst) empty]\n        [(= i j) lst]\n        [(= i 0) (cons (list-ref lst j) (swap-helper (rest lst) (sub1 i) (sub1 j)))]\n        [else (cons (first lst) (swap-helper (rest lst) (sub1 i) (sub1 j)))]))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (heapify-helper (rest lst) (sub1 i)))]\n        [(> (list-ref lst i) (list-ref lst (sub1 i)))\n         (heapify-helper (swap lst i (sub1 i)) (sub1 i))]\n        [else (cons (first lst) (heapify-helper (rest lst) (sub1 i)))]))\n    (heapify-helper lst i))\n  (define (build-heap lst)\n    (define (build-heap-helper lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (build-heap-helper (rest lst) (sub1 i)))]\n        [else (build-heap-helper (heapify lst i) (sub1 i))]))\n    (build-heap-helper lst (sub1 (length lst))))\n  (define (sort lst)\n    (define (sort-helper lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (sort-helper (rest lst) (sub1 i)))]\n        [else (sort-helper (swap lst 0 i) (sub1 i))",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-help lst i j)\n        (if (zero? i)\n            (cons (list-ref lst j)\n                  (swap-help (list-ref lst j) (- i 1) (- j 1)))\n            (cons (list-ref lst i)\n                  (swap-help (list-ref lst i) (- i 1) (- j 1)))))\n      (swap-help lst i j))\n    (define (heapify-help iterable i)\n      (if (&lt; i (length iterable))\n          (if (&lt; (list-ref iterable i) (list-ref iterable (+ i 1)))\n              (heapify-help (swap iterable i (+ i 1)) (+ i 1))\n              (heapify-help iterable (+ i 1)))\n          iterable))\n    (heapify-help iterable 0))\n  (define (heap_sort-help iterable)\n    (if (zero? (length iterable))\n        '()\n        (cons (list-ref iterable 0)\n              (heap_sort-help (heapify (rest iterable))))))\n  (heap_sort-help (heapify iterable)))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nI'm not sure if this is the best way to do it, but it works.\nNo, it doesn't. It's not even close to working.\n<code>heapify</code> is a mess. You're trying to do too much at once.\n<code>heapify</code> should just take a list and return a heap.\n<code>heap_sort</code> should just take a list and return a sorted list.\n<code>heapify</code> should not be recursive. It should be iterative.\n<code>heap_sort</code> should not be recursive. It should be iterative.\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable) (insert (first iterable) heap))))\n    (heapify-iter iterable '()))\n\n  (define (insert element heap)\n    (define (insert-iter element heap)\n      (if (empty? heap)\n          (list element)\n          (if (< element (first heap))\n              (cons element heap)\n              (cons (first heap) (insert-iter element (rest heap))))))\n    (insert-iter element heap))\n\n  (define (sort heap)\n    (if (empty? heap)\n        '()\n        (cons (first heap) (sort (insert (first heap) (rest heap))))))\n  (sort (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down i)\n      (let ((left-child (+ i i))\n            (right-child (+ i i 1)))\n        (cond\n          ((< left-child (length iterable))\n           (let ((max-child\n                  (if (< right-child (length iterable))\n                      (if (> (list-ref iterable left-child)\n                             (list-ref iterable right-child))\n                          left-child\n                          right-child)\n                      left-child)))\n             (if (> (list-ref iterable max-child)\n                    (list-ref iterable i))\n                 (begin\n                   (swap i max-child)\n                   (sift-down max-child)))))\n          (else #f))))\n    (for ([i (in-range (quotient (length iterable) 2) -1 -1)])\n      (sift-down i))\n    iterable)\n  (define (heap-sort-iter iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down i)\n      (let ((left-child (+ i i))\n            (right-child (+ i i 1)))\n        (cond\n          ((< left-child (length iterable))\n           (let ((max-child\n                  (if (< right-child (length iterable))\n                      (if (> (list-ref iterable left-child)\n                             (list-ref iterable right-child))\n                          left-child\n                          right-child)\n                      left-child)))\n             (if (> (list-ref iterable max-child)\n                    (list-ref iterable i))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (if (null? (cdr i))\n              (append (cdr j) (list (car i)))\n              (append (cdr i) (list (car i)))))\n        (swap-helper i j))\n      (define (heapify-helper-helper iterable)\n        (define (heapify-helper-helper-helper iterable)\n          (if (null? iterable)\n              '()\n              (if (null? (cdr iterable))\n                  (list (car iterable))\n                  (if (< (car iterable) (cadr iterable))\n                      (cons (car iterable) (cdr iterable))\n                      (swap (car iterable) (cadr iterable))))))\n        (heapify-helper-helper-helper iterable))\n      (if (null? iterable)\n          '()\n          (cons (car iterable) (heapify-helper-helper (cdr iterable)))))\n    (heapify-helper iterable))\n  (define (heap_sort-helper iterable)\n    (define (heap_sort-helper-helper iterable)\n      (if (null? iterable)\n          '()\n          (cons (car iterable) (heap_sort-helper-helper (cdr iterable)))))\n    (heap_sort-helper-helper iterable))\n  (heap_sort-helper (heapify iterable)))\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j acc)\n      (cond\n        [(= i j) (reverse acc)]\n        [(= i 0) (swap-help (cdr lst) i (- j 1) (cons (car lst) acc))]\n        [else (swap-help (cdr lst) (- i 1) (- j 1) (cons (car lst) acc))]))\n    (swap-help lst i j '()))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(= i 0) lst]\n        [else (heapify-help (swap lst i (quotient (+ i 1) 2)) (- i 1))]))\n    (heapify-help lst i))\n  (define (heap_sort-help lst i)\n    (cond\n      [(= i 0) lst]\n      [else (heap_sort-help (heapify lst i) (- i 1))]))\n  (heap_sort-help iterable (- (length iterable) 1)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down start end)\n      (define root start)\n      (define child (add1 (* 2 root)))\n      (define (loop)\n        (if (&lt; child end)\n            (if (&lt; (list-ref iterable child) (list-ref iterable (add1 child)))\n                (set! child (add1 child)))\n            (if (&lt; (list-ref iterable root) (list-ref iterable child))\n                (begin (swap root child)\n                       (set! root child)\n                       (set! child (add1 (* 2 root)))\n                       (loop))))))\n    (define (loop start end)\n      (if (&lt; start (- end 1))\n          (begin (sift-down start end)\n                 (loop (add1 start) end))))\n    (loop (quotient (- (length iterable) 2) 2) (length iterable)))\n  (define (heap_sort iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (loop start end)\n      (if (&gt; start 0)\n          (begin (swap start end)\n                 (sift-down start end)\n                 (loop (sub1 start) (sub1 end)))))\n    (define (sift-down start end)\n      (define root start)\n      (define child (add1 (* 2 root)))\n      (define (loop)\n        (if (&lt; child end)\n            (if (&lt; (list-ref iterable child) (list-ref iterable (add1 child)))\n                (set! child (add1 child)))\n            (if (&lt; (list-ref iter",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(empty? lst) empty]\n        [(= i j) lst]\n        [(= i 0) (cons (list-ref lst j) (swap-help (rest lst) i (- j 1)))]\n        [(= j 0) (cons (list-ref lst i) (swap-help (rest lst) (- i 1) j))]\n        [else (cons (first lst) (swap-help (rest lst) (- i 1) (- j 1)))]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) lst]\n        [(> (list-ref lst i) (list-ref lst (- i 1)))\n         (heapify-help (swap lst i (- i 1)) (- i 1))]\n        [else (heapify-help lst (- i 1))]))\n    (heapify-help lst i))\n  (define (heapify-all lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) lst]\n      [else (cons (first lst) (heapify-all (heapify (rest lst) (- (length (rest lst)) 1))))]))\n  (define (heap-sort-help lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) lst]\n      [else (cons (first lst) (heap-sort-help (heapify-all (rest lst))))]))\n  (heap-sort-help iterable))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down i)\n      (define left (+ i i))\n      (define right (+ left 1))\n      (define largest\n        (cond\n          [(> left (length iterable)) i]\n          [(> right (length iterable))\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable i)) left]\n             [else i])]\n          [else\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable right))\n              (cond\n                [(> (list-ref iterable left) (list-ref iterable i)) left]\n                [else i])]\n             [else\n              (cond\n                [(> (list-ref iterable right) (list-ref iterable i)) right]\n                [else i])])]))\n      (when (not (= largest i))\n        (swap i largest)\n        (sift-down largest)))\n    (define (heapify-iter i)\n      (when (< i (length iterable))\n        (sift-down i)\n        (heapify-iter (+ i 1))))\n    (heapify-iter 0)\n    iterable)\n  (define (heap-sort-iter i)\n    (when (< i (length iterable))\n      (swap 0 i)\n      (sift-down 0)\n      (heap-sort-iter (+ i 1))))\n  (heapify iterable)\n  (heap-sort-iter (sub1 (length iterable))))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left-child (+ i 1)]\n                 [right-child (+ i 2)]\n                 [largest (if (&lt; left-child (length iterable))\n                              (if (&lt; (list-ref iterable left-child)\n                                      (list-ref iterable i))\n                                  i\n                                  left-child)\n                              i)])\n            (set! largest (if (&lt; right-child (length iterable))\n                              (if (&lt; (list-ref iterable right-child)\n                                      (list-ref iterable largest))\n                                  largest\n                                  right-child)\n                              largest))\n            (if (not (= largest i))\n                (begin\n                  (let ([temp (list-ref iterable i)])\n                    (set-car! (list-ref iterable i) (list-ref iterable largest))\n                    (set-car! (list-ref iterable largest) temp))\n                  (heapify-helper iterable (+ largest 1))))\n            (heapify-helper iterable (+ i 1))))\n      iterable)\n    (heapify-helper iterable 0))\n  (define (sort-helper iterable)\n    (if (not (empty? iterable))\n        (begin\n          (let ([temp (list-ref iterable 0)])\n            (set-car! (list-ref iterable 0) (list-ref iterable (- (length iterable) 1)))\n            (set-car! (list-ref iterable (- (length iterable) 1)) temp))\n          (sort-helper (heapify (sublist iterable 0 (- (length iterable) 1)))))))\n  (sort-helper (heapify iterable)))\n</code>\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (if (null? iterable)\n          '()\n          (let* ([first (car iterable)]\n                 [rest (cdr iterable)]\n                 [left (heapify-helper (filter (lambda (x) (< x first)) rest))]\n                 [right (heapify-helper (filter (lambda (x) (>= x first)) rest))])\n            (cons first (append left right)))))\n    (heapify-helper iterable))\n  (heapify iterable))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (if (zero? i)\n              (list (list-ref iterable j) (list-ref iterable i))\n              (cons (list-ref iterable i)\n                    (swap-helper (sub1 i) j))))\n        (swap-helper i j))\n      (define (heapify-helper-helper iterable)\n        (if (null? (cdr iterable))\n            iterable\n            (let ((left (car iterable))\n                  (right (cadr iterable)))\n              (if (&gt; left right)\n                  (heapify-helper (swap 0 1 iterable))\n                  (heapify-helper (cdr iterable))))))\n      (heapify-helper-helper iterable))\n    (heapify-helper iterable))\n  (define (heap_sort-helper iterable)\n    (if (null? iterable)\n        '()\n        (cons (car iterable)\n              (heap_sort-helper (heapify (cdr iterable))))))\n  (heap_sort-helper (heapify iterable)))\n</code>\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (if (zero? i)\n          (cons (list-ref lst j)\n                (swap-help (list-ref lst j) (- i 1) (- j 1)))\n          (cons (list-ref lst i)\n                (swap-help (list-ref lst i) (- i 1) (- j 1)))))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (if (zero? i)\n          lst\n          (let ((left-child (+ (* 2 i) 1))\n                (right-child (+ (* 2 i) 2)))\n            (if (and (< left-child (length lst))\n                     (< (list-ref lst left-child) (list-ref lst i)))\n                (heapify-help (swap lst i left-child) (- i 1))\n                (if (and (< right-child (length lst))\n                         (< (list-ref lst right-child) (list-ref lst i)))\n                    (heapify-help (swap lst i right-child) (- i 1))\n                    (heapify-help lst (- i 1))))))))\n    (heapify-help lst i))\n  (define (build-heap lst)\n    (define (build-heap-help lst i)\n      (if (zero? i)\n          lst\n          (build-heap-help (heapify lst i) (- i 1))))\n    (build-heap-help lst (- (quotient (length lst) 2) 1)))\n  (define (sort-heap lst)\n    (define (sort-heap-help lst i)\n      (if (zero? i)\n          lst\n          (sort-heap-help (swap lst 0 i) (- i 1))))\n    (sort-heap-help lst (- (length lst) 1)))\n  (define (heap-sort-help lst)\n    (if",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (not (empty? iterable))\n          (let ([left (heapify-helper (rest iterable) (+ i 1))]\n                [right (heapify-helper (rest iterable) (+ i 2))])\n            (if (and (not (empty? left))\n                     (not (empty? right)))\n                (if (&lt; (first left) (first right))\n                    (cons (first left) (cons (first right) (heapify-helper (rest iterable) (+ i 3))))\n                    (cons (first right) (cons (first left) (heapify-helper (rest iterable) (+ i 3)))))\n                (if (not (empty? left))\n                    (cons (first left) (heapify-helper (rest iterable) (+ i 3)))\n                    (if (not (empty? right))\n                        (cons (first right) (heapify-helper (rest iterable) (+ i 3)))\n                        (heapify-helper (rest iterable) (+ i 3)))))\n            )\n          (list)))\n    (heapify-helper iterable 0))\n  (define (sort-helper iterable)\n    (if (not (empty? iterable))\n        (cons (first iterable) (sort-helper (heapify (rest iterable))))\n        (list)))\n  (sort-helper (heapify iterable)))\n</code>\nI'm getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)\n  arguments...:\n   [none]\n</code>\nI'm not",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(= i j) lst]\n        [else (cons (list-ref lst j)\n                    (swap-help (list-ref lst i) (+ i 1) j))]))\n    (swap-help lst 0 j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(= i 0) lst]\n        [(> (list-ref lst i) (list-ref lst (- i 1)))\n         (heapify-help (swap lst i (- i 1)) (- i 1))]\n        [else (heapify-help lst (- i 1))]))\n    (heapify-help lst i))\n  (define (heap_sort-help lst i)\n    (cond\n      [(= i 0) lst]\n      [else (heap_sort-help (heapify lst i) (- i 1))]))\n  (heap_sort-help iterable (- (length iterable) 1)))\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (if (zero? i)\n          (cons (list-ref lst j) (swap-help (list-ref lst j) (- i 1) j))\n          (cons (list-ref lst i) (swap-help (list-ref lst i) (- i 1) j))))\n    (swap-help lst (- (length lst) 1) j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (let ((l (+ i 1))\n            (r (+ i 2)))\n        (if (and (< l (length lst))\n                 (< (list-ref lst l) (list-ref lst i)))\n            (heapify-help (swap lst i l) l)\n            (if (and (< r (length lst))\n                     (< (list-ref lst r) (list-ref lst i)))\n                (heapify-help (swap lst i r) r)\n                lst))))\n    (heapify-help lst i))\n  (define (heapify-all lst)\n    (if (zero? (length lst))\n        '()\n        (heapify-all (heapify lst 0))))\n  (define (sort-help lst)\n    (if (zero? (length lst))\n        '()\n        (cons (car lst) (sort-help (heapify-all (cdr lst))))))\n  (sort-help iterable))\n",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-help lst i j)\n        (cond\n          [(empty? lst) empty]\n          [(= i j) lst]\n          [(= i (first lst)) (cons j (swap-help (rest lst) i j))]\n          [(= j (first lst)) (cons i (swap-help (rest lst) i j))]\n          [else (cons (first lst) (swap-help (rest lst) i j))]))\n      (swap-help lst i j))\n    (define (heapify-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i (first lst)) (cons i (heapify-help (rest lst) i))]\n        [(= i (first (rest lst))) (cons i (heapify-help (rest (rest lst)) i))]\n        [(> i (first (rest lst))) (heapify-help (swap lst i (first (rest lst))) i)]\n        [else (cons (first lst) (heapify-help (rest lst) i))]))\n    (heapify-help iterable (first iterable)))\n  (define (heap_sort-help lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) lst]\n      [else (cons (first lst) (heap_sort-help (heapify (rest lst))))]))\n  (heap_sort-help iterable))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable)\n                        (insert (first iterable) heap))))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (if (empty? heap)\n        empty\n        (cons (find-min heap)\n              (heap-sort-iter (delete-min heap)))))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable index)\n      (if (&lt; index (length iterable))\n          (begin\n            (heapify-helper iterable (+ index 1))\n            (define parent (quotient index 2))\n            (define child (if (&gt; (vector-ref iterable index)\n                                  (vector-ref iterable parent))\n                              index\n                              parent))\n            (define temp (vector-ref iterable index))\n            (vector-set! iterable index (vector-ref iterable child))\n            (vector-set! iterable child temp))\n          iterable))\n    (heapify-helper iterable 1))\n  (define (sort-helper iterable)\n    (if (&gt; (length iterable) 1)\n        (begin\n          (define temp (vector-ref iterable 0))\n          (vector-set! iterable 0 (vector-ref iterable (- (length iterable) 1)))\n          (vector-set! iterable (- (length iterable) 1) temp)\n          (heapify (vector-copy (vector-ref iterable 0)\n                                (- (length iterable) 1)))\n          (sort-helper (vector-copy (vector-ref iterable 0)\n                                    (- (length iterable) 1))))\n        iterable))\n  (sort-helper (heapify (vector-copy iterable (length iterable)))))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left (+ i 1)]\n                 [right (+ i 2)]\n                 [largest (if (&lt; left (length iterable))\n                              (if (&lt; right (length iterable))\n                                  (if (&gt; (list-ref iterable left)\n                                          (list-ref iterable right))\n                                      left\n                                      right)\n                                  left)\n                              i)])\n            (if (&gt; (list-ref iterable largest)\n                    (list-ref iterable i))\n                (begin\n                  (set! iterable (swap iterable i largest))\n                  (heapify-helper iterable largest))\n                (heapify-helper iterable (+ i 1))))\n          iterable))\n    (heapify-helper iterable 0))\n  (define (swap iterable i j)\n    (let* ([temp (list-ref iterable i)]\n           [iterable (list-set iterable i (list-ref iterable j))])\n      (list-set iterable j temp)))\n  (define (sort iterable)\n    (if (&gt; (length iterable) 1)\n        (let* ([iterable (heapify iterable)]\n               [iterable (swap iterable 0 (- (length iterable) 1))]\n               [iterable (sort (sublist iterable 0 (- (length iterable) 1)))]\n               [iterable (append iterable (list (list-ref iterable (- (length iterable) 1))))])\n          iterable)\n        iterable))\n  (sort iterable))\n",
    "  (define (swap lst i j)\n    (let ([tmp (list-ref lst i)])\n      (set-car! (list-ref lst i) (list-ref lst j))\n      (set-car! (list-ref lst j) tmp)))\n  (define (heapify lst i)\n    (let ([left (+ i 1)]\n          [right (+ i 2)])\n      (if (and (< left (length lst))\n               (< (list-ref lst left) (list-ref lst i)))\n          (let ([largest left])\n            (if (and (< right (length lst))\n                     (< (list-ref lst right) (list-ref lst largest)))\n                (set! largest right))\n            (if (not (= largest i))\n                (begin\n                  (swap lst i largest)\n                  (heapify lst largest)))))))\n  (define (build_heap lst)\n    (for ([i (in-range (quotient (- (length lst) 2) -1) -1 -1)])\n      (heapify lst i)))\n  (define (sort lst)\n    (build_heap lst)\n    (for ([i (in-range (length lst) 1 -1)])\n      (swap lst 0 i)\n      (heapify (sublist lst 0 i) 0)))\n  (define lst (list->vector iterable))\n  (sort lst)\n  (vector->list lst))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (eq? i j)\n              iterable\n              (swap-helper (append (take iterable i)\n                                   (list (list-ref iterable j))\n                                   (take (drop iterable (+ i 1)) (- j i))\n                                   (list (list-ref iterable i))\n                                   (drop iterable (+ j 1)))\n                           i\n                           j)))\n      (if (&lt; i (length iterable))\n          (swap-helper (heapify-helper iterable (+ i 1))\n                       i\n                       (if (&lt; (+ i 1) (length iterable))\n                           (if (&gt; (list-ref iterable i) (list-ref iterable (+ i 1)))\n                               (+ i 1)\n                               i)\n                           i))\n          iterable))\n    (heapify-helper iterable 0))\n  (define (sort-helper iterable)\n    (if (eq? (length iterable) 1)\n        iterable\n        (append (list (list-ref iterable 0))\n                (sort-helper (heapify (append (list (list-ref iterable (- (length iterable) 1)))\n                                              (take (drop iterable 1) (- (length iterable) 2))))))))\n  (sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond [(empty? iterable) heap]\n            [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (sort-iter heap sorted)\n    (cond [(empty? heap) sorted]\n          [else (sort-iter (delete-min heap) (cons (min heap) sorted))]))\n  (sort-iter (heapify iterable) empty))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left (add1 (* 2 i))]\n                 [right (add1 (* 2 i 1))]\n                 [largest (if (&lt; left (length iterable))\n                              (if (&lt; (list-ref iterable left) (list-ref iterable i))\n                                  i\n                                  left)\n                              i)])\n            (set! largest (if (&lt; right (length iterable))\n                              (if (&lt; (list-ref iterable right) (list-ref iterable largest))\n                                  largest\n                                  right)\n                              largest))\n            (if (not (= largest i))\n                (begin\n                  (let ([temp (list-ref iterable i)])\n                    (set-nth i iterable (list-ref iterable largest))\n                    (set-nth largest iterable temp))\n                  (heapify-helper iterable largest)))\n            (heapify-helper iterable (add1 i))))\n      iterable)\n    (heapify-helper iterable 0))\n  (define (sort-helper iterable i)\n    (if (&gt; i 0)\n        (begin\n          (let ([temp (list-ref iterable 0)])\n            (set-nth 0 iterable (list-ref iterable i))\n            (set-nth i iterable temp))\n          (heapify (sublist iterable 0 (sub1 i)))\n          (sort-helper iterable (sub1 i)))))\n  (let ([iterable (heapify iterable)])\n    (sort-helper iterable (sub1 (length iterable)))))\n</code>\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (largest iterable i)\n        (define (largest-helper iterable i largest)\n          (cond\n            [(empty? iterable) largest]\n            [(> (first iterable) (list-ref iterable largest))\n             (largest-helper (rest iterable) (+ i 1) i)]\n            [else (largest-helper (rest iterable) (+ i 1) largest)]))\n        (largest-helper iterable i i))\n      (cond\n        [(empty? iterable) '()]\n        [(> (left i) (length iterable)) iterable]\n        [(> (right i) (length iterable)) iterable]\n        [else\n         (define (swap iterable i j)\n           (define (swap-helper iterable i j)\n             (cond\n               [(empty? iterable) '()]\n               [(= i 0) (cons (list-ref iterable j) (swap-helper (rest iterable) (- i 1) (- j 1)))]\n               [else (cons (first iterable) (swap-helper (rest iterable) (- i 1) (- j 1)))]))\n           (swap-helper iterable i j))\n         (define (max-heapify iterable i)\n           (define (max-heapify-helper iterable i)\n             (cond\n               [(empty? iterable) '()]\n               [(= i 0) (cons (first iterable) (max-heapify-helper (rest iterable) (- i 1)))]\n               [else (cons (list-ref iterable i) (max-heapify-helper (rest iterable) (- i 1)))]))\n           (max-heapify-helper iterable i))\n         (define (max-heapify-helper iterable i)\n           (define (max-heapify-helper-helper iterable i)\n             (cond\n               [(empty? iterable) '()]\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (if (eq? i j)\n              iterable\n              (swap-helper (append (list-ref iterable j)\n                                   (list-ref iterable i))\n                           (+ i 1)\n                           (+ j 1))))\n      (swap-helper iterable 0 0))\n    (define (heapify-helper-2 iterable i)\n      (if (eq? i (length iterable))\n          iterable\n          (heapify-helper-2 (swap iterable i (quotient (+ i 1) 2))\n                            (+ i 1))))\n    (heapify-helper-2 iterable 0))\n  (define (heap-sort-helper iterable)\n    (if (eq? (length iterable) 1)\n        iterable\n        (heap-sort-helper (append (list (list-ref iterable 0))\n                                  (heap-sort-helper (heapify (append (list-ref iterable 1)\n                                                                     (list-ref iterable 0))))))))\n  (heap-sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-rec iterable i)\n      (define (swap i j)\n        (define (swap-rec i j)\n          (define (swap-rec-helper i j)\n            (define (swap-rec-helper-helper i j)\n              (define (swap-rec-helper-helper-helper i j)\n                (define (swap-rec-helper-helper-helper-helper i j)\n                  (define (swap-rec-helper-helper-helper-helper-helper i j)\n                    (define (swap-rec-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-rec-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-rec-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-rec-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-rec-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-rec-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-rec-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-rec-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-rec-helper-helper-helper-helper-helper-helper-helper",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(empty? lst) empty]\n        [(zero? i) (cons (first lst) (swap-help (rest lst) (- i 1) (- j 1)))]\n        [(zero? j) (cons (first lst) (swap-help (rest lst) (- i 1) (- j 1)))]\n        [else (cons (first (rest lst)) (swap-help (rest (rest lst)) (- i 1) (- j 1)))]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(zero? i) (cons (first lst) (heapify-help (rest lst) (- i 1)))]\n        [else (cons (first (rest lst)) (heapify-help (rest (rest lst)) (- i 1)))]))\n    (heapify-help lst i))\n  (define (max-heapify lst i)\n    (define (max-heapify-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(zero? i) (cons (first lst) (max-heapify-help (rest lst) (- i 1)))]\n        [else (cons (first (rest lst)) (max-heapify-help (rest (rest lst)) (- i 1)))]))\n    (max-heapify-help lst i))\n  (define (build-max-heap lst)\n    (define (build-max-heap-help lst)\n      (cond\n        [(empty? lst) empty]\n        [else (cons (first lst) (build-max-heap-help (rest lst)))]))\n    (build-max-heap-help lst))\n  (define (sort lst)\n    (define (sort-help lst)\n      (cond\n        [(empty? lst) empty]\n       ",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (if (zero? i)\n          (cons (list-ref lst j) (swap-help (list-tail lst) i (sub1 j)))\n          (cons (list-ref lst i) (swap-help (list-tail lst) (sub1 i) j))))\n    (swap-help lst i j))\n\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (if (zero? i)\n          lst\n          (let* ([left (sub1 (* 2 i))]\n                 [right (sub1 (* 2 i 1))]\n                 [largest (if (&gt; (list-ref lst left) (list-ref lst right))\n                              left\n                              right)])\n            (if (&gt; (list-ref lst i) (list-ref lst largest))\n                (heapify-help lst (sub1 i))\n                (heapify-help (swap lst i largest) (sub1 i))))))\n    (heapify-help lst i))\n\n  (define (build-heap lst)\n    (define (build-heap-help lst i)\n      (if (zero? i)\n          lst\n          (build-heap-help (heapify lst i) (sub1 i))))\n    (build-heap-help lst (quotient (length lst) 2)))\n\n  (define (sort-heap lst)\n    (define (sort-heap-help lst i)\n      (if (zero? i)\n          lst\n          (sort-heap-help (swap lst 0 i) (sub1 i))))\n    (sort-heap-help lst (sub1 (length lst))))\n\n  (define (sort-heap-iter lst i)\n    (if (zero? i)\n        lst\n        (sort-heap-iter (sort-heap lst) (sub1 i))))\n\n  (sort-heap-iter (build-heap iter",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down start end)\n      (define root start)\n      (define child (add1 (* 2 root)))\n      (while (< child end)\n        (when (< (list-ref iterable (add1 child)) (list-ref iterable child))\n          (set! child (add1 child)))\n        (when (< (list-ref iterable child) (list-ref iterable root))\n          (swap root child)\n          (set! root child)\n          (set! child (add1 (* 2 root))))))\n    (define (heapify-iter start end)\n      (when (< start (sub1 end))\n        (heapify-iter (add1 start) end)\n        (sift-down start end)))\n    (heapify-iter 0 (length iterable)))\n  (define (sort-iter start end)\n    (when (< start end)\n      (swap start end)\n      (sift-down start (sub1 end))\n      (sort-iter start (sub1 end))))\n  (heapify iterable)\n  (sort-iter 0 (sub1 (length iterable))))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let ([left (+ i 1)]\n                [right (+ i 2)])\n            (if (&lt; left (length iterable))\n                (if (&lt; right (length iterable))\n                    (if (&lt; (list-ref iterable left)\n                            (list-ref iterable right))\n                        (if (&lt; (list-ref iterable left)\n                                (list-ref iterable i))\n                            (heapify-helper (swap iterable i left) left)\n                            iterable)\n                        (if (&lt; (list-ref iterable right)\n                                (list-ref iterable i))\n                            (heapify-helper (swap iterable i right) right)\n                            iterable))\n                    (if (&lt; (list-ref iterable left)\n                            (list-ref iterable i))\n                        (heapify-helper (swap iterable i left) left)\n                        iterable))\n                iterable))\n          iterable))\n    (heapify-helper iterable 0))\n  (define (swap iterable i j)\n    (let ([temp (list-ref iterable i)])\n      (list-set! iterable i (list-ref iterable j))\n      (list-set! iterable j temp)\n      iterable))\n  (define (heap_sort-helper iterable)\n    (if (&gt; (length iterable) 1)\n        (let ([iterable (heapify iterable)])\n          (heap_sort-helper (swap iterable 0 (- (length iterable) 1))))\n        iterable))\n  (heap_sort-helper iterable))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i)\n        (+ i 1))\n      (define (right i)\n        (+ i 2))\n      (define (largest iterable i)\n        (define (largest-helper iterable i l r)\n          (cond\n            [(and (not (null? l))\n                  (not (null? r))\n                  (&gt; (list-ref iterable l) (list-ref iterable r)))\n             (largest-helper iterable i l (right i))]\n            [(and (not (null? l))\n                  (not (null? r))\n                  (&lt; (list-ref iterable l) (list-ref iterable r)))\n             (largest-helper iterable i r (right i))]\n            [(and (not (null? l))\n                  (null? r))\n             (largest-helper iterable i l (right i))]\n            [(and (null? l)\n                  (not (null? r)))\n             (largest-helper iterable i r (right i))]\n            [else\n             i]))\n      (largest-helper iterable i (left i) (right i)))\n    (define (swap iterable i j)\n      (define (swap-helper iterable i j acc)\n        (cond\n          [(= i j)\n           (reverse acc)]\n          [(= i 0)\n           (swap-helper iterable (- i 1) j (cons (list-ref iterable j) acc))]\n          [else\n           (swap-helper iterable (- i 1) j (cons (list-ref iterable i) acc))]))\n      (swap-helper iterable (- (length iterable) 1) j '()))\n    (define (heapify-helper-iter iterable i)\n      (cond\n        [(&lt; i 0)\n         iterable]\n        [else\n         (define l (left i))\n         (define r (right i))\n         (define largest (largest iterable i))\n         (cond\n           [(= largest i)\n            (heapify",
    "  (let ([h (make-heap (lambda (x y) (&lt; x y)))])\n    (for ([x iterable]) (heap-add! h x))\n    (for/list ([x (in-heap h)]) (heap-remove! h))))\n",
    "  (define (heapify iterable)\n    (let loop ([iterable iterable]\n               [heap '()])\n      (cond [(empty? iterable) heap]\n            [else (loop (rest iterable)\n                        (insert (first iterable) heap))])))\n  (define (insert item heap)\n    (cond [(empty? heap) (list item)]\n          [(< item (first heap)) (cons item heap)]\n          [else (cons (first heap) (insert item (rest heap)))]))\n  (define (heap-sort iterable)\n    (let loop ([iterable iterable]\n               [sorted '()])\n      (cond [(empty? iterable) sorted]\n            [else (loop (rest iterable)\n                        (cons (first iterable) sorted))])))\n  (heap-sort (heapify iterable)))\n",
    "  (define (heapify i)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (swap-helper i j))\n    (define (left-child i)\n      (+ i 1))\n    (define (right-child i)\n      (+ i 2))\n    (define (parent i)\n      (- i 1))\n    (define (heapify-helper i)\n      (define (max-child i)\n        (define (max-child-helper i)\n          (define left (left-child i))\n          (define right (right-child i))\n          (if (and (not (null? (list-ref iterable left)))\n                   (not (null? (list-ref iterable right))))\n              (if (&gt; (list-ref iterable left)\n                      (list-ref iterable right))\n                  left\n                  right)\n              (if (not (null? (list-ref iterable left)))\n                  left\n                  right)))\n        (max-child-helper i))\n      (define (heapify-helper-helper i)\n        (define max-child (max-child i))\n        (if (&gt; (list-ref iterable max-child)\n                (list-ref iterable i))\n            (begin\n              (swap i max-child)\n              (heapify-helper max-child))))\n      (heapify-helper-helper i))\n    (heapify-helper i))\n  (define (heap-sort-helper iterable)\n    (define (heap-sort-helper-helper iterable)\n      (define (heap-sort-helper-helper-helper iterable)\n        (define (heap-sort-helper-helper-helper-helper iterable)\n          (define (heap-sort-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (parent i) (quotient i 2))\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (null? iterable)\n              '()\n              (if (= i 0)\n                  (cons (list-ref iterable j)\n                        (swap-helper (cdr iterable) i (- j 1)))\n                  (cons (list-ref iterable i)\n                        (swap-helper (cdr iterable) (- i 1) j)))))\n      (swap-helper iterable i j))\n    (define (max-heapify iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (parent i) (quotient i 2))\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (null? iterable)\n              '()\n              (if (= i 0)\n                  (cons (list-ref iterable j)\n                        (swap-helper (cdr iterable) i (- j 1)))\n                  (cons (list-ref iterable i)\n                        (swap-helper (cdr iterable) (- i 1) j)))))\n      (swap-helper iterable i j))\n      (define (max-heapify-helper iterable i)\n        (define (left i) (+ i 1))\n        (define (right i) (+ i 2))\n        (define (parent i) (quotient i 2))\n        (define (swap i j)\n          (define (swap-helper iterable i j)\n            (if (null? iterable)\n                '()\n                (if (= i 0)\n                    (cons (list-ref iterable j)\n                          (swap-helper (cdr iterable) i (- j 1)))\n                    (cons (list-ref iterable i",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap-elements i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (heapify-helper-helper iterable)\n        (define (heapify-helper-helper-helper iterable)\n          (define (heapify-helper-helper-helper-helper iterable)\n            (define (heapify-helper-helper-helper-helper-helper iterable)\n              (define (heapify-helper-helper-helper-helper-helper-helper iterable)\n                (define (heapify-helper-helper-helper-helper-helper-helper-helper iterable)\n                  (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                    (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                      (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                        (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                          (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                            (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                              (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                                (define (heapify-helper-helper-helper-helper-helper-helper-hel",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (list-ref lst j) (swap-help (cdr lst) (- i 1) (- j 1)))]\n        [(= j 0) (cons (list-ref lst i) (swap-help (cdr lst) (- i 1) (- j 1)))]\n        [else (cons (car lst) (swap-help (cdr lst) (- i 1) (- j 1)))]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-help (cdr lst) (- i 1)))]\n        [(> (car lst) (list-ref lst i)) (heapify-help (swap lst i 0) (- i 1))]\n        [else (cons (car lst) (heapify-help (cdr lst) (- i 1)))]))\n    (heapify-help lst i))\n  (define (heap-sort-help lst)\n    (cond\n      [(null? lst) '()]\n      [(null? (cdr lst)) lst]\n      [else (cons (car lst) (heap-sort-help (heapify (cdr lst) (- (length (cdr lst)) 1))))]))\n  (heap-sort-help iterable))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(= i j) lst]\n        [else (cons (list-ref lst j)\n                    (swap-helper (list-set lst j (list-ref lst i))\n                                 (+ i 1) j))]))\n    (swap-helper lst i j))\n  (define (heapify lst i n)\n    (define (heapify-helper lst i n)\n      (cond\n        [(>= i n) lst]\n        [else (define l (heapify-helper lst (+ i 1) n))\n               (define largest (if (> (list-ref l i) (list-ref l (+ i 1)))\n                                   i\n                                   (+ i 1)))\n               (define l (swap l i largest))\n               (define l (heapify-helper l (+ i 1) n))\n               (define l (swap l i largest))\n               l]))\n    (heapify-helper lst i n))\n  (define (build_heap lst n)\n    (define (build-heap-helper lst n)\n      (cond\n        [(= n 0) lst]\n        [else (define l (build-heap-helper lst (- n 1)))\n               (define l (heapify lst 0 n))\n               l]))\n    (build-heap-helper lst n))\n  (define (heap_sort-helper lst n)\n    (cond\n      [(= n 0) lst]\n      [else (define l (heap_sort-helper lst (- n 1)))\n             (define l (swap l 0 n))\n             (define l (heapify lst 0 (- n 1)))\n             l]))\n  (heap_sort-helper (build_heap iterable (length iterable)) (- (length iterable) 1)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable n)\n      (if (= n 1)\n          iterable\n          (let* ([i (quotient n 2)]\n                 [left (list-ref iterable (+ i 1))]\n                 [right (list-ref iterable (+ i 2))])\n            (if (and (not (null? left))\n                     (not (null? right))\n                     (&gt; left right))\n                (heapify-helper (swap-elements iterable (+ i 1) (+ i 2)) (- n 1))\n                (heapify-helper iterable (- n 1))))))\n    (heapify-helper iterable (length iterable)))\n  (define (swap-elements iterable i j)\n    (define (swap-helper iterable i j)\n      (if (null? iterable)\n          '()\n          (if (= i 0)\n              (cons (list-ref iterable j)\n                    (swap-helper (cdr iterable) (- i 1) (- j 1)))\n              (cons (car iterable)\n                    (swap-helper (cdr iterable) (- i 1) (- j 1))))))\n    (swap-helper iterable i j))\n  (define (sort-helper iterable n)\n    (if (= n 1)\n        iterable\n        (let* ([i (quotient n 2)]\n               [left (list-ref iterable (+ i 1))]\n               [right (list-ref iterable (+ i 2))])\n          (if (and (not (null? left))\n                   (not (null? right))\n                   (&gt; left right))\n              (sort-helper (swap-elements iterable (+ i 1) (+ i 2)) (- n 1))\n              (sort-helper iterable (- n 1))))))\n  (sort-helper (heapify iterable) (length iterable)))\n</code>\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable result)\n      (if (empty? iterable)\n          result\n          (heapify-iter (rest iterable)\n                        (insert (first iterable) result))))\n    (heapify-iter iterable empty))\n  (define (insert item heap)\n    (define (insert-iter item heap result)\n      (if (empty? heap)\n          (cons item result)\n          (if (&lt; item (first heap))\n              (insert-iter item (rest heap) (cons item result))\n              (insert-iter item (rest heap) (cons (first heap) result)))))\n    (insert-iter item heap empty))\n  (define (heap-sort-iter heap result)\n    (if (empty? heap)\n        result\n        (heap-sort-iter (rest heap) (cons (first heap) result))))\n  (heap-sort-iter (heapify iterable) empty))\n</code>\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (largest iterable i)\n        (define (largest-helper iterable i largest)\n          (if (null? iterable)\n              largest\n              (if (&gt; (car iterable) largest)\n                  (largest-helper (cdr iterable) (+ i 1) (car iterable))\n                  (largest-helper (cdr iterable) (+ i 1) largest))))\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (if (= i j)\n              iterable\n              (if (= i 0)\n                  (cons (list-ref iterable j) (swap-helper (cdr iterable) i (- j 1)))\n                  (cons (car iterable) (swap-helper (cdr iterable) (- i 1) j)))))\n      (define (max-heap iterable i)\n        (define (max-heap-helper iterable i)\n          (if (&lt; i 0)\n              iterable\n              (let ((l (left i))\n                    (r (right i)))\n                (if (&lt; l (length iterable))\n                    (if (&lt; r (length iterable))\n                        (if (&gt; (list-ref iterable l) (list-ref iterable r))\n                            (if (&gt; (list-ref iterable l) (list-ref iterable i))\n                                (max-heap-helper (swap iterable i l) (- i 1))\n                                (max-heap-helper iterable (- i 1)))\n                            (if (&gt; (list-ref iterable r) (list-ref iterable i))\n                                (max-heap-helper (swap iterable i r) (- i 1))\n                                (max-heap-helper iterable (- i 1))))\n                        (if (&gt; (list-ref iterable l) (list-ref iterable i))\n                            (max",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable) (insert (first iterable) heap))))\n    (heapify-iter iterable (make-heap)))\n  (define (heap-sort-iter heap result)\n    (if (empty? heap)\n        result\n        (heap-sort-iter (delete-min heap) (cons (min heap) result))))\n  (heap-sort-iter (heapify iterable) empty))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (heapify-helper iterable i)\n      (define left (add1 (* 2 i)))\n      (define right (add1 (* 2 i 1)))\n      (define largest\n        (cond\n          [(> (length iterable) left)\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable i))\n              left]\n             [else\n              i])]\n          [else\n           i]))\n      (define largest\n        (cond\n          [(> (length iterable) right)\n           (cond\n             [(> (list-ref iterable right) (list-ref iterable largest))\n              right]\n             [else\n              largest])]\n          [else\n           largest]))\n      (cond\n        [(not (= largest i))\n         (swap i largest)\n         (heapify-helper iterable largest)]\n        [else\n         iterable]))\n    (define (heapify-iter iterable i)\n      (cond\n        [(> i (quotient (length iterable) 2))\n         iterable]\n        [else\n         (heapify-iter (heapify-helper iterable i) (add1 i))]))\n    (heapify-iter iterable 0))\n  (define (sort-helper iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sort-helper-helper iterable i)\n      (swap 0 i)\n      (heapify-helper (sublist iterable 0 i) 0))\n    (define (sort-helper-iter iterable i)\n      (cond\n        [(> i",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (if (zero? i)\n          (cons (list-ref lst j) (swap-help (list-tail lst) (- i 1) (- j 1)))\n          (cons (list-ref lst i) (swap-help (list-tail lst) (- i 1) (- j 1)))))\n    (swap-help lst i j))\n\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (if (zero? i)\n          lst\n          (if (< (list-ref lst i) (list-ref lst (- i 1)))\n              (heapify-help (swap lst i (- i 1)) (- i 1))\n              (heapify-help lst (- i 1)))))\n    (heapify-help lst i))\n\n  (define (heap-sort-help lst i)\n    (if (zero? i)\n        lst\n        (heap-sort-help (heapify lst i) (- i 1))))\n  (heap-sort-help iterable (- (length iterable) 1)))\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(= i j) lst]\n        [(= i 0) (cons (list-ref lst j) (swap-help (list-ref lst j) i (- j 1)))]\n        [else (cons (list-ref lst i) (swap-help (list-ref lst j) (- i 1) (- j 1)))]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(= i 0) lst]\n        [(> (list-ref lst i) (list-ref lst (- i 1))) (heapify-help (swap lst i (- i 1)) (- i 1))]\n        [else (heapify-help lst (- i 1))]))\n    (heapify-help lst i))\n  (define (heap_sort-help lst i)\n    (cond\n      [(= i 0) lst]\n      [else (heap_sort-help (heapify lst i) (- i 1))]))\n  (heap_sort-help iterable (- (length iterable) 1)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap-elements i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable)\n                        (insert (first iterable) heap))))\n    (heapify-iter iterable (make-heap)))\n  (define (sort-iter heap sorted)\n    (if (empty? heap)\n        sorted\n        (sort-iter (delete-min heap)\n                   (cons (find-min heap) sorted))))\n  (sort-iter (heapify iterable) '()))\n",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-helper lst i j)\n        (if (zero? i)\n            (cons (list-ref lst j)\n                  (swap-helper (list-ref lst j) (add1 i) (add1 j)))\n            (cons (list-ref lst i)\n                  (swap-helper (list-ref lst i) (add1 i) (add1 j)))))\n      (swap-helper lst i j))\n    (define (heapify-helper iterable)\n      (if (null? iterable)\n          '()\n          (cons (car iterable)\n                (heapify-helper (swap (cdr iterable) 0 1)))))\n    (heapify-helper iterable))\n  (define (heap_sort-helper iterable)\n    (if (null? iterable)\n        '()\n        (cons (car iterable)\n              (heap_sort-helper (cdr iterable)))))\n  (heap_sort-helper (heapify iterable)))\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (if (zero? i)\n          (cons (list-ref lst j) (swap-help (list-tail lst) (- i 1) (- j 1)))\n          (cons (list-ref lst i) (swap-help (list-tail lst) (- i 1) (- j 1)))))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (if (&lt; i (length lst))\n          (if (&gt; (list-ref lst i) (list-ref lst (+ i 1)))\n              (heapify (swap lst i (+ i 1)) (+ i 1))\n              (heapify lst (+ i 1)))\n          lst))\n    (heapify-help lst i))\n  (define (heap-sort-help lst)\n    (if (null? lst)\n        '()\n        (cons (car lst) (heap-sort-help (heapify (cdr lst) 0)))))\n  (heap-sort-help iterable))\n</code>\nI am not sure if this is the most efficient way to do it, but it works.\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let ([left (add1 (* 2 i))]\n                [right (add1 (* 2 i 1))])\n            (if (&lt; left (length iterable))\n                (heapify-helper iterable left))\n            (if (&lt; right (length iterable))\n                (heapify-helper iterable right))\n            (if (&lt; (list-ref iterable i) (list-ref iterable left))\n                (let ([temp (list-ref iterable i)])\n                  (set-nth-list-ref iterable i (list-ref iterable left))\n                  (set-nth-list-ref iterable left temp)))\n            (if (&lt; (list-ref iterable i) (list-ref iterable right))\n                (let ([temp (list-ref iterable i)])\n                  (set-nth-list-ref iterable i (list-ref iterable right))\n                  (set-nth-list-ref iterable right temp))))))\n    (heapify-helper iterable 0))\n  (define (sort-helper iterable)\n    (if (&gt; (length iterable) 1)\n        (let ([temp (list-ref iterable 0)])\n          (set-nth-list-ref iterable 0 (list-ref iterable (sub1 (length iterable))))\n          (set-nth-list-ref iterable (sub1 (length iterable)) temp)\n          (heapify (sort-helper (sublist iterable 0 (sub1 (length iterable))))))))\n  (sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (eq? i j)\n              iterable\n              (swap-helper (append (list-ref iterable j)\n                                   (list-ref iterable i))\n                           (+ i 1)\n                           (+ j 1))))\n      (swap-helper iterable 0 0))\n    (define (heapify-helper-2 iterable i)\n      (if (&lt; i (length iterable))\n          (heapify-helper-2 (heapify-helper iterable i)\n                            (+ i 1))\n          iterable))\n    (heapify-helper-2 iterable 0))\n  (define (heap-sort-helper iterable i)\n    (if (&lt; i (length iterable))\n        (heap-sort-helper (heapify-helper iterable i)\n                          (+ i 1))\n        iterable))\n  (heap-sort-helper iterable 0))\n</code>\nI'm getting the following error:\n<code>heap_sort.rkt:9:0: swap: undefined;\n cannot reference an identifier before its definition\n  in module: top-level\nheap_sort.rkt:9:0: swap-helper: undefined;\n cannot reference an identifier before its definition\n  in module: top-level\nheap_sort.rkt:9:0: swap-helper: undefined;\n cannot reference an identifier before its definition\n  in module: top-level\nheap_sort.rkt:9:0: swap-helper: undefined;\n cannot reference an identifier before its definition\n  in module: top-level\nheap_sort.rkt:9:0: swap-helper: undefined;\n cannot reference an identifier before its definition\n  in module: top-level\nheap_sort.rkt:9:0: swap-helper: undefined;\n cannot reference an identifier before its definition\n  in module: top-level\nheap_sort.rkt",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-rec iterable i)\n      (define (swap i j)\n        (define (swap-rec iterable i j)\n          (cond\n            [(empty? iterable) empty]\n            [(= i 0) (cons (list-ref iterable j) (swap-rec (rest iterable) i (- j 1)))]\n            [(= j 0) (cons (list-ref iterable i) (swap-rec (rest iterable) (- i 1) j))]\n            [else (cons (list-ref iterable i) (swap-rec (rest iterable) (- i 1) (- j 1)))]))\n        (swap-rec iterable i j))\n      (define (heapify-rec-helper iterable i)\n        (cond\n          [(empty? iterable) empty]\n          [(= i 0) (cons (list-ref iterable 0) (heapify-rec-helper (rest iterable) (- i 1)))]\n          [(< (list-ref iterable (- i 1)) (list-ref iterable i)) (heapify-rec-helper (rest iterable) (- i 1))]\n          [else (heapify-rec-helper (swap (- i 1) i) (- i 1))]))\n      (heapify-rec-helper iterable i))\n    (heapify-rec iterable (sub1 (length iterable))))\n  (define (sort-heap iterable)\n    (define (sort-heap-rec iterable i)\n      (define (swap i j)\n        (define (swap-rec iterable i j)\n          (cond\n            [(empty? iterable) empty]\n            [(= i 0) (cons (list-ref iterable j) (swap-rec (rest iterable) i (- j 1)))]\n            [(= j 0) (cons (list-ref iterable i) (swap-rec (rest iterable) (- i 1) j))]\n            [else (cons (list-ref iterable i) (swap-rec (rest iterable) (- i 1) (- j 1)))]))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let ([left (+ i 1)]\n                [right (+ i 2)])\n            (if (&lt; left (length iterable))\n                (if (&lt; right (length iterable))\n                    (if (&gt; (list-ref iterable left)\n                            (list-ref iterable right))\n                        (if (&gt; (list-ref iterable left)\n                                (list-ref iterable i))\n                            (begin\n                              (set! iterable (swap iterable i left))\n                              (heapify-helper iterable left))\n                            (heapify-helper iterable (+ i 1)))\n                        (if (&gt; (list-ref iterable right)\n                                (list-ref iterable i))\n                            (begin\n                              (set! iterable (swap iterable i right))\n                              (heapify-helper iterable right))\n                            (heapify-helper iterable (+ i 1))))\n                    (if (&gt; (list-ref iterable left)\n                            (list-ref iterable i))\n                        (begin\n                          (set! iterable (swap iterable i left))\n                          (heapify-helper iterable left))\n                        (heapify-helper iterable (+ i 1))))\n                (heapify-helper iterable (+ i 1))))\n          iterable))\n    (heapify-helper iterable 0))\n  (define (swap iterable i j)\n    (define (swap-helper iterable i j)\n      (if (&lt; i (length iterable))\n          (if (= i j)\n              (list (list-ref iterable i))\n              (cons (list-ref iterable i)\n                    (swap-helper iterable (+ i 1) j)))\n          '()))\n    (append (swap-helper iterable 0 i)\n            (list (list-ref iterable j))\n            (swap-helper iterable (+ i 1) j)))\n  (define",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down start end)\n      (define root start)\n      (define child (add1 (* 2 root)))\n      (define (loop)\n        (if (&lt; child end)\n            (if (&lt; (list-ref iterable (add1 child)) (list-ref iterable child))\n                (set! child (add1 child)))\n            (if (&lt; (list-ref iterable child) (list-ref iterable root))\n                (begin\n                  (swap root child)\n                  (set! root child)\n                  (set! child (add1 (* 2 root)))\n                  (loop))))))\n    (define (loop start end)\n      (if (&lt; start end)\n          (begin\n            (sift-down start end)\n            (loop (add1 start) end))))\n    (loop (quotient (sub1 (length iterable)) 2) (sub1 (length iterable))))\n  (define (sort iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (loop start end)\n      (if (&lt; start end)\n          (begin\n            (swap start end)\n            (sift-down start (sub1 end))\n            (loop start (sub1 end)))))\n    (loop 0 (sub1 (length iterable))))\n  (define (sift-down start end)\n    (define root start)\n    (define child (add1 (* 2 root)))\n    (define (loop)\n      (if (&lt; child end)\n          (if (&lt; (list-ref iterable (add1 child)) (list-ref iterable child))\n              (set! child (",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (left-child index)\n        (+ (* 2 index) 1))\n      (define (right-child index)\n        (+ (* 2 index) 2))\n      (define (parent index)\n        (quotient (- index 1) 2))\n      (define (swap lst index1 index2)\n        (define (swap-helper lst index1 index2)\n          (cond\n            [(zero? index1) (cons (list-ref lst index2) (swap-helper (rest lst) (- index1 1) (- index2 1)))]\n            [(zero? index2) (cons (list-ref lst index1) (swap-helper (rest lst) (- index1 1) (- index2 1)))]\n            [else (cons (list-ref lst index1) (swap-helper (rest lst) (- index1 1) (- index2 1)))]))\n        (swap-helper lst index1 index2))\n      (define (heapify-helper-helper iterable index)\n        (cond\n          [(< (length iterable) (+ (* 2 index) 1)) iterable]\n          [(< (length iterable) (+ (* 2 index) 2))\n           (cond\n             [(< (list-ref iterable index) (list-ref iterable (left-child index)))\n              (swap iterable index (left-child index))]\n             [else iterable])]\n          [else\n           (cond\n             [(and (< (list-ref iterable index) (list-ref iterable (left-child index)))\n                   (< (list-ref iterable (left-child index)) (list-ref iterable (right-child index))))\n              (swap iterable index (right-child index))]\n             [(< (list-ref iterable index) (list-ref iterable (left-child index)))\n              (swap iterable index (left-child index))]\n             [(< (list-ref iterable index) (list-ref iterable (right-child index)))\n              (swap iterable index (right-child index",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond\n        [(empty? iterable) heap]\n        [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (cond\n      [(empty? heap) empty]\n      [else (cons (find-min heap) (heap-sort-iter (delete-min heap)))]))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify i)\n    (let* ([left (add1 (* 2 i))]\n           [right (add1 (* 2 i 1))]\n           [largest (if (and (< left (length iterable))\n                             (< (list-ref iterable left)\n                                (list-ref iterable i)))\n                        left\n                        i)])\n      (set! largest (if (and (< right (length iterable))\n                              (< (list-ref iterable right)\n                                 (list-ref iterable largest)))\n                         right\n                         largest))\n      (when (not (= largest i))\n        (let* ([tmp (list-ref iterable i)])\n          (set-list-ref! iterable i (list-ref iterable largest))\n          (set-list-ref! iterable largest tmp)\n          (heapify largest)))))\n  (define (build_heap)\n    (for ([i (in-range (quotient (length iterable) 2) -1 -1)])\n      (heapify i)))\n  (define (sort)\n    (build_heap)\n    (for ([i (in-range (sub1 (length iterable)) 0 -1)])\n      (let* ([tmp (list-ref iterable 0)])\n        (set-list-ref! iterable 0 (list-ref iterable i))\n        (set-list-ref! iterable i tmp)\n        (heapify 0))))\n  (sort)\n  iterable)\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (list-ref lst j) (swap-help (cdr lst) (- i 1) (- j 1)))]\n        [(= j 0) (cons (list-ref lst i) (swap-help (cdr lst) (- i 1) (- j 1)))]\n        [else (cons (car lst) (swap-help (cdr lst) (- i 1) (- j 1)))]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-help (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-help (cdr lst) (- i 1)))]))\n    (define (heapify-help-2 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-help-2 (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-help-2 (cdr lst) (- i 1)))]))\n    (define (heapify-help-3 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-help-3 (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-help-3 (cdr lst) (- i 1)))]))\n    (define (heapify-help-4 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-help-4 (cdr lst) (- i 1",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (define (max-heapify iterable i)\n        (define l (left i))\n        (define r (right i))\n        (define largest\n          (cond\n            [(> l (length iterable)) i]\n            [(> r (length iterable))\n             (cond\n               [(> (list-ref iterable l) (list-ref iterable i)) l]\n               [else i])]\n            [(> (list-ref iterable l) (list-ref iterable i))\n             (cond\n               [(> (list-ref iterable r) (list-ref iterable l)) l]\n               [else r])]\n            [(> (list-ref iterable r) (list-ref iterable i)) r]\n            [else i]))\n        (cond\n          [(= largest i) iterable]\n          [else\n           (swap i largest)\n           (max-heapify iterable largest)]))\n      (cond\n        [(= i 0) iterable]\n        [else\n         (max-heapify iterable i)\n         (heapify-helper iterable (- i 1))]))\n    (heapify-helper iterable (- (length iterable) 1)))\n  (define (heap-sort-helper iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (max-heapify iterable i)\n      (define l (left i))\n      (define r (right i))\n      (define largest\n",
    "  (define (swap a b)\n    (define temp (list-ref iterable a))\n    (set-car! (list-ref iterable a) (list-ref iterable b))\n    (set-car! (list-ref iterable b) temp))\n  (define (heapify i)\n    (define left (+ i 1))\n    (define right (+ i 2))\n    (define largest\n      (cond\n        [(> (list-ref iterable i) (list-ref iterable left)) i]\n        [else left]))\n    (define largest\n      (cond\n        [(> (list-ref iterable largest) (list-ref iterable right)) largest]\n        [else right]))\n    (if (not (= i largest))\n        (begin\n          (swap i largest)\n          (heapify largest))))\n  (define (build_heap)\n    (for ([i (in-range (quotient (length iterable) 2) -1 -1)])\n      (heapify i)))\n  (define (sort)\n    (build_heap)\n    (for ([i (in-range (sub1 (length iterable)) 0 -1)])\n      (swap 0 i)\n      (heapify 0)))\n  (sort)\n  iterable)\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (null? iterable)\n              (list)\n              (if (= i j)\n                  (cons (car iterable) (swap-helper (cdr iterable) i j))\n                  (cons (list-ref iterable j) (swap-helper (cdr iterable) i j)))))\n      (if (null? iterable)\n          (list)\n          (if (= i (length iterable))\n              (list)\n              (let ((left-child (+ i i))\n                    (right-child (+ i i 1)))\n                (if (&gt; left-child (length iterable))\n                    (list)\n                    (if (&gt; right-child (length iterable))\n                        (list)\n                        (if (&gt; (list-ref iterable left-child) (list-ref iterable right-child))\n                            (swap i left-child)\n                            (swap i right-child))))))))\n    (define (heapify-helper-iter iterable i)\n      (if (= i 0)\n          (list)\n          (heapify-helper-iter (heapify-helper iterable i) (- i 1))))\n    (heapify-helper-iter iterable (- (length iterable) 1)))\n  (define (heap-sort-helper iterable)\n    (if (null? iterable)\n        (list)\n        (cons (car iterable) (heap-sort-helper (heapify (cdr iterable))))))\n  (heap-sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (let loop ([iterable iterable] [result '()])\n      (if (null? iterable)\n          result\n          (loop (cdr iterable)\n                (cons (car iterable) result)))))\n  (define (heap_sort_iter iterable)\n    (let loop ([iterable iterable] [result '()])\n      (if (null? iterable)\n          result\n          (loop (cdr iterable)\n                (cons (car iterable) result)))))\n  (heap_sort_iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-help lst i j)\n        (cond\n          [(null? lst) lst]\n          [(= i 0) (cons (list-ref lst j) (swap-help (cdr lst) (- i 1) (- j 1)))]\n          [(= j 0) (cons (list-ref lst i) (swap-help (cdr lst) (- i 1) (- j 1)))]\n          [else (cons (list-ref lst i) (swap-help (cdr lst) (- i 1) (- j 1)))]))\n      (swap-help lst i j))\n    (define (heapify-help iterable)\n      (cond\n        [(null? iterable) iterable]\n        [(= (length iterable) 1) iterable]\n        [(> (car iterable) (cadr iterable)) (heapify-help (swap iterable 0 1))]\n        [else (heapify-help (cdr iterable))]))\n    (heapify-help iterable))\n  (define (heap_sort-help iterable)\n    (cond\n      [(null? iterable) iterable]\n      [(= (length iterable) 1) iterable]\n      [else (cons (car iterable) (heap_sort-help (heapify (cdr iterable))))]))\n  (heap_sort-help iterable))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (define (left i)\n        (+ i 1))\n      (define (right i)\n        (+ i 2))\n      (define (parent i)\n        (quotient (- i 1) 2))\n      (define (max-heapify i)\n        (define l (left i))\n        (define r (right i))\n        (define largest\n          (cond\n            [(> l (length iterable)) i]\n            [(> r (length iterable))\n             (cond\n               [(> (list-ref iterable l) (list-ref iterable i)) l]\n               [else i])]\n            [else\n             (cond\n               [(> (list-ref iterable l) (list-ref iterable i)) l]\n               [(> (list-ref iterable r) (list-ref iterable i)) r]\n               [else i])]))\n        (cond\n          [(not (= largest i))\n           (swap i largest)\n           (max-heapify largest)]\n          [else\n           (void)]))\n      (max-heapify i))\n    (define (build-max-heap iterable)\n      (define (build-max-heap-helper iterable i)\n        (heapify-helper iterable i)\n        (cond\n          [(> i 0)\n           (build-max-heap-helper iterable (parent i))]\n          [else\n           (void)]))\n      (build-max-heap-helper iterable (quotient (- (length iterable) 1) 2)))\n    (build-max-heap iterable))\n  (define (sort iterable)\n    (define (sort-helper iterable i)\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (parent i) (quotient i 2))\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (null? iterable)\n              '()\n              (if (= i 0)\n                  (cons (list-ref iterable j)\n                        (swap-helper (cdr iterable) i (- j 1)))\n                  (cons (car iterable)\n                        (swap-helper (cdr iterable) (- i 1) j)))))\n      (swap-helper iterable i j))\n    (define (max-heapify iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (parent i) (quotient i 2))\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (null? iterable)\n              '()\n              (if (= i 0)\n                  (cons (list-ref iterable j)\n                        (swap-helper (cdr iterable) i (- j 1)))\n                  (cons (car iterable)\n                        (swap-helper (cdr iterable) (- i 1) j)))))\n      (swap-helper iterable i j))\n      (define (max-heapify-helper iterable i)\n        (define (left i) (+ i 1))\n        (define (right i) (+ i 2))\n        (define (parent i) (quotient i 2))\n        (define (swap i j)\n          (define (swap-helper iterable i j)\n            (if (null? iterable)\n                '()\n                (if (= i 0)\n                    (cons (list-ref iterable j)\n                          (swap-helper (cdr iterable) i (- j 1)))\n                    (cons (car iterable)\n                          (swap-hel",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap-elements iterable i j)\n        (define (swap-helper iterable i j)\n          (cond\n            [(empty? iterable) empty]\n            [(= i 0) (cons (second iterable) (swap-helper (rest (rest iterable)) i (- j 1)))]\n            [(= j 0) (cons (first iterable) (swap-helper (rest iterable) (- i 1) j))]\n            [else (cons (first iterable) (swap-helper (rest iterable) (- i 1) (- j 1)))]))\n        (swap-helper iterable i j))\n      (define (sift-down iterable i)\n        (define (sift-down-helper iterable i)\n          (cond\n            [(empty? iterable) empty]\n            [(= i 0) (cons (first iterable) (sift-down-helper (rest iterable) i))]\n            [(= i 1) (cons (first iterable) (sift-down-helper (rest iterable) i))]\n            [else (define (left-child iterable i)\n                    (cond\n                      [(empty? iterable) empty]\n                      [(= i 0) (cons (first iterable) (left-child (rest iterable) (- i 1)))]\n                      [else (left-child (rest iterable) (- i 1))]))\n                  (define (right-child iterable i)\n                    (cond\n                      [(empty? iterable) empty]\n                      [(= i 0) (cons (second iterable) (right-child (rest (rest iterable)) (- i 1)))]\n                      [else (right-child (rest iterable) (- i 1))]))\n                  (define (max-child iterable i)\n                    (cond\n                      [(empty? iterable) empty]\n                      [(= i 0) (cons (first iterable) (max-child (rest iterable) (- i 1)))]\n                      [(= i 1) (cons (first iterable) (max-child (rest iterable) (- i 1",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable index)\n      (define (swap iterable index1 index2)\n        (define (swap-helper iterable index1 index2 result)\n          (cond\n            [(empty? iterable) (reverse result)]\n            [(= index1 index2) (cons (first iterable) (swap-helper (rest iterable) (+ index1 1) index2 result))]\n            [(= index1 0) (cons (list-ref iterable index2) (swap-helper (rest iterable) (+ index1 1) index2 result))]\n            [(= index2 0) (cons (list-ref iterable index1) (swap-helper (rest iterable) (+ index1 1) index2 result))]\n            [else (cons (first iterable) (swap-helper (rest iterable) (+ index1 1) index2 result))]))\n        (swap-helper iterable 0 0 '()))\n      (define (heapify-helper-helper iterable index result)\n        (cond\n          [(empty? iterable) (reverse result)]\n          [(= index 0) (heapify-helper-helper (rest iterable) (+ index 1) (cons (first iterable) result))]\n          [(> (list-ref iterable index) (list-ref iterable (- index 1))) (heapify-helper-helper (swap iterable index (- index 1)) (+ index 1) (cons (first iterable) result))]\n          [else (heapify-helper-helper (rest iterable) (+ index 1) (cons (first iterable) result))]))\n      (heapify-helper-helper iterable 0 '()))\n    (heapify-helper iterable 0))\n  (define (heap_sort-helper iterable result)\n    (cond\n      [(empty? iterable) (reverse result)]\n      [else (heap_sort-helper (heapify (rest iterable)) (cons (first iterable) result))]))\n  (heap_sort-helper (heapify iterable)",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond [(empty? iterable) heap]\n            [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (cond [(empty? heap) empty]\n          [else (cons (find-min heap) (heap-sort-iter (delete-min heap)))]))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left (* 2 i)]\n                 [right (+ left 1)])\n            (heapify-helper iterable left)\n            (heapify-helper iterable right)\n            (let* ([largest (if (&lt; (list-ref iterable left) (list-ref iterable right))\n                                right\n                                left)]\n                   [largest-value (list-ref iterable largest)])\n              (if (&lt; largest-value (list-ref iterable i))\n                  (begin\n                    (set-car! (list-ref iterable largest) (list-ref iterable i))\n                    (set-car! (list-ref iterable i) largest-value)))))\n          #f))\n    (heapify-helper iterable 1))\n  (define (sort-helper iterable i)\n    (if (&lt; i (length iterable))\n        (begin\n          (heapify iterable)\n          (let* ([last-index (- (length iterable) 1)]\n                 [last-value (list-ref iterable last-index)])\n            (set-car! (list-ref iterable last-index) (list-ref iterable 0))\n            (set-car! (list-ref iterable 0) last-value)\n            (sort-helper (sublist iterable 0 last-index) 0)))\n        #f))\n  (sort-helper iterable 0))\n</code>\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (list-ref lst j) (swap-help (cdr lst) (- i 1) (- j 1)))]\n        [(= j 0) (cons (list-ref lst i) (swap-help (cdr lst) (- i 1) (- j 1)))]\n        [else (cons (car lst) (swap-help (cdr lst) (- i 1) (- j 1)))]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-help (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-help (cdr lst) (- i 1)))]))\n    (define (heapify-help2 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-help2 (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-help2 (cdr lst) (- i 1)))]))\n    (define (heapify-help3 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-help3 (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-help3 (cdr lst) (- i 1)))]))\n    (define (heapify-help4 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-help4 (cdr lst) (- i 1)))]\n        [else (cons",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(= i j) lst]\n        [else (cons (list-ref lst j)\n                    (swap-help (list-set lst j (list-ref lst i)) (+ i 1) j))]))\n    (swap-help lst i j))\n\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(= i 0) lst]\n        [(> (list-ref lst i) (list-ref lst (- i 1)))\n         (heapify-help (swap lst i (- i 1)) (- i 1))]\n        [else (heapify-help lst (- i 1))]))\n    (heapify-help lst i))\n\n  (define (heap_sort-help lst i)\n    (cond\n      [(= i 0) lst]\n      [else (heap_sort-help (heapify lst i) (- i 1))]))\n  (heap_sort-help iterable (- (length iterable) 1)))\n",
    "  (define (heapify iterable)\n    (define (heapify_iter iterable heap)\n      (cond [(empty? iterable) heap]\n            [else (heapify_iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify_iter iterable empty))\n  (define (heap_sort_iter heap sorted)\n    (cond [(empty? heap) sorted]\n          [else (heap_sort_iter (delete-min heap) (cons (min heap) sorted))]))\n  (heap_sort_iter (heapify iterable) empty))\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond [(empty? lst) empty]\n            [(= i 0) (cons (list-ref lst j) (swap-help (rest lst) (- i 1) (- j 1)))]\n            [(= j 0) (cons (list-ref lst i) (swap-help (rest lst) (- i 1) (- j 1)))]\n            [else (cons (first lst) (swap-help (rest lst) (- i 1) (- j 1)))]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond [(empty? lst) empty]\n            [(= i 0) (cons (first lst) (heapify-help (rest lst) (- i 1)))]\n            [else (cons (first lst) (heapify-help (rest lst) (- i 1)))]))\n    (define (heapify-help2 lst i j)\n      (cond [(empty? lst) empty]\n            [(= i 0) (cons (list-ref lst j) (heapify-help2 (rest lst) (- i 1) (- j 1)))]\n            [(= j 0) (cons (list-ref lst i) (heapify-help2 (rest lst) (- i 1) (- j 1)))]\n            [else (cons (first lst) (heapify-help2 (rest lst) (- i 1) (- j 1)))]))\n    (define (heapify-help3 lst i j)\n      (cond [(empty? lst) empty]\n            [(= i 0) (cons (list-ref lst j) (heapify-help3 (rest lst) (- i 1) (- j 1)))]\n            [(= j 0) (cons (list-ref lst i) (heapify-help3 (rest lst) (- i 1) (- j 1)))]\n            [else (cons (first lst) (heapify-help3 (rest lst",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (if (= i j)\n              iterable\n              (begin\n                (define temp (list-ref iterable i))\n                (set-car! (list-ref iterable i) (list-ref iterable j))\n                (set-car! (list-ref iterable j) temp)\n                (swap-helper iterable (+ i 1) (+ j 1)))))\n      (if (= i (length iterable))\n          iterable\n          (begin\n            (define left-child (+ (* 2 i) 1))\n            (define right-child (+ (* 2 i) 2))\n            (define max-child (if (&gt; (list-ref iterable left-child) (list-ref iterable right-child))\n                                  left-child\n                                  right-child))\n            (if (&gt; (list-ref iterable max-child) (list-ref iterable i))\n                (swap iterable i max-child)\n                iterable)\n            (heapify-helper iterable (+ i 1)))))\n    (heapify-helper iterable 0))\n  (define (heap-sort-helper iterable)\n    (define (swap iterable i j)\n      (define (swap-helper iterable i j)\n        (if (= i j)\n            iterable\n            (begin\n              (define temp (list-ref iterable i))\n              (set-car! (list-ref iterable i) (list-ref iterable j))\n              (set-car! (list-ref iterable j) temp)\n              (swap-helper iterable (+ i 1) (+ j 1)))))\n    (swap iterable i j))\n    (if (= (length iterable) 1)\n        iterable\n        (begin\n          (swap iterable 0 (- (length iterable) 1))\n          (heap-sort-helper (list-tail iterable)))))\n  (heap-sort-helper (heapify",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable index)\n      (define (swap iterable index1 index2)\n        (define (swap-helper iterable index1 index2)\n          (if (equal? index1 index2)\n              iterable\n              (swap-helper (append (list-ref iterable index2)\n                                   (list-ref iterable index1)\n                                   (list-take iterable index1)\n                                   (list-drop iterable (+ index1 2))\n                                   (list-take iterable index2)\n                                   (list-drop iterable (+ index2 2)))\n                           index2\n                           index1)))\n        (swap-helper iterable index1 index2))\n      (define (left-child index)\n        (+ index (* 2 1)))\n      (define (right-child index)\n        (+ index (* 2 2)))\n      (define (parent index)\n        (quotient index 2))\n      (define (max-child iterable index)\n        (define (max-child-helper iterable index1 index2)\n          (if (and (not (equal? index1 (length iterable)))\n                   (not (equal? index2 (length iterable))))\n              (if (&gt; (list-ref iterable index1)\n                      (list-ref iterable index2))\n                  index1\n                  index2)\n              (if (equal? index1 (length iterable))\n                  index2\n                  index1)))\n        (max-child-helper iterable (left-child index) (right-child index)))\n      (define (heapify-helper-helper iterable index)\n        (if (&gt; (list-ref iterable index)\n                (list-ref iterable (max-child iterable index)))\n            iterable\n            (heapify-helper-helper (swap iterable index (max-child iterable index)) (max-child iterable index))))\n      (heapify-helper-helper iterable index))\n    (define (heapify-helper-helper iterable index)\n      (if (&gt; index 0)\n         ",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(empty? lst) empty]\n        [(= i j) lst]\n        [(= i 0) (cons (list-ref lst j) (swap-help (rest lst) (sub1 i) (sub1 j)))]\n        [else (cons (first lst) (swap-help (rest lst) (sub1 i) (sub1 j)))]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (heapify-help (rest lst) (sub1 i)))]\n        [(< (list-ref lst i) (list-ref lst (sub1 i)))\n         (heapify-help (swap lst i (sub1 i)) (sub1 i))]\n        [else (cons (first lst) (heapify-help (rest lst) (sub1 i)))]))\n    (heapify-help lst i))\n  (define (build-heap lst)\n    (define (build-heap-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (heapify lst i)]\n        [else (build-heap-help (heapify lst i) (sub1 i))]))\n    (build-heap-help lst (sub1 (length lst))))\n  (define (sort-heap lst)\n    (define (sort-heap-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (sort-heap-help (rest lst) (sub1 i)))]\n        [else (cons (first lst) (sort-heap-help (heapify (swap lst 0 i) 0) (sub1 i)))]))\n    (sort-he",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i)\n        (+ i 1))\n      (define (right i)\n        (+ i 2))\n      (define (largest iterable i)\n        (define (largest-helper iterable i largest)\n          (cond\n            [(= i (length iterable)) largest]\n            [(> (list-ref iterable i) (list-ref iterable largest))\n             (largest-helper iterable (+ i 1) i)]\n            [else (largest-helper iterable (+ i 1) largest)]))\n        (largest-helper iterable 0 0))\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (cond\n            [(= i (length iterable)) '()]\n            [(= i j) (cons (list-ref iterable i) (swap-helper iterable (+ i 1) j))]\n            [(= i 0) (cons (list-ref iterable j) (swap-helper iterable (+ i 1) j))]\n            [else (cons (list-ref iterable i) (swap-helper iterable (+ i 1) j))]))\n        (swap-helper iterable 0 0))\n      (cond\n        [(= i (length iterable)) iterable]\n        [(> (list-ref iterable i) (list-ref iterable (largest iterable i)))\n         (heapify-helper (swap iterable i (largest iterable i)) (+ i 1))]\n        [else (heapify-helper iterable (+ i 1))]))\n    (heapify-helper iterable 0))\n  (define (sort iterable)\n    (define (sort-helper iterable i)\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (cond\n            [(= i (length iterable)) '()]\n            [(= i j) (cons (list-ref iterable i) (swap-helper iterable (+ i 1) j))]\n            [(= i",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond [(empty? iterable) heap]\n            [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (cond [(empty? heap) empty]\n          [else (cons (find-min heap) (heap-sort-iter (delete-min heap)))]))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(empty? lst) empty]\n        [(= i j) lst]\n        [(= i 0) (cons (list-ref lst j) (swap-helper (rest lst) (sub1 i) (sub1 j)))]\n        [else (cons (first lst) (swap-helper (rest lst) (sub1 i) (sub1 j)))]))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (heapify-helper (rest lst) (sub1 i)))]\n        [(> (list-ref lst i) (list-ref lst (sub1 i))) (heapify-helper (swap lst i (sub1 i)) (sub1 i))]\n        [else (cons (first lst) (heapify-helper (rest lst) (sub1 i)))]))\n    (heapify-helper lst i))\n  (define (heapify-all lst)\n    (cond\n      [(empty? lst) empty]\n      [else (cons (first lst) (heapify-all (heapify (rest lst) (sub1 (length (rest lst))))))]))\n  (define (sort lst)\n    (cond\n      [(empty? lst) empty]\n      [else (cons (first lst) (sort (heapify (rest lst) (sub1 (length (rest lst))))))]))\n  (sort (heapify-all iterable)))\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond ((= i j) lst)\n            ((= i 0) (cons (list-ref lst j) (swap-help (list-ref lst i) (+ i 1) j)))\n            ((= j (+ (length lst) -1)) (cons (list-ref lst i) (swap-help (list-ref lst j) i (- j 1))))\n            (else (cons (list-ref lst i) (swap-help (list-ref lst j) (+ i 1) (- j 1))))))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond ((= i 0) lst)\n            ((< (list-ref lst i) (list-ref lst (- i 1))) (heapify-help (swap lst i (- i 1)) (- i 1)))\n            (else (heapify-help lst (- i 1)))))\n    (heapify-help lst i))\n  (define (heapify-all lst)\n    (cond ((= (length lst) 1) lst)\n          ((= (length lst) 2) (heapify lst 1))\n          (else (heapify-all (heapify lst (- (length lst) 1))))))\n  (define (sort-help lst)\n    (cond ((= (length lst) 1) lst)\n          (else (cons (list-ref lst 0) (sort-help (heapify-all (swap lst 0 (- (length lst) 1))))))))\n  (sort-help (heapify-all iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-rec iterable i)\n      (if (< i (length iterable))\n          (let* ([left (+ i 1)]\n                 [right (+ i 2)]\n                 [largest (if (and (< left (length iterable))\n                                   (< (list-ref iterable left)\n                                      (list-ref iterable i)))\n                              left\n                              i)]\n                 [largest (if (and (< right (length iterable))\n                                   (< (list-ref iterable right)\n                                      (list-ref iterable largest)))\n                              right\n                              largest)])\n            (if (not (= largest i))\n                (begin\n                  (let ([temp (list-ref iterable i)])\n                    (set-nth-list! iterable i (list-ref iterable largest))\n                    (set-nth-list! iterable largest temp))\n                  (heapify-rec iterable (+ i 1)))))))\n    (heapify-rec iterable 0))\n\n  (define (heap_sort-rec iterable)\n    (if (not (empty? iterable))\n        (begin\n          (heapify iterable)\n          (let ([temp (list-ref iterable 0)])\n            (set-nth-list! iterable 0 (list-ref iterable (- (length iterable) 1)))\n            (set-nth-list! iterable (- (length iterable) 1) temp))\n          (heap_sort-rec (sublist iterable 0 (- (length iterable) 1))))))\n\n  (heap_sort-rec iterable))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(= i j) lst]\n        [else (cons (list-ref lst j) (swap-help (list-ref lst i) (+ i 1) (+ j 1)))]))\n    (swap-help lst 0 0))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (define (left i) (+ i i))\n      (define (right i) (+ i i 1))\n      (define (largest lst i l r)\n        (cond\n          [(and (>= l (length lst)) (>= r (length lst))) i]\n          [(and (>= l (length lst)) (< r (length lst))) (largest lst r l r)]\n          [(and (< l (length lst)) (>= r (length lst))) (largest lst l l r)]\n          [(> (list-ref lst l) (list-ref lst r)) (largest lst l l r)]\n          [else (largest lst r l r)]))\n      (define (largest-help lst i l r)\n        (cond\n          [(= i (largest lst i l r)) lst]\n          [else (largest-help (swap lst i (largest lst i l r)) (largest lst i l r) l r)]))\n      (largest-help lst i (left i) (right i)))\n    (heapify-help lst i))\n  (define (build-heap lst)\n    (define (build-heap-help lst i)\n      (cond\n        [(= i 0) lst]\n        [else (build-heap-help (heapify lst i) (- i 1))]))\n    (build-heap-help lst (- (length lst) 1)))\n  (define (heap-sort-help lst)\n    (cond\n      [(= (length lst) 1) lst]\n      [else (cons (list-ref lst 0) (heap-sort-help (heapify",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond [(empty? iterable) heap]\n            [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap sorted)\n    (cond [(empty? heap) sorted]\n          [else (heap-sort-iter (delete-min heap) (cons (find-min heap) sorted))]))\n  (heap-sort-iter (heapify iterable) empty))\n",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (list-ref lst j) (swap-helper (cdr lst) (- i 1) (- j 1)))]\n        [(= j 0) (cons (list-ref lst i) (swap-helper (cdr lst) (- i 1) (- j 1)))]\n        [else (cons (car lst) (swap-helper (cdr lst) (- i 1) (- j 1)))]))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-helper (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-helper (cdr lst) (- i 1)))]))\n    (define (heapify-helper2 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-helper2 (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-helper2 (cdr lst) (- i 1)))]))\n    (define (heapify-helper3 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-helper3 (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-helper3 (cdr lst) (- i 1)))]))\n    (define (heapify-helper4 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-helper4 (",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (largest iterable i)\n        (define (largest-helper iterable i largest)\n          (cond\n            [(empty? iterable) largest]\n            [(> (first iterable) (list-ref iterable largest))\n             (largest-helper (rest iterable) (+ i 1) i)]\n            [else\n             (largest-helper (rest iterable) (+ i 1) largest)]))\n        (largest-helper iterable 0 0))\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j acc)\n          (cond\n            [(empty? iterable) acc]\n            [(= i j) (cons (first iterable) acc)]\n            [(= i 0) (cons (list-ref iterable j) (swap-helper (rest iterable) i (- j 1) acc))]\n            [(= j 0) (cons (list-ref iterable i) (swap-helper (rest iterable) (- i 1) j acc))]\n            [else (cons (first iterable) (swap-helper (rest iterable) (- i 1) (- j 1) acc))]))\n        (swap-helper iterable i j '()))\n      (cond\n        [(empty? iterable) '()]\n        [(= i 0) iterable]\n        [(= i 1) (swap iterable (largest iterable 0) 0)]\n        [else (heapify-helper (swap iterable (largest iterable i) i) (- i 1))]))\n    (heapify-helper iterable (- (length iterable) 1)))\n  (define (heap_sort-helper iterable acc)\n    (cond\n      [(empty? iterable) acc]\n      [else (heap_sort-helper (heapify (rest iterable)) (cons (first iterable) acc))]))\n  (heap_sort-helper (heapify iterable) '()",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable) (insert (first iterable) heap))))\n    (heapify-iter iterable empty))\n  (define (sort-iter heap)\n    (if (empty? heap)\n        empty\n        (cons (find-min heap) (sort-iter (delete-min heap)))))\n  (sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-help lst i j)\n        (cond\n          [(empty? lst) empty]\n          [(= i j) lst]\n          [(= (first lst) i) (cons j (swap-help (rest lst) i j))]\n          [(= (first lst) j) (cons i (swap-help (rest lst) i j))]\n          [else (cons (first lst) (swap-help (rest lst) i j))]))\n      (swap-help lst i j))\n    (define (heapify-help lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i (first lst)) (cons i (heapify-help (rest lst) i))]\n        [(> i (first lst)) (cons i (heapify-help (rest lst) i))]\n        [else (cons (first lst) (heapify-help (rest lst) i))]))\n    (define (heapify-help2 lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i (first lst)) (cons i (heapify-help2 (rest lst) i))]\n        [(< i (first lst)) (cons i (heapify-help2 (rest lst) i))]\n        [else (cons (first lst) (heapify-help2 (rest lst) i))]))\n    (define (heapify-help3 lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i (first lst)) (cons i (heapify-help3 (rest lst) i))]\n        [(< i (first lst)) (cons (first lst) (heapify-help3 (rest lst) i))]\n        [else (cons i (heapify-help3 (rest lst) i))]))\n    (define (heapify-help4 lst i)\n      (cond\n        [(empty? l",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable result)\n      (if (null? iterable)\n          result\n          (heapify-iter (cdr iterable)\n                        (insert (car iterable) result))))\n    (heapify-iter iterable '()))\n  (define (insert item heap)\n    (define (insert-iter item heap result)\n      (if (null? heap)\n          (cons item result)\n          (let ([current (car heap)])\n            (if (&lt; item current)\n                (insert-iter item (cdr heap) (cons item result))\n                (insert-iter item (cdr heap) (cons current result))))))\n    (insert-iter item heap '()))\n  (define (sort heap)\n    (define (sort-iter heap result)\n      (if (null? heap)\n          result\n          (sort-iter (cdr heap) (cons (car heap) result))))\n    (sort-iter heap '()))\n  (sort (heapify iterable)))\n</code>\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable) (insert (first iterable) heap))))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (if (empty? heap)\n        empty\n        (cons (extract-min heap) (heap-sort-iter heap))))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([parent (quotient i 2)]\n                 [left (add1 (* 2 i))]\n                 [right (add1 (* 2 i 1))])\n            (if (&lt; left (length iterable))\n                (if (&lt; right (length iterable))\n                    (if (&lt; (list-ref iterable left) (list-ref iterable right))\n                        (if (&lt; (list-ref iterable left) (list-ref iterable parent))\n                            (heapify-iter (swap-elements iterable parent left) left)\n                            (heapify-iter iterable (add1 i)))\n                        (if (&lt; (list-ref iterable right) (list-ref iterable parent))\n                            (heapify-iter (swap-elements iterable parent right) right)\n                            (heapify-iter iterable (add1 i))))\n                    (if (&lt; (list-ref iterable left) (list-ref iterable parent))\n                        (heapify-iter (swap-elements iterable parent left) left)\n                        (heapify-iter iterable (add1 i)))))\n                iterable))\n          iterable))\n    (heapify-iter iterable 0))\n\n  (define (swap-elements iterable i j)\n    (define (swap-elements-iter iterable i j acc)\n      (if (null? iterable)\n          acc\n          (if (or (= i 0) (= j 0))\n              (cons (list-ref iterable (if (= i 0) j i)) (swap-elements-iter (cdr iterable) (if (= i 0) (sub1 j) i) (if (= j 0) (sub1 i) j) acc))\n              (cons (car iterable) (swap-elements-iter (cdr iterable) (sub1 i) (sub1 j) acc)))))\n    (swap-elements-iter iterable i j '()))\n\n  (define (heap_",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (set! iterable (swap-helper iterable i j)))\n      (define (swap-helper iterable i j)\n        (define (swap-helper-helper iterable i j)\n          (cond ((null? iterable) '())\n                ((= i 0) (cons (list-ref iterable j) (swap-helper-helper (cdr iterable) (- i 1) (- j 1))))\n                ((= i j) (cons (list-ref iterable i) (swap-helper-helper (cdr iterable) (- i 1) (- j 1))))\n                (else (cons (list-ref iterable i) (swap-helper-helper (cdr iterable) (- i 1) (- j 1))))))\n        (swap-helper-helper iterable i j)))\n      (define (heapify-helper-helper iterable i)\n        (cond ((null? iterable) '())\n              ((= i 0) (cons (list-ref iterable i) (heapify-helper-helper (cdr iterable) (- i 1))))\n              ((< (list-ref iterable i) (list-ref iterable (- i 1))) (heapify-helper iterable i))\n              (else (cons (list-ref iterable i) (heapify-helper-helper (cdr iterable) (- i 1))))))\n      (heapify-helper-helper iterable (- (length iterable) 1)))\n    (heapify-helper iterable (- (length iterable) 1)))\n  (define (heap_sort-helper iterable)\n    (cond ((null? iterable) '())\n          ((= (length iterable) 1) iterable)\n          (else (cons (car iterable) (heap_sort-helper (heapify (cdr iterable)))))))\n  (heap_sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (if (eq? i j)\n              iterable\n              (begin\n                (define temp (list-ref iterable i))\n                (set-car! (list-ref iterable i) (list-ref iterable j))\n                (set-car! (list-ref iterable j) temp)\n                (swap-helper iterable (add1 i) (add1 j)))))\n      (if (&lt; i (length iterable))\n          (begin\n            (define left (add1 (* 2 i)))\n            (define right (add1 (* 2 i 1)))\n            (if (&lt; left (length iterable))\n                (begin\n                  (if (&lt; right (length iterable))\n                      (begin\n                        (if (&gt; (list-ref iterable left) (list-ref iterable right))\n                            (begin\n                              (if (&gt; (list-ref iterable left) (list-ref iterable i))\n                                  (begin\n                                    (swap iterable i left)\n                                    (heapify-helper iterable left))\n                                  (heapify-helper iterable (add1 i))))\n                            (begin\n                              (if (&gt; (list-ref iterable right) (list-ref iterable i))\n                                  (begin\n                                    (swap iterable i right)\n                                    (heapify-helper iterable right))\n                                  (heapify-helper iterable (add1 i)))))\n                      (begin\n                        (if (&gt; (list-ref iterable left) (list-ref iterable i))\n                            (begin\n                              (swap iterable i left)\n                              (heapify-helper iterable left))\n                            (heapify-helper iterable (add1 i)))))\n                  (heapify-helper iterable (add1 i))))\n              (heapify-helper iterable (add1 i))))))\n    (heapify-",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond [(empty? iterable) heap]\n            [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (cond [(empty? heap) empty]\n          [else (cons (find-min heap) (heap-sort-iter (delete-min heap)))]))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap lst i j)\n        (define (swap-helper lst i j)\n          (if (= i j)\n              lst\n              (begin\n                (define (swap-helper-helper lst i j)\n                  (if (= i j)\n                      lst\n                      (begin\n                        (define (swap-helper-helper-helper lst i j)\n                          (if (= i j)\n                              lst\n                              (begin\n                                (define (swap-helper-helper-helper-helper lst i j)\n                                  (if (= i j)\n                                      lst\n                                      (begin\n                                        (define (swap-helper-helper-helper-helper-helper lst i j)\n                                          (if (= i j)\n                                              lst\n                                              (begin\n                                                (define (swap-helper-helper-helper-helper-helper-helper lst i j)\n                                                  (if (= i j)\n                                                      lst\n                                                      (begin\n                                                        (define (swap-helper-helper-helper-helper-helper-helper-helper lst i j)\n                                                          (if (= i j)\n                                                              lst\n                                                              (begin\n                                                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper lst i j)\n                                                                  (if (= i j)\n                                                                      lst\n                                                                      (begin\n                                                                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper lst i j)\n                                                                          (if (= i j)\n                                                                              lst\n                                                                              (begin\n                                                                                (define (swap-helper-helper-helper-helper-helper-",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (define (sift-down i)\n        (define left (+ i i))\n        (define right (+ left 1))\n        (define largest i)\n        (when (< left (length iterable))\n          (when (< (list-ref iterable left) (list-ref iterable largest))\n            (set! largest left))\n          (when (< (list-ref iterable right) (list-ref iterable largest))\n            (set! largest right))\n          (when (/= largest i)\n            (swap i largest)\n            (sift-down largest))))\n      (define (build-heap)\n        (for ([i (in-range (quotient (- (length iterable) 1) 2) -1 -1)])\n          (sift-down i)))\n      (define (sort-heap)\n        (for ([i (in-range (length iterable) 1 -1)])\n          (swap 0 i)\n          (sift-down 0)))\n      (build-heap)\n      (sort-heap)\n      iterable)\n    (heapify-helper (list->vector iterable)))\n  (vector->list (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (heapify-recursive iterable i)\n      (define left-child (+ i 1))\n      (define right-child (+ i 2))\n      (define largest\n        (cond\n          [(> (list-ref iterable i) (list-ref iterable left-child)) i]\n          [(> (list-ref iterable left-child) (list-ref iterable right-child)) left-child]\n          [else right-child]))\n      (when (not (= i largest))\n        (swap i largest)\n        (heapify-recursive iterable largest)))\n    (define (heapify-iterative iterable i)\n      (define (heapify-iterative-recursive iterable i)\n        (define left-child (+ i 1))\n        (define right-child (+ i 2))\n        (define largest\n          (cond\n            [(> (list-ref iterable i) (list-ref iterable left-child)) i]\n            [(> (list-ref iterable left-child) (list-ref iterable right-child)) left-child]\n            [else right-child]))\n        (when (not (= i largest))\n          (swap i largest)\n          (heapify-iterative-recursive iterable largest)))\n      (define (heapify-iterative-iterative iterable i)\n        (define (heapify-iterative-iterative-recursive iterable i)\n          (define left-child (+ i 1))\n          (define right-child (+ i 2))\n          (define largest\n            (cond\n              [(> (list-ref iterable i) (list-ref iterable left-child)) i]\n              [(> (list-ref iterable left-child) (list-ref iterable right-child)) left-child]\n              [else right-child]))\n          (when (not (= i largest))",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond ((= i j) lst)\n            ((= i 0) (cons (list-ref lst j) (swap-help (list-ref lst j) i (- j 1))))\n            (else (cons (list-ref lst i) (swap-help lst (- i 1) (- j 1))))))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond ((= i 0) lst)\n            ((< (list-ref lst i) (list-ref lst (- i 1)))\n             (heapify-help (swap lst i (- i 1)) (- i 1)))\n            (else (heapify-help lst (- i 1)))))\n    (heapify-help lst i))\n  (define (build-heap lst)\n    (define (build-heap-help lst i)\n      (cond ((= i 0) lst)\n            (else (build-heap-help (heapify lst i) (- i 1)))))\n    (build-heap-help lst (- (length lst) 1)))\n  (define (sort-heap lst)\n    (define (sort-heap-help lst i)\n      (cond ((= i 0) lst)\n            (else (sort-heap-help (heapify (swap lst 0 i) i) (- i 1)))))\n    (sort-heap-help lst (- (length lst) 1)))\n  (sort-heap (build-heap iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (let ((temp (list-ref iterable i)))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp)))\n    (define (sift-down i)\n      (let* ((left-child (+ i 1))\n             (right-child (+ i 2))\n             (largest (if (> (list-ref iterable i) (list-ref iterable left-child))\n                          i\n                          left-child)))\n        (if (and (<= right-child (length iterable))\n                 (> (list-ref iterable largest) (list-ref iterable right-child)))\n            (set! largest right-child))\n        (if (/= largest i)\n            (begin (swap i largest)\n                   (sift-down largest)))))\n    (define (build-heap)\n      (let loop ((i (- (length iterable) 1)))\n        (if (>= i 0)\n            (begin (sift-down i)\n                   (loop (- i 1))))))\n    (build-heap)\n    iterable)\n  (define (sort-heap iterable)\n    (define (heap-sort-helper iterable)\n      (define (swap i j)\n        (let ((temp (list-ref iterable i)))\n          (set-car! (list-ref iterable i) (list-ref iterable j))\n          (set-car! (list-ref iterable j) temp)))\n      (define (sift-down i)\n        (let* ((left-child (+ i 1))\n               (right-child (+ i 2))\n               (largest (if (> (list-ref iterable i) (list-ref iterable left-child))\n                            i\n                            left-child)))\n          (if (and (<= right-child (length iterable))\n                   (> (list-ref iterable largest) (list-ref iterable right-child)))\n              (set! largest right-child))\n          (if (/= largest i)\n              (begin (swap",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (null? iterable)\n          heap\n          (heapify-iter (cdr iterable)\n                        (insert (car iterable) heap))))\n    (heapify-iter iterable '()))\n\n  (define (insert item heap)\n    (define (insert-iter item heap)\n      (if (null? heap)\n          (list item)\n          (let ([parent (car heap)])\n            (if (&lt; item parent)\n                (cons item heap)\n                (cons parent (insert-iter item (cdr heap)))))))\n    (insert-iter item heap))\n\n  (define (sort heap)\n    (define (sort-iter heap sorted)\n      (if (null? heap)\n          sorted\n          (sort-iter (delete-min heap)\n                     (cons (car heap) sorted))))\n    (sort-iter heap '()))\n\n  (define (delete-min heap)\n    (define (delete-min-iter heap)\n      (if (null? (cdr heap))\n          '()\n          (cons (car (cdr heap))\n                (delete-min-iter (cdr heap)))))\n    (delete-min-iter heap))\n\n  (sort (heapify iterable)))\n</code>\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond ((null? lst) '())\n            ((= i 0) (cons (list-ref lst j) (swap-help (cdr lst) (- i 1) (- j 1))))\n            ((= j 0) (cons (list-ref lst i) (swap-help (cdr lst) (- i 1) (- j 1))))\n            (else (cons (car lst) (swap-help (cdr lst) (- i 1) (- j 1))))))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond ((null? lst) '())\n            ((= i 0) (cons (car lst) (heapify-help (cdr lst) (- i 1))))\n            ((< (car lst) (list-ref lst i)) (heapify-help (swap lst i 0) (- i 1)))\n            (else (cons (car lst) (heapify-help (cdr lst) (- i 1))))))\n    (heapify-help lst i))\n  (define (build-heap lst)\n    (define (build-heap-help lst i)\n      (cond ((null? lst) '())\n            ((= i 0) (cons (car lst) (build-heap-help (cdr lst) (- i 1))))\n            (else (build-heap-help (heapify lst i) (- i 1)))))\n    (build-heap-help lst (- (length lst) 1)))\n  (define (sort-heap lst)\n    (define (sort-heap-help lst)\n      (cond ((null? lst) '())\n            (else (cons (car lst) (sort-heap-help (heapify (swap lst 0 (- (length lst) 1)) (- (length lst) 2)))))))\n    (sort-heap-help lst))\n  (sort-heap (",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-help lst i j)\n        (if (zero? i)\n            (cons (list-ref lst j) (swap-help (list-ref lst j) (- i 1) (- j 1)))\n            (cons (list-ref lst i) (swap-help (list-ref lst i) (- i 1) (- j 1)))))\n      (swap-help lst i j))\n    (define (heapify-help lst i)\n      (if (&lt; i (length lst))\n          (if (&gt; (list-ref lst i) (list-ref lst (quotient (+ i 1) 2)))\n              (heapify-help (swap lst i (quotient (+ i 1) 2)) (+ i 1))\n              (heapify-help lst (+ i 1)))\n          lst))\n    (heapify-help iterable 0))\n  (define (sort-help lst)\n    (if (zero? (length lst))\n        '()\n        (cons (car lst) (sort-help (heapify (cdr lst))))))\n  (sort-help (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable)\n                        (insert (first iterable) heap))))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (if (empty? heap)\n        empty\n        (cons (find-min heap)\n              (heap-sort-iter (delete-min heap)))))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (if (empty? iterable)\n          heap\n          (heapify-iter (rest iterable)\n                        (insert (first iterable) heap))))\n    (heapify-iter iterable '()))\n  (define (heap-sort-iter heap sorted)\n    (if (empty? heap)\n        sorted\n        (heap-sort-iter (delete-min heap)\n                        (cons (find-min heap) sorted))))\n  (heap-sort-iter (heapify iterable) '()))\n",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(= i j) lst]\n        [else (cons (list-ref lst j)\n                    (swap-helper (list-set lst j (list-ref lst i)) (+ i 1) j))]))\n    (swap-helper lst i j))\n\n  (define (heapify lst i n)\n    (define (heapify-helper lst i n)\n      (define (max-child lst i n)\n        (cond\n          [(= (+ i 1) n) i]\n          [(> (list-ref lst i) (list-ref lst (+ i 1))) i]\n          [else (+ i 1)]))\n      (define (max-heap lst i n)\n        (define (max-heap-helper lst i n)\n          (cond\n            [(>= i n) lst]\n            [(> (list-ref lst i) (list-ref lst (max-child lst i n))) lst]\n            [else (max-heap-helper (swap lst i (max-child lst i n)) (max-child lst i n) n)]))\n        (max-heap-helper lst i n))\n      (cond\n        [(>= i n) lst]\n        [else (heapify-helper (max-heap lst i n) (+ i 1) n)]))\n    (heapify-helper lst i n))\n\n  (define (sort lst n)\n    (define (sort-helper lst n)\n      (cond\n        [(= n 0) lst]\n        [else (sort-helper (swap lst 0 n) (- n 1))]))\n    (sort-helper lst n))\n\n  (define (heap-sort-helper lst n)\n    (cond\n      [(= n 0) lst]\n      [else (heap-sort-helper (sort (heapify lst 0 n) n) (- n 1))]))\n  (",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (if (= i j)\n              iterable\n              (swap-helper (list-set iterable j (list-ref iterable i)) (+ i 1) (+ j 1))))\n        (swap-helper iterable i 0))\n      (define (left i) (+ (* 2 i) 1))\n      (define (right i) (+ (* 2 i) 2))\n      (define (max-heap iterable i)\n        (define (max-heap-helper iterable i)\n          (define (max-index iterable i)\n            (define (max-index-helper iterable i max-index)\n              (if (null? iterable)\n                  max-index\n                  (max-index-helper (cdr iterable) (+ i 1) (if (&gt; (car iterable) (list-ref iterable max-index)) i max-index))))\n            (max-index-helper iterable i 0))\n          (define (max-heap-iterable iterable i)\n            (if (null? iterable)\n                '()\n                (cons (list-ref iterable (max-index iterable i)) (max-heap-iterable (cdr iterable) (+ i 1)))))\n          (max-heap-iterable iterable i))\n        (if (&lt; i (quotient (length iterable) 2))\n            (max-heap-helper (swap iterable i (max-index iterable i)) (left i))\n            (max-heap-helper (swap iterable i (max-index iterable i)) (right i))))\n      (if (&lt; i (quotient (length iterable) 2))\n          (heapify-helper (max-heap iterable i) (left i))\n          (heapify-helper (max-heap iterable i) (right i))))\n    (heapify-helper iterable 0))\n  (define (sort iterable)",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i i))\n      (define (right i) (+ i i 1))\n      (define (largest iterable i)\n        (define (largest-helper iterable i largest)\n          (cond\n            [(> (vector-ref iterable i) (vector-ref iterable largest))\n             (largest-helper iterable (right i) i)]\n            [(> (vector-ref iterable (left i)) (vector-ref iterable largest))\n             (largest-helper iterable (right i) (left i))]\n            [else (largest-helper iterable (right i) largest)]))\n        (largest-helper iterable i i))\n      (cond\n        [(< i (vector-length iterable))\n         (heapify-helper iterable (+ i 1))]\n        [(> (vector-ref iterable i) (vector-ref iterable (left i)))\n         (heapify-helper iterable (+ i 1))]\n        [(> (vector-ref iterable i) (vector-ref iterable (right i)))\n         (heapify-helper iterable (+ i 1))]\n        [(> (vector-ref iterable (left i)) (vector-ref iterable (right i)))\n         (vector-set! iterable i (vector-ref iterable (left i)))\n         (vector-set! iterable (left i) (vector-ref iterable i))\n         (heapify-helper iterable (+ i 1))]\n        [(> (vector-ref iterable (right i)) (vector-ref iterable (left i)))\n         (vector-set! iterable i (vector-ref iterable (right i)))\n         (vector-set! iterable (right i) (vector-ref iterable i))\n         (heapify-helper iterable (+ i 1))]\n        [else (vector)]))\n    (heapify-helper (vector->list iterable) 0))\n  (define (sort iterable)\n    (define (sort-helper iterable i)\n      (define (left i) (+ i",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (parent i) (quotient i 2))\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (null? iterable)\n              '()\n              (if (= i 0)\n                  (cons (list-ref iterable j)\n                        (swap-helper (cdr iterable) i (- j 1)))\n                  (cons (car iterable)\n                        (swap-helper (cdr iterable) (- i 1) j)))))\n      (swap-helper iterable i j))\n    (define (max-heapify iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (parent i) (quotient i 2))\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (null? iterable)\n              '()\n              (if (= i 0)\n                  (cons (list-ref iterable j)\n                        (swap-helper (cdr iterable) i (- j 1)))\n                  (cons (car iterable)\n                        (swap-helper (cdr iterable) (- i 1) j)))))\n      (swap-helper iterable i j))\n      (define (max-heapify-helper iterable i)\n        (define (left i) (+ i 1))\n        (define (right i) (+ i 2))\n        (define (parent i) (quotient i 2))\n        (define (swap i j)\n          (define (swap-helper iterable i j)\n            (if (null? iterable)\n                '()\n                (if (= i 0)\n                    (cons (list-ref iterable j)\n                          (swap-helper (cdr iterable) i (- j 1)))\n                    (cons (car iterable)\n                          (swap-hel",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(= i j) lst]\n        [else (cons (list-ref lst j) (swap-help (list-ref lst i) (+ i 1) (+ j 1)))]))\n    (swap-help lst 0 0))\n  (define (heapify lst i n)\n    (define (heapify-help lst i n)\n      (cond\n        [(> i n) lst]\n        [(> (list-ref lst i) (list-ref lst (+ i 1))) (heapify-help (swap lst i (+ i 1)) (+ i 1) n)]\n        [else (heapify-help lst (+ i 1) n)]))\n    (heapify-help lst 0 n))\n  (define (heap_sort-help lst n)\n    (cond\n      [(= n 0) lst]\n      [else (heap_sort-help (heapify lst 0 n) (- n 1))]))\n  (heap_sort-help iterable (- (length iterable) 1)))\n",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-helper lst i j)\n        (cond\n          [(empty? lst) empty]\n          [(= i 0) (cons (list-ref lst j) (swap-helper (rest lst) i (- j 1)))]\n          [(= j 0) (cons (list-ref lst i) (swap-helper (rest lst) (- i 1) j))]\n          [else (cons (first lst) (swap-helper (rest lst) (- i 1) (- j 1)))]))\n      (swap-helper lst i j))\n    (define (heapify-helper lst)\n      (cond\n        [(empty? lst) empty]\n        [(empty? (rest lst)) lst]\n        [(> (first lst) (second lst)) (heapify-helper (swap lst 0 1))]\n        [else (heapify-helper (rest lst))]))\n    (heapify-helper iterable))\n  (define (heap_sort-helper lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) lst]\n      [else (cons (first lst) (heap_sort-helper (heapify (rest lst))))]))\n  (heap_sort-helper (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-helper lst i j)\n        (if (zero? i)\n            (cons (list-ref lst j)\n                  (swap-helper (list-ref lst j) (- i 1) (- j 1)))\n            (cons (list-ref lst i)\n                  (swap-helper (list-ref lst i) (- i 1) (- j 1)))))\n      (swap-helper lst i j))\n    (define (heapify-helper iterable)\n      (if (null? iterable)\n          '()\n          (let* ((lst (heapify iterable))\n                 (left (heapify-helper (cdr lst)))\n                 (right (heapify-helper (cddr lst))))\n            (if (and (not (null? left))\n                     (not (null? right))\n                     (&lt; (car left) (car right)))\n                (swap lst 0 1))\n            (cons (car lst)\n                  (append left right)))))\n    (heapify-helper iterable))\n  (define (heap_sort-helper iterable)\n    (if (null? iterable)\n        '()\n        (let* ((lst (heapify iterable))\n               (left (heap_sort-helper (cdr lst)))\n               (right (heap_sort-helper (cddr lst))))\n          (cons (car lst)\n                (append left right)))))\n  (heap_sort-helper iterable))\n",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-help lst i j)\n        (cond\n          [(= i j) lst]\n          [else\n           (define (swap-help2 lst i j)\n             (cond\n               [(= i 0) (cons (list-ref lst j) (swap-help lst (+ i 1) j))]\n               [else (cons (list-ref lst i) (swap-help2 lst (- i 1) j))]))\n           (swap-help2 lst (- (length lst) 1) j)]))\n    (define (heapify-help lst i)\n      (cond\n        [(= i 0) lst]\n        [else\n         (define (heapify-help2 lst i)\n           (cond\n             [(= i 0) (heapify-help lst (- i 1))]\n             [(> (list-ref lst i) (list-ref lst (- i 1)))\n              (heapify-help (swap lst i (- i 1)) (- i 1))]\n             [else (heapify-help lst (- i 1))]))\n         (heapify-help2 lst (- (length lst) 1))]))\n    (heapify-help iterable (- (length iterable) 1)))\n  (define (heap_sort-help lst)\n    (cond\n      [(= (length lst) 1) lst]\n      [else\n       (define (heap_sort-help2 lst)\n         (cond\n           [(= (length lst) 1) (heap_sort-help (cdr lst))]\n           [(> (list-ref lst 0) (list-ref lst 1))\n            (heap_sort-help (swap lst 0 1))]\n           [else (heap_sort-help (cdr lst))]))\n       (heap_sort-help2 (heapify lst))]))\n  (heap_sort-help iterable))\n",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond ((= i j) lst)\n            ((= i 0) (cons (list-ref lst j) (swap-help (list-ref lst j) 1 j)))\n            ((= j 0) (cons (list-ref lst i) (swap-help (list-ref lst i) i 1)))\n            (else (cons (list-ref lst i) (swap-help (list-ref lst i) (+ i 1) (+ j 1))))))\n    (swap-help lst i j))\n  (define (heapify lst i n)\n    (define (heapify-help lst i n)\n      (cond ((= i n) lst)\n            ((> (list-ref lst i) (list-ref lst (+ i 1)))\n             (heapify-help (swap lst i (+ i 1)) (+ i 1) n))\n            (else (heapify-help lst (+ i 1) n))))\n    (heapify-help lst i n))\n  (define (heap_sort-help lst n)\n    (cond ((= n 0) lst)\n          (else (heap_sort-help (heapify lst 0 n) (- n 1)))))\n  (heap_sort-help iterable (- (length iterable) 1)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (define (sift-down i)\n        (define left-child (+ i i))\n        (define right-child (+ left-child 1))\n        (define largest\n          (cond\n            [(>= left-child (length iterable)) i]\n            [(>= right-child (length iterable))\n             (if (> (list-ref iterable left-child) (list-ref iterable i))\n                 left-child\n                 i)]\n            [else\n             (if (> (list-ref iterable left-child) (list-ref iterable right-child))\n                 (if (> (list-ref iterable left-child) (list-ref iterable i))\n                     left-child\n                     i)\n                 (if (> (list-ref iterable right-child) (list-ref iterable i))\n                     right-child\n                     i))]))\n        (when (/= largest i)\n          (swap i largest)\n          (sift-down largest)))\n      (define (build-heap)\n        (for ([i (in-range (quotient (length iterable) 2) -1 -1)])\n          (sift-down i)))\n      (build-heap)\n      iterable)\n    (heapify-helper (list->vector iterable)))\n  (define (sort-helper iterable)\n    (define (swap i j)\n      (define temp (vector-ref iterable i))\n      (vector-set! iterable i (vector-ref iterable j))\n      (vector-set! iterable j temp))\n    (define (sift-down i)\n      (define left-child (+ i i))\n      (define right-child (+ left-child 1))\n      (define largest\n        (cond\n          [(>= left-child (length iterable)) i]",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down start end)\n      (define root start)\n      (define child (add1 (* 2 root)))\n      (while (< child end)\n        (when (< (list-ref iterable (add1 child)) (list-ref iterable child))\n          (set! child (add1 child)))\n        (when (< (list-ref iterable child) (list-ref iterable root))\n          (swap root child)\n          (set! root child)\n          (set! child (add1 (* 2 root))))))\n    (define (heapify-iter start end)\n      (when (< start (sub1 end))\n        (heapify-iter (add1 start) end)\n        (sift-down start end)))\n    (heapify-iter 0 (length iterable)))\n  (define (sort-iter start end)\n    (when (< start end)\n      (swap start end)\n      (sift-down start (sub1 end))\n      (sort-iter start (sub1 end))))\n  (heapify iterable)\n  (sort-iter 0 (sub1 (length iterable))))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down start end)\n      (define root start)\n      (define child (add1 (* 2 root)))\n      (define (sift-down-helper)\n        (when (< child end)\n          (when (< (list-ref iterable (add1 child)) (list-ref iterable child))\n            (set! child (add1 child)))\n          (when (< (list-ref iterable child) (list-ref iterable root))\n            (swap root child)\n            (set! root child)\n            (set! child (add1 (* 2 root)))\n            (sift-down-helper))))\n      (sift-down-helper))\n    (define (heapify-helper start end)\n      (when (> start (- end 1))\n        (sift-down start end)\n        (heapify-helper (- start 1) end)))\n    (heapify-helper (/ (length iterable) 2) (length iterable)))\n  (define (sort-helper start end)\n    (when (> start end)\n      (swap start end)\n      (sift-down start start)\n      (sort-helper start (- end 1))))\n  (heapify iterable)\n  (sort-helper 0 (- (length iterable) 1))\n  iterable)\n",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (list-ref lst j) (swap-helper (rest lst) (- i 1) (- j 1)))]\n        [(= j 0) (cons (list-ref lst i) (swap-helper (rest lst) (- i 1) (- j 1)))]\n        [else (cons (first lst) (swap-helper (rest lst) (- i 1) (- j 1)))]))\n    (swap-helper lst i j))\n\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (heapify-helper (rest lst) (- i 1)))]\n        [else (cons (first lst) (heapify-helper (rest lst) (- i 1)))]))\n    (define (heapify-helper2 lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (heapify-helper2 (rest lst) (- i 1)))]\n        [else (cons (first lst) (heapify-helper2 (rest lst) (- i 1)))]))\n    (define (heapify-helper3 lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (heapify-helper3 (rest lst) (- i 1)))]\n        [else (cons (first lst) (heapify-helper3 (rest lst) (- i 1)))]))\n    (define (heapify-helper4 lst i)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (first lst) (heapify-helper4 (rest lst) (- i 1)))]\n        [else (",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (largest iterable i)\n        (define (largest-helper iterable i largest-i)\n          (cond\n            [(> (list-ref iterable i) (list-ref iterable largest-i))\n             (largest-helper iterable (right i) i)]\n            [else\n             (largest-helper iterable (right i) largest-i)]))\n      (largest-helper iterable (left i) i))\n    (define (swap iterable i j)\n      (define (swap-helper iterable i j)\n        (cond\n          [(null? iterable)\n           '()]\n          [(= i 0)\n           (cons (list-ref iterable j) (swap-helper (cdr iterable) (- i 1) (- j 1)))]\n          [(= j 0)\n           (cons (list-ref iterable i) (swap-helper (cdr iterable) (- i 1) (- j 1)))]\n          [else\n           (cons (car iterable) (swap-helper (cdr iterable) (- i 1) (- j 1)))]))\n      (swap-helper iterable i j))\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (largest iterable i)\n        (define (largest-helper iterable i largest-i)\n          (cond\n            [(> (list-ref iterable i) (list-ref iterable largest-i))\n             (largest-helper iterable (right i) i)]\n            [else\n             (largest-helper iterable (right i) largest-i)]))\n      (largest-helper iterable (left i) i))\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(empty? lst) empty]\n        [(= i 0) (cons (list-ref lst j) (swap-help (rest lst) i (- j 1)))]\n        [(= j 0) (cons (list-ref lst i) (swap-help (rest lst) (- i 1) j))]\n        [else (cons (first lst) (swap-help (rest lst) (- i 1) (- j 1)))]))\n    (swap-help lst (- i 1) (- j 1)))\n  (define (heapify lst i)\n    (define (left-child i)\n      (+ i i))\n    (define (right-child i)\n      (+ i i 1))\n    (define (max-child lst i)\n      (cond\n        [(> (left-child i) (length lst)) i]\n        [(> (right-child i) (length lst)) (left-child i)]\n        [(< (list-ref lst (left-child i)) (list-ref lst (right-child i))) (right-child i)]\n        [else (left-child i)]))\n    (define (heapify-help lst i)\n      (cond\n        [(< i (length lst)) (heapify-help (swap lst i (max-child lst i)) (max-child lst i))]\n        [else lst]))\n    (heapify-help lst i))\n  (define (build-heap lst)\n    (define (build-heap-help lst i)\n      (cond\n        [(< i (length lst)) (build-heap-help (heapify lst i) (+ i 1))]\n        [else lst]))\n    (build-heap-help lst 0))\n  (define (heap-sort-help lst)\n    (cond\n      [(empty? lst) empty]\n      [else (cons (first lst) (heap-sort-help (heapify (rest lst",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (if (equal? i j)\n              iterable\n              (begin\n                (define (swap-helper-helper iterable i j)\n                  (if (equal? i j)\n                      iterable\n                      (begin\n                        (define (swap-helper-helper-helper iterable i j)\n                          (if (equal? i j)\n                              iterable\n                              (begin\n                                (define (swap-helper-helper-helper-helper iterable i j)\n                                  (if (equal? i j)\n                                      iterable\n                                      (begin\n                                        (define (swap-helper-helper-helper-helper-helper iterable i j)\n                                          (if (equal? i j)\n                                              iterable\n                                              (begin\n                                                (define (swap-helper-helper-helper-helper-helper-helper iterable i j)\n                                                  (if (equal? i j)\n                                                      iterable\n                                                      (begin\n                                                        (define (swap-helper-helper-helper-helper-helper-helper-helper iterable i j)\n                                                          (if (equal? i j)\n                                                              iterable\n                                                              (begin\n                                                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper iterable i j)\n                                                                  (if (equal? i j)\n                                                                      iterable\n                                                                      (begin\n                                                                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable i j)\n                                                                          (if (equal? i j)\n                                                                              iterable\n                                                                              (begin\n                                                                                (define (",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (eq? i j)\n              iterable\n              (swap-helper (append (list-ref iterable j)\n                                   (list-ref iterable i)\n                                   (sublist iterable (+ i 2) j)\n                                   (sublist iterable (+ j 2)))\n                           i\n                           (+ j 1)\n                           (+ j 2))))\n        (swap-helper iterable i j))\n      (define (left i)\n        (+ (* 2 i) 1))\n      (define (right i)\n        (+ (* 2 i) 2))\n      (define (parent i)\n        (quotient (- i 1) 2))\n      (define (max-heapify iterable i)\n        (define (max-heapify-helper iterable i)\n          (if (and (not (eq? (left i) (length iterable)))\n                   (not (eq? (right i) (length iterable))))\n              (if (&gt; (list-ref iterable (left i))\n                      (list-ref iterable i))\n                  (if (&gt; (list-ref iterable (left i))\n                          (list-ref iterable (right i)))\n                      (max-heapify-helper (swap i (left i)) (left i))\n                      (max-heapify-helper (swap i (right i)) (right i)))\n                  (if (&gt; (list-ref iterable (right i))\n                          (list-ref iterable i))\n                      (max-heapify-helper (swap i (right i)) (right i))\n                      iterable))\n              (if (and (not (eq? (left i) (length iterable)))\n                       (&gt; (list-ref iterable (left i))\n                          (list-ref iterable i)))\n                  (max-heapify-helper (swap i (left i)) (left i))\n                  iterable)))\n        (max-heap",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (largest i)\n        (define (largest-helper i largest)\n          (cond\n            [(> (list-ref iterable i) (list-ref iterable largest))\n             (largest-helper i i)]\n            [else\n             (largest-helper i largest)]))\n      (largest-helper i i))\n    (define (swap i j)\n      (define (swap-helper iterable i j)\n        (define (swap-helper-helper iterable i j)\n          (define (swap-helper-helper-helper iterable i j)\n            (define (swap-helper-helper-helper-helper iterable i j)\n              (define (swap-helper-helper-helper-helper-helper iterable i j)\n                (define (swap-helper-helper-helper-helper-helper-helper iterable i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper iterable i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper iterable i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond ((= i j) lst)\n            ((= i 0) (cons (list-ref lst j) (swap-help (list-ref lst j) 1 j)))\n            ((= j 0) (cons (list-ref lst i) (swap-help (list-ref lst i) i 1)))\n            (else (cons (list-ref lst i) (swap-help (list-ref lst j) i (- j 1))))))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond ((= i 0) lst)\n            ((> (list-ref lst i) (list-ref lst (- i 1)))\n             (heapify-help (swap lst i (- i 1)) (- i 1)))\n            (else (heapify-help lst (- i 1)))))\n    (heapify-help lst i))\n  (define (heapify-all lst)\n    (cond ((null? lst) '())\n          ((= (length lst) 1) lst)\n          (else (heapify-all (heapify lst (- (length lst) 1))))))\n  (define (sort lst)\n    (cond ((null? lst) '())\n          ((= (length lst) 1) lst)\n          (else (cons (list-ref lst 0) (sort (swap lst 0 (- (length lst) 1)))))))\n  (sort (heapify-all iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-rec iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left-child (+ i 1)]\n                 [right-child (+ i 2)]\n                 [largest (if (&lt; left-child (length iterable))\n                              (if (&lt; (list-ref iterable left-child)\n                                      (list-ref iterable i))\n                                  i\n                                  left-child)\n                              i)])\n            (set! largest (if (&lt; right-child (length iterable))\n                              (if (&lt; (list-ref iterable right-child)\n                                      (list-ref iterable largest))\n                                  largest\n                                  right-child)\n                              largest))\n            (if (not (= largest i))\n                (begin\n                  (let ([temp (list-ref iterable i)])\n                    (set-list-ref! iterable i (list-ref iterable largest))\n                    (set-list-ref! iterable largest temp))\n                  (heapify-rec iterable largest))\n                (heapify-rec iterable (+ i 1))))))\n    (heapify-rec iterable 0))\n  (define (sort-rec iterable i)\n    (if (&lt; i (length iterable))\n        (begin\n          (heapify iterable)\n          (let ([temp (list-ref iterable 0)])\n            (set-list-ref! iterable 0 (list-ref iterable (- (length iterable) 1)))\n            (set-list-ref! iterable (- (length iterable) 1) temp))\n          (sort-rec (sublist iterable 0 (- (length iterable) 1)) 0))))\n  (sort-rec iterable 0)\n  iterable)\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (heapify-iter i)\n      (define left (+ i 1))\n      (define right (+ i 2))\n      (define largest\n        (cond\n          [(> i (sub1 (length iterable))) i]\n          [(> (list-ref iterable i) (list-ref iterable left)) i]\n          [else left]))\n      (if (and (< right (length iterable))\n               (> (list-ref iterable right) (list-ref iterable largest)))\n          (set! largest right))\n      (if (not (= largest i))\n          (begin\n            (swap i largest)\n            (heapify-iter largest))))\n    (define (build-heap)\n      (for ([i (in-range (quotient (- (length iterable) 1) 2) -1 -1)])\n        (heapify-iter i)))\n    (build-heap)\n    iterable)\n  (define (sort-iter iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sort-iter-helper i)\n      (swap 0 i)\n      (define (heapify-iter i)\n        (define left (+ i 1))\n        (define right (+ i 2))\n        (define largest\n          (cond\n            [(> i (sub1 (length iterable))) i]\n            [(> (list-ref iterable i) (list-ref iterable left)) i]\n            [else left]))\n        (if (and (< right (length iterable))\n                 (> (list-ref iterable right) (list-ref iterable largest)))\n            (set! largest right))\n       ",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond [(empty? iterable) heap]\n            [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable empty))\n  (define (heap-sort-iter heap)\n    (cond [(empty? heap) empty]\n          [else (cons (find-min heap) (heap-sort-iter (delete-min heap)))]))\n  (heap-sort-iter (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (if (zero? i)\n              (list-ref iterable j)\n              (if (zero? j)\n                  (list-ref iterable i)\n                  (if (&lt; (list-ref iterable i) (list-ref iterable j))\n                      (list-ref iterable i)\n                      (list-ref iterable j)))))\n        (set! iterable (list-set iterable i (swap-helper j i)))\n        (set! iterable (list-set iterable j (swap-helper i j))))\n      (define (heapify-helper-helper iterable i)\n        (if (&lt; i (quotient (length iterable) 2))\n            (begin\n              (swap i (quotient (+ i 1) 2))\n              (heapify-helper-helper iterable (+ i 1)))\n            iterable))\n      (heapify-helper-helper iterable 0))\n    (heapify-helper iterable))\n  (define (heap_sort-helper iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (if (zero? i)\n            (list-ref iterable j)\n            (if (zero? j)\n                (list-ref iterable i)\n                (if (&lt; (list-ref iterable i) (list-ref iterable j))\n                    (list-ref iterable i)\n                    (list-ref iterable j)))))\n      (set! iterable (list-set iterable i (swap-helper j i)))\n      (set! iterable (list-set iterable j (swap-helper i j))))\n    (define (heap_sort-helper-helper iterable i)\n      (if (&lt; i (quotient (length iterable) 2))\n          (begin\n            (swap i (quotient (+ i 1) 2))\n            (he",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(= i j) lst]\n        [else\n         (define (swap-helper2 lst i j)\n           (cond\n             [(= i j) lst]\n             [else\n              (cons (list-ref lst j) (swap-helper2 (list-ref lst i) (+ i 1) (+ j 1)))]))\n         (swap-helper2 (list-ref lst i) (+ i 1) (+ j 1))]))\n  (swap-helper lst i j))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (begin\n            (heapify-helper iterable (add1 i))\n            (define (swap-if-needed iterable i)\n              (if (&lt; (list-ref iterable i) (list-ref iterable (quotient i 2)))\n                  (begin\n                    (define (swap iterable i j)\n                      (define (swap-helper iterable i j)\n                        (if (zero? i)\n                            (cons (list-ref iterable j) (swap-helper (cdr iterable) (add1 i) (add1 j)))\n                            (cons (list-ref iterable i) (swap-helper (cdr iterable) (add1 i) (add1 j)))))\n                      (swap-helper iterable 0 0))\n                    (swap-if-needed (swap iterable i (quotient i 2)) (quotient i 2)))\n                  iterable))\n            (swap-if-needed iterable i)))\n      iterable)\n    (heapify-helper iterable 1))\n  (define (heap-sort-helper iterable)\n    (if (not (empty? iterable))\n        (begin\n          (define (swap iterable i j)\n            (define (swap-helper iterable i j)\n              (if (zero? i)\n                  (cons (list-ref iterable j) (swap-helper (cdr iterable) (add1 i) (add1 j)))\n                  (cons (list-ref iterable i) (swap-helper (cdr iterable) (add1 i) (add1 j)))))\n            (swap-helper iterable 0 0))\n          (cons (list-ref iterable 0) (heap-sort-helper (swap (cdr iterable) 0 (sub1 (length iterable))))))\n        '()))\n  (heap-sort-helper (heapify iterable)))\n",
    "  (define (swap lst i j)\n    (define (swap-helper lst i j)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (list-ref lst j) (swap-helper (cdr lst) (- i 1) (- j 1)))]\n        [(= j 0) (cons (list-ref lst i) (swap-helper (cdr lst) (- i 1) (- j 1)))]\n        [else (cons (car lst) (swap-helper (cdr lst) (- i 1) (- j 1)))]))\n    (swap-helper lst i j))\n  (define (heapify lst i)\n    (define (heapify-helper lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-helper (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-helper (cdr lst) (- i 1)))]))\n    (define (heapify-helper2 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-helper2 (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-helper2 (cdr lst) (- i 1)))]))\n    (define (heapify-helper3 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-helper3 (cdr lst) (- i 1)))]\n        [else (cons (car lst) (heapify-helper3 (cdr lst) (- i 1)))]))\n    (define (heapify-helper4 lst i)\n      (cond\n        [(null? lst) '()]\n        [(= i 0) (cons (car lst) (heapify-helper4 (",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable heap)\n      (cond [(empty? iterable) heap]\n            [else (heapify-iter (rest iterable) (insert (first iterable) heap))]))\n    (heapify-iter iterable (make-heap)))\n  (define (heap-sort-iter heap sorted)\n    (cond [(empty? heap) sorted]\n          [else (heap-sort-iter (delete-min heap) (cons (min heap) sorted))]))\n  (heap-sort-iter (heapify iterable) '()))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap",
    "  (define (heapify iterable)\n    (define (swap lst i j)\n      (define (swap-help lst i j)\n        (cond\n          [(empty? lst) empty]\n          [(= i j) lst]\n          [(= i (first lst)) (cons j (swap-help (rest lst) i j))]\n          [(= j (first lst)) (cons i (swap-help (rest lst) i j))]\n          [else (cons (first lst) (swap-help (rest lst) i j))]))\n      (swap-help lst i j))\n    (define (heapify-help iterable)\n      (cond\n        [(empty? iterable) empty]\n        [(empty? (rest iterable)) iterable]\n        [(> (first iterable) (second iterable))\n         (heapify-help (swap iterable (first iterable) (second iterable)))]\n        [else (heapify-help (rest iterable))]))\n    (heapify-help iterable))\n  (define (sort-help iterable)\n    (cond\n      [(empty? iterable) empty]\n      [(empty? (rest iterable)) iterable]\n      [else (cons (first iterable) (sort-help (heapify (rest iterable))))]))\n  (sort-help (heapify iterable)))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (if (&lt; i (length iterable))\n          (let* ([left (+ i 1)]\n                 [right (+ i 2)]\n                 [largest (if (&lt; left (length iterable))\n                              (if (&lt; right (length iterable))\n                                  (if (&gt; (list-ref iterable left)\n                                          (list-ref iterable right))\n                                      left\n                                      right)\n                                  left)\n                              i)])\n            (if (&gt; (list-ref iterable largest)\n                    (list-ref iterable i))\n                (begin\n                  (set! iterable (swap iterable i largest))\n                  (heapify-helper iterable largest))\n                (heapify-helper iterable (+ i 1))))\n          iterable))\n    (heapify-helper iterable 0))\n  (define (swap iterable i j)\n    (let* ([temp (list-ref iterable i)]\n           [iterable (list-set iterable i (list-ref iterable j))]\n           [iterable (list-set iterable j temp)])\n      iterable))\n  (define (sort iterable)\n    (if (&gt; (length iterable) 1)\n        (begin\n          (set! iterable (swap iterable 0 (- (length iterable) 1)))\n          (set! iterable (sort (sublist iterable 0 (- (length iterable) 1))))\n          (set! iterable (heapify iterable))\n          iterable)\n        iterable))\n  (sort (heapify iterable)))\n</code>\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (eq? i j)\n              iterable\n              (begin\n                (define temp (list-ref iterable i))\n                (set-car! (list-ref iterable i) (list-ref iterable j))\n                (set-car! (list-ref iterable j) temp)\n                iterable)))\n        (swap-helper iterable i j))\n      (define (max-heapify iterable i)\n        (define (left-child i)\n          (+ i 1))\n        (define (right-child i)\n          (+ i 2))\n        (define (parent i)\n          (- i 1))\n        (define (left-child-exists? iterable i)\n          (if (< (left-child i) (length iterable))\n              #t\n              #f))\n        (define (right-child-exists? iterable i)\n          (if (< (right-child i) (length iterable))\n              #t\n              #f))\n        (define (parent-exists? iterable i)\n          (if (> (parent i) 0)\n              #t\n              #f))\n        (define (max-child iterable i)\n          (if (right-child-exists? iterable i)\n              (if (> (list-ref iterable (left-child i)) (list-ref iterable (right-child i)))\n                  (left-child i)\n                  (right-child i))\n              (left-child i)))\n        (define (max-heapify-helper iterable i)\n          (if (left-child-exists? iterable i)\n              (if (> (list-ref iterable i) (list-ref iterable (max-child iterable i)))\n                  iterable\n                  (begin\n                    (swap i (max-child iterable i))\n                    (max-heapify-helper iterable (max-child iterable i))))\n              iterable))\n        (max-heap",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap lst i j)\n        (define (swap-helper lst i j)\n          (if (zero? i)\n              (cons (list-ref lst j)\n                    (swap-helper (list-tail lst) i (sub1 j)))\n              (cons (list-ref lst i)\n                    (swap-helper (list-tail lst) (sub1 i) j))))\n        (swap-helper lst i j))\n      (define (heapify-helper-helper iterable)\n        (if (null? iterable)\n            '()\n            (let* ((lst (heapify-helper-helper (list-tail iterable)))\n                   (lst-len (length lst))\n                   (lst-last (list-ref lst (sub1 lst-len))))\n              (if (&gt; (car iterable) lst-last)\n                  (cons (car iterable) lst)\n                  (swap (cons (car iterable) lst) lst-len (sub1 lst-len))))))\n      (heapify-helper-helper iterable))\n    (define (heapify-helper-helper iterable)\n      (if (null? iterable)\n          '()\n          (let* ((lst (heapify-helper-helper (list-tail iterable)))\n                 (lst-len (length lst))\n                 (lst-last (list-ref lst (sub1 lst-len))))\n            (if (&gt; (car iterable) lst-last)\n                (cons (car iterable) lst)\n                (swap (cons (car iterable) lst) lst-len (sub1 lst-len))))))\n    (heapify-helper-helper iterable))\n  (define (heap_sort-helper iterable)\n    (if (null? iterable)\n        '()\n        (let* ((lst (heap_sort-helper (list-tail",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (set! iterable (list-set iterable i (list-ref iterable j)))\n            (set! iterable (list-set iterable j (list-ref iterable i))))\n          (swap-helper-helper i j))\n        (swap-helper i j))\n      (define (max-heapify iterable i)\n        (define (max-heapify-helper iterable i)\n          (define (max-heapify-helper-helper iterable i)\n            (define (max-heapify-helper-helper-helper iterable i)\n              (if (&lt; i (length iterable))\n                  (begin\n                    (if (&lt; (left i) (length iterable))\n                        (if (&lt; (list-ref iterable (left i)) (list-ref iterable i))\n                            (begin\n                              (swap i (left i))\n                              (max-heapify iterable (left i))))\n                        (if (&lt; (right i) (length iterable))\n                            (if (&lt; (list-ref iterable (right i)) (list-ref iterable i))\n                                (begin\n                                  (swap i (right i))\n                                  (max-heapify iterable (right i)))))))\n                    (max-heapify-helper-helper-helper iterable (+ i 1))))\n              iterable))\n          (max-heapify-helper-helper-helper iterable i))\n        (max-heapify-helper iterable i))\n      (max-heapify iterable i))\n    (heapify-helper iterable 0))\n  (define (sort iterable)\n    (define (sort-helper iterable)\n      (define (sort-",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ (* 2 i) 1))\n      (define (right i) (+ (* 2 i) 2))\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-helper i j)\n        (define (swap-helper-helper i j)\n          (define (swap-helper-helper-helper i j)\n            (define (swap-helper-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper",
    "  (let* ([heap (make-heap)]\n         [sorted (list)])\n    (for ([i iterable])\n      (heap-add! heap i))\n    (while (not (heap-empty? heap))\n      (set! sorted (cons (heap-pop! heap) sorted)))\n    sorted))\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (swap i1 i2)\n        (define (swap-helper i1 i2)\n          (define (swap-helper-helper i1 i2)\n            (define (swap-helper-helper-helper i1 i2)\n              (define (swap-helper-helper-helper-helper i1 i2)\n                (define (swap-helper-helper-helper-helper-helper i1 i2)\n                  (define (swap-helper-helper-helper-helper-helper-helper i1 i2)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i1 i2)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i1 i2)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i1 i2)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i1 i2)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i1 i2)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i1 i2)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i1 i2)\n                                  (define (swap-helper-helper-helper",
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (cond\n        [(= i j) lst]\n        [else (swap-help (list-set lst i (list-ref lst j))\n                         (+ i 1)\n                         j)]))\n    (swap-help lst i j))\n  (define (heapify lst i)\n    (define (heapify-help lst i)\n      (cond\n        [(< i 0) lst]\n        [(< (list-ref lst i) (list-ref lst (- i 1)))\n         (heapify-help (swap lst i (- i 1)) (- i 1))]\n        [else (heapify-help lst (- i 1))]))\n    (heapify-help lst i))\n  (define (heapify-all lst)\n    (cond\n      [(empty? lst) empty]\n      [else (cons (car lst)\n                  (heapify-all (heapify (cdr lst) (- (length (cdr lst)) 1))))]))\n  (define (heap-sort-help lst)\n    (cond\n      [(empty? lst) empty]\n      [else (cons (car lst)\n                  (heap-sort-help (heapify-all (cdr lst))))]))\n  (heap-sort-help iterable))\n"
  ]
}