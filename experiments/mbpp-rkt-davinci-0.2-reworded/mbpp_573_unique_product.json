{
  "name": "mbpp_573_unique_product",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n",
    "  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (if (null? list_data)\n      1\n      (* (car list_data)\n         (unique_product (remove (car list_data) list_data)))))\n",
    "  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n",
    "  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n",
    "  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n",
    "  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n",
    "  (apply * (remove-duplicates list_data)))\n",
    "  (apply * (remove-duplicates list_data)))\n"
  ]
}