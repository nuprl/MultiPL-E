{
  "name": "mbpp_598_armstrong_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (= number (sum_of_digits_cubes number)))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= (sum-of-cubes-of-digits number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      true\n      false))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      number\n      0))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ sum (* (expt (remainder number 10) 3)\n                                                 (expt 10 (quotient (log number 10) 1))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (let loop ([number number] [sum 0] [digits 0])\n    (cond [(zero? number) (= sum number)]\n          [else (loop (quotient number 10)\n                      (+ sum (expt (remainder number 10) digits))\n                      (+ digits 1))])))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (= number (sum-of-cubes-of-digits number)))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= (sum-of-cubes-of-digits number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (cond ((zero? number) 0)\n          (else (+ (expt (remainder number 10) power)\n                   (sum-of-digits-raised-to-power (quotient number 10) power)))))\n  (define (number-of-digits number)\n    (cond ((zero? number) 0)\n          (else (+ 1 (number-of-digits (quotient number 10))))))\n  (define (is-armstrong-number? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (is-armstrong-number? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (cond ((= number 0) 0)\n          (else (+ (expt (modulo number 10) 3)\n                   (sum-of-digits-cubes (quotient number 10))))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) power)\n               (sum-of-digits-raised-to-power (quotient number 10) power))]))\n  (define (number-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (armstrong? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (log number 10) 1)))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) power)\n           (sum-of-digits-raised-to-power (quotient number 10) power))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (&lt; number 10)\n        (expt number 3)\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      number\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) power)\n           (sum-of-digits-raised-to-power (quotient number 10) power))))\n  (define (number-of-digits number)\n    (if (= number 0)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (= number (sum-of-digits-cubed number)))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) power)\n           (sum-of-digits-raised-to-power (quotient number 10) power))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-raised-to-power-of-number-of-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) (number-of-digits number))\n           (sum-of-digits-raised-to-power-of-number-of-digits (quotient number 10)))))\n  (if (= number (sum-of-digits-raised-to-power-of-number-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (power n p)\n    (if (= p 0)\n        1\n        (* n (power n (- p 1)))))\n  (define (sum-of-digits n)\n    (if (= n 0)\n        0\n        (+ (modulo n 10) (sum-of-digits (quotient n 10)))))\n  (define (num-digits n)\n    (if (= n 0)\n        0\n        (+ 1 (num-digits (quotient n 10)))))\n  (define (armstrong? n)\n    (= n (sum-of-digits (power n (num-digits n)))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong-helper number sum)\n    (if (zero? number)\n        sum\n        (armstrong-helper (quotient number 10)\n                          (+ sum (expt (remainder number 10) 3)))))\n  (if (= number (armstrong-helper number 0))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      true\n      false))\n",
    "  (define (sum_of_digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ (remainder number 10) (sum_of_digits (quotient number 10)))]))\n  (define (number_of_digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (number_of_digits (quotient number 10)))]))\n  (define (power_of_digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) (number_of_digits number)) (power_of_digits (quotient number 10)))]))\n  (if (= (sum_of_digits number) (power_of_digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (= number (sum-of-digits-cubes number)))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((zero? number) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ sum (* (expt (remainder number 10) 3)\n                                                 (expt 10 (quotient (log number 10) 1))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (log number 10) 1)))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) power)\n           (sum-of-digits-raised-to-power (quotient number 10) power))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (define (power)\n      (number-of-digits number))\n    (define (sum)\n      (sum-of-digits-raised-to-power number (power)))\n    (= number sum)))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (zero? number)\n        (equal? number sum)\n        (armstrong_number_helper (quotient number 10)\n                                 (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (cond ((= number 0) 0)\n          (else (+ (expt (remainder number 10) 3)\n                   (sum-of-digits-cubes (quotient number 10))))))\n  (define (number-of-digits number)\n    (cond ((= number 0) 0)\n          (else (+ 1 (number-of-digits (quotient number 10))))))\n  (= (expt number (number-of-digits number))\n     (sum-of-digits-cubes number)))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n",
    "  (define (armstrong_number-helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number-helper (quotient number 10)\n                                 (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number-helper number 0))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (if (= number (power-of-digits number))\n      (display \"armstrong number\")\n      (display \"not an armstrong number\")))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= (sum_of_digits_cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-to-the-power-of-n number n)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) n)\n           (sum-of-digits-to-the-power-of-n (quotient number 10) n))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (sum-of-digits-to-the-power-of-n number (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      true\n      false))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_helper (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum_of_digits_cubes number)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) 3)\n               (sum_of_digits_cubes (quotient number 10)))]))\n  (equal? number (sum_of_digits_cubes number)))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))]))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-to-power-of-number-of-digits number)\n    (define (sum-of-digits number)\n      (if (= number 0)\n          0\n          (+ (remainder number 10)\n             (sum-of-digits (quotient number 10)))))\n    (define (number-of-digits number)\n      (if (= number 0)\n          0\n          (+ 1 (number-of-digits (quotient number 10)))))\n    (define (power-of-number-of-digits number)\n      (if (= number 0)\n          1\n          (* number (power-of-number-of-digits (- number 1)))))\n    (* (sum-of-digits number) (power-of-number-of-digits (number-of-digits number))))\n  (= number (sum-of-digits-to-power-of-number-of-digits number)))\n",
    "  (define (digits number)\n    (if (= number 0)\n        '()\n        (cons (remainder number 10)\n              (digits (quotient number 10)))))\n  (define (power number power)\n    (if (= power 0)\n        1\n        (* number (power number (- power 1)))))\n  (define (sum-of-powers number)\n    (if (null? number)\n        0\n        (+ (power (car number) (length number))\n           (sum-of-powers (cdr number)))))\n  (= number (sum-of-powers (digits number))))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits number)\n    (cond [(zero? number) 0]\n          [else (+ (remainder number 10)\n                   (sum-of-digits (quotient number 10)))]))\n  (define (power-of-digits number)\n    (cond [(zero? number) 1]\n          [else (* (remainder number 10)\n                   (power-of-digits (quotient number 10)))]))\n  (define (number-of-digits number)\n    (cond [(zero? number) 0]\n          [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (armstrong? number)\n    (= number (power-of-digits (sum-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (= number (sum-of-cubes-of-digits number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (is-armstrong number)\n    (define (is-equal? number1 number2)\n      (if (zero? number1)\n          (if (zero? number2)\n              #t\n              #f)\n          (if (zero? number2)\n              #f\n              (is-equal? (quotient number1 10) (quotient number2 10)))))\n    (is-equal? number (expt (sum-of-cubes-of-digits number) (number-of-digits number))))\n  (is-armstrong number))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (number-of-digits number) 1))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum_of_cubes_of_digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_cubes_of_digits (quotient number 10)))))\n  (if (= number (sum_of_cubes_of_digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (- (length (number->string number)) 1))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) power)\n           (sum-of-digits-raised-to-power (quotient number 10) power))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong-helper number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong-helper (quotient number 10)\n                          (+ sum (expt (remainder number 10) 3)))))\n  (armstrong-helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (&lt; number 10)\n        (expt number 3)\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (equal? sum number)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else\n       (+ (expt (remainder number 10) 3)\n          (sum-of-cubes-of-digits (quotient number 10)))]))\n  (equal? number (sum-of-cubes-of-digits number)))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ sum (* (expt (remainder number 10) 3)\n                                                 (expt 10 (quotient number 10))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power x y)\n    (if (zero? y)\n        1\n        (* x (power x (- y 1)))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (sum-of-digits (power number (number-of-digits number)))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (* (expt (remainder number 10) 3)\n                                         (expt 10 (quotient (log number 10) 1))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))]))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-raised-to-power n)\n    (define (sum-of-digits-raised-to-power-iter n sum)\n      (if (zero? n)\n          sum\n          (sum-of-digits-raised-to-power-iter (quotient n 10)\n                                              (+ sum (expt (remainder n 10) 3)))))\n    (sum-of-digits-raised-to-power-iter n 0))\n  (if (= (sum-of-digits-raised-to-power number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (log number 10) 1)))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (define (sum-of-digits-cubes-iter number sum)\n      (cond ((= number 0) sum)\n            (else (sum-of-digits-cubes-iter (quotient number 10) (+ sum (expt (remainder number 10) 3))))))\n    (sum-of-digits-cubes-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (cond ((= number 0) count)\n            (else (number-of-digits-iter (quotient number 10) (+ count 1)))))\n    (number-of-digits-iter number 0))\n  (define (is-armstrong number)\n    (define (is-armstrong-iter number sum count)\n      (cond ((= number 0) (if (= sum count) #t #f))\n            (else (is-armstrong-iter (quotient number 10) (+ sum (expt (remainder number 10) 3)) count))))\n    (is-armstrong-iter number 0 (number-of-digits number)))\n  (is-armstrong number))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (cond ((= number 0) 0)\n          (else (+ (expt (remainder number 10) power)\n                   (sum-of-digits-raised-to-power (quotient number 10) power)))))\n  (define (num-of-digits number)\n    (cond ((= number 0) 0)\n          (else (+ 1 (num-of-digits (quotient number 10))))))\n  (= number (sum-of-digits-raised-to-power number (num-of-digits number))))\n",
    "  (let ([digits (string->list (number->string number))])\n    (= number (apply + (map (lambda (digit) (expt (string->number (string digit)) (length digits))) digits)))))\n",
    "  (define (power number power)\n    (if (= power 0)\n        1\n        (* number (power number (- power 1)))))\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (modulo number 10) (sum-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (= number 0)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (is-armstrong number)\n    (= number (sum-of-digits (power number (number-of-digits number)))))\n  (is-armstrong number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (zero? number)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_helper number 0))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (zero? number)\n        (if (= number sum)\n            #t\n            #f)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (- (string-length (number->string number)) 1) 1)))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (let ((digits (string->list (number->string number))))\n    (equal? number\n            (apply + (map (lambda (digit) (expt (string->number (char->string digit)) (length digits))) digits)))))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ sum (* (expt (remainder number 10) 3)\n                                                 (expt 10 (quotient number 10))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (if (= (sum-of-digits number)\n         (power-of-digits number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (* (expt (remainder number 10) 3) 0)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power number power)\n    (if (zero? power)\n        1\n        (* number (power number (- power 1)))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (if (= number (power (sum-of-digits number) (number-of-digits number)))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits-to-the-power-of-number-of-digits-iter number sum-of-digits)\n      (cond ((zero? number) sum-of-digits)\n            (else (sum-of-digits-to-the-power-of-number-of-digits-iter (quotient number 10)\n                                                                       (+ sum-of-digits\n                                                                          (expt (remainder number 10)\n                                                                                (number-of-digits number)))))))\n    (sum-of-digits-to-the-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (cond ((zero? number) count)\n            (else (number-of-digits-iter (quotient number 10) (+ count 1)))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-the-power-of-number-of-digits number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (let* ([digits (number->string number)]\n         [length (string-length digits)]\n         [sum (for/sum ([digit (in-string digits)])\n                 (expt (string->number (string digit)) length))])\n    (equal? number sum)))\n",
    "  (define (power x y)\n    (if (= y 0)\n        1\n        (* x (power x (- y 1)))))\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10) (sum-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (= number 0)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (sum-of-digits (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong-helper number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong-helper (quotient number 10)\n                          (+ (* (remainder number 10)\n                                (remainder number 10)\n                                (remainder number 10))\n                             sum))))\n  (armstrong-helper number 0))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (length (number->string number)) 1))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (modulo number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (modulo number 10)\n           (power-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (if (= (sum-of-digits number)\n           (power-of-digits number))\n        #t\n        #f))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-to-the-power-of-n number n)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) n)\n           (sum-of-digits-to-the-power-of-n (quotient number 10) n))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (= number (sum-of-digits-to-the-power-of-n number (number-of-digits number))))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits_to_power_of_number_of_digits number)\n    (define (sum_of_digits number)\n      (if (&lt; number 10)\n          number\n          (+ (remainder number 10)\n             (sum_of_digits (quotient number 10)))))\n    (define (number_of_digits number)\n      (if (&lt; number 10)\n          1\n          (+ 1 (number_of_digits (quotient number 10)))))\n    (expt (sum_of_digits number)\n          (number_of_digits number)))\n  (= number (sum_of_digits_to_power_of_number_of_digits number)))\n</code>\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits-raised-to-the-power-of-number-of-digits-iter number sum)\n      (cond ((= number 0) sum)\n            (else (sum-of-digits-raised-to-the-power-of-number-of-digits-iter (quotient number 10)\n                                                                              (+ sum (expt (remainder number 10)\n                                                                                           (number-of-digits number)))))))\n    (sum-of-digits-raised-to-the-power-of-number-of-digits-iter number 0))\n  (= number (sum-of-digits-raised-to-the-power-of-number-of-digits number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-to-the-power-of-n number n)\n    (define (sum-of-digits-to-the-power-of-n-helper number n sum)\n      (cond ((zero? number) sum)\n            (else (sum-of-digits-to-the-power-of-n-helper (quotient number 10) n (+ sum (expt (remainder number 10) n))))))\n    (sum-of-digits-to-the-power-of-n-helper number n 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-helper number count)\n      (cond ((zero? number) count)\n            (else (number-of-digits-helper (quotient number 10) (+ count 1)))))\n    (number-of-digits-helper number 0))\n  (define (armstrong_number_helper number)\n    (cond ((= number (sum-of-digits-to-the-power-of-n number (number-of-digits number))) #t)\n          (else #f)))\n  (armstrong_number_helper number))\n",
    "  (let ([digits (string->list (number->string number))])\n    (equal? number (apply + (map (lambda (digit) (expt (string->number (string digit)) (length digits))) digits)))))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number-helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient number 10)))))))\n  (armstrong_number-helper number 0))\n",
    "  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (modulo number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power number power)\n    (if (= power 0)\n        1\n        (* number (power number (- power 1)))))\n  (define (number-of-digits number)\n    (if (= number 0)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (sum-of-digits number (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (= number (sum-of-digits-cubes number)))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt (modulo n 10) 3)\n           (sum-of-digits-cubes (quotient n 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10) (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (= number 0)\n        1\n        (* (remainder number 10) (power-of-digits (quotient number 10)))))\n  (if (= number (sum-of-digits (power-of-digits number)))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      number\n      0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ (remainder number 10) (sum-of-digits (quotient number 10)))]))\n  (define (power number power)\n    (cond\n      [(zero? power) 1]\n      [else (* number (power number (- power 1)))]))\n  (define (length number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (length (quotient number 10)))]))\n  (define (armstrong? number)\n    (= number (sum-of-digits (number (length number)))))\n  (armstrong? number))\n</code>\nI'm getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   1\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou have a few problems here. First, you're using <code>number</code> as a function name, but that's a primitive function in Racket. Second, you're using <code>number</code> as a function name in the <code>armstrong?</code> function, but you're not passing it any arguments. Third, you're using <code>number</code> as a function name in the <code>sum-of-digits</code> function, but you're not passing it any arguments. Fourth, you're using <code>number</code> as a function name in the <code>power</code> function, but you're not passing it any arguments. Fifth, you're using <code>number</code> as a function name in the <code>length</code> function, but you're not passing it any arguments. Sixth, you're using <code>number</code> as a function name in the <code>armstrong_number</code> function, but you're not passing it any arguments.\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (let ([digits (string->list (number->string number))])\n    (let loop ([number number] [digits digits])\n      (cond\n        [(null? digits) (= number)]\n        [else (loop (+ (* (car digits) (car digits) (car digits)) number) (cdr digits))]))))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ (* (remainder number 10)\n                                             (remainder number 10)\n                                             (remainder number 10))\n                                          sum)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number-helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number-helper (quotient number 10)\n                                 (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number-helper number 0))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power n)\n    (define (sum-of-digits-raised-to-power-iter n acc)\n      (if (zero? n)\n          acc\n          (sum-of-digits-raised-to-power-iter (quotient n 10) (+ acc (expt (remainder n 10) 3)))))\n    (sum-of-digits-raised-to-power-iter n 0))\n  (if (= number (sum-of-digits-raised-to-power number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (define (digits number)\n    (if (zero? number)\n        0\n        (+ 1 (digits (quotient number 10)))))\n  (define (armstrong? number)\n    (if (= (sum-of-digits number)\n           (power-of-digits number))\n        #t\n        #f))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= number sum)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      true\n      false))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (power base exponent)\n    (if (= exponent 0)\n        1\n        (* base (power base (- exponent 1)))))\n  (define (sum-of-digits-to-power number power)\n    (if (= number 0)\n        0\n        (+ (power (remainder number 10) power)\n           (sum-of-digits-to-power (quotient number 10) power))))\n  (= number (sum-of-digits-to-power number (number-of-digits number))))\n",
    "  (define (sum_of_digits_raised_to_power_of_number_of_digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) (number-of-digits number))\n               (sum_of_digits_raised_to_power_of_number_of_digits (quotient number 10)))]))\n  (define (number-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (is-armstrong? number)\n    (= number (sum_of_digits_raised_to_power_of_number_of_digits number)))\n  (is-armstrong? number))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-to-power-of-length n)\n    (define (sum-of-digits n)\n      (cond ((= n 0) 0)\n            (else (+ (remainder n 10)\n                     (sum-of-digits (quotient n 10))))))\n    (define (length-of-number n)\n      (cond ((= n 0) 0)\n            (else (+ 1 (length-of-number (quotient n 10))))))\n    (expt (sum-of-digits n) (length-of-number n)))\n  (= number (sum-of-digits-to-power-of-length number)))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ (remainder number 10) (sum-of-digits (quotient number 10)))]))\n  (define (power x n)\n    (cond\n      [(zero? n) 1]\n      [else (* x (power x (- n 1)))]))\n  (define (num-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (num-digits (quotient number 10)))]))\n  (define (armstrong? number)\n    (let ([digits (num-digits number)])\n      (= number (sum-of-digits (map (lambda (x) (power x digits)) (number->list number))))))\n  (armstrong? number))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) (number-of-digits number))\n           (sum-of-digits-to-the-power-of-number-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-number-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number-helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (log number 10) 1))))))\n  (armstrong_number-helper number 0))\n",
    "  (define (sum_of_cubes_of_digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_cubes_of_digits (quotient number 10)))))\n  (if (= number (sum_of_cubes_of_digits number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_helper (quotient number 10)\n                                 (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_helper number 0))\n"
  ]
}