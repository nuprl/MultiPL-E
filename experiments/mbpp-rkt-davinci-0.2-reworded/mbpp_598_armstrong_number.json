{
  "name": "mbpp_598_armstrong_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (= number (sum_of_digits_cubes number)))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= (sum-of-cubes-of-digits number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      true\n      false))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      number\n      0))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ sum (* (expt (remainder number 10) 3)\n                                                 (expt 10 (quotient (log number 10) 1))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (let loop ([number number] [sum 0] [digits 0])\n    (cond [(zero? number) (= sum number)]\n          [else (loop (quotient number 10)\n                      (+ sum (expt (remainder number 10) digits))\n                      (+ digits 1))])))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (= number (sum-of-cubes-of-digits number)))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= (sum-of-cubes-of-digits number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (cond ((zero? number) 0)\n          (else (+ (expt (remainder number 10) power)\n                   (sum-of-digits-raised-to-power (quotient number 10) power)))))\n  (define (number-of-digits number)\n    (cond ((zero? number) 0)\n          (else (+ 1 (number-of-digits (quotient number 10))))))\n  (define (is-armstrong-number? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (is-armstrong-number? number))\n"
  ]
}