{
  "name": "mbpp_738_geometric_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/rktthon-exercises/data-structures-and-algorithms/rktthon-recursion-exercise-9.php\n(define (geometric_sum n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate geometric_sum))\n    (check-equal? (candidate 7) 1.9921875)\n    (check-equal? (candidate 4) 1.9375)\n    (check-equal? (candidate 8) 1.99609375)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond [(= n 1) 1]\n        [else (+ 1 (/ 1 (geometric_sum (- n 1))))]))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (define (geometric_sum_iter n acc)\n    (if (= n 0)\n        acc\n        (geometric_sum_iter (- n 1) (+ acc (/ 1 (* 2 n))))))\n  (geometric_sum_iter n 0))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (define (geometric_sum_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [else (geometric_sum_iter (- n 1) (+ acc (/ 1 (expt 2 n))))]))\n  (geometric_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (define (geometric_sum_iter n i)\n    (if (= i 0)\n        0\n        (+ (/ 1 (expt 2 i))\n           (geometric_sum_iter n (- i 1)))))\n  (geometric_sum_iter n (- n 1)))\n",
    "  (define (geometric_sum_iter n i)\n    (if (= i 0)\n        0\n        (+ (/ 1 (expt 2 i))\n           (geometric_sum_iter n (- i 1)))))\n  (geometric_sum_iter n (- n 1)))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (define (geometric_sum_iter n i)\n    (if (= i 0)\n        0\n        (+ (/ 1 (expt 2 i)) (geometric_sum_iter n (- i 1)))))\n  (geometric_sum_iter n n))\n",
    "  (define (geometric_sum_iter n i)\n    (if (= i n)\n        1\n        (+ (/ 1 (expt 2 i)) (geometric_sum_iter n (+ i 1)))))\n  (geometric_sum_iter n 0))\n",
    "  (define (geometric_sum_iter n acc)\n    (if (= n 0)\n        acc\n        (geometric_sum_iter (- n 1) (+ acc (/ 1 (expt 2 n))))))\n  (geometric_sum_iter n 0))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (define (geometric_sum_iter n acc)\n    (if (= n 0)\n        acc\n        (geometric_sum_iter (- n 1) (+ acc (/ 1 (expt 2 n))))))\n  (geometric_sum_iter n 0))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n",
    "  (if (= n 0)\n      1\n      (+ 1 (/ 1 (expt 2 n)) (geometric_sum (- n 1)))))\n"
  ]
}