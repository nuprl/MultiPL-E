{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the two numbers differ at one bit position only or not.\n(define (differ_At_One_Bit_Pos a b)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate differ_At_One_Bit_Pos))\n    (check-equal? (candidate 13 9) #t)\n    (check-equal? (candidate 15 8) #f)\n    (check-equal? (candidate 2 4) #f)\n    (check-equal? (candidate 2 3) #t)\n    (check-equal? (candidate 5 1) #t)\n    (check-equal? (candidate 1 5) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1))))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond [(zero? xor) #f]\n          [(zero? (bitwise-and xor (bitwise-sub1 xor))) #t]\n          [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (define (differ_At_One_Bit_Pos_helper a b count)\n    (if (or (zero? a) (zero? b))\n        (if (= count 1)\n            #t\n            #f)\n        (if (not (= (remainder a 2) (remainder b 2)))\n            (differ_At_One_Bit_Pos_helper (quotient a 2) (quotient b 2) (+ count 1))\n            (differ_At_One_Bit_Pos_helper (quotient a 2) (quotient b 2) count))))\n  (differ_At_One_Bit_Pos_helper a b 0))\n",
    "  (if (not (= a b))\n      (if (= (bitwise-xor a b) 1)\n          #t\n          #f)\n      #f))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond [(zero? xor) #f]\n          [(zero? (bitwise-and xor (sub1 xor))) #t]\n          [else #f])))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (zero? xor) #f\n        (let loop ((xor xor))\n          (if (zero? (bitwise-and xor 1)) (loop (bitwise-shift-right xor 1))\n              (if (zero? (bitwise-shift-right xor 1)) #t #f))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (= xor 0)\n        #f\n        (let ([bit-count (bit-count xor)])\n          (if (= bit-count 1)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b count)\n    (cond ((= a 0) (if (= b 0) count (differ_At_One_Bit_Pos_Helper (/ a 2) (/ b 2) (+ count 1))))\n          ((= b 0) (differ_At_One_Bit_Pos_Helper (/ a 2) (/ b 2) (+ count 1)))\n          ((= (remainder a 2) (remainder b 2)) (differ_At_One_Bit_Pos_Helper (/ a 2) (/ b 2) count))\n          (else (differ_At_One_Bit_Pos_Helper (/ a 2) (/ b 2) (+ count 1)))))\n  (if (= (differ_At_One_Bit_Pos_Helper a b 0) 1) #t #f))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond [(zero? xor) #f]\n          [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n          [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let ([xor-1 (bitwise-xor xor (sub1 xor))])\n          (if (zero? xor-1)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (bitwise-and xor (bitwise-xor xor (sub1 xor)))\n             (zero? (bitwise-and xor (sub1 xor)))))))\n</code>\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= (bitwise-and xor (bitwise-xor xor 1)) 0))))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-and a b) 0) #t]\n    [else #f]))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond [(zero? xor) #f]\n          [(= 1 (bitwise-and xor (- xor 1))) #t]\n          [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (= xor 0)\n        #f\n        (let ((count 0))\n          (do ((i 0 (+ i 1)))\n              ((= i 32) (= count 1))\n            (if (bitwise-bit-set? xor i)\n                (set! count (+ count 1))\n                #f))))))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (= xor 0)\n        #f\n        (let loop ((xor xor))\n          (if (= (bitwise-and xor 1) 1)\n              (if (= (bitwise-and (bitwise-xor xor 1) xor) 0)\n                  #t\n                  #f)\n              (loop (bitwise-shift-right xor 1)))))))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor) #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (= xor 0)\n        #f\n        (if (= (bitwise-and xor (- xor 1)) 0)\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (define (helper a b)\n    (cond ((zero? a) b)\n          ((zero? b) a)\n          (else (helper (quotient a 2) (quotient b 2)))))\n  (define (check_for_one_bit_difference a b)\n    (cond ((zero? a) #f)\n          ((zero? b) #f)\n          ((and (zero? (remainder a 2)) (zero? (remainder b 2))) (check_for_one_bit_difference (quotient a 2) (quotient b 2)))\n          ((and (zero? (remainder a 2)) (not (zero? (remainder b 2)))) (check_for_one_bit_difference (quotient a 2) (quotient b 2)))\n          ((and (not (zero? (remainder a 2))) (zero? (remainder b 2))) (check_for_one_bit_difference (quotient a 2) (quotient b 2)))\n          ((and (not (zero? (remainder a 2))) (not (zero? (remainder b 2)))) (check_for_one_bit_difference (quotient a 2) (quotient b 2)))\n          (else #t)))\n  (check_for_one_bit_difference (helper a b) 0))\n",
    "  (cond\n    [(= a b) #f]\n    [else\n     (let* ([a-bin (number->string a 2)]\n            [b-bin (number->string b 2)]\n            [a-bin-len (string-length a-bin)]\n            [b-bin-len (string-length b-bin)]\n            [len (max a-bin-len b-bin-len)])\n       (let loop ([i 0] [diff-count 0])\n         (cond\n           [(= i len) (= diff-count 1)]\n           [else\n            (let ([a-bit (if (< i a-bin-len) (string-ref a-bin i) #\\0)]\n                  [b-bit (if (< i b-bin-len) (string-ref b-bin i) #\\0)])\n              (if (char=? a-bit b-bit)\n                  (loop (+ i 1) diff-count)\n                  (loop (+ i 1) (+ diff-count 1))))])))]))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (arithmetic-shift xor -1))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (bitwise-bit-set? xor 0)\n             (zero? (bitwise-bit-count xor))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1))))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (= xor 0)\n        #f\n        (let ([xor-1 (bitwise-xor xor (- xor 1))])\n          (if (= xor-1 0)\n              #t\n              #f)))))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-and a b) 0) #t]\n    [else #f]))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (= xor 0) #f\n      (let loop ((xor xor))\n        (if (= (bitwise-and xor 1) 0) (loop (bitwise-shift-right xor 1))\n          #t)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (= (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) 1)))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (- xor 1))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1))))) #t]\n      [else #f])))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-and a b) 0) #t]\n    [else #f]))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(= 1 (bitwise-and xor (bitwise-not (bitwise-subtract xor 1)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (- xor 1)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor) #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))))\n        #t\n        #f)))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let ([and (bitwise-and xor (sub1 xor))])\n          (if (zero? and)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1)\n        (= xor 2)\n        (= xor 4)\n        (= xor 8)\n        (= xor 16)\n        (= xor 32)\n        (= xor 64)\n        (= xor 128)\n        (= xor 256)\n        (= xor 512)\n        (= xor 1024)\n        (= xor 2048)\n        (= xor 4096)\n        (= xor 8192)\n        (= xor 16384)\n        (= xor 32768)\n        (= xor 65536)\n        (= xor 131072)\n        (= xor 262144)\n        (= xor 524288)\n        (= xor 1048576)\n        (= xor 2097152)\n        (= xor 4194304)\n        (= xor 8388608)\n        (= xor 16777216)\n        (= xor 33554432)\n        (= xor 67108864)\n        (= xor 134217728)\n        (= xor 268435456)\n        (= xor 536870912)\n        (= xor 1073741824)\n        (= xor 2147483648)\n        (= xor 4294967296)\n        (= xor 8589934592)\n        (= xor 17179869184)\n        (= xor 34359738368)\n        (= xor 68719476736)\n        (= xor 137438953472)\n        (= xor 274877906944)\n        (= xor 549755813888)\n        (= xor 1099511627776)\n        (= xor 2199023255552)\n        (= xor 4398046511104)\n        (= xor 8796093022208)\n        (= xor 17592186044416)\n        (= xor 35184372088832)\n        (= xor 70368744177664)\n        (= xor 140737488355328)\n        (= xor 281474976710656)\n        (= xor 562949953421312)\n        (= xor 1125899906842624)\n       ",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let ([count (bitwise-count xor)])\n          (if (= count 1)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n      [else #f])))\n",
    "  (if (and (not (zero? a)) (not (zero? b)))\n      (if (= (remainder a 2) (remainder b 2))\n          (differ_At_One_Bit_Pos (quotient a 2) (quotient b 2))\n          (if (and (zero? (quotient a 2)) (zero? (quotient b 2)))\n              #t\n              #f))\n      #f))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? (bitwise-and xor (sub1 xor)))\n        (zero? xor))))\n",
    "  (define (differ_At_One_Bit_Pos_helper a b count)\n    (cond\n      [(= a b) #f]\n      [(= (remainder a 2) (remainder b 2)) (differ_At_One_Bit_Pos_helper (/ a 2) (/ b 2) (+ count 1))]\n      [(= count 1) #t]\n      [else #f]))\n  (differ_At_One_Bit_Pos_helper a b 0))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let ([xor-1 (bitwise-xor xor (bitwise-arithmetic-shift xor -1))])\n          (if (zero? xor-1)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let ([xor-lsb (bitwise-and xor (bitwise-not (bitwise-arithmetic-shift xor -1)))]\n              [xor-msb (bitwise-and xor (bitwise-not (bitwise-arithmetic-shift xor 1)))]\n              [xor-msb-lsb (bitwise-and xor-msb xor-lsb)])\n          (if (zero? xor-msb-lsb)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (bitwise-bit-set? xor 0)\n             (zero? (bitwise-bit-count xor))))))\n",
    "  (cond ((= a b) #f)\n        ((= (bitwise-xor a b) 1) #t)\n        ((= (bitwise-xor a b) 2) #t)\n        ((= (bitwise-xor a b) 4) #t)\n        ((= (bitwise-xor a b) 8) #t)\n        ((= (bitwise-xor a b) 16) #t)\n        ((= (bitwise-xor a b) 32) #t)\n        ((= (bitwise-xor a b) 64) #t)\n        ((= (bitwise-xor a b) 128) #t)\n        (else #f)))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (not (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (and (not (zero? xor))\n         (zero? (bitwise-and (bitwise-xor xor (bitwise-arithmetic-shift xor -1)) -2)))))\n",
    "  (if (not (= (bitwise-and a b) 0))\n      #f\n      (let loop ((a a) (b b) (count 0))\n        (if (zero? a)\n            (= count 1)\n            (if (zero? (bitwise-and a 1))\n                (loop (bitwise-shift-right a 1) (bitwise-shift-right b 1) count)\n                (loop (bitwise-shift-right a 1) (bitwise-shift-right b 1) (+ count 1)))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-xor xor (bitwise-arithmetic-shift xor -1))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (not (zero? (bitwise-and xor (bitwise-shift-left 1 (bitwise-bit-count xor)))))\n             (zero? (bitwise-and xor (bitwise-shift-left 1 (bitwise-bit-count (bitwise-and xor (bitwise-shift-left 1 (bitwise-bit-count xor)))))))))))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b count)\n    (cond ((= a 0) (if (= b 0) count (differ_At_One_Bit_Pos_Helper 0 (bitwise-and b (- b 1)) (+ count 1))))\n          ((= b 0) (if (= a 0) count (differ_At_One_Bit_Pos_Helper (bitwise-and a (- a 1)) 0 (+ count 1))))\n          ((= (bitwise-and a 1) (bitwise-and b 1)) (differ_At_One_Bit_Pos_Helper (bitwise-and a (- a 1)) (bitwise-and b (- b 1)) count))\n          (else (differ_At_One_Bit_Pos_Helper (bitwise-and a (- a 1)) (bitwise-and b (- b 1)) (+ count 1)))))\n  (differ_At_One_Bit_Pos_Helper a b 0))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? (bitwise-and xor (- xor 1)))\n        #t\n        #f)))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let ([count (bitwise-count xor)])\n          (if (= count 1)\n              #t\n              #f)))))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (sub1 xor)))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (define (helper a b)\n    (if (zero? a)\n        b\n        (if (zero? b)\n            a\n            (if (and (even? a) (even? b))\n                (helper (quotient a 2) (quotient b 2))\n                (if (and (odd? a) (odd? b))\n                    (helper (quotient a 2) (quotient b 2))\n                    1)))))\n  (if (= (helper a b) 1)\n      #t\n      #f))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b count)\n    (cond ((= a 0) (if (= b 0) count 1))\n          ((= b 0) 1)\n          ((= (remainder a 2) (remainder b 2)) (differ_At_One_Bit_Pos_Helper (/ a 2) (/ b 2) count))\n          ((= (remainder a 2) (remainder b 2)) (differ_At_One_Bit_Pos_Helper (/ a 2) (/ b 2) (+ count 1)))\n          (else (+ count 1))))\n  (if (= (differ_At_One_Bit_Pos_Helper a b 0) 1) #t #f))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1))))) #t]\n      [else #f])))\n",
    "  (if (= a b)\n      #f\n      (if (= (bitwise-xor a b) 1)\n          #t\n          #f)))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b count)\n    (cond ((= a b) count)\n          ((= (remainder a 2) (remainder b 2)) (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) count))\n          ((= count 1) #t)\n          (else (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) (+ count 1)))))\n  (differ_At_One_Bit_Pos_Helper a b 0))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-and a b) 0) #t]\n    [else #f]))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (bitwise-and xor (bitwise-xor xor (sub1 xor)))\n             (zero? (bitwise-and xor (sub1 xor)))))))\n",
    "  (define (differ_At_One_Bit_Pos_helper a b count)\n    (cond ((= a 0) (= b 0))\n          ((= a 1) (= b 1))\n          ((= (remainder a 2) (remainder b 2)) (differ_At_One_Bit_Pos_helper (quotient a 2) (quotient b 2) (+ count 1)))\n          ((= count 1) #t)\n          (else #f)))\n  (differ_At_One_Bit_Pos_helper a b 0))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (- xor 1))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b count)\n    (cond ((= a 0) (if (= b 0) count 1))\n          ((= b 0) 1)\n          ((= (remainder a 2) (remainder b 2)) (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) count))\n          (else (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) (+ count 1)))))\n  (if (= (differ_At_One_Bit_Pos_Helper a b 0) 1) #t #f))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (= xor 0)\n        #f\n        (let ([differ_At_One_Bit_Pos_helper (lambda (xor)\n                                              (if (= xor 0)\n                                                  #t\n                                                  (if (zero? (bitwise-and xor 1))\n                                                      (differ_At_One_Bit_Pos_helper (bitwise-shift-right xor 1))\n                                                      #f)))])\n          (differ_At_One_Bit_Pos_helper xor)))))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-xor a b) 1) #t]\n    [else (differ_At_One_Bit_Pos (bitwise-xor a b) 1)]))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (zero? (bitwise-and xor (- xor 1)))\n        #t\n        #f)))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (= xor 0)\n        #f\n        (let ([xor-1 (bitwise-xor xor (- xor 1))])\n          (if (= xor-1 0)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (bitwise-and xor (bitwise-xor xor (sub1 xor)))\n             (zero? (bitwise-and xor (sub1 xor)))))))\n",
    "  (if (not (= a b))\n      (if (or (= (bitwise-and a b) a) (= (bitwise-and a b) b))\n          #t\n          #f)\n      #f))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (sub1 xor))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-xor xor (arithmetic-shift xor -1)))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (bitwise-and xor (sub1 xor))\n             (zero? (bitwise-and xor (sub1 (sub1 xor))))))))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (= xor 0)\n        #f\n        (if (= (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1))) 0)\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (not (zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))))))\n        (and (not (zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor 1))))))))))\n",
    "  (if (= a b)\n      #f\n      (if (= (bitwise-and a b) 0)\n          #t\n          #f)))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b count)\n    (cond ((= a 0) (if (= b 0) count 1))\n          ((= b 0) (if (= a 0) count 1))\n          ((= (remainder a 2) (remainder b 2)) (differ_At_One_Bit_Pos_Helper (/ a 2) (/ b 2) count))\n          (else (differ_At_One_Bit_Pos_Helper (/ a 2) (/ b 2) (+ count 1)))))\n  (= (differ_At_One_Bit_Pos_Helper a b 0) 1))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1))))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))\n            #t\n            #f))))\n",
    "  (define (helper a b)\n    (cond ((and (zero? a) (zero? b)) #t)\n          ((and (zero? a) (not (zero? b))) (helper (quotient a 2) (quotient b 2)))\n          ((and (not (zero? a)) (zero? b)) (helper (quotient a 2) (quotient b 2)))\n          ((and (not (zero? a)) (not (zero? b))) (or (and (zero? (remainder a 2)) (zero? (remainder b 2)))\n                                                     (and (not (zero? (remainder a 2))) (not (zero? (remainder b 2))))\n                                                     (helper (quotient a 2) (quotient b 2))))))\n  (helper a b))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (sub1 xor))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (and (not (zero? xor))\n         (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond [(zero? xor) #f]\n          [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n          [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor) (and (bitwise-and xor (bitwise-xor xor (sub1 xor))) (zero? (bitwise-and xor (sub1 xor)))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (not (zero? (bitwise-and xor (bitwise-xor xor (- xor 1)))))\n             (zero? (bitwise-and xor (- xor 1)))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-xor xor (arithmetic-shift xor -1)))\n            #t\n            #f))))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-and a b) 0) #t]\n    [else #f]))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-xor xor (arithmetic-shift xor -1))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (- xor 1))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(= (bitwise-and xor (sub1 xor)) 0) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let ([xor-1 (bitwise-xor xor (sub1 xor))])\n          (if (zero? xor-1)\n              #t\n              #f)))))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b)\n    (cond ((= a 0) (if (= b 0) #t #f))\n          ((= b 0) #f)\n          (else (differ_At_One_Bit_Pos_Helper (bitwise-and a (sub1 a)) (bitwise-and b (sub1 b))))))\n  (differ_At_One_Bit_Pos_Helper a b))\n",
    "  (if (not (= (bitwise-and a b) 0))\n      #f\n      (if (= a b)\n          #f\n          #t)))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(= 1 (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1))))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let ([count (bitwise-count xor)])\n          (if (= count 1)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (= xor 0)\n        #f\n        (let ([xor-1 (bitwise-xor xor 1)])\n          (if (= xor-1 0)\n              #t\n              #f)))))\n",
    "  (if (not (= a b))\n      (if (and (not (bitwise-and a b))\n               (not (bitwise-and (bitwise-xor a b) (bitwise-not (bitwise-xor a b)))))\n          #t\n          #f)\n      #f))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (bitwise-bit-set? xor 0)\n             (zero? (bitwise-bit-count xor))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let ([count (bitwise-count xor)])\n          (if (= count 1)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor) #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (- xor 1)))) #t\n            #f))))\n",
    "  (cond\n    [(= a b) #f]\n    [else\n     (let ([diff (- a b)])\n       (cond\n         [(= diff 1) #t]\n         [(= diff -1) #t]\n         [else #f]))]))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n      [else #f])))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b)\n    (cond ((= a b) #f)\n          ((= (bitwise-and a b) 0) #t)\n          (else (differ_At_One_Bit_Pos_Helper (bitwise-and a (- a 1)) (bitwise-and b (- b 1))))))\n  (differ_At_One_Bit_Pos_Helper a b))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-and a b) 0) #t]\n    [else #f]))\n",
    "  (cond\n    [(= a b) #f]\n    [else\n     (cond\n       [(= (bitwise-and a b) 0) #t]\n       [else #f])]))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-and a b) 0) #t]\n    [else #f]))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let loop ([xor xor])\n          (if (zero? (bitwise-and xor 1))\n              (loop (bitwise-shift-right xor 1))\n              #t)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b count)\n    (cond ((and (zero? a) (zero? b)) count)\n          ((and (zero? a) (not (zero? b))) (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) (+ count 1)))\n          ((and (not (zero? a)) (zero? b)) (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) (+ count 1)))\n          ((and (not (zero? a)) (not (zero? b))) (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) (+ count 1)))\n          (else count)))\n  (if (= (differ_At_One_Bit_Pos_Helper a b 0) 1)\n      #t\n      #f))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (zero? xor)\n        #f\n        (let ((count (bitwise-count xor)))\n          (if (= count 1)\n              #t\n              #f)))))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-and a b) 0) #t]\n    [else #f]))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-xor a b) 1) #t]\n    [else #f]))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b count)\n    (cond ((and (zero? a) (zero? b)) count)\n          ((and (zero? a) (not (zero? b))) (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) (+ count 1)))\n          ((and (not (zero? a)) (zero? b)) (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) (+ count 1)))\n          ((and (not (zero? a)) (not (zero? b))) (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) (+ count 1)))\n          (else count)))\n  (if (= (differ_At_One_Bit_Pos_Helper a b 0) 1)\n      #t\n      #f))\n",
    "  (let ([a (integer->bit-string a)])\n    (let ([b (integer->bit-string b)])\n      (let ([a (string-length a)])\n        (let ([b (string-length b)])\n          (let ([a (if (= a b) a (+ a 1))])\n            (let ([b (if (= a b) b (+ b 1))])\n              (let ([a (bit-string-&gt;integer (string-pad a 'left #\\0 b))])\n                (let ([b (bit-string-&gt;integer (string-pad b 'left #\\0 a))])\n                  (let ([a (bit-string-&gt;integer (string-pad (integer->bit-string (bitwise-xor a b)) 'left #\\0 a))])\n                    (if (= a 1)\n                        #t\n                        #f))))))))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-sub1 xor))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))) #t]\n      [else #f])))\n",
    "  (cond\n    [(= a b) #f]\n    [(= (bitwise-and a b) 0) #t]\n    [else #f]))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (define (differ_At_One_Bit_Pos_Helper a b count)\n    (cond ((= a b) #f)\n          ((= a 0) (if (= (remainder b 2) 1) (= count 1) #f))\n          ((= b 0) (if (= (remainder a 2) 1) (= count 1) #f))\n          (else (differ_At_One_Bit_Pos_Helper (quotient a 2) (quotient b 2) (+ count 1)))))\n  (differ_At_One_Bit_Pos_Helper a b 0))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (sub1 xor)))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(= 1 (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor)\n        (and (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1))))\n             (zero? (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 0) (= (bitwise-and xor (bitwise-xor xor (bitwise-not xor))) 0))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128) (= xor 256) (= xor 512) (= xor 1024) (= xor 2048) (= xor 4096) (= xor 8192) (= xor 16384) (= xor 32768) (= xor 65536) (= xor 131072) (= xor 262144) (= xor 524288) (= xor 1048576) (= xor 2097152) (= xor 4194304) (= xor 8388608) (= xor 16777216) (= xor 33554432) (= xor 67108864) (= xor 134217728) (= xor 268435456) (= xor 536870912) (= xor 1073741824) (= xor 2147483648) (= xor 4294967296) (= xor 8589934592) (= xor 17179869184) (= xor 34359738368) (= xor 68719476736) (= xor 137438953472) (= xor 274877906944) (= xor 549755813888) (= xor 1099511627776) (= xor 2199023255552) (= xor 4398046511104) (= xor 8796093022208) (= xor 17592186044416) (= xor 35184372088832) (= xor 70368744177664) (= xor 140737488355328) (= xor 281474976710656) (= xor 562949953421312) (= xor 1125899906842624) (= xor 2251799813685248) (= xor 4503599627370496) (= xor 9007199254740992) (= xor 18014398509481984) (= xor 36028797018963968) (= xor 72057594037927936) (= xor 144115188075855872) (= xor 288230376151711744) (= xor 576460752303423488) (= xor",
    "  (if (not (= (bitwise-and a b) 0))\n      #f\n      (let loop ((a a) (b b))\n        (if (zero? a)\n            #t\n            (if (not (= (bitwise-and a 1) (bitwise-and b 1)))\n                (if (= (bitwise-and a 1) 1)\n                    (loop (bitwise-shift-right a 1) (bitwise-shift-right b 1))\n                    (loop (bitwise-shift-right a 1) (bitwise-shift-right b 1)))\n                #f)))))\n",
    "  (if (= a b)\n      #f\n      (if (= (bitwise-and a b) 0)\n          #t\n          #f)))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (- xor 1))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (= xor 0)\n        #f\n        (let ([xor-1 (bitwise-xor xor (- xor 1))])\n          (if (= xor-1 0)\n              #t\n              #f)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n"
  ]
}