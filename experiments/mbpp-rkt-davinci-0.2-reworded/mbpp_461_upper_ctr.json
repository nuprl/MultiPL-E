{
  "name": "mbpp_461_upper_ctr",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to count the upper case characters in a given string.\n(define (upper_ctr str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate upper_ctr))\n    (check-equal? (candidate \"PYthon\") 1)\n    (check-equal? (candidate \"BigData\") 1)\n    (check-equal? (candidate \"program\") 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ 1 ctr))\n            (loop (substring str 1) ctr)))))\n",
    "  (let ((ctr 0))\n    (for ([c (in-string str)])\n      (if (char-upper-case? c)\n          (set! ctr (+ ctr 1))))\n    ctr))\n",
    "  (define (upper_ctr-iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr-iter (rest str) (+ ctr 1))]\n      [else (upper_ctr-iter (rest str) ctr)]))\n  (upper_ctr-iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (let ([ch (string-ref str i)])\n          (if (char-upper-case? ch)\n              (loop (+ i 1) (+ ctr 1))\n              (loop (+ i 1) ctr))))))\n",
    "  (define (upper_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr_iter (rest str) (+ ctr 1))]\n      [else (upper_ctr_iter (rest str) ctr)]))\n  (upper_ctr_iter str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-upper-case? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (let ([ch (string-ref str i)])\n          (if (char-upper-case? ch)\n              (loop (+ i 1) (+ ctr 1))\n              (loop (+ i 1) ctr))))))\n",
    "  (let ([ctr 0])\n    (for ([c (in-string str)])\n      (when (char-upper-case? c)\n        (set! ctr (+ ctr 1))))\n    ctr))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (let ([char (string-ref str i)])\n          (if (char-upper-case? char)\n              (loop (+ i 1) (+ ctr 1))\n              (loop (+ i 1) ctr))))))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (if (char-upper-case? (first str))\n         (+ 1 (upper_ctr (rest str)))\n         (upper_ctr (rest str)))]))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (loop (rest str)\n              (if (char-upper-case? (first str))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n"
  ]
}