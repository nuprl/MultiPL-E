{
  "name": "mbpp_461_upper_ctr",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to count the upper case characters in a given string.\n(define (upper_ctr str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate upper_ctr))\n    (check-equal? (candidate \"PYthon\") 1)\n    (check-equal? (candidate \"BigData\") 1)\n    (check-equal? (candidate \"program\") 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ 1 ctr))\n            (loop (substring str 1) ctr)))))\n",
    "  (let ((ctr 0))\n    (for ([c (in-string str)])\n      (if (char-upper-case? c)\n          (set! ctr (+ ctr 1))))\n    ctr))\n",
    "  (define (upper_ctr-iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr-iter (rest str) (+ ctr 1))]\n      [else (upper_ctr-iter (rest str) ctr)]))\n  (upper_ctr-iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (let ([ch (string-ref str i)])\n          (if (char-upper-case? ch)\n              (loop (+ i 1) (+ ctr 1))\n              (loop (+ i 1) ctr))))))\n",
    "  (define (upper_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr_iter (rest str) (+ ctr 1))]\n      [else (upper_ctr_iter (rest str) ctr)]))\n  (upper_ctr_iter str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-upper-case? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (let ([ch (string-ref str i)])\n          (if (char-upper-case? ch)\n              (loop (+ i 1) (+ ctr 1))\n              (loop (+ i 1) ctr))))))\n",
    "  (let ([ctr 0])\n    (for ([c (in-string str)])\n      (when (char-upper-case? c)\n        (set! ctr (+ ctr 1))))\n    ctr))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (let ([char (string-ref str i)])\n          (if (char-upper-case? char)\n              (loop (+ i 1) (+ ctr 1))\n              (loop (+ i 1) ctr))))))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (if (char-upper-case? (first str))\n         (+ 1 (upper_ctr (rest str)))\n         (upper_ctr (rest str)))]))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (loop (rest str)\n              (if (char-upper-case? (first str))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper_ctr-iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr-iter (rest str) (+ ctr 1))]\n      [else (upper_ctr-iter (rest str) ctr)]))\n  (upper_ctr-iter str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-upper-case? (first str)) (+ 1 (upper_ctr (rest str)))]\n    [else (upper_ctr (rest str))]))\n",
    "  (let loop ((str str) (ctr 0))\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)])))\n",
    "  (define (upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (upper-ctr-iter str ctr)\n    (cond ((null? str) ctr)\n          ((upper? (car str)) (upper-ctr-iter (cdr str) (+ ctr 1)))\n          (else (upper-ctr-iter (cdr str) ctr))))\n  (upper-ctr-iter str 0))\n",
    "  (define (upper? c) (char-upper-case? c))\n  (define (loop i ctr)\n    (if (= i (string-length str))\n        ctr\n        (if (upper? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))))\n  (loop 0 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (string-drop str 1) (+ ctr 1))\n            (loop (string-drop str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper_ctr-iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr-iter (rest str) (+ ctr 1))]\n      [else (upper_ctr-iter (rest str) ctr)]))\n  (upper_ctr-iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length str))\n        count\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ count 1))\n            (loop (+ i 1) count)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1)\n              (if (char-upper-case? (string-ref str 0))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (let ((c (string-ref str i)))\n          (if (char-upper-case? c)\n              (loop (+ i 1) (+ ctr 1))\n              (loop (+ i 1) ctr))))))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (cond\n      [(= i (string-length str)) ctr]\n      [(char-upper-case? (string-ref str i)) (loop (+ i 1) (+ ctr 1))]\n      [else (loop (+ i 1) ctr)])))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)])))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (let ([ch (string-ref str i)])\n          (if (char-upper-case? ch)\n              (loop (+ i 1) (+ ctr 1))\n              (loop (+ i 1) ctr))))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper? ch)\n    (and (char? ch) (char-upper-case? ch)))\n  (define (loop str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)]))\n  (loop str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([ctr 0] [str str])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (+ ctr 1) (substring str 1))\n            (loop ctr (substring str 1))))))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (loop (cdr str) (+ ctr 1))\n            (loop (cdr str) ctr)))))\n",
    "  (define (upper_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr_iter (rest str) (+ ctr 1))]\n      [else (upper_ctr_iter (rest str) ctr)]))\n  (upper_ctr_iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-upper-case? (first str)) (+ 1 (upper_ctr (rest str)))]\n    [else (upper_ctr (rest str))]))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (upper? c)\n    (and (char? c) (char-upper-case? c)))\n  (define (upper-ctr-iter str ctr)\n    (if (empty? str)\n        ctr\n        (if (upper? (first str))\n            (upper-ctr-iter (rest str) (+ ctr 1))\n            (upper-ctr-iter (rest str) ctr))))\n  (upper-ctr-iter str 0))\n",
    "  (define (upper? c)\n    (and (char? c)\n         (char-upper-case? c)))\n  (define (loop str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)]))\n  (loop str 0))\n",
    "  (let loop ((str str) (ctr 0))\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (loop (cdr str) (+ ctr 1))\n            (loop (cdr str) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper? ch)\n    (and (char? ch)\n         (char-upper-case? ch)))\n  (define (upper-ctr-iter str ctr)\n    (if (empty? str)\n        ctr\n        (upper-ctr-iter (rest str)\n                        (if (upper? (first str))\n                            (+ ctr 1)\n                            ctr))))\n  (upper-ctr-iter str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (upper? c)\n    (char-upper-case? c))\n  (define (loop str ctr)\n    (if (empty? str)\n        ctr\n        (if (upper? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr))))\n  (loop str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (letrec ([helper (lambda (str ctr)\n                     (if (empty? str)\n                         ctr\n                         (if (char-upper-case? (first str))\n                             (helper (rest str) (+ ctr 1))\n                             (helper (rest str) ctr))))])\n    (helper str 0)))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1)\n              (if (char-upper-case? (string-ref str 0))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (counter str ctr)\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (counter (cdr str) (+ ctr 1))\n            (counter (cdr str) ctr))))\n  (counter str 0))\n",
    "  (let loop ((str str) (ctr 0))\n    (cond ((null? str) ctr)\n          ((char-upper-case? (car str)) (loop (cdr str) (+ ctr 1)))\n          (else (loop (cdr str) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (upper_ctr_iter ctr str)\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (upper_ctr_iter (+ ctr 1) (substring str 1))\n            (upper_ctr_iter ctr (substring str 1)))))\n  (upper_ctr_iter 0 str))\n",
    "  (let ([ctr 0])\n    (for ([i (in-range (string-length str))])\n      (if (char-upper-case? (string-ref str i))\n          (set! ctr (+ ctr 1))))\n    ctr))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper? c)\n    (and (char? c)\n         (char-upper-case? c)))\n  (define (loop str ctr)\n    (cond ((null? str) ctr)\n          ((upper? (car str)) (loop (cdr str) (+ ctr 1)))\n          (else (loop (cdr str) ctr))))\n  (loop str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (string-drop str 1) (+ ctr 1))\n            (loop (string-drop str 1) ctr)))))\n",
    "  (define (upper_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr_iter (rest str) (+ ctr 1))]\n      [else (upper_ctr_iter (rest str) ctr)]))\n  (upper_ctr_iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([ctr 0] [str str])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (+ ctr 1) (substring str 1))\n            (loop ctr (substring str 1))))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (count-upper str)\n    (if (empty? str)\n        0\n        (if (char-upper-case? (first str))\n            (+ 1 (count-upper (rest str)))\n            (count-upper (rest str)))))\n  (count-upper str))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (define (upper? c)\n    (char-upper-case? c))\n  (define (count-upper str)\n    (if (null? str)\n        0\n        (+ (if (upper? (car str)) 1 0)\n           (count-upper (cdr str)))))\n  (count-upper str))\n",
    "  (define (upper? c)\n    (char-upper-case? c))\n  (define (count-upper str)\n    (if (string-empty? str)\n        0\n        (+ (if (upper? (string-ref str 0))\n               1\n               0)\n           (count-upper (string-drop str 1)))))\n  (count-upper str))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (upper_ctr_helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr_helper (rest str) (+ ctr 1))]\n      [else (upper_ctr_helper (rest str) ctr)]))\n  (upper_ctr_helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((ctr 0) (str str))\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (+ ctr 1) (substring str 1))\n            (loop ctr (substring str 1))))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([ctr 0] [str str])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (+ ctr 1) (substring str 1))\n            (loop ctr (substring str 1))))))\n",
    "  (let loop ((str str) (ctr 0))\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (loop (+ i 1)\n              (if (char-upper-case? (string-ref str i))\n                  (+ ctr 1)\n                  ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (let ([ch (string-ref str i)])\n          (if (char-upper-case? ch)\n              (loop (+ i 1) (+ ctr 1))\n              (loop (+ i 1) ctr))))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1)\n              (if (char-upper-case? (string-ref str 0))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (letrec ([counter (lambda (str n)\n                      (cond [(empty? str) n]\n                            [(char-upper-case? (first str)) (counter (rest str) (+ n 1))]\n                            [else (counter (rest str) n)]))])\n    (counter str 0)))\n",
    "  (define (upper? c)\n    (and (char? c)\n         (char-upper-case? c)))\n  (define (loop str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)]))\n  (loop str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (cond [(= i (string-length str)) ctr]\n          [(char-upper-case? (string-ref str i)) (loop (+ i 1) (+ ctr 1))]\n          [else (loop (+ i 1) ctr)])))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper-char? ch)\n    (and (char? ch)\n         (char-upper-case? ch)))\n  (define (loop str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper-char? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)]))\n  (loop str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper_ctr_iter str ctr)\n    (cond ((null? str) ctr)\n          ((char-upper-case? (car str)) (upper_ctr_iter (cdr str) (+ ctr 1)))\n          (else (upper_ctr_iter (cdr str) ctr))))\n  (upper_ctr_iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (cond\n      [(= i (string-length str)) ctr]\n      [(char-upper-case? (string-ref str i)) (loop (+ i 1) (+ ctr 1))]\n      [else (loop (+ i 1) ctr)])))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (loop (+ i 1)\n              (if (char-upper-case? (string-ref str i))\n                  (+ ctr 1)\n                  ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((str str) (ctr 0))\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (upper? c)\n    (and (char? c) (char-upper-case? c)))\n  (define (loop str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)]))\n  (loop str 0))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (define (upper-case? ch)\n    (and (char? ch)\n         (char-upper-case? ch)))\n  (define (count-upper str)\n    (if (null? str)\n        0\n        (+ (if (upper-case? (car str)) 1 0)\n           (count-upper (cdr str)))))\n  (count-upper str))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr_iter (rest str) (+ ctr 1))]\n      [else (upper_ctr_iter (rest str) ctr)]))\n  (upper_ctr_iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ 1 ctr))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (loop (cdr str) (+ ctr 1))\n            (loop (cdr str) ctr)))))\n",
    "  (define (upper_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr_iter (rest str) (+ ctr 1))]\n      [else (upper_ctr_iter (rest str) ctr)]))\n  (upper_ctr_iter str 0))\n",
    "  (define (iter str ctr)\n    (if (string=? str \"\")\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (iter (substring str 1) (+ ctr 1))\n            (iter (substring str 1) ctr))))\n  (iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper? c)\n    (and (char? c)\n         (char-upper-case? c)))\n  (define (loop str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)]))\n  (loop str 0))\n",
    "  (define (upper? c)\n    (char-upper-case? c))\n  (define (ctr lst)\n    (if (null? lst)\n        0\n        (+ (if (upper? (car lst)) 1 0) (ctr (cdr lst)))))\n  (ctr (string->list str)))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (cond [(empty? str) 0]\n        [else (if (char-upper-case? (first str))\n                 (+ 1 (upper_ctr (rest str)))\n                 (upper_ctr (rest str)))]))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (loop (cdr str) (+ ctr 1))\n            (loop (cdr str) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (define (upper? c)\n    (and (char? c)\n         (char-upper-case? c)))\n  (define (count-upper str)\n    (if (null? str)\n        0\n        (if (upper? (car str))\n            (+ 1 (count-upper (cdr str)))\n            (count-upper (cdr str)))))\n  (count-upper str))\n",
    "  (define (upper_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr_iter (rest str) (+ ctr 1))]\n      [else (upper_ctr_iter (rest str) ctr)]))\n  (upper_ctr_iter str 0))\n"
  ]
}