{
  "name": "mbpp_776_count_vowels",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count those characters which have vowels as their neighbors in the given string.\n(define (count_vowels test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_vowels))\n    (check-equal? (candidate \"bestinstareels\") 7)\n    (check-equal? (candidate \"partofthejourneyistheend\") 12)\n    (check-equal? (candidate \"amazonprime\") 5)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length test_str)) count]\n      [(or (vowel? (string-ref test_str i))\n           (vowel? (string-ref test_str (- i 1))))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
    "  (letrec ([vowels (string-&gt;list \"aeiou\")]\n           [is_vowel? (lambda (c) (member c vowels))]\n           [is_vowel_neighbor? (lambda (c) (or (is_vowel? (string-ref test_str (- c 1)))\n                                                (is_vowel? (string-ref test_str (+ c 1)))))]\n           [count-vowel-neighbors (lambda (c) (if (is_vowel_neighbor? c) 1 0))])\n    (apply + (map count-vowel-neighbors (range (string-length test_str))))))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (second test_str) #\\a)\n                    (char=? (second test_str) #\\e)\n                    (char=? (second test_str) #\\i)\n                    (char=? (second test_str) #\\o)\n                    (char=? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))\n        )\n    )\n  (count_vowels_helper test_str 0)\n  )\n",
    "  (let ((count 0))\n    (for ([i (in-range (string-length test_str))])\n      (let ((c (string-ref test_str i)))\n        (cond\n         ((and (vowel? c) (vowel? (string-ref test_str (add1 i)))) (set! count (add1 count)))\n         ((and (vowel? c) (vowel? (string-ref test_str (sub1 i)))) (set! count (add1 count))))))\n    count))\n",
    "  (letrec ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n           [is_vowel? (lambda (c) (member c vowels))]\n           [count_vowels_aux (lambda (str)\n                               (cond [(empty? str) 0]\n                                     [(is_vowel? (first str))\n                                      (+ 1 (count_vowels_aux (rest str)))]\n                                     [(is_vowel? (second str))\n                                      (+ 1 (count_vowels_aux (rest str)))]\n                                     [else (count_vowels_aux (rest str))]))])\n    (count_vowels_aux test_str)))\n",
    "  (letrec ([vowels (string-&gt;list \"aeiou\")]\n           [is_vowel? (lambda (ch) (member ch vowels))]\n           [is_neighbor? (lambda (ch1 ch2)\n                           (and (is_vowel? ch1) (is_vowel? ch2)))]\n           [count_vowels_helper (lambda (str)\n                                  (if (empty? str)\n                                      0\n                                      (+ (if (is_neighbor? (first str) (second str))\n                                             1\n                                             0)\n                                         (count_vowels_helper (rest str))))])\n    (count_vowels_helper (string-&gt;list test_str))))\n</code>\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([ch (in-string test_str)])\n      (if (or (member ch vowels)\n              (member (string-ref test_str (- (string-length test_str) (string-length ch))) vowels))\n          (+ count 1)\n          count))))\n",
    "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length test_str)) count]\n      [(or (vowel? (string-ref test_str i))\n           (vowel? (string-ref test_str (- i 1))))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (cond\n            [(member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n             (if (member (string-ref test_str (+ i 1)) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n                 (loop (+ i 1) (+ count 1))\n                 (loop (+ i 1) count))]\n            [else (loop (+ i 1) count)])))))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i (string-length test_str)) count]\n        [(member (string-ref test_str i) vowels)\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (letrec ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n           [is-vowel (lambda (ch) (member ch vowels))]\n           [count-vowels (lambda (str)\n                           (cond [(empty? str) 0]\n                                 [(is-vowel (first str))\n                                  (+ 1 (count-vowels (rest str)))]\n                                 [(is-vowel (second str))\n                                  (+ 1 (count-vowels (rest str)))]\n                                 [else (count-vowels (rest str))]))])\n    (count-vowels test_str)))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (and (char-set=? (char-set-contains? vowels (string-ref test_str i)) #t)\n               (char-set=? (char-set-contains? vowels (string-ref test_str (+ i 1))) #t))\n          (+ count 1)\n          count))))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (second test_str) #\\a)\n                    (char=? (second test_str) #\\e)\n                    (char=? (second test_str) #\\i)\n                    (char=? (second test_str) #\\o)\n                    (char=? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str)) (is_vowel? (cadr test_str)))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper str count)\n    (cond ((null? str) count)\n          ((and (is_vowel? (car str))\n                (or (is_vowel? (cadr str))\n                    (is_vowel? (caddr str))))\n           (count-vowels-helper (cdr str) (+ count 1)))\n          (else (count-vowels-helper (cdr str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper str count)\n    (if (null? str)\n        count\n        (if (and (is_vowel? (car str))\n                 (is_vowel? (cadr str)))\n            (count_vowels_helper (cdr str) (+ count 1))\n            (count_vowels_helper (cdr str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (member (string-ref test_str i) vowels)\n          (if (member (string-ref test_str (add1 i)) vowels)\n              (add1 count)\n              count)\n          count))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_iter test_str count)\n    (if (null? test_str)\n        count\n        (if (is_vowel? (car test_str))\n            (count_vowels_iter (cdr test_str) (+ count 1))\n            (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (first (rest test_str)) #\\a)\n                    (char=? (first (rest test_str)) #\\e)\n                    (char=? (first (rest test_str)) #\\i)\n                    (char=? (first (rest test_str)) #\\o)\n                    (char=? (first (rest test_str)) #\\u))\n                (count_vowels_helper (rest test_str) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)]\n        [count 0])\n    (for ([i (in-range (string-length test_str))])\n      (if (and (char-alphabetic? (string-ref test_str i))\n               (or (member (string-ref test_str (add1 i)) vowels)\n                   (member (string-ref test_str (sub1 i)) vowels)))\n          (set! count (add1 count))))\n    count))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (member (string-ref test_str i) vowels)\n          (if (member (string-ref test_str (+ i 1)) vowels)\n              (+ count 1)\n              count)\n          count))))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (for/fold ([count 0]) ([c (in-string test_str)])\n      (if (member c vowels)\n          (if (member (string-ref test_str (add1 (string-index test_str c))) vowels)\n              (add1 count)\n              count)\n          count))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_iter test_str count)\n    (cond\n      [(empty? test_str) count]\n      [(is_vowel? (first test_str))\n       (count_vowels_iter (rest test_str) (+ count 1))]\n      [else (count_vowels_iter (rest test_str) count)]))\n  (count_vowels_iter test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([char (string-ref test_str i)])\n          (if (or (char=? char #\\a) (char=? char #\\e) (char=? char #\\i) (char=? char #\\o) (char=? char #\\u))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (and (is_vowel? (first test_str))\n                 (is_vowel? (second test_str)))\n            (count_vowels_helper (rest test_str) (+ count 1))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count-vowels-helper (cdr test_str) (+ count 1)))\n          (else (count-vowels-helper (cdr test_str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([test_str (string-&gt;list test_str)]\n               [count 0])\n      (cond\n        [(empty? test_str) count]\n        [(member (first test_str) vowels)\n         (loop (rest test_str) (+ count 1))]\n        [else (loop (rest test_str) count)]))))\n</code>\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (and (char-set=? (char-set-contains? vowels (string-ref test_str i)) #t)\n               (char-set=? (char-set-contains? vowels (string-ref test_str (+ i 1))) #t))\n          (+ count 1)\n          count))))\n",
    "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_iter test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel (car test_str))\n                 (or (is_vowel (cadr test_str))\n                     (is_vowel (caddr test_str))))\n            (count_vowels_iter (cdr test_str) (+ count 1))\n            (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (loop (+ i 1)\n                (if (or (char=? c #\\a)\n                        (char=? c #\\e)\n                        (char=? c #\\i)\n                        (char=? c #\\o)\n                        (char=? c #\\u))\n                    (if (or (char=? (string-ref test_str (- i 1)) #\\a)\n                            (char=? (string-ref test_str (- i 1)) #\\e)\n                            (char=? (string-ref test_str (- i 1)) #\\i)\n                            (char=? (string-ref test_str (- i 1)) #\\o)\n                            (char=? (string-ref test_str (- i 1)) #\\u))\n                        (if (or (char=? (string-ref test_str (+ i 1)) #\\a)\n                                (char=? (string-ref test_str (+ i 1)) #\\e)\n                                (char=? (string-ref test_str (+ i 1)) #\\i)\n                                (char=? (string-ref test_str (+ i 1)) #\\o)\n                                (char=? (string-ref test_str (+ i 1)) #\\u))\n                            (+ count 1)\n                            count)\n                        count)\n                    count))))))\n",
    "  (let loop ((i 0) (count 0))\n    (if (= i (string-length test_str))\n        count\n        (let ((c (string-ref test_str i)))\n          (cond\n            ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n             (if (or (char=? (string-ref test_str (add1 i)) #\\a)\n                     (char=? (string-ref test_str (add1 i)) #\\e)\n                     (char=? (string-ref test_str (add1 i)) #\\i)\n                     (char=? (string-ref test_str (add1 i)) #\\o)\n                     (char=? (string-ref test_str (add1 i)) #\\u))\n                 (loop (add1 i) (add1 count))\n                 (loop (add1 i) count)))\n            (else (loop (add1 i) count)))))))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond\n      [(empty? test_str) count]\n      [(is_vowel? (first test_str))\n       (if (is_vowel? (second test_str))\n           (count_vowels_helper (rest test_str) (+ count 1))\n           (count_vowels_helper (rest test_str) count))]\n      [else (count_vowels_helper (rest test_str) count)]))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (is_vowel? (cadr test_str)))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (is_vowel? (cadr test_str)))\n            (count-vowels-helper (cdr test_str) (+ count 1))\n            (count-vowels-helper (cdr test_str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_aux test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_aux (cdr test_str) (+ count 1))\n            (count_vowels_aux (cdr test_str) count))))\n  (count_vowels_aux test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length test_str)) count]\n      [(or (vowel? (string-ref test_str i))\n           (vowel? (string-ref test_str (- i 1))))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper str i)\n    (if (= i (string-length str))\n        0\n        (+ (if (and (is_vowel? (string-ref str (- i 1)))\n                    (is_vowel? (string-ref str (+ i 1))))\n               1\n               0)\n           (count-vowels-helper str (+ i 1)))))\n  (count-vowels-helper test_str 1))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (is_vowel? (car test_str))\n            (if (is_vowel? (cadr test_str))\n                (count_vowels_helper (cdr test_str) (+ count 1))\n                (count_vowels_helper (cdr test_str) count))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (letrec ([vowels (string-&gt;list \"aeiou\")]\n           [count_vowels_helper (lambda (str)\n                                  (if (null? str)\n                                      0\n                                      (if (or (member (car str) vowels)\n                                              (member (car (cdr str)) vowels))\n                                          (+ 1 (count_vowels_helper (cdr str)))\n                                          (count_vowels_helper (cdr str))))])\n           (count_vowels_helper test_str)))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([ch (string-ref test_str i)])\n          (if (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (member (string-ref test_str i) vowels)\n          (if (member (string-ref test_str (add1 i)) vowels)\n              (add1 count)\n              count)\n          count))))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([i 0] [count 0])\n      (if (&gt;= i (string-length test_str))\n          count\n          (let ([c (string-ref test_str i)])\n            (if (or (member c vowels)\n                    (member (string-ref test_str (+ i 1)) vowels))\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))))))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (second test_str) #\\a)\n                    (char=? (second test_str) #\\e)\n                    (char=? (second test_str) #\\i)\n                    (char=? (second test_str) #\\o)\n                    (char=? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (count_vowels_helper test_str count)\n    (cond ((empty? test_str) count)\n          ((or (char=? (first test_str) #\\a)\n               (char=? (first test_str) #\\e)\n               (char=? (first test_str) #\\i)\n               (char=? (first test_str) #\\o)\n               (char=? (first test_str) #\\u))\n           (count_vowels_helper (rest test_str) (+ count 1)))\n          (else (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (cond\n            [(or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n             (if (or (char=? (string-ref test_str (- i 1)) #\\a) (char=? (string-ref test_str (- i 1)) #\\e) (char=? (string-ref test_str (- i 1)) #\\i) (char=? (string-ref test_str (- i 1)) #\\o) (char=? (string-ref test_str (- i 1)) #\\u))\n                 (loop (+ i 1) count)\n                 (loop (+ i 1) (+ count 1)))]\n            [(or (char=? c #\\A) (char=? c #\\E) (char=? c #\\I) (char=? c #\\O) (char=? c #\\U))\n             (if (or (char=? (string-ref test_str (- i 1)) #\\A) (char=? (string-ref test_str (- i 1)) #\\E) (char=? (string-ref test_str (- i 1)) #\\I) (char=? (string-ref test_str (- i 1)) #\\O) (char=? (string-ref test_str (- i 1)) #\\U))\n                 (loop (+ i 1) count)\n                 (loop (+ i 1) (+ count 1)))]\n            [else (loop (+ i 1) count)]))))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (is_vowel? (cadr test_str)))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([count 0] [str test_str])\n      (cond\n        [(empty? str) count]\n        [(member (first str) vowels)\n         (loop (+ count 1) (rest str))]\n        [else (loop count (rest str))]))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_aux str count)\n    (if (string-empty? str)\n        count\n        (if (and (is_vowel? (string-ref str 0))\n                 (is_vowel? (string-ref str 1)))\n            (count_vowels_aux (substring str 1) (+ count 1))\n            (count_vowels_aux (substring str 1) count))))\n  (count_vowels_aux test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (if (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (if (or (char=? (string-ref test_str (add1 i)) #\\a) (char=? (string-ref test_str (add1 i)) #\\e) (char=? (string-ref test_str (add1 i)) #\\i) (char=? (string-ref test_str (add1 i)) #\\o) (char=? (string-ref test_str (add1 i)) #\\u))\n                  (loop (add1 i) (add1 count))\n                  (loop (add1 i) count))\n              (loop (add1 i) count))))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (is_vowel? (car test_str))\n            (if (is_vowel? (cadr test_str))\n                (count_vowels_helper (cdr test_str) (+ count 1))\n                (count_vowels_helper (cdr test_str) count))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((string-empty? test_str) count)\n          ((and (is_vowel? (string-ref test_str 0))\n                (is_vowel? (string-ref test_str 1)))\n           (count_vowels_helper (substring test_str 1) (+ count 1)))\n          (else (count_vowels_helper (substring test_str 1) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (for/fold ([count 0]) ([c (in-string test_str)])\n      (if (member c vowels)\n          (if (member (string-ref test_str (add1 (string-index test_str c))) vowels)\n              (add1 count)\n              count)\n          count))))\n</code>\n",
    "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper str count)\n    (if (null? str)\n        count\n        (if (and (is_vowel (car str))\n                 (is_vowel (cadr str)))\n            (count_vowels_helper (cdr str) (+ count 1))\n            (count_vowels_helper (cdr str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_vowel_neighbor? c)\n    (and (not (is_vowel? c))\n         (or (is_vowel? (string-ref test_str (- (string-length test_str) 1)))\n             (is_vowel? (string-ref test_str 1)))))\n  (define (count_vowel_neighbors str)\n    (cond ((null? str) 0)\n          ((is_vowel_neighbor? (car str)) (+ 1 (count_vowel_neighbors (cdr str))))\n          (else (count_vowel_neighbors (cdr str)))))\n  (count_vowel_neighbors test_str))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (is_vowel? (cadr test_str)))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (and (char-set=? (char-set-contains? vowels (string-ref test_str i)) #t)\n               (char-set=? (char-set-contains? vowels (string-ref test_str (add1 i))) #t))\n          (add1 count)\n          count))))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([ch (string-ref test_str i)])\n          (if (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u))\n              (if (or (char=? (string-ref test_str (+ i 1)) #\\a) (char=? (string-ref test_str (+ i 1)) #\\e) (char=? (string-ref test_str (+ i 1)) #\\i) (char=? (string-ref test_str (+ i 1)) #\\o) (char=? (string-ref test_str (+ i 1)) #\\u))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count))\n              (loop (+ i 1) count))))))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (cond\n            [(or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n             (if (or (char=? (string-ref test_str (add1 i)) #\\a)\n                     (char=? (string-ref test_str (add1 i)) #\\e)\n                     (char=? (string-ref test_str (add1 i)) #\\i)\n                     (char=? (string-ref test_str (add1 i)) #\\o)\n                     (char=? (string-ref test_str (add1 i)) #\\u))\n                 (loop (add1 i) (add1 count))\n                 (loop (add1 i) count))]\n            [else (loop (add1 i) count)]))))))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (for/fold ([count 0]) ([char (in-string test_str)])\n      (if (and (char-alphabetic? char)\n               (member (char-downcase char) vowels)\n               (member (char-downcase (string-ref test_str (add1 (string-index test_str char)))) vowels))\n          (add1 count)\n          count))))\n",
    "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length test_str)) count]\n      [(or (char-vowel? (string-ref test_str i))\n           (char-vowel? (string-ref test_str (add1 i))))\n       (loop (add1 i) (add1 count))]\n      [else (loop (add1 i) count)])))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper str count)\n    (if (empty? str)\n        count\n        (if (and (is_vowel? (first str))\n                 (is_vowel? (second str)))\n            (count-vowels-helper (rest str) (+ count 1))\n            (count-vowels-helper (rest str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (let ([count 0])\n    (for ([i (in-range (string-length test_str))])\n      (let ([char (string-ref test_str i)])\n        (cond\n         [(or (equal? char #\\a) (equal? char #\\e) (equal? char #\\i) (equal? char #\\o) (equal? char #\\u))\n          (if (or (and (not (equal? i 0)) (equal? (string-ref test_str (- i 1)) #\\a))\n                  (and (not (equal? i 0)) (equal? (string-ref test_str (- i 1)) #\\e))\n                  (and (not (equal? i 0)) (equal? (string-ref test_str (- i 1)) #\\i))\n                  (and (not (equal? i 0)) (equal? (string-ref test_str (- i 1)) #\\o))\n                  (and (not (equal? i 0)) (equal? (string-ref test_str (- i 1)) #\\u))\n                  (and (not (equal? i (- (string-length test_str) 1))) (equal? (string-ref test_str (+ i 1)) #\\a))\n                  (and (not (equal? i (- (string-length test_str) 1))) (equal? (string-ref test_str (+ i 1)) #\\e))\n                  (and (not (equal? i (- (string-length test_str) 1))) (equal? (string-ref test_str (+ i 1)) #\\i))\n                  (and (not (equal? i (- (string-length test_str) 1))) (equal? (string-ref test_str (+ i 1)) #\\o))\n                  (and (not (equal? i (- (string-length test_str) 1))) (equal? (string-ref test_str (+ i 1)) #\\u)))\n              (set! count (+ count 1)))]\n         [else #f]))\n      count)))\n",
    "  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((or (char=? (car test_str) #\\a)\n               (char=? (car test_str) #\\e)\n               (char=? (car test_str) #\\i)\n               (char=? (car test_str) #\\o)\n               (char=? (car test_str) #\\u))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          ((or (char=? (cadr test_str) #\\a)\n               (char=? (cadr test_str) #\\e)\n               (char=? (cadr test_str) #\\i)\n               (char=? (cadr test_str) #\\o)\n               (char=? (cadr test_str) #\\u))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (let ([count 0])\n      (for ([i (in-range (string-length test_str))])\n        (let ([char (string-ref test_str i)])\n          (if (or (member char vowels)\n                  (member (string-ref test_str (add1 i)) vowels)\n                  (member (string-ref test_str (sub1 i)) vowels))\n              (set! count (add1 count)))))\n      count)))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (is_vowel? (cadr test_str)))\n           (count-vowels-helper (cdr test_str) (+ count 1)))\n          (else (count-vowels-helper (cdr test_str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([curr (string-ref test_str i)])\n          (if (or (char=? curr #\\a) (char=? curr #\\e) (char=? curr #\\i) (char=? curr #\\o) (char=? curr #\\u))\n              (if (or (char=? (string-ref test_str (+ i 1)) #\\a) (char=? (string-ref test_str (+ i 1)) #\\e) (char=? (string-ref test_str (+ i 1)) #\\i) (char=? (string-ref test_str (+ i 1)) #\\o) (char=? (string-ref test_str (+ i 1)) #\\u))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count))\n              (loop (+ i 1) count))))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_iter test_str count)\n    (if (string-empty? test_str)\n        count\n        (let ((c (string-ref test_str 0))\n              (rest (substring test_str 1)))\n          (if (and (is_vowel? c) (is_vowel? (string-ref rest 0)))\n              (count_vowels_iter rest (+ count 1))\n              (count_vowels_iter rest count)))))\n  (count_vowels_iter test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (or (and (char-vowel? (string-ref test_str 0)) (char-vowel? (string-ref test_str 1)))\n                (and (char-vowel? (string-ref test_str 0)) (char-vowel? (string-ref test_str (- (string-length test_str) 1)))))\n            (count_vowels_helper (substring test_str 1) (+ count 1))\n            (count_vowels_helper (substring test_str 1) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([ch (in-string test_str)])\n      (if (or (member ch vowels)\n              (member (string-ref test_str (add1 (string-index test_str ch))) vowels)\n              (member (string-ref test_str (sub1 (string-index test_str ch))) vowels))\n          (add1 count)\n          count))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str acc)\n    (cond ((null? test_str) acc)\n          ((is_vowel? (car test_str))\n           (count_vowels_helper (cdr test_str) (+ acc 1)))\n          ((is_vowel? (cadr test_str))\n           (count_vowels_helper (cdr test_str) (+ acc 1)))\n          (else (count_vowels_helper (cdr test_str) acc))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_iter test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel (car test_str))\n                 (is_vowel (cadr test_str)))\n            (count_vowels_iter (cdr test_str) (+ count 1))\n            (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (if (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (if (or (char=? (string-ref test_str (+ i 1)) #\\a) (char=? (string-ref test_str (+ i 1)) #\\e) (char=? (string-ref test_str (+ i 1)) #\\i) (char=? (string-ref test_str (+ i 1)) #\\o) (char=? (string-ref test_str (+ i 1)) #\\u))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count))\n              (loop (+ i 1) count))))))\n",
    "  (let ([count 0])\n    (for ([i (in-range (string-length test_str))])\n      (if (or (char=? (string-ref test_str i) #\\a)\n              (char=? (string-ref test_str i) #\\e)\n              (char=? (string-ref test_str i) #\\i)\n              (char=? (string-ref test_str i) #\\o)\n              (char=? (string-ref test_str i) #\\u))\n          (if (or (char=? (string-ref test_str (- i 1)) #\\a)\n                  (char=? (string-ref test_str (- i 1)) #\\e)\n                  (char=? (string-ref test_str (- i 1)) #\\i)\n                  (char=? (string-ref test_str (- i 1)) #\\o)\n                  (char=? (string-ref test_str (- i 1)) #\\u))\n              (set! count (+ count 1)))))\n    count))\n",
    "  (letrec ([vowels (string-&gt;list \"aeiou\")]\n           [is-vowel? (lambda (c) (member c vowels))]\n           [is-vowel-neighbor? (lambda (c) (or (is-vowel? (string-ref test_str (- c 1)))\n                                               (is-vowel? (string-ref test_str (+ c 1)))))]\n           [count-vowel-neighbors (lambda (c) (if (is-vowel-neighbor? c) 1 0))])\n    (apply + (map count-vowel-neighbors (iota (string-length test_str))))))\n</code>\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([curr (string-ref test_str i)])\n          (if (or (char=? curr #\\a) (char=? curr #\\e) (char=? curr #\\i) (char=? curr #\\o) (char=? curr #\\u))\n              (if (or (char=? (string-ref test_str (- i 1)) #\\a) (char=? (string-ref test_str (- i 1)) #\\e) (char=? (string-ref test_str (- i 1)) #\\i) (char=? (string-ref test_str (- i 1)) #\\o) (char=? (string-ref test_str (- i 1)) #\\u))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count))\n              (loop (+ i 1) count))))))\n",
    "  (let ([test_str (string->list test_str)]\n        [vowels '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let loop ([test_str test_str]\n               [count 0])\n      (cond\n        [(empty? test_str) count]\n        [(member (first test_str) vowels)\n         (loop (rest test_str) (+ count 1))]\n        [else (loop (rest test_str) count)]))))\n",
    "  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((or (char=? (string-ref test_str 0) #\\a)\n               (char=? (string-ref test_str 0) #\\e)\n               (char=? (string-ref test_str 0) #\\i)\n               (char=? (string-ref test_str 0) #\\o)\n               (char=? (string-ref test_str 0) #\\u))\n           (count_vowels_helper (substring test_str 1 (string-length test_str)) (+ count 1)))\n          (else (count_vowels_helper (substring test_str 1 (string-length test_str)) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper str count)\n    (cond ((string-empty? str) count)\n          ((and (is_vowel? (string-ref str 0))\n                (is_vowel? (string-ref str 1)))\n           (count_vowels_helper (substring str 1) (+ count 1)))\n          (else (count_vowels_helper (substring str 1) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (for/fold ([count 0]) ([c (in-string test_str)])\n      (if (member c vowels)\n          (if (member (string-ref test_str (+ 1 (string-index test_str c))) vowels)\n              (+ count 1)\n              count)\n          count))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_vowel_neighbor? c)\n    (and (is_vowel? c)\n         (or (is_vowel? (string-ref test_str (sub1 (string-index test_str c))))\n             (is_vowel? (string-ref test_str (add1 (string-index test_str c)))))))\n  (length (filter is_vowel_neighbor? (string->list test_str))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (if (&lt; i (string-length test_str))\n        (let* ([curr (string-ref test_str i)]\n               [prev (if (&lt; i 1) #\\a (string-ref test_str (- i 1)))])\n          (if (or (char-vowel? curr) (char-vowel? prev))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))\n        count)))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_vowel_neighbor? c)\n    (and (is_vowel? (string-ref test_str (- c 1)))\n         (is_vowel? (string-ref test_str (+ c 1)))))\n  (length (filter is_vowel_neighbor? (range 1 (- (string-length test_str) 1)))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper test_str count)\n    (cond ((null? test_str) count)\n          ((is_vowel? (car test_str))\n           (count-vowels-helper (cdr test_str) (+ count 1)))\n          (else (count-vowels-helper (cdr test_str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_iter test_str count)\n    (cond ((null? test_str) count)\n          ((is_vowel? (car test_str))\n           (count_vowels_iter (cdr test_str) (+ count 1)))\n          (else (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (and (char-set=? (list (string-ref test_str i)) vowels)\n               (or (char-set=? (list (string-ref test_str (- i 1))) vowels)\n                   (char-set=? (list (string-ref test_str (+ i 1))) vowels)))\n          (+ count 1)\n          count))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str)) (is_vowel? (cadr test_str)))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_iter test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_iter (cdr test_str) (+ count 1)))\n          (else (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((is_vowel? (car test_str))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (if (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (if (or (char=? (string-ref test_str (+ i 1)) #\\a) (char=? (string-ref test_str (+ i 1)) #\\e) (char=? (string-ref test_str (+ i 1)) #\\i) (char=? (string-ref test_str (+ i 1)) #\\o) (char=? (string-ref test_str (+ i 1)) #\\u))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count))\n              (loop (+ i 1) count))))))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels-helper test_str count)\n    (cond\n      [(empty? test_str) count]\n      [(and (is_vowel? (first test_str)) (is_vowel? (second test_str)))\n       (count_vowels-helper (rest test_str) (+ count 1))]\n      [else (count_vowels-helper (rest test_str) count)]))\n  (count_vowels-helper test_str 0))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (let loop ([test_str test_str] [count 0])\n      (cond\n        [(null? test_str) count]\n        [(member (car test_str) vowels)\n         (loop (cdr test_str) (+ count 1))]\n        [else (loop (cdr test_str) count)]))))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (second test_str) #\\a)\n                    (char=? (second test_str) #\\e)\n                    (char=? (second test_str) #\\i)\n                    (char=? (second test_str) #\\o)\n                    (char=? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest (rest test_str)) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count-vowels-in-string str)\n    (if (string-empty? str)\n        0\n        (if (is_vowel? (string-ref str 0))\n            (+ 1 (count-vowels-in-string (string-drop str 1)))\n            (count-vowels-in-string (string-drop str 1)))))\n  (count-vowels-in-string test_str))\n",
    "  (define (count_vowels_iter test_str count)\n    (cond\n      [(empty? test_str) count]\n      [(or (char=? (first test_str) #\\a) (char=? (first test_str) #\\e) (char=? (first test_str) #\\i) (char=? (first test_str) #\\o) (char=? (first test_str) #\\u))\n       (count_vowels_iter (rest test_str) (+ count 1))]\n      [(or (char=? (first test_str) #\\A) (char=? (first test_str) #\\E) (char=? (first test_str) #\\I) (char=? (first test_str) #\\O) (char=? (first test_str) #\\U))\n       (count_vowels_iter (rest test_str) (+ count 1))]\n      [(or (char=? (first test_str) #\\y) (char=? (first test_str) #\\Y))\n       (if (or (char=? (second test_str) #\\a) (char=? (second test_str) #\\e) (char=? (second test_str) #\\i) (char=? (second test_str) #\\o) (char=? (second test_str) #\\u))\n           (count_vowels_iter (rest test_str) (+ count 1))\n           (count_vowels_iter (rest test_str) count))]\n      [else (count_vowels_iter (rest test_str) count)]))\n  (count_vowels_iter test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_aux test_str count)\n    (cond\n      [(empty? test_str) count]\n      [(and (is_vowel? (first test_str))\n            (is_vowel? (second test_str)))\n       (count_vowels_aux (rest test_str) (+ count 1))]\n      [else (count_vowels_aux (rest test_str) count)]))\n  (count_vowels_aux test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper str count)\n    (if (empty? str)\n        count\n        (if (is_vowel? (first str))\n            (if (is_vowel? (second str))\n                (count-vowels-helper (rest str) (+ count 1))\n                (count-vowels-helper (rest str) count))\n            (count-vowels-helper (rest str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([i 0] [count 0])\n      (if (&gt;= i (string-length test_str))\n          count\n          (let ([c (string-ref test_str i)])\n            (if (or (member c vowels)\n                    (member (string-ref test_str (+ i 1)) vowels))\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))))))\n</code>\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length test_str))\n          count\n          (let ([curr (string-ref test_str i)])\n            (if (or (member curr vowels)\n                    (member (string-ref test_str (+ i 1)) vowels))\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))))))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n        [count 0])\n    (for ([i (in-range (string-length test_str))])\n      (let ([c (string-ref test_str i)])\n        (cond\n          [(member c vowels)\n           (cond\n             [(member (string-ref test_str (+ i 1)) vowels)\n              (set! count (+ count 1))]\n             [(member (string-ref test_str (- i 1)) vowels)\n              (set! count (+ count 1))])]))\n      count)))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper str)\n    (if (null? str)\n        0\n        (if (and (is_vowel? (car str))\n                 (is_vowel? (cadr str)))\n            (+ 1 (count-vowels-helper (cdr str)))\n            (count-vowels-helper (cdr str)))))\n  (count-vowels-helper test_str))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (second test_str) #\\a)\n                    (char=? (second test_str) #\\e)\n                    (char=? (second test_str) #\\i)\n                    (char=? (second test_str) #\\o)\n                    (char=? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([len (string-length test_str)])\n    (define (is_vowel? ch)\n      (or (char=? ch #\\a)\n          (char=? ch #\\e)\n          (char=? ch #\\i)\n          (char=? ch #\\o)\n          (char=? ch #\\u)))\n    (define (count-vowels-helper test_str i)\n      (if (= i len)\n          0\n          (if (and (is_vowel? (string-ref test_str i))\n                   (is_vowel? (string-ref test_str (- i 1))))\n              (+ 1 (count-vowels-helper test_str (+ i 1)))\n              (count-vowels-helper test_str (+ i 1)))))\n    (count-vowels-helper test_str 1)))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond\n      [(empty? test_str) count]\n      [(is_vowel? (first test_str))\n       (count_vowels_helper (rest test_str) (+ 1 count))]\n      [else\n       (count_vowels_helper (rest test_str) count)]))\n  (count_vowels_helper test_str 0))\n",
    "  (let ((count 0))\n    (for ((i (in-range (string-length test_str))))\n      (let ((c (string-ref test_str i)))\n        (if (and (char-alphabetic? c)\n                 (or (char-vowel? (string-ref test_str (sub1 i)))\n                     (char-vowel? (string-ref test_str (add1 i)))))\n            (set! count (add1 count)))))\n    count))\n",
    "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_aux test_str count)\n    (if (empty? test_str)\n        count\n        (if (and (is_vowel (first test_str))\n                 (is_vowel (second test_str)))\n            (count_vowels_aux (rest test_str) (+ count 1))\n            (count_vowels_aux (rest test_str) count))))\n  (count_vowels_aux test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper str count)\n    (if (null? str)\n        count\n        (if (and (is_vowel? (car str))\n                 (or (is_vowel? (cadr str))\n                     (is_vowel? (caddr str))))\n            (count_vowels_helper (cdr str) (+ count 1))\n            (count_vowels_helper (cdr str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (for/fold ([count 0]) ([c (in-string test_str)])\n      (if (member c vowels)\n          (if (member (string-ref test_str (add1 (string-index test_str c))) vowels)\n              (add1 count)\n              count)\n          count))))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (for/fold ([count 0]) ([c (in-string test_str)])\n      (if (member c vowels)\n          (if (member (string-ref test_str (add1 (string-index test_str c))) vowels)\n              (add1 count)\n              count)\n          count))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper str count)\n    (cond\n      [(empty? str) count]\n      [(is_vowel? (first str))\n       (count_vowels_helper (rest str) (+ 1 count))]\n      [else (count_vowels_helper (rest str) count)]))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length test_str))\n          count\n          (let ([c (string-ref test_str i)])\n            (if (member c vowels)\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))))))\n</code>\n",
    "  (let loop ([i 0] [count 0])\n    (if (equal? i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (if (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (define (is_vowel? c)\n      (member c vowels))\n    (define (is_vowel_neighbor? c)\n      (and (not (is_vowel? c))\n           (or (is_vowel? (char-downcase (string-ref test_str (- c 1))))\n               (is_vowel? (char-downcase (string-ref test_str (+ c 1)))))))\n    (for/fold ([count 0]) ([c (in-string test_str)])\n      (if (is_vowel_neighbor? c)\n          (+ count 1)\n          count))))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([i 0] [count 0])\n      (if (&lt; i (sub1 (string-length test_str)))\n          (if (member (string-ref test_str i) vowels)\n              (if (member (string-ref test_str (add1 i)) vowels)\n                  (loop (add1 i) (add1 count))\n                  (loop (add1 i) count))\n              (loop (add1 i) count))\n          count))))\n</code>\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a) (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\u)))\n  (define (count_vowels_iter test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_iter (cdr test_str) (+ count 1))\n            (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (define (is_vowel? ch)\n    (or (equal? ch #\\a) (equal? ch #\\e) (equal? ch #\\i) (equal? ch #\\o) (equal? ch #\\u)))\n  (define (is_vowel_neighbor? ch)\n    (and (not (is_vowel? ch))\n         (or (is_vowel? (string-ref test_str (- (string-length test_str) 1)))\n             (is_vowel? (string-ref test_str 1)))))\n  (define (count_vowels_helper str count)\n    (cond ((null? str) count)\n          ((is_vowel_neighbor? (car str)) (count_vowels_helper (cdr str) (+ count 1)))\n          (else (count_vowels_helper (cdr str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (is_vowel? (car test_str))\n            (if (is_vowel? (cadr test_str))\n                (count_vowels_helper (cdr test_str) count)\n                (count_vowels_helper (cdr test_str) (+ count 1)))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-in-word word)\n    (define (count-vowels-in-word-helper word count)\n      (cond\n        [(empty? word) count]\n        [(and (is_vowel? (first word)) (is_vowel? (second word)))\n         (count-vowels-in-word-helper (rest word) (+ count 1))]\n        [else (count-vowels-in-word-helper (rest word) count)]))\n    (count-vowels-in-word-helper word 0))\n  (define (count-vowels-in-sentence sentence)\n    (define (count-vowels-in-sentence-helper sentence count)\n      (cond\n        [(empty? sentence) count]\n        [else (count-vowels-in-sentence-helper (rest sentence) (+ count (count-vowels-in-word (first sentence))))]))\n    (count-vowels-in-sentence-helper sentence 0))\n  (count-vowels-in-sentence (string-&gt;list test_str)))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (second test_str) #\\a)\n                    (char=? (second test_str) #\\e)\n                    (char=? (second test_str) #\\i)\n                    (char=? (second test_str) #\\o)\n                    (char=? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (for/fold ([count 0]) ([c (in-string test_str)])\n      (if (or (member (char-downcase c) vowels)\n              (member (char-upcase c) vowels))\n          (add1 count)\n          count))))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (if (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (if (or (char=? (string-ref test_str (- i 1)) #\\a) (char=? (string-ref test_str (- i 1)) #\\e) (char=? (string-ref test_str (- i 1)) #\\i) (char=? (string-ref test_str (- i 1)) #\\o) (char=? (string-ref test_str (- i 1)) #\\u))\n                  (loop (+ i 1) count)\n                  (loop (+ i 1) (+ count 1)))\n              (if (or (char=? (string-ref test_str (+ i 1)) #\\a) (char=? (string-ref test_str (+ i 1)) #\\e) (char=? (string-ref test_str (+ i 1)) #\\i) (char=? (string-ref test_str (+ i 1)) #\\o) (char=? (string-ref test_str (+ i 1)) #\\u))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count)))))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_vowel_neighbor? c)\n    (and (is_vowel? (string-ref test_str (- c 1)))\n         (is_vowel? (string-ref test_str (+ c 1)))))\n  (for/sum ([c (in-range 1 (- (string-length test_str) 1))])\n    (if (is_vowel_neighbor? c) 1 0)))\n",
    "  (define (count_vowels_helper test_str count)\n    (cond\n      [(empty? test_str) count]\n      [(or (char=? (first test_str) #\\a)\n           (char=? (first test_str) #\\e)\n           (char=? (first test_str) #\\i)\n           (char=? (first test_str) #\\o)\n           (char=? (first test_str) #\\u))\n       (count_vowels_helper (rest test_str) (+ count 1))]\n      [(or (char=? (first test_str) #\\A)\n           (char=? (first test_str) #\\E)\n           (char=? (first test_str) #\\I)\n           (char=? (first test_str) #\\O)\n           (char=? (first test_str) #\\U))\n       (count_vowels_helper (rest test_str) (+ count 1))]\n      [else\n       (count_vowels_helper (rest test_str) count)]))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([str (string-&gt;list test_str)]\n               [count 0])\n      (cond\n        [(empty? str) count]\n        [(member (car str) vowels)\n         (loop (cdr str) (+ count 1))]\n        [else (loop (cdr str) count)]))))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")]\n        [count 0])\n    (for ([i (in-range (string-length test_str))])\n      (if (member (string-ref test_str i) vowels)\n          (if (member (string-ref test_str (+ i 1)) vowels)\n              (set! count (+ count 1)))))\n    count))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((string-empty? test_str) count)\n          ((and (is_vowel? (string-ref test_str 0))\n                (is_vowel? (string-ref test_str 1)))\n           (count_vowels_helper (substring test_str 1) (+ count 1)))\n          (else (count_vowels_helper (substring test_str 1) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_vowel_neighbor? c)\n    (and (is_vowel? c)\n         (or (is_vowel? (string-ref test_str (- (string-length test_str) 1)))\n             (is_vowel? (string-ref test_str 1)))))\n  (length (filter is_vowel_neighbor? (string->list test_str))))\n",
    "  (letrec ([vowels (string-&gt;list \"aeiou\")]\n           [count 0]\n           [test (lambda (str)\n                   (if (empty? str)\n                       count\n                       (if (or (member (first str) vowels)\n                               (member (second str) vowels))\n                           (set! count (+ count 1))\n                           (set! count count))\n                       (test (rest str))))])\n    (test test_str)))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper str count)\n    (cond ((string-empty? str) count)\n          ((and (is_vowel? (string-ref str 0))\n                (is_vowel? (string-ref str 1)))\n           (count_vowels_helper (substring str 1) (+ count 1)))\n          (else (count_vowels_helper (substring str 1) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n  (define (count-vowels-helper str count)\n    (if (empty? str)\n        count\n        (if (and (vowel? (first str))\n                 (vowel? (second str)))\n            (count-vowels-helper (rest str) (+ count 1))\n            (count-vowels-helper (rest str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (letrec ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n           [is_vowel (lambda (c) (member c vowels))]\n           [count_vowels_helper (lambda (str count)\n                                  (cond [(empty? str) count]\n                                        [(is_vowel (first str))\n                                         (count_vowels_helper (rest str) (+ count 1))]\n                                        [else (count_vowels_helper (rest str) count)]))])\n    (count_vowels_helper test_str 0)))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (member (string-ref test_str i) vowels)\n          (if (member (string-ref test_str (+ i 1)) vowels)\n              (add1 count)\n              count)\n          count))))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([str (string-&gt;list test_str)]\n               [count 0])\n      (cond\n        [(empty? str) count]\n        [(member (car str) vowels)\n         (loop (cdr str) (+ count 1))]\n        [else\n         (loop (cdr str) count)]))))\n</code>\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (count_vowels_helper test_str count)\n    (cond\n      [(empty? test_str) count]\n      [(char-vowel? (first test_str))\n       (cond\n         [(char-vowel? (second test_str))\n          (count_vowels_helper (rest (rest test_str)) (+ count 1))]\n         [else\n          (count_vowels_helper (rest test_str) count)])]\n      [else\n       (count_vowels_helper (rest test_str) count)]))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_vowel_neighbor? c)\n    (and (is_vowel? c)\n         (or (is_vowel? (string-ref test_str (- (string-length test_str) 1)))\n             (is_vowel? (string-ref test_str 1)))))\n  (length (filter is_vowel_neighbor? (string->list test_str))))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (and (member (string-ref test_str i) vowels)\n               (or (member (string-ref test_str (add1 i)) vowels)\n                   (member (string-ref test_str (sub1 i)) vowels)))\n          (add1 count)\n          count))))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (count_vowels_iter test_str count)\n    (cond ((null? test_str) count)\n          ((is_vowel? (car test_str))\n           (count_vowels_iter (cdr test_str) (+ count 1)))\n          (else (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a) (char=? (first test_str) #\\e) (char=? (first test_str) #\\i) (char=? (first test_str) #\\o) (char=? (first test_str) #\\u))\n            (if (or (char=? (second test_str) #\\a) (char=? (second test_str) #\\e) (char=? (second test_str) #\\i) (char=? (second test_str) #\\o) (char=? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (string-empty? test_str)\n        count\n        (if (and (is_vowel? (string-ref test_str 0))\n                 (is_vowel? (string-ref test_str 1)))\n            (count_vowels_helper (substring test_str 1) (+ count 1))\n            (count_vowels_helper (substring test_str 1) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (count_vowels_iter test_str count)\n    (if (null? test_str)\n        count\n        (if (or (char=? (car test_str) #\\a)\n                (char=? (car test_str) #\\e)\n                (char=? (car test_str) #\\i)\n                (char=? (car test_str) #\\o)\n                (char=? (car test_str) #\\u))\n            (if (or (char=? (cadr test_str) #\\a)\n                    (char=? (cadr test_str) #\\e)\n                    (char=? (cadr test_str) #\\i)\n                    (char=? (cadr test_str) #\\o)\n                    (char=? (cadr test_str) #\\u))\n                (count_vowels_iter (cdr test_str) (+ count 1))\n                (count_vowels_iter (cdr test_str) count))\n            (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length test_str))\n          count\n          (let ([c (string-ref test_str i)])\n            (if (member c vowels)\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))))))\n",
    "  (let ([test_str (string->list test_str)]\n        [vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (define (is_vowel? c)\n      (member c vowels))\n    (define (count_vowels_helper test_str count)\n      (cond [(empty? test_str) count]\n            [(and (is_vowel? (first test_str))\n                  (is_vowel? (second test_str)))\n             (count_vowels_helper (rest test_str) (+ count 1))]\n            [else (count_vowels_helper (rest test_str) count)]))\n    (count_vowels_helper test_str 0)))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_iter test_str count)\n    (cond ((null? test_str) count)\n          ((is_vowel? (string-ref test_str 0))\n           (count_vowels_iter (substring test_str 1) (+ count 1)))\n          (else (count_vowels_iter (substring test_str 1) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((or (char=? (car test_str) #\\a)\n               (char=? (car test_str) #\\e)\n               (char=? (car test_str) #\\i)\n               (char=? (car test_str) #\\o)\n               (char=? (car test_str) #\\u))\n           (if (or (char=? (cadr test_str) #\\a)\n                   (char=? (cadr test_str) #\\e)\n                   (char=? (cadr test_str) #\\i)\n                   (char=? (cadr test_str) #\\o)\n                   (char=? (cadr test_str) #\\u))\n               (count_vowels_helper (cdr test_str) (+ count 1))\n               (count_vowels_helper (cdr test_str) count)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (is_vowel? (cadr test_str)))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (not (null? (cdr test_str))) (is_vowel? (car test_str)) (is_vowel? (cadr test_str)))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ((vowels '(#\\a #\\e #\\i #\\o #\\u))\n        (count 0))\n    (for ([i (in-range (string-length test_str))])\n      (let ((curr-char (string-ref test_str i)))\n        (when (member curr-char vowels)\n          (when (or (member (string-ref test_str (+ i 1)) vowels)\n                    (member (string-ref test_str (- i 1)) vowels))\n            (set! count (+ count 1))))))\n    count))\n",
    "  (define (is_vowel? char)\n    (or (char=? char #\\a)\n        (char=? char #\\e)\n        (char=? char #\\i)\n        (char=? char #\\o)\n        (char=? char #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((string-empty? test_str) count)\n          ((and (is_vowel? (string-ref test_str 0))\n                (is_vowel? (string-ref test_str 1)))\n           (count_vowels_helper (substring test_str 1) (+ count 1)))\n          (else (count_vowels_helper (substring test_str 1) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((string-null? test_str) count)\n          ((and (is_vowel? (string-ref test_str 0))\n                (is_vowel? (string-ref test_str 1)))\n           (count_vowels_helper (substring test_str 1) (+ count 1)))\n          (else (count_vowels_helper (substring test_str 1) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (define (is_vowel? c)\n    (member c vowels))\n  (define (count_vowels_helper test_str count)\n    (cond\n      [(empty? test_str) count]\n      [(is_vowel? (first test_str))\n       (count_vowels_helper (rest test_str) (+ count 1))]\n      [(is_vowel? (second test_str))\n       (count_vowels_helper (rest test_str) (+ count 1))]\n      [else (count_vowels_helper (rest test_str) count)]))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_vowel_neighbor? c)\n    (and (not (is_vowel? c))\n         (or (is_vowel? (string-ref test_str (- (string-length test_str) 1)))\n             (is_vowel? (string-ref test_str 1)))))\n  (length (filter is_vowel_neighbor? (string->list test_str))))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (if (or (vowel? (string-ref test_str i))\n                (vowel? (string-ref test_str (+ i 1))))\n            (loop (+ i 1) (+ count 1))\n            (loop (+ i 1) count)))))\n",
    "  (define (count_vowels_iter test_str count)\n    (if (null? test_str)\n        count\n        (if (or (char=? (car test_str) #\\a)\n                (char=? (car test_str) #\\e)\n                (char=? (car test_str) #\\i)\n                (char=? (car test_str) #\\o)\n                (char=? (car test_str) #\\u))\n            (if (or (char=? (cadr test_str) #\\a)\n                    (char=? (cadr test_str) #\\e)\n                    (char=? (cadr test_str) #\\i)\n                    (char=? (cadr test_str) #\\o)\n                    (char=? (cadr test_str) #\\u))\n                (count_vowels_iter (cdr test_str) (+ count 1))\n                (count_vowels_iter (cdr test_str) count))\n            (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper str count)\n    (if (empty? str)\n        count\n        (if (and (is_vowel? (first str))\n                 (is_vowel? (second str)))\n            (count_vowels_helper (rest str) (+ count 1))\n            (count_vowels_helper (rest str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([c (in-string test_str)])\n      (if (and (char-alphabetic? c)\n               (member (char-downcase c) vowels)\n               (member (char-downcase (string-ref test_str (add1 (string-index test_str c)))) vowels))\n          (add1 count)\n          count))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_iter test_str count)\n    (if (null? test_str)\n        count\n        (if (is_vowel? (car test_str))\n            (count_vowels_iter (cdr test_str) (+ count 1))\n            (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_aux test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (is_vowel? (cadr test_str)))\n            (count_vowels_aux (cdr test_str) (+ count 1))\n            (count_vowels_aux (cdr test_str) count))))\n  (count_vowels_aux test_str 0))\n",
    "  (letrec ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n           [is_vowel? (lambda (c) (member c vowels))]\n           [is_neighbor_vowel? (lambda (c)\n                                 (or (is_vowel? (string-ref test_str (- c 1)))\n                                     (is_vowel? (string-ref test_str (+ c 1)))))]\n           [count (lambda (c)\n                    (if (is_neighbor_vowel? c)\n                        (+ 1 (count (+ c 1)))\n                        (count (+ c 1))))])\n    (count 0)))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (if (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (if (or (char=? (string-ref test_str (+ i 1)) #\\a)\n                      (char=? (string-ref test_str (+ i 1)) #\\e)\n                      (char=? (string-ref test_str (+ i 1)) #\\i)\n                      (char=? (string-ref test_str (+ i 1)) #\\o)\n                      (char=? (string-ref test_str (+ i 1)) #\\u))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count))\n              (loop (+ i 1) count))))))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (equal? (first test_str) #\\a)\n                (equal? (first test_str) #\\e)\n                (equal? (first test_str) #\\i)\n                (equal? (first test_str) #\\o)\n                (equal? (first test_str) #\\u))\n            (if (or (equal? (second test_str) #\\a)\n                    (equal? (second test_str) #\\e)\n                    (equal? (second test_str) #\\i)\n                    (equal? (second test_str) #\\o)\n                    (equal? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (and (is_vowel? (first test_str))\n                 (is_vowel? (second test_str)))\n            (count_vowels_helper (rest test_str) (+ count 1))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (for/fold ([count 0]) ([c (in-string test_str)])\n      (if (or (member (char-downcase c) vowels)\n              (member (char-upcase c) vowels))\n          (add1 count)\n          count))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (sub1 (string-length test_str)))])\n      (if (and (member (string-ref test_str i) vowels)\n               (member (string-ref test_str (add1 i)) vowels))\n          (add1 count)\n          count))))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (and (member (string-ref test_str i) vowels)\n               (or (member (string-ref test_str (sub1 i)) vowels)\n                   (member (string-ref test_str (add1 i)) vowels)))\n          (add1 count)\n          count))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (is_vowel? (cadr test_str)))\n            (count-vowels-helper (cdr test_str) (+ count 1))\n            (count-vowels-helper (cdr test_str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([test_str (string-&gt;list test_str)]\n               [count 0])\n      (cond [(empty? test_str) count]\n            [(member (car test_str) vowels)\n             (loop (cdr test_str) (+ count 1))]\n            [else (loop (cdr test_str) count)]))))\n</code>\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (for/fold ([count 0]) ([char (in-string test_str)])\n      (if (or (member (string-downcase char) vowels)\n              (member (string-upcase char) vowels))\n          (add1 count)\n          count))))\n",
    "  (let loop ([i 0] [count 0])\n    (cond [(= i (string-length test_str)) count]\n          [(or (char-vowel? (string-ref test_str i))\n               (char-vowel? (string-ref test_str (+ i 1))))\n           (loop (+ i 1) (+ count 1))]\n          [else (loop (+ i 1) count)])))\n",
    "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length test_str)) count]\n      [(or (char-vowel? (string-ref test_str i))\n           (char-vowel? (string-ref test_str (+ i 1))))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (if (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (if (or (char=? (string-ref test_str (+ i 1)) #\\a) (char=? (string-ref test_str (+ i 1)) #\\e) (char=? (string-ref test_str (+ i 1)) #\\i) (char=? (string-ref test_str (+ i 1)) #\\o) (char=? (string-ref test_str (+ i 1)) #\\u))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count))\n              (loop (+ i 1) count))))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str)) (is_vowel? (cadr test_str)))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (if (null? test_str)\n        count\n        (if (and (is_vowel? (car test_str))\n                 (or (is_vowel? (cadr test_str))\n                     (is_vowel? (caddr test_str))))\n            (count_vowels_helper (cdr test_str) (+ count 1))\n            (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (is_vowel? (cadr test_str)))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (if (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (if (or (char=? (string-ref test_str (- i 1)) #\\a) (char=? (string-ref test_str (- i 1)) #\\e) (char=? (string-ref test_str (- i 1)) #\\i) (char=? (string-ref test_str (- i 1)) #\\o) (char=? (string-ref test_str (- i 1)) #\\u))\n                  (loop (+ i 1) count)\n                  (loop (+ i 1) (+ count 1)))\n              (loop (+ i 1) count))))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper str count)\n    (if (empty? str)\n        count\n        (if (and (is_vowel? (first str))\n                 (is_vowel? (second str)))\n            (count_vowels_helper (rest str) (+ count 1))\n            (count_vowels_helper (rest str) count))))\n  (count_vowels_helper test_str 0))\n"
  ]
}