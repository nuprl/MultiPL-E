{
  "name": "mbpp_776_count_vowels",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count those characters which have vowels as their neighbors in the given string.\n(define (count_vowels test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_vowels))\n    (check-equal? (candidate \"bestinstareels\") 7)\n    (check-equal? (candidate \"partofthejourneyistheend\") 12)\n    (check-equal? (candidate \"amazonprime\") 5)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length test_str)) count]\n      [(or (vowel? (string-ref test_str i))\n           (vowel? (string-ref test_str (- i 1))))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
    "  (letrec ([vowels (string-&gt;list \"aeiou\")]\n           [is_vowel? (lambda (c) (member c vowels))]\n           [is_vowel_neighbor? (lambda (c) (or (is_vowel? (string-ref test_str (- c 1)))\n                                                (is_vowel? (string-ref test_str (+ c 1)))))]\n           [count-vowel-neighbors (lambda (c) (if (is_vowel_neighbor? c) 1 0))])\n    (apply + (map count-vowel-neighbors (range (string-length test_str))))))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (second test_str) #\\a)\n                    (char=? (second test_str) #\\e)\n                    (char=? (second test_str) #\\i)\n                    (char=? (second test_str) #\\o)\n                    (char=? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))\n        )\n    )\n  (count_vowels_helper test_str 0)\n  )\n",
    "  (let ((count 0))\n    (for ([i (in-range (string-length test_str))])\n      (let ((c (string-ref test_str i)))\n        (cond\n         ((and (vowel? c) (vowel? (string-ref test_str (add1 i)))) (set! count (add1 count)))\n         ((and (vowel? c) (vowel? (string-ref test_str (sub1 i)))) (set! count (add1 count))))))\n    count))\n",
    "  (letrec ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n           [is_vowel? (lambda (c) (member c vowels))]\n           [count_vowels_aux (lambda (str)\n                               (cond [(empty? str) 0]\n                                     [(is_vowel? (first str))\n                                      (+ 1 (count_vowels_aux (rest str)))]\n                                     [(is_vowel? (second str))\n                                      (+ 1 (count_vowels_aux (rest str)))]\n                                     [else (count_vowels_aux (rest str))]))])\n    (count_vowels_aux test_str)))\n",
    "  (letrec ([vowels (string-&gt;list \"aeiou\")]\n           [is_vowel? (lambda (ch) (member ch vowels))]\n           [is_neighbor? (lambda (ch1 ch2)\n                           (and (is_vowel? ch1) (is_vowel? ch2)))]\n           [count_vowels_helper (lambda (str)\n                                  (if (empty? str)\n                                      0\n                                      (+ (if (is_neighbor? (first str) (second str))\n                                             1\n                                             0)\n                                         (count_vowels_helper (rest str))))])\n    (count_vowels_helper (string-&gt;list test_str))))\n</code>\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([ch (in-string test_str)])\n      (if (or (member ch vowels)\n              (member (string-ref test_str (- (string-length test_str) (string-length ch))) vowels))\n          (+ count 1)\n          count))))\n",
    "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length test_str)) count]\n      [(or (vowel? (string-ref test_str i))\n           (vowel? (string-ref test_str (- i 1))))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (string-length test_str))\n        count\n        (let ([c (string-ref test_str i)])\n          (cond\n            [(member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n             (if (member (string-ref test_str (+ i 1)) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n                 (loop (+ i 1) (+ count 1))\n                 (loop (+ i 1) count))]\n            [else (loop (+ i 1) count)])))))\n",
    "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i (string-length test_str)) count]\n        [(member (string-ref test_str i) vowels)\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (letrec ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n           [is-vowel (lambda (ch) (member ch vowels))]\n           [count-vowels (lambda (str)\n                           (cond [(empty? str) 0]\n                                 [(is-vowel (first str))\n                                  (+ 1 (count-vowels (rest str)))]\n                                 [(is-vowel (second str))\n                                  (+ 1 (count-vowels (rest str)))]\n                                 [else (count-vowels (rest str))]))])\n    (count-vowels test_str)))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (and (char-set=? (char-set-contains? vowels (string-ref test_str i)) #t)\n               (char-set=? (char-set-contains? vowels (string-ref test_str (+ i 1))) #t))\n          (+ count 1)\n          count))))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (second test_str) #\\a)\n                    (char=? (second test_str) #\\e)\n                    (char=? (second test_str) #\\i)\n                    (char=? (second test_str) #\\o)\n                    (char=? (second test_str) #\\u))\n                (count_vowels_helper (rest (rest test_str)) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str))\n                (or (is_vowel? (cadr test_str))\n                    (is_vowel? (caddr test_str))))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count_vowels_helper test_str count)\n    (cond ((null? test_str) count)\n          ((and (is_vowel? (car test_str)) (is_vowel? (cadr test_str)))\n           (count_vowels_helper (cdr test_str) (+ count 1)))\n          (else (count_vowels_helper (cdr test_str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels-helper str count)\n    (cond ((null? str) count)\n          ((and (is_vowel? (car str))\n                (or (is_vowel? (cadr str))\n                    (is_vowel? (caddr str))))\n           (count-vowels-helper (cdr str) (+ count 1)))\n          (else (count-vowels-helper (cdr str) count))))\n  (count-vowels-helper test_str 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_vowels_helper str count)\n    (if (null? str)\n        count\n        (if (and (is_vowel? (car str))\n                 (is_vowel? (cadr str)))\n            (count_vowels_helper (cdr str) (+ count 1))\n            (count_vowels_helper (cdr str) count))))\n  (count_vowels_helper test_str 0))\n",
    "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (for/fold ([count 0]) ([i (in-range (string-length test_str))])\n      (if (member (string-ref test_str i) vowels)\n          (if (member (string-ref test_str (add1 i)) vowels)\n              (add1 count)\n              count)\n          count))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels_iter test_str count)\n    (if (null? test_str)\n        count\n        (if (is_vowel? (car test_str))\n            (count_vowels_iter (cdr test_str) (+ count 1))\n            (count_vowels_iter (cdr test_str) count))))\n  (count_vowels_iter test_str 0))\n",
    "  (define (count_vowels_helper test_str count)\n    (if (empty? test_str)\n        count\n        (if (or (char=? (first test_str) #\\a)\n                (char=? (first test_str) #\\e)\n                (char=? (first test_str) #\\i)\n                (char=? (first test_str) #\\o)\n                (char=? (first test_str) #\\u))\n            (if (or (char=? (first (rest test_str)) #\\a)\n                    (char=? (first (rest test_str)) #\\e)\n                    (char=? (first (rest test_str)) #\\i)\n                    (char=? (first (rest test_str)) #\\o)\n                    (char=? (first (rest test_str)) #\\u))\n                (count_vowels_helper (rest test_str) (+ count 1))\n                (count_vowels_helper (rest test_str) count))\n            (count_vowels_helper (rest test_str) count))))\n  (count_vowels_helper test_str 0))\n"
  ]
}