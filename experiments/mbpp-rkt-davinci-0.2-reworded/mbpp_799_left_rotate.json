{
  "name": "mbpp_799_left_rotate",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n(define (left_rotate n d)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate left_rotate))\n    (check-equal? (candidate 16 2) 64)\n    (check-equal? (candidate 10 2) 40)\n    (check-equal? (candidate 99 3) 792)\n    (check-equal? (candidate 99 3) 792)\n    (check-equal? (candidate 1 3) 8)\n    (check-equal? (candidate 5 3) 40)\n    (check-equal? (candidate 29 3) 232)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([mask (bitwise-ior #b11111111111111111111111111111111\n                           (bitwise-arithmetic-shift-left #b11111111111111111111111111111111 d))])\n    (bitwise-arithmetic-shift-right (bitwise-ior (bitwise-arithmetic-shift-left n d) mask) d)))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (define (left_rotate_helper n d acc)\n    (if (= d 0)\n        acc\n        (left_rotate_helper (bitwise-arithmetic-shift n -1) (- d 1) (bitwise-arithmetic-shift acc -1))))\n  (left_rotate_helper n d 0))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (define (left-rotate-helper n d acc)\n    (if (zero? d)\n        acc\n        (left-rotate-helper (bitwise-arithmetic-shift n -1) (- d 1) (bitwise-arithmetic-shift acc 1))))\n  (left-rotate-helper n d 0))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (define (left_rotate_helper n d)\n    (if (zero? d)\n        n\n        (left_rotate_helper (bitwise-arithmetic-shift n -1) (- d 1))))\n  (left_rotate_helper n d))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (logand (logior (lsh n d) (lsh n (- 32 d))) #xFFFFFFFF))\n",
    "  (let ([mask (bitwise-and (bitwise-not 0) (bitwise-not (bitwise-shift-left -1 d)))])\n    (bitwise-or (bitwise-shift-left n d) (bitwise-and n mask))))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (define (left_rotate_helper n d acc)\n    (if (= d 0)\n        acc\n        (left_rotate_helper (bitwise-arithmetic-shift n -1) (- d 1) (bitwise-arithmetic-shift acc 1))))\n  (left_rotate_helper n d 0))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (define (left_rotate_helper n d)\n    (cond\n      [(= d 0) n]\n      [else (left_rotate_helper (bitwise-arithmetic-shift n -1) (- d 1))]))\n  (bitwise-arithmetic-shift (left_rotate_helper n d) d))\n"
  ]
}