{
  "name": "mbpp_245_max_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n(define (max_sum arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum))\n    (check-equal? (candidate (list 1 15 51 45 33 100 12 18 9)) 194)\n    (check-equal? (candidate (list 80 60 30 40 20 10)) 210)\n    (check-equal? (candidate (list 2 3 14 16 21 23 29 30)) 138)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (max_sum_helper arr max_sum_so_far)\n    (cond [(empty? arr) max_sum_so_far]\n          [(= (length arr) 1) (max max_sum_so_far (first arr))]\n          [else\n           (let ([first (first arr)]\n                 [second (second arr)])\n             (cond [(> first second) (max_sum_helper (rest arr) (max max_sum_so_far first))]\n                   [else (max_sum_helper (rest arr) (max max_sum_so_far (+ first second)))]))]))\n  (max_sum_helper arr 0))\n",
    "  (define (max-sum-helper arr max-sum-so-far)\n    (if (null? arr)\n        max-sum-so-far\n        (let ((max-sum-so-far (if (&gt; (car arr) max-sum-so-far)\n                                  (car arr)\n                                  max-sum-so-far)))\n          (max-sum-helper (cdr arr) max-sum-so-far))))\n  (max-sum-helper arr 0))\n",
    "  (define (max_sum_helper arr max_sum)\n    (cond\n      [(empty? arr) max_sum]\n      [(empty? (cdr arr)) (+ (car arr) max_sum)]\n      [(> (car arr) (cadr arr)) (max_sum_helper (cdr arr) (+ (car arr) max_sum))]\n      [else (max_sum_helper (cdr arr) max_sum)]))\n  (max_sum_helper arr 0))\n",
    "  (define (max_sum_helper arr max_sum)\n    (cond\n      [(empty? arr) max_sum]\n      [(= (length arr) 1) (max max_sum (first arr))]\n      [(= (length arr) 2) (max max_sum (+ (first arr) (second arr)))]\n      [else\n       (let ([first (first arr)]\n             [second (second arr)]\n             [third (third arr)])\n         (cond\n           [(> first second) (max_sum_helper (rest arr) (max max_sum first))]\n           [(> second third) (max_sum_helper (rest arr) (max max_sum (+ first second)))]\n           [else (max_sum_helper (rest arr) (max max_sum (+ first second third)))]))]))\n  (max_sum_helper arr 0))\n",
    "  (define (max_sum_helper arr max_sum_so_far)\n    (if (null? arr)\n        max_sum_so_far\n        (let* ([max_sum_so_far (max max_sum_so_far (apply + arr))]\n               [arr (cdr arr)])\n          (max_sum_helper arr max_sum_so_far))))\n  (max_sum_helper arr 0))\n",
    "  (define (max_sum_helper arr max_sum_so_far)\n    (if (null? arr)\n        max_sum_so_far\n        (let* ([first (car arr)]\n               [rest (cdr arr)]\n               [max_sum_so_far (if (&gt; first max_sum_so_far) first max_sum_so_far)])\n          (max_sum_helper rest max_sum_so_far))))\n  (max_sum_helper arr 0))\n",
    "  (define (max_sum_helper arr max_sum_so_far)\n    (cond\n      [(empty? arr) max_sum_so_far]\n      [(= (length arr) 1) (max max_sum_so_far (first arr))]\n      [(= (length arr) 2) (max max_sum_so_far (+ (first arr) (second arr)))]\n      [else\n       (let* ([first (first arr)]\n              [second (second arr)]\n              [third (third arr)])\n         (cond\n           [(> first second) (max_sum_helper (rest arr) (max max_sum_so_far first))]\n           [(> second third) (max_sum_helper (rest arr) (max max_sum_so_far (+ first second)))]\n           [else (max_sum_helper (rest arr) (max max_sum_so_far (+ first second third)))]))]))\n  (max_sum_helper arr 0))\n",
    "  (define (max_sum_aux arr max_sum)\n    (cond\n      [(empty? arr) max_sum]\n      [(< (first arr) (second arr)) (max_sum_aux (rest arr) (+ max_sum (first arr)))]\n      [(> (first arr) (second arr)) (max_sum_aux (rest arr) (+ max_sum (first arr)))]\n      [else (max_sum_aux (rest arr) max_sum)]))\n  (max_sum_aux arr 0))\n",
    "  (define (max_sum_aux arr max_sum)\n    (cond [(empty? arr) max_sum]\n          [(= (length arr) 1) (max max_sum (first arr))]\n          [else (max_sum_aux (rest arr) (max max_sum (+ (first arr) (max_sum_aux (rest arr) 0))))]))\n  (max_sum_aux arr 0))\n",
    "  (define (max_sum_iter arr max_sum)\n    (cond\n      [(empty? arr) max_sum]\n      [(< (first arr) (second arr)) (max_sum_iter (rest arr) (+ max_sum (first arr)))]\n      [else (max_sum_iter (rest arr) max_sum)]))\n  (max_sum_iter arr 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [acc 0])\n    (if (&lt; i j)\n        (let ([a (list-ref arr i)]\n              [b (list-ref arr j)])\n          (if (&gt; a b)\n              (loop (add1 i) (sub1 j) (max acc (+ a b)))\n              (loop (add1 i) j acc)))\n        acc)))\n</code>\n",
    "  (define (max_sum_helper arr max_sum_so_far)\n    (if (null? arr)\n        max_sum_so_far\n        (let ([max_sum_so_far (max max_sum_so_far (apply + arr))])\n          (max_sum_helper (cdr arr) max_sum_so_far))))\n  (max_sum_helper arr 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [max 0])\n    (if (&lt; i j)\n        (let ([sum (apply + (sublist arr i j))])\n          (if (&gt; sum max)\n              (loop i (add1 j) sum)\n              (loop i (add1 j) max)))\n        max)))\n",
    "  (define (max_sum_helper arr max-sum)\n    (cond\n      [(empty? arr) max-sum]\n      [else\n       (let* ([first (first arr)]\n              [rest (rest arr)]\n              [max-sum (max max-sum first)])\n         (max_sum_helper rest max-sum))]))\n  (max_sum_helper arr 0))\n",
    "  (let loop ((arr arr)\n             (max-sum 0)\n             (max-sum-left 0)\n             (max-sum-right 0)\n             (max-sum-left-right 0))\n    (if (null? arr)\n        max-sum\n        (let ((max-sum-left-right (if (&gt; (car arr) max-sum-left-right)\n                                     (car arr)\n                                     max-sum-left-right)))\n          (let ((max-sum-left (if (&gt; (car arr) max-sum-left)\n                                 (+ max-sum-left-right (car arr))\n                                 max-sum-left)))\n            (let ((max-sum-right (if (&lt; (car arr) max-sum-right)\n                                    (+ max-sum-left-right (car arr))\n                                    max-sum-right)))\n              (let ((max-sum (if (&gt; (+ max-sum-left max-sum-right) max-sum)\n                                (+ max-sum-left max-sum-right)\n                                max-sum)))\n                (loop (cdr arr)\n                      max-sum\n                      max-sum-left\n                      max-sum-right\n                      max-sum-left-right)))))))))\n</code>\n",
    "  (define (max_sum_helper arr sum)\n    (if (null? arr)\n        sum\n        (let* ([first (car arr)]\n               [rest (cdr arr)]\n               [next (car rest)])\n          (if (and (not (null? next))\n                   (< first next))\n              (max_sum_helper rest (+ sum first))\n              (max_sum_helper rest sum)))))\n  (max_sum_helper arr 0))\n",
    "  (define (max_sum_helper arr max_sum)\n    (cond\n      [(empty? arr) max_sum]\n      [(< (first arr) (second arr))\n       (max_sum_helper (rest arr) (+ (first arr) max_sum))]\n      [else\n       (max_sum_helper (rest arr) max_sum)]))\n  (max_sum_helper arr 0))\n",
    "  (define (max_sum_helper arr max_sum_so_far)\n    (cond [(empty? arr) max_sum_so_far]\n          [(= (length arr) 1) (max max_sum_so_far (first arr))]\n          [else (max_sum_helper (rest arr) (max max_sum_so_far (+ (first arr) (first (rest arr)) (first (rest (rest arr))))))]))\n  (max_sum_helper arr 0))\n",
    "  (define (max_sum_helper arr i j)\n    (cond\n      [(= i j) 0]\n      [(= i (+ j 1)) (list-ref arr i)]\n      [else\n       (let ([a (max_sum_helper arr i (- j 1))]\n             [b (max_sum_helper arr (- i 1) j)])\n         (if (&gt; (list-ref arr i) (list-ref arr (- j 1)))\n             (+ a (list-ref arr j))\n             b))]))\n  (max_sum_helper arr 0 (- (length arr) 1)))\n",
    "  (define (max-sum-helper arr left-sum right-sum)\n    (cond\n      [(empty? arr) (max left-sum right-sum)]\n      [(empty? (rest arr)) (max left-sum right-sum)]\n      [(> (first arr) (second arr)) (max-sum-helper (rest arr) (+ left-sum (first arr)) right-sum)]\n      [else (max-sum-helper (rest arr) left-sum (+ right-sum (first arr)))]))\n  (max-sum-helper arr 0 0))\n"
  ]
}