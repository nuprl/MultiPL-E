{
  "name": "mbpp_267_square_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n(define (square_Sum n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_Sum))\n    (check-equal? (candidate 2) 10)\n    (check-equal? (candidate 3) 35)\n    (check-equal? (candidate 4) 84)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (if (= n 1)\n      1\n      (+ (sum_of_squares n) (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (sum_of_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square x)\n    (* x x))\n  (define (odd? x)\n    (and (not (zero? x)) (not (even? x))))\n  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (sum_of_odd_squares n)\n    (if (= n 0)\n        0\n        (if (odd? n)\n            (+ (square n) (sum_of_odd_squares (- n 1)))\n            (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (+ n 1) 2) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 1)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (* n n) (square_Sum (- n 2)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* (square_Sum (- n 1)) (square_Sum (- n 1)))\n         (* (square_Sum (- n 1)) (square_Sum (- n 1)))\n         (* (square_Sum (- n 1)) (square_Sum (- n 1)))\n         (* (square_Sum (- n 1)) (square_Sum (- n 1))))))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   1\n</code>\nI am not sure what I am doing wrong.\n\n\nA:\n\nYou can't use <code>square_Sum</code> as a function in the body of <code>square_Sum</code>.  You need to use <code>square_Sum</code> as a name for the function you're defining.  You can use <code>square_Sum</code> as a function in the body of <code>square_Sum</code> only after you've defined <code>square_Sum</code>.  This is a common problem with recursive functions.\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (expt n 2) (sum_of_squares (- n 1)))))\n  (define (odd n)\n    (if (= n 1)\n        1\n        (+ 2 (odd (- n 1)))))\n  (sum_of_squares (odd n)))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (2*n-1) 2) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_helper (- n 1) (+ sum (* n n)))))\n  (square_Sum_helper n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* (2*n-1) (2*n-1)) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= 1 (modulo x 2)))\n  (define (sum-of-squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum-of-squares (- n 1)))))\n  (define (sum-of-odd-squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum-of-odd-squares (- n 2)))))\n  (if (odd? n)\n      (sum-of-odd-squares n)\n      (sum-of-squares n)))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (- (* n 2) 1) 2) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [(= (remainder n 2) 1) (square_Sum_helper (- n 1) (+ sum (* n n)))]\n      [else (square_Sum_helper (- n 1) sum)]))\n  (square_Sum_helper n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (* n n) (square_Sum (- n 2)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum_of_squares x)\n    (if (= x 0)\n        0\n        (+ (square x) (sum_of_squares (- x 1)))))\n  (define (odd_numbers x)\n    (if (= x 0)\n        0\n        (+ x (odd_numbers (- x 2)))))\n  (sum_of_squares (odd_numbers n)))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square x)\n    (* x x))\n  (define (sum_odd n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_odd (- n 2)))))\n  (sum_odd n))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (if (= n 1)\n      1\n      (+ (sum_of_squares n) (square_Sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (expt n 2) (sum_of_squares (- n 1)))))\n  (define (odd? n)\n    (if (= n 0)\n        #f\n        (if (= (modulo n 2) 1)\n            #t\n            (odd? (- n 1)))))\n  (if (odd? n)\n      (sum_of_squares n)\n      (square_Sum (- n 1))))\n",
    "  (define (square_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (square_Sum_iter (- n 1) (+ sum (* 2 n -1) (* 2 n -1)))]))\n  (square_Sum_iter n 0))\n",
    "  (define (square x)\n    (* x x))\n  (define (odd? x)\n    (and (not (zero? x))\n         (not (zero? (remainder x 2)))))\n  (define (sum_of_squares n)\n    (if (zero? n)\n        0\n        (+ (square n)\n           (sum_of_squares (- n 1)))))\n  (define (sum_of_odd_squares n)\n    (if (zero? n)\n        0\n        (+ (square n)\n           (sum_of_odd_squares (- n 2)))))\n  (if (odd? n)\n      (sum_of_odd_squares n)\n      (sum_of_squares n)))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_helper (- n 1) (+ sum (* n n)))))\n  (square_Sum_helper n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_helper n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 0) (square_Sum_helper (- n 1) sum))\n          (else (square_Sum_helper (- n 1) (+ sum (* n n))))))\n  (square_Sum_helper n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (add1 (* 2 (sub1 n))))\n         (square_Sum (sub1 n)))))\n",
    "  (if (= n 1)\n      1\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_helper n sum)\n    (cond ((= n 0) sum)\n          (else (square_Sum_helper (- n 1) (+ sum (* n n))))))\n  (square_Sum_helper n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= (remainder n 2) 1)\n        true\n        false))\n  (define (odd_sum n)\n    (if (= n 1)\n        1\n        (+ (sum_of_squares n) (odd_sum (- n 1)))))\n  (if (odd? n)\n      (odd_sum n)\n      (odd_sum (- n 1))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (sum_of_squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (sum_of_squares n))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 1)\n            #t\n            #f)))\n  (define (odd_numbers n)\n    (if (= n 1)\n        1\n        (if (odd? n)\n            (+ n (odd_numbers (- n 1)))\n            (odd_numbers (- n 1)))))\n  (sum_of_squares (odd_numbers n)))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter sum i)\n    (if (= i n)\n        sum\n        (square_Sum_iter (+ sum (* i i)) (+ i 1))))\n  (square_Sum_iter 0 1))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n)\n         (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (= (remainder n 2) 1))\n  (define (sum_of_odds n)\n    (if (= n 1)\n        1\n        (+ (if (odd? n) n 0) (sum_of_odds (- n 1)))))\n  (sum_of_squares (sum_of_odds n)))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (if (= n 1)\n      1\n      (+ (sum_of_squares n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (- n 1) 2)\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_helper (- n 1) (+ sum (* n n)))))\n  (square_Sum_helper n 0))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square x)\n    (* x x))\n  (define (sum_of_squares x)\n    (if (= x 1)\n        (square x)\n        (+ (square x) (sum_of_squares (- x 1)))))\n  (sum_of_squares n))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square x) (* x x))\n  (define (sum_odd_squares n)\n    (if (= n 0)\n        0\n        (+ (square (+ n 1)) (sum_odd_squares (- n 2)))))\n  (sum_odd_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (* (2*n-1) (2*n-1)) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (sum_of_squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (expt n 2) (sum_of_squares (- n 1)))))\n  (define (odd_sum n)\n    (if (= n 0)\n        0\n        (+ (sum_of_squares n) (odd_sum (- n 1)))))\n  (odd_sum n))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum_of_odd_squares n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          (else (+ (square (car (filter odd? (range 1 n))))\n                   (sum_of_odd_squares (- n 1))))))\n  (sum_of_odd_squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum-of-squares n)\n    (cond ((= n 1) (square 1))\n          ((= n 2) (+ (square 1) (square 3)))\n          (else (+ (square n) (sum-of-squares (- n 2))))))\n  (sum-of-squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square n)\n    (* n n))\n  (define (sum_of_squares n)\n    (if (= n 1)\n        (square 1)\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (sum_of_squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n n) (square_Sum (- n 2)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 0) (square_Sum_iter (- n 1) sum))\n          (else (square_Sum_iter (- n 1) (+ sum (* n n))))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (- n 1) 2) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (if (= n 1)\n      1\n      (+ (square n) (sum_of_squares (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_helper (- n 1) (+ sum (* n n)))))\n  (square_Sum_helper n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_helper (- n 1) (+ sum (* n n)))))\n  (square_Sum_helper n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (sum_of_squares n))\n",
    "  (if (= n 1)\n      1\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (square_Sum_iter (- n 1) (+ sum (* n n)))]))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum-of-squares n)\n    (if (= n 1)\n        (square 1)\n        (+ (square n) (sum-of-squares (- n 1)))))\n  (define (sum-of-odd-squares n)\n    (if (= n 1)\n        (square 1)\n        (if (odd? n)\n            (+ (square n) (sum-of-odd-squares (- n 1)))\n            (sum-of-odd-squares (- n 1)))))\n  (sum-of-odd-squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (sum_of_squares n))\n",
    "  (define (square_Sum_iter sum i)\n    (cond ((= i n) sum)\n          (else (square_Sum_iter (+ sum (* i i)) (+ i 1)))))\n  (square_Sum_iter 0 1))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square x)\n    (* x x))\n  (define (sum_odds n)\n    (if (= n 0)\n        0\n        (+ (square (+ n 1))\n           (sum_odds (- n 2)))))\n  (sum_odds n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n"
  ]
}