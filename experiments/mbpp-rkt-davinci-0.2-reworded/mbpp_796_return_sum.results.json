{
  "name": "mbpp_796_return_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([sum 0]\n           [iter (lambda (key value)\n                   (set! sum (+ sum value))\n                   (hash-for-each iter dict))])\n    (hash-for-each iter dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0115rc54.rkt:17:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:iter>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0115rc54.rkt:18:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:iter>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0115rc54.rkt:19:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:iter>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (key value)\n                     (set! sum (+ sum value)))\n                   dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppxduyifc.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmppxduyifc.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppxduyifc.rkt:17:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmppxduyifc.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppxduyifc.rkt:18:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmppxduyifc.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(key value) dict])\n      (set! sum (+ sum value)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each\n     (lambda (k v)\n       (set! sum (+ sum v)))\n     dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8iczg63.rkt:17:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpx8iczg63.rkt:7:5>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8iczg63.rkt:18:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpx8iczg63.rkt:7:5>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8iczg63.rkt:19:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpx8iczg63.rkt:7:5>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([sum 0]\n           [iterate (lambda (key value)\n                      (set! sum (+ sum value))\n                      (hash-for-each iterate dict))])\n    (hash-for-each iterate dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpymbgnfup.rkt:17:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:iterate>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpymbgnfup.rkt:18:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:iterate>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpymbgnfup.rkt:19:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:iterate>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ((sum 0))\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mfgdo9r.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp7mfgdo9r.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mfgdo9r.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp7mfgdo9r.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mfgdo9r.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp7mfgdo9r.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v)\n                (set! sum (+ sum v)))\n              dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9thgzgkx.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp9thgzgkx.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9thgzgkx.rkt:17:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp9thgzgkx.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9thgzgkx.rkt:18:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp9thgzgkx.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([helper (lambda (dict)\n                     (if (null? dict)\n                         0\n                         (+ (cdr (car dict))\n                            (helper (cdr dict)))))]\n           [result (helper dict)])\n    result))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wguwqux.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wguwqux.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wguwqux.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (if (empty? dict)\n        sum\n        (iter (rest dict) (+ sum (first dict)))))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ([dict dict] [sum 0])\n    (if (empty? dict)\n        sum\n        (loop (rest dict) (+ sum (first dict))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5c460sy.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5c460sy.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5c460sy.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (foldl + 0 (hash-values dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (if (empty? dict)\n        sum\n        (iter (rest dict) (+ sum (first dict)))))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ((sum 0))\n    (for ([(key val) dict])\n      (set! sum (+ sum val)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (key value) (set! sum (+ sum value))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5rbrjcd_.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp5rbrjcd_.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5rbrjcd_.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp5rbrjcd_.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5rbrjcd_.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp5rbrjcd_.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ((dict dict) (sum 0))\n    (if (empty? dict)\n        sum\n        (loop (rest dict) (+ (second dict) sum)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyklrzsf9.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyklrzsf9.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyklrzsf9.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([sum 0]\n           [iter (lambda (dict)\n                   (cond [(empty? dict) sum]\n                         [else (begin (set! sum (+ sum (hash-ref dict (hash-key dict))))\n                                     (iter (hash-rest dict)))]))])\n    (iter dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "/tmp/tmpdb0naukt.rkt:8:71: hash-key: unbound identifier\n  in: hash-key\n  location...:\n   /tmp/tmpdb0naukt.rkt:8:71\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (iter (rest dict) (+ sum (hash-ref dict (first dict))))]))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphovoayxu.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphovoayxu.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphovoayxu.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(key value) dict])\n      (set! sum (+ sum value)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (sum_helper dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (sum_helper (rest dict) (+ sum (hash-ref dict (first dict))))]))\n  (sum_helper dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp237ee6gz.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp237ee6gz.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp237ee6gz.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(key val) dict])\n      (set! sum (+ sum val)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (iter (rest dict) (+ sum (hash-ref dict (first dict))))]))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphovoayxu.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphovoayxu.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphovoayxu.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (sum-helper dict acc)\n    (cond\n      [(empty? dict) acc]\n      [else (sum-helper (rest dict) (+ (second dict) acc))]))\n  (sum-helper dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpof2ha4a0.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpof2ha4a0.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpof2ha4a0.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (apply + (hash-values dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([sum 0]\n           [loop (lambda (dict)\n                   (cond [(empty? dict) sum]\n                         [else (set! sum (+ sum (hash-ref dict (hash-key dict))))\n                               (loop (hash-remove dict (hash-key dict)))]))])\n    (loop dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "/tmp/tmpkd6w1w4y.rkt:8:64: hash-key: unbound identifier\n  in: hash-key\n  location...:\n   /tmp/tmpkd6w1w4y.rkt:8:64\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (key val)\n                (set! sum (+ sum val)))\n              dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqvvg_4h.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpvqvvg_4h.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqvvg_4h.rkt:17:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpvqvvg_4h.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqvvg_4h.rkt:18:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpvqvvg_4h.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (iter (rest dict) (+ (second dict) sum))]))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqjgweow.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqjgweow.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqjgweow.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (key value)\n                (set! sum (+ sum value)))\n              dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ggtsc5v.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp1ggtsc5v.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ggtsc5v.rkt:17:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp1ggtsc5v.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ggtsc5v.rkt:18:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp1ggtsc5v.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([sum 0])\n    (for ([(key value) dict])\n      (set! sum (+ sum value)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (iter (rest dict) (+ (second dict) sum))]))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqjgweow.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqjgweow.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqjgweow.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ([dict dict] [sum 0])\n    (cond [(empty? dict) sum]\n          [else (loop (rest dict) (+ (second dict) sum))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw62bfte1.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw62bfte1.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw62bfte1.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (key value) (set! sum (+ sum value))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5rbrjcd_.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp5rbrjcd_.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5rbrjcd_.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp5rbrjcd_.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5rbrjcd_.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp5rbrjcd_.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (iter (rest dict) (+ (second dict) sum))]))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqjgweow.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqjgweow.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqjgweow.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([sum 0]\n           [helper (lambda (key value)\n                     (set! sum (+ sum value)))])\n    (hash-for-each helper dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qmxfnni.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:helper>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qmxfnni.rkt:17:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:helper>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qmxfnni.rkt:18:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:helper>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter sum key)\n    (cond\n      [(empty? dict) sum]\n      [else (iter (+ sum (hash-ref dict key)) (hash-next dict key))]))\n  (iter 0 (hash-first dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "/tmp/tmpx4ooji0p.rkt:8:47: hash-next: unbound identifier\n  in: hash-next\n  location...:\n   /tmp/tmpx4ooji0p.rkt:8:47\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (cond\n    [(empty? dict) 0]\n    [else (+ (hash-ref dict (hash-key (first dict))) (return_sum (rest dict)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "/tmp/tmpiskq3_ii.rkt:7:29: hash-key: unbound identifier\n  in: hash-key\n  location...:\n   /tmp/tmpiskq3_ii.rkt:7:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(key value) dict])\n      (set! sum (+ sum value)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ([dict dict] [sum 0])\n    (if (empty? dict)\n        sum\n        (loop (rest dict) (+ sum (first dict))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5c460sy.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5c460sy.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5c460sy.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([helper (lambda (dict)\n                     (cond [(empty? dict) 0]\n                           [else (+ (hash-ref dict (hash-key (car dict)))\n                                    (helper (cdr dict)))]))])\n    (helper dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "/tmp/tmpacrbdpro.rkt:7:52: hash-key: unbound identifier\n  in: hash-key\n  location...:\n   /tmp/tmpacrbdpro.rkt:7:52\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (key value) (set! sum (+ sum value))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5rbrjcd_.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp5rbrjcd_.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5rbrjcd_.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp5rbrjcd_.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5rbrjcd_.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp5rbrjcd_.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (if (empty? dict)\n        sum\n        (iter (rest dict) (+ sum (first dict)))))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ((dict dict) (sum 0))\n    (cond\n      [(empty? dict) sum]\n      [else (loop (cdr dict) (+ sum (car dict)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi6aml77t.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi6aml77t.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi6aml77t.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (sum-helper dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (sum-helper (rest dict) (+ sum (hash-ref dict (first dict))))]))\n  (sum-helper dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl4gmtow_.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl4gmtow_.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl4gmtow_.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ([dict dict] [sum 0])\n    (cond\n      [(empty? dict) sum]\n      [else (loop (rest dict) (+ sum (first dict)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2azbewe.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2azbewe.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2azbewe.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ([dict dict] [sum 0])\n    (cond [(empty? dict) sum]\n          [else (loop (rest dict) (+ sum (first dict)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26rlotit.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26rlotit.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp26rlotit.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([keys (hash-keys dict)])\n    (if (null? keys)\n        0\n        (+ (hash-ref dict (car keys))\n           (return_sum (hash-remove dict (car keys)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ((dict dict) (sum 0))\n    (if (empty? dict)\n        sum\n        (loop (rest dict) (+ (first dict) sum)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8nu263w.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8nu263w.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8nu263w.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ([dict dict] [sum 0])\n    (if (empty? dict)\n        sum\n        (loop (rest dict) (+ sum (first dict))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5c460sy.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5c460sy.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy5c460sy.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (sum-helper dict sum)\n    (cond [(empty? dict) sum]\n          [else (sum-helper (rest dict) (+ (second dict) sum))]))\n  (sum-helper dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpush07i73.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpush07i73.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpush07i73.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (iter (rest dict) (+ sum (hash-ref dict (first dict))))]))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphovoayxu.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphovoayxu.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphovoayxu.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ([dict dict] [sum 0])\n    (cond\n      [(empty? dict) sum]\n      [else (loop (rest dict) (+ sum (hash-ref dict (first dict))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp65qn5oy.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp65qn5oy.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp65qn5oy.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ((dict dict) (sum 0))\n    (if (empty? dict)\n        sum\n        (loop (rest dict) (+ sum (first dict))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk8h_nhy.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk8h_nhy.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk8h_nhy.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) (in-hash dict)])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ([dict dict] [sum 0])\n    (cond [(empty? dict) sum]\n          [else (loop (rest dict) (+ sum (hash-ref (first dict) 'value)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjzuo8jew.rkt:14:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjzuo8jew.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjzuo8jew.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([helper (lambda (dict)\n                     (cond [(empty? dict) 0]\n                           [else (+ (hash-ref dict (hash-key (first dict)))\n                                    (helper (rest dict)))]))])\n    (helper dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "/tmp/tmpos6k1fsj.rkt:7:52: hash-key: unbound identifier\n  in: hash-key\n  location...:\n   /tmp/tmpos6k1fsj.rkt:7:52\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (cond\n    [(empty? dict) 0]\n    [else (+ (hash-ref dict (hash-key (first dict)))\n             (return_sum (hash-remove dict (hash-key (first dict)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "/tmp/tmphk9d611f.rkt:7:29: hash-key: unbound identifier\n  in: hash-key\n  location...:\n   /tmp/tmphk9d611f.rkt:7:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ((dict dict) (sum 0))\n    (cond ((null? dict) sum)\n          (else (loop (cdr dict) (+ sum (cdr (car dict))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe1oxwrrx.rkt:14:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe1oxwrrx.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe1oxwrrx.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (cond\n    [(empty? dict) 0]\n    [else (+ (hash-ref dict (hash-key (first dict))) (return_sum (rest dict)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "/tmp/tmpiskq3_ii.rkt:7:29: hash-key: unbound identifier\n  in: hash-key\n  location...:\n   /tmp/tmpiskq3_ii.rkt:7:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(key value) dict])\n      (set! sum (+ sum value)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (helper dict sum)\n    (if (empty? dict)\n        sum\n        (helper (rest dict) (+ sum (second (first dict))))))\n  (helper dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6xt5godn.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6xt5godn.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6xt5godn.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(key val) dict])\n      (set! sum (+ sum val)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(key val) dict])\n      (set! sum (+ sum val)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(key value) dict])\n      (set! sum (+ sum value)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (iter (rest dict) (+ (second (first dict)) sum))]))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7ar8rj9.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7ar8rj9.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp7ar8rj9.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (key value)\n                     (set! sum (+ sum value)))\n                   dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppxduyifc.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmppxduyifc.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppxduyifc.rkt:17:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmppxduyifc.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppxduyifc.rkt:18:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmppxduyifc.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter-sum dict acc)\n    (cond [(empty? dict) acc]\n          [else (iter-sum (rest dict) (+ (second dict) acc))]))\n  (iter-sum dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70xbekyq.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70xbekyq.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70xbekyq.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ([dict dict] [sum 0])\n    (cond\n      [(empty? dict) sum]\n      [else (loop (rest dict) (+ sum (first dict)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2azbewe.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2azbewe.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2azbewe.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (apply + (hash-values dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (foldl + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm13smgi5.rkt:12:4\n\nfoldl: contract violation\n  expected: list?\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n  argument position: 3rd\n  other arguments...:\n   #<procedure:+>\n   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm13smgi5.rkt:13:4\n\nfoldl: contract violation\n  expected: list?\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n  argument position: 3rd\n  other arguments...:\n   #<procedure:+>\n   0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm13smgi5.rkt:14:4\n\nfoldl: contract violation\n  expected: list?\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n  argument position: 3rd\n  other arguments...:\n   #<procedure:+>\n   0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ((dict dict) (sum 0))\n    (cond ((null? dict) sum)\n          (else (loop (cdr dict) (+ (car (cdr (car dict))) sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ha0pfw.rkt:14:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ha0pfw.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0ha0pfw.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (cond [(empty? dict) sum]\n          [else (iter (rest dict) (+ (second dict) sum))]))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7mg_twa.rkt:15:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7mg_twa.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe7mg_twa.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (letrec ([sum 0]\n           [iterate (lambda (dict)\n                      (cond [(empty? dict) sum]\n                            [else (begin (set! sum (+ sum (hash-ref dict (hash-key dict))))\n                                        (iterate (hash-rest dict)))]))])\n    (iterate dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "/tmp/tmp2iwk5l29.rkt:8:74: hash-key: unbound identifier\n  in: hash-key\n  location...:\n   /tmp/tmp2iwk5l29.rkt:8:74\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ((dict dict) (sum 0))\n    (cond ((null? dict) sum)\n          (else (loop (cdr dict) (+ (cadr dict) sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0znarnf.rkt:14:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0znarnf.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0znarnf.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (sum-helper dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (sum-helper (rest dict) (+ (second dict) sum))]))\n  (sum-helper dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkip7bk5m.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkip7bk5m.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkip7bk5m.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(key value) dict])\n      (set! sum (+ sum value)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map dict (lambda (k v) (set! sum (+ sum v))))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (iter dict sum)\n    (if (empty? dict)\n        sum\n        (iter (rest dict) (+ sum (first dict)))))\n  (iter dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpld7xzp59.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (sum-helper dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (sum-helper (rest dict) (+ sum (hash-ref dict (first dict))))]))\n  (sum-helper dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl4gmtow_.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl4gmtow_.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl4gmtow_.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define (sum-helper dict acc)\n    (cond\n      [(empty? dict) acc]\n      [else (sum-helper (rest dict) (+ acc (hash-ref (first dict) 'value)))]))\n  (sum-helper dict 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6stebhgl.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6stebhgl.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6stebhgl.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (hash-fold + 0 dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmpudxha14e.rkt:5:3: hash-fold: unbound identifier\n  in: hash-fold\n  location...:\n   /tmp/tmpudxha14e.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:14:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:15:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpztkh79xb.rkt:16:4\n\nhash-map: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpztkh79xb.rkt:6:14>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let loop ((dict dict) (sum 0))\n    (cond ((null? dict) sum)\n          (else (loop (cdr dict) (+ (cadr dict) sum))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0znarnf.rkt:14:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 100) (\"b\" . 200) (\"c\" . 300))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0znarnf.rkt:15:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 25) (\"b\" . 18) (\"c\" . 45))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk0znarnf.rkt:16:4\n\ncdr: contract violation\n  expected: pair?\n  given: '#hash((\"a\" . 36) (\"b\" . 39) (\"c\" . 49))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:14:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:15:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3y3dpdzv.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmp3y3dpdzv.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (hash-for-each (lambda (k v)\n                     (set! sum (+ sum v)))\n                   dict)\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoh8kjwb5.rkt:16:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpoh8kjwb5.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoh8kjwb5.rkt:17:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpoh8kjwb5.rkt:6:19>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoh8kjwb5.rkt:18:4\n\nhash-for-each: contract violation\n  expected: hash?\n  given: #<procedure:...tmp/tmpoh8kjwb5.rkt:6:19>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}