{
  "name": "mbpp_399_bitwise_xor",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to perform the mathematical bitwise xor operation across the given lists.\n(define (bitwise_xor test_tup1 test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bitwise_xor))\n    (check-equal? (candidate (list 10 4 6 9) (list 5 2 3 3)) (list 15 6 5 10))\n    (check-equal? (candidate (list 11 5 7 10) (list 6 3 4 4)) (list 13 6 3 14))\n    (check-equal? (candidate (list 12 6 8 11) (list 7 4 5 6)) (list 11 2 13 13))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                 (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (if (or (and (not x) y) (and x (not y))) 1 0)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (xor x y)) test_tup1 test_tup2))\n",
    "  (let ([tup1 (car test_tup1)]\n        [tup2 (car test_tup2)])\n    (cond [(and (not (null? tup1)) (not (null? tup2)))\n           (cons (xor (car tup1) (car tup2))\n                 (bitwise_xor (list (cdr tup1)) (list (cdr tup2))))]\n          [else '()])))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2)) (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (if (eq? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                 (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             #f\n             #t))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(null? test_tup1) test_tup2]\n    [(null? test_tup2) test_tup1]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y)\n         (if (and (not x) y)\n             1\n             (if (and x (not y))\n                 1\n                 0)))\n       test_tup1\n       test_tup2))\n</code>\nI'm not sure if I'm doing this right. I'm new to Racket.\n\n\nA:\n\nYou can use <code>bitwise-xor</code> from <code>#lang racket/base</code>:\n<code>(require racket/base)\n",
    "  (define (xor_helper tup1 tup2)\n    (if (null? tup1)\n        '()\n        (cons (bitwise-xor (car tup1) (car tup2))\n              (xor_helper (cdr tup1) (cdr tup2)))))\n  (xor_helper test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (eq? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (let ([tup1 (car test_tup1)]\n        [tup2 (car test_tup2)])\n    (if (or (null? tup1) (null? tup2))\n        '()\n        (cons (xor (car tup1) (car tup2))\n              (bitwise_xor (cdr test_tup1) (cdr test_tup2))))))\n",
    "  (apply bitwise-xor test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (or (and (eq? x #t) (eq? y #f))\n                 (and (eq? x #f) (eq? y #t)))\n             #t\n             #f))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond [(empty? test_tup1) test_tup2]\n        [(empty? test_tup2) test_tup1]\n        [else (cons (xor (first test_tup1) (first test_tup2))\n                    (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (first test_tup1) (first test_tup2))\n           (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (or (and (eq? x #f) (eq? y #f))\n                 (and (eq? x #t) (eq? y #t)))\n             #f\n             #t))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) '()]\n    [(empty? test_tup2) '()]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) '()]\n    [(empty? test_tup2) '()]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(and (null? test_tup1) (null? test_tup2)) '()]\n    [(or (null? test_tup1) (null? test_tup2)) (error \"Lists must be of equal length\")]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (if (null? test_tup1)\n      '()\n      (cons (xor (car test_tup1) (car test_tup2))\n            (bitwise_xor (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2)) (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (and (eq? x #f) (eq? y #f))\n             #f\n             (if (or (eq? x #f) (eq? y #f))\n                 #t\n                 #f)))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (logxor x y)) test_tup1 test_tup2))\n",
    "  (define (xor_helper tup1 tup2)\n    (cond\n      [(empty? tup1) tup2]\n      [(empty? tup2) tup1]\n      [(= (first tup1) (first tup2)) (cons 0 (xor_helper (rest tup1) (rest tup2)))]\n      [else (cons 1 (xor_helper (rest tup1) (rest tup2)))]))\n  (xor_helper test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) test_tup2]\n    [(empty? test_tup2) test_tup1]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (if (eq? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                 (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (if (eq? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                 (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) test_tup2]\n    [(empty? test_tup2) test_tup1]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (and (not x) (not y))\n             #f\n             (if (and x y)\n                 #f\n                 #t)))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y)\n         (if (and x y)\n             #f\n             (or x y)))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                 (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (and (not x) y)\n             1\n             (if (and x (not y))\n                 1\n                 0)))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (eq? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                 (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (define (xor_helper tup1 tup2)\n    (if (null? tup1)\n        '()\n        (cons (bitwise-xor (car tup1) (car tup2)) (xor_helper (cdr tup1) (cdr tup2)))))\n  (xor_helper test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (and (not x) y)\n             1\n             (if (and x (not y))\n                 1\n                 0)))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (let ([tup1 (car test_tup1)]\n        [tup2 (car test_tup2)])\n    (map (lambda (x y)\n           (if (and (not x) (not y))\n               #f\n               (if (and x y)\n                   #f\n                   #t)))\n         tup1\n         tup2)))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond [(empty? test_tup1) test_tup2]\n        [(empty? test_tup2) test_tup1]\n        [else (cons (xor (car test_tup1) (car test_tup2))\n                    (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             #f\n             #t))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2)) (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                 (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(null? test_tup1) '()]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (eq? x y)\n             #f\n             #t))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (or (and (eq? x #f) (eq? y #t))\n                             (and (eq? x #t) (eq? y #f)))\n                      #t\n                      #f))\n       test_tup1\n       test_tup2))\n",
    "  (apply bitwise-xor test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) '()]\n    [(empty? test_tup2) '()]\n    [else\n     (cons (xor (car test_tup1) (car test_tup2))\n           (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) '()]\n    [(empty? test_tup2) '()]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             #f\n             #t))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n</code>\nI'm getting the following error:\n<code>bitwise_xor: expects argument of type &lt;number&gt;; given #&lt;procedure:...&gt;\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nThe error message is telling you that <code>bitwise-xor</code> expects a number as an argument, but you're passing it a function. \nThe problem is that <code>map</code> is a function that takes a function as its first argument, and then applies that function to each element of the list. So you're passing <code>bitwise-xor</code> to <code>map</code>, and then <code>map</code> is passing the function <code>bitwise-xor</code> to <code>bitwise-xor</code>.\nYou need to pass <code>map</code> a function that calls <code>bitwise-xor</code> on its arguments. You can do that with <code>lambda</code>:\n<code>(define (bitwise_xor test_tup1 test_tup2)\n  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n</code>\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2)) (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) (empty test_tup2)]\n    [(empty? test_tup2) (empty test_tup1)]\n    [else (cons (xor (first test_tup1) (first test_tup2)) (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) '()]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (if (eq? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y) 0 1))\n       test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2)) (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                 (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(null? test_tup1) '()]\n    [(null? test_tup2) '()]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                 (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (car test_tup1) (car test_tup2))\n           (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (apply bitwise-xor test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                 (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (car test_tup1) (car test_tup2))\n           (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (let ([tup1 (car test_tup1)]\n        [tup2 (car test_tup2)])\n    (cond [(and (not (null? tup1)) (not (null? tup2)))\n           (cons (xor (car tup1) (car tup2))\n                 (bitwise_xor (cons (cdr tup1) test_tup1)\n                              (cons (cdr tup2) test_tup2)))]\n          [else '()])))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (and (eq? x #t) (eq? y #t))\n             #f\n             (if (or (eq? x #t) (eq? y #t))\n                 #t\n                 #f)))\n       test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (car test_tup1) (car test_tup2))\n           (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (and (not x) y)\n             1\n             (if (and x (not y))\n                 1\n                 0)))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                 (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (car test_tup1) (car test_tup2))\n           (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (xor (car test_tup1) (car test_tup2))\n            (bitwise_xor (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (eq? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (and (eq? x #t) (eq? y #t))\n             #f\n             (if (or (eq? x #t) (eq? y #t))\n                 #t\n                 #f)))\n       test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) (empty? test_tup2)]\n    [(empty? test_tup2) (empty? test_tup1)]\n    [else (xor (first test_tup1) (first test_tup2))]))\n",
    "  (define (xor_helper tup1 tup2)\n    (cond\n      [(empty? tup1) empty]\n      [(empty? tup2) empty]\n      [else (cons (xor (first tup1) (first tup2)) (xor_helper (rest tup1) (rest tup2)))]))\n  (xor_helper test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (apply bitwise-xor test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) (empty? test_tup2)]\n    [(empty? test_tup2) (empty? test_tup1)]\n    [else\n     (cond\n       [(= (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2))]\n       [else (cons (car test_tup1) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]\n       )]\n    ))\n",
    "  (define (xor_helper tup1 tup2)\n    (if (null? tup1)\n        '()\n        (cons (bitwise-xor (car tup1) (car tup2)) (xor_helper (cdr tup1) (cdr tup2)))))\n  (xor_helper test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (and (eq? x #f) (eq? y #f))\n             #f\n             (if (or (eq? x #f) (eq? y #f))\n                 #t\n                 #f)))\n       test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y)\n         (if (and (not x) (not y))\n             #f\n             (if (or (not x) (not y))\n                 #t\n                 #f)))\n       test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (first test_tup1) (first test_tup2))\n           (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(null? test_tup1) '()]\n    [(null? test_tup2) '()]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (car test_tup1) (car test_tup2))\n           (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) test_tup2]\n    [(empty? test_tup2) test_tup1]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (let ([tup1 (car test_tup1)]\n        [tup2 (car test_tup2)])\n    (map (lambda (x y)\n           (if (and (not x) (not y))\n               #f\n               (if (or (not x) (not y))\n                   #t\n                   #f)))\n         tup1 tup2)))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) '()]\n    [(empty? test_tup2) '()]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (and (not x) y)\n             1\n             (if (and x (not y))\n                 1\n                 0)))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (and (not x) y) 1 (if (and x (not y)) 1 0))) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (or (and (eq? x #t) (eq? y #f))\n                 (and (eq? x #f) (eq? y #t)))\n             #t\n             #f))\n       test_tup1 test_tup2))\n",
    "  (cond [(empty? test_tup1) empty]\n        [(empty? test_tup2) empty]\n        [else (cons (xor (first test_tup1) (first test_tup2))\n                    (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (first test_tup1) (first test_tup2))\n           (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2)) (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) test_tup2]\n    [(empty? test_tup2) test_tup1]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (define (xor_helper tup1 tup2)\n    (if (null? tup1)\n        '()\n        (cons (bitwise-xor (car tup1) (car tup2))\n              (xor_helper (cdr tup1) (cdr tup2)))))\n  (xor_helper test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) test_tup2]\n    [(empty? test_tup2) test_tup1]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (car test_tup1) (car test_tup2))\n           (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2)) (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(or (null? test_tup1) (null? test_tup2)) '()]\n    [else (cons (xor (car test_tup1) (car test_tup2)) (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (first test_tup1) (first test_tup2))\n           (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (and (not (eq? x #f)) (not (eq? y #f)))\n             #t\n             #f))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                 (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (eq? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (not (equal? x y)) 1 0)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (xor (car test_tup1) (car test_tup2))\n           (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (or (and (eq? x #f) (eq? y #f))\n                 (and (eq? x #t) (eq? y #t)))\n             #f\n             #t))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (and x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (or (and (eq? x #f) (eq? y #f))\n                 (and (eq? x #t) (eq? y #t)))\n             #f\n             #t))\n       test_tup1\n       test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (xor (first test_tup1) (first test_tup2))\n                (bitwise_xor (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (if (and (eq? x #t) (eq? y #t))\n             #f\n             (if (or (eq? x #t) (eq? y #t))\n                 #t\n                 #f)))\n       test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (equal? x y)\n             0\n             1))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (and x y)\n             #f\n             (or x y)))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (if (and (not x) y) 1 (if (and x (not y)) 1 0))) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (if (or (and (eq? x #t) (eq? y #f))\n                 (and (eq? x #f) (eq? y #t)))\n             #t\n             #f))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (if (equal? x y) 0 1)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) (empty test_tup2)]\n    [(empty? test_tup2) (empty test_tup1)]\n    [else (cons (xor (car test_tup1) (car test_tup2))\n                (bitwise_xor (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y) (bitwise-xor x y)) test_tup1 test_tup2))\n"
  ]
}