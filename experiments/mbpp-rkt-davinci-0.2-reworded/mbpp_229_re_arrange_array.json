{
  "name": "mbpp_229_re_arrange_array",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n(define (re_arrange_array arr n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate re_arrange_array))\n    (check-equal? (candidate (list -1 2 -3 4 5 6 -7 8 9) 9) (list -1 -3 -7 4 5 6 2 8 9))\n    (check-equal? (candidate (list 12 -14 -26 13 15) 5) (list -14 -26 12 13 15))\n    (check-equal? (candidate (list 10 24 36 -42 -39 -78 85) 7) (list -42 -39 -78 10 24 36 85))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (re_arrange_array_helper arr n neg_arr pos_arr)\n    (if (= n 0)\n        (append neg_arr pos_arr)\n        (if (< (car arr) 0)\n            (re_arrange_array_helper (cdr arr) (- n 1) (append neg_arr (list (car arr))) pos_arr)\n            (re_arrange_array_helper (cdr arr) (- n 1) neg_arr (append pos_arr (list (car arr)))))))\n  (re_arrange_array_helper arr n '() '()))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(and (positive? (list-ref arr i)) (negative? (list-ref arr (- n 1))))\n       (begin\n         (set-car! arr (list-ref arr (- n 1)))\n         (set-car! (list-ref arr (- n 1)) (list-ref arr i))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let ([neg-arr (filter (lambda (x) (< x 0)) arr)]\n        [pos-arr (filter (lambda (x) (>= x 0)) arr)])\n    (append (take neg-arr n) (take pos-arr n))))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (list-ref arr i) 0)\n       (begin\n         (set-car! arr i (list-ref arr (- n 1)))\n         (set-car! arr (- n 1) (list-ref arr i))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else\n       (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n left right)\n    (cond\n      [(= left right) arr]\n      [(< (vector-ref arr left) 0)\n       (re_arrange_array_helper arr n (+ left 1) right)]\n      [(> (vector-ref arr left) 0)\n       (vector-swap! arr left right)\n       (re_arrange_array_helper arr n left (- right 1))]))\n  (re_arrange_array_helper arr n 0 (- n 1)))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (list-ref arr i) 0)\n            (re_arrange_array_helper (swap arr i (find-first-positive arr i)) n (+ i 1))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let ([neg-arr (filter (lambda (x) (< x 0)) arr)]\n        [pos-arr (filter (lambda (x) (>= x 0)) arr)])\n    (append (take n neg-arr) (take n pos-arr))))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (list-ref arr i) 0)\n            (re_arrange_array_helper (list-swap arr i (find-first-positive arr i)) n (+ i 1))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (list-ref arr i) 0)\n       (begin\n         (set-car! arr i (list-ref arr (- n 1)))\n         (set-car! arr (- n 1) (list-ref arr i))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n acc)\n    (if (= n 0)\n        (append acc (cdr arr))\n        (if (< (car arr) 0)\n            (re_arrange_array_helper (cdr arr) (- n 1) (append acc (list (car arr))))\n            (re_arrange_array_helper (cdr arr) n (append acc (list (car arr)))))))\n  (re_arrange_array_helper arr n '()))\n",
    "  (let loop ([arr arr]\n             [n n]\n             [neg-arr '()]\n             [pos-arr '()])\n    (cond\n      [(empty? arr) (append neg-arr pos-arr)]\n      [(< (first arr) 0) (loop (rest arr) (- n 1) (append neg-arr (list (first arr))) pos-arr)]\n      [(>= (first arr) 0) (loop (rest arr) (- n 1) neg-arr (append pos-arr (list (first arr))))])))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-swap! arr i (vector-index-right arr (lambda (x) (< x 0)) i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let loop ([arr arr] [n n] [negatives '()] [positives '()])\n    (cond [(empty? arr) (append negatives positives)]\n          [(< (first arr) 0) (loop (rest arr) (- n 1) (cons (first arr) negatives) positives)]\n          [(> (first arr) 0) (loop (rest arr) (- n 1) negatives (cons (first arr) positives))]\n          [(= (first arr) 0) (loop (rest arr) (- n 1) (cons (first arr) negatives) positives)])))\n",
    "  (define (re_arrange_array_helper arr n i j)\n    (if (= i n)\n        arr\n        (if (< (list-ref arr i) 0)\n            (if (< i j)\n                (re_arrange_array_helper (swap arr i j) n (+ i 1) (+ j 1))\n                (re_arrange_array_helper arr n (+ i 1) j))\n            (re_arrange_array_helper arr n (+ i 1) j))))\n  (re_arrange_array_helper arr n 0 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (list-ref arr i) 0) (re_arrange_array_helper (swap arr i) n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (list-ref arr i) 0)\n            (re_arrange_array_helper (append (list (list-ref arr i)) (remove (list-ref arr i) arr)) n (+ i 1))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (helper arr n i)\n    (if (= i n)\n        arr\n        (if (negative? (list-ref arr i))\n            (helper (append (list (list-ref arr i)) (sublist arr 0 i) (sublist arr (+ i 1) n)) n (+ i 1))\n            (helper arr n (+ i 1)))))\n  (helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n neg_arr pos_arr)\n    (cond\n      [(empty? arr) (append neg_arr pos_arr)]\n      [(< (first arr) 0) (re_arrange_array_helper (rest arr) (- n 1) (append neg_arr (list (first arr))) pos_arr)]\n      [else (re_arrange_array_helper (rest arr) (- n 1) neg_arr (append pos_arr (list (first arr))))]))\n  (re_arrange_array_helper arr n '() '()))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (list-ref arr i) 0)\n            (re_arrange_array_helper (list-swap arr i (list-index arr (lambda (x) (< x 0)) i)) n (+ i 1))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n"
  ]
}