{
  "name": "mbpp_765_is_polite",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n(define (is_polite n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_polite))\n    (check-equal? (candidate 7) 11)\n    (check-equal? (candidate 4) 7)\n    (check-equal? (candidate 9) 13)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_polite-iter n i)\n    (cond ((= i n) #t)\n          ((zero? (modulo n i)) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (let loop ([n n])\n    (cond\n      [(= n 1) #t]\n      [(= (remainder n 2) 0) (loop (/ n 2))]\n      [(= (remainder n 3) 0) (loop (/ n 3))]\n      [(= (remainder n 5) 0) (loop (/ n 5))]\n      [else #f])))\n",
    "  (define (is_polite-helper n i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_polite-helper n (+ i 1))]))\n  (is_polite-helper n 1))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (let loop ((i 3))\n                  (cond ((&gt; (* i i) n) #t)\n                        ((= (modulo n i) 0) #f)\n                        (else (loop (+ i 2))))))))\n  (define (is_sum_of_two_primes n)\n    (let loop ((i 1))\n      (cond ((&gt; (* i i) n) #f)\n            ((and (is_prime i) (is_prime (- n i))) #t)\n            (else (loop (+ i 1))))))\n  (and (is_prime n) (is_sum_of_two_primes n)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (let loop ([i 1] [n n])\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (loop (+ i 1) n)])))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (define (is_divisible? n d)\n                 (cond ((= d 1) #f)\n                       ((= (remainder n d) 0) #t)\n                       (else (is_divisible? n (- d 1)))))\n               (is_divisible? n (- n 1)))))\n  (define (is_sum_of_two_primes? n)\n    (cond ((= n 2) #t)\n          ((= n 3) #f)\n          (else (define (is_sum_of_two_primes_helper n i)\n                 (cond ((= i n) #f)\n                       ((is_prime i) (if (is_prime (- n i)) #t (is_sum_of_two_primes_helper n (+ i 1))))\n                       (else (is_sum_of_two_primes_helper n (+ i 1)))))\n               (is_sum_of_two_primes_helper n 2))))\n  (and (is_prime n) (is_sum_of_two_primes? n)))\n",
    "  (define (is_polite_helper n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (is_polite_helper n (+ i 1)))))\n  (is_polite_helper n 1))\n",
    "  (define (is_prime n)\n    (define (helper n i)\n      (cond [(= i n) #t]\n            [(= (remainder n i) 0) #f]\n            [else (helper n (+ i 1))]))\n    (helper n 2))\n  (define (helper n i)\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) (is_prime i)]\n          [else (helper n (+ i 1))]))\n  (helper n 2))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (define (is-polite? n)\n    (if (= n (sum-divisors n)) #t #f))\n  (is-polite? n))\n",
    "  (define (is_prime? n)\n    (define (helper n d)\n      (cond\n        [(= d n) #t]\n        [(= (remainder n d) 0) #f]\n        [else (helper n (+ d 1))]))\n    (helper n 2))\n  (define (helper n)\n    (cond\n      [(= n 1) #t]\n      [(and (is_prime? n) (is_prime? (- n 1))) #t]\n      [else (helper (- n 1))]))\n  (helper n))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond [(= i n) #t]\n            [(= (remainder n i) 0) #f]\n            [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) (is_prime? i)]\n          [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= n 1) #t]\n      [(= (modulo n i) 0) (loop (/ n i) i)]\n      [else (loop n (+ i 1))])))\n",
    "  (define (is_prime? n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_divisible? n i) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_polite-helper n i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (is_polite-helper n (+ i 1))]))\n  (is_polite-helper n 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (remainder n i) 0) #f]\n          [else (loop (quotient n i) (+ i 1))])))\n",
    "  (define (is_prime? n)\n    (define (helper i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (helper (+ i 1))]))\n  (cond\n    [(is_prime? n) #t]\n    [else (helper 1)]))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (modulo n i) 0)\n           (if (is_polite (/ n i)) #t (loop n (+ i 1)))]\n          [else (loop n (+ i 1))])))\n",
    "  (let loop ([i 2])\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) #f]\n          [else (loop (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (zero? (modulo n i)) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #t\n        (if (is_prime i)\n            (if (zero? (modulo n i)) #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(zero? (remainder n i)) #f]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((= i n) #t)\n                   ((= (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (let loop ((n n) (i 1))\n    (cond ((= n 1) #t)\n          ((= (remainder n i) 0) (is_prime i))\n          (else (loop (- n 1) (+ i 1))))))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (modulo n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_sum_of_two_primes n)\n    (define (iter i)\n      (if (= i n) #f\n          (if (and (is_prime i) (is_prime (- n i))) #t\n              (iter (+ i 1)))))\n    (iter 2))\n  (is_sum_of_two_primes n))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) (iter (+ i 1)))\n            (else #f)))\n  (iter 1))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= n 1) #t)\n          ((= (modulo n i) 0) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (let loop ((i 2))\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (loop (+ i 1))))))\n",
    "  (let loop ((i 2) (j 1))\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) (loop (+ i 1) (+ j 1)))\n          (else (loop (+ i 1) j)))))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime? i)]\n      [else (iter (+ i 1))]))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n           (define (iter i)\n             (cond ((> i (sqrt n)) #t)\n                   ((= (modulo n i) 0) #f)\n                   (else (iter (+ i 2)))))\n           (iter 3))))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_prime i) (iter (+ i 1)))\n          (else #f)))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_sum_of_two_primes n)\n    (define (iter i)\n      (cond ((= i n) #f)\n            ((and (is_prime i) (is_prime (- n i))) #t)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is_sum_of_two_primes n))\n",
    "  (let loop ((i 1))\n    (if (= n 1)\n        #t\n        (if (= (modulo n i) 0)\n            (loop (+ i 1))\n            #f))))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) (is_prime i))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime i)]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (define (is_polite-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 2))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= n 1) #t)\n          ((= (remainder n i) 0) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (define (is_prime n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((&gt; i (/ n 2)) #t)\n            ((is_divisible? n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) (iter (+ i 1)))\n            (else #f)))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((is_divisible? n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #f)\n            ((is_prime (+ n i)) #t)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (helper n i)\n      (if (= i 1)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n              (helper n (- i 1)))))\n    (helper n (- n 1)))\n  (define (is_power_of_2 n)\n    (if (= (remainder n 2) 0)\n        (is_power_of_2 (/ n 2))\n        (= n 1)))\n  (or (is_prime n) (is_power_of_2 n)))\n",
    "  (if (= n 1)\n      #t\n      (let ([m (integer-sqrt n)])\n        (if (= n (* m m))\n            #f\n            (let loop ([i 2])\n              (if (= i m)\n                  #t\n                  (if (zero? (modulo n i))\n                      #f\n                      (loop (+ i 1)))))))))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= n 0) #t)\n          ((= i 0) #f)\n          ((= (modulo n i) 0) #t)\n          (else (is_polite-iter n (- i 1)))))\n  (is_polite-iter n n))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) (iter (+ i 1)))\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime? i)]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n)\n        #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0)\n                (iter (+ i 1))\n                #f)\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #t\n        (if (is_prime i) (iter (+ i 1))\n            (if (= (remainder n i) 0) #f\n                (iter (+ i 1))))))\n  (iter 2))\n",
    "  (let loop ([i 2])\n    (cond [(= i n) #t]\n          [(= 0 (modulo n i)) #f]\n          [else (loop (+ i 1))])))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= n 1) #t]\n      [(= (modulo n i) 0) (loop (/ n i) i)]\n      [else (loop n (+ i 1))])))\n",
    "  (define (is_polite-iter n i)\n    (cond\n      [(= i n) #t]\n      [(zero? (modulo n i)) #f]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 1))\n",
    "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= (remainder n i) 0) (is_prime i)]\n      [else (iter (+ i 1))]))\n  (iter 1))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime? i)]\n      [else (iter (+ i 1))]))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((= (remainder n i) 0) (is_prime i))\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) (is_prime i)]\n      [else (iter (+ i 1))]))\n  (iter 1))\n",
    "  (define (is_divisible? n d)\n    (= (remainder n d) 0))\n  (define (is_prime? n)\n    (define (is_prime?-iter n d)\n      (cond ((= d 1) #t)\n            ((is_divisible? n d) #f)\n            (else (is_prime?-iter n (- d 1)))))\n    (is_prime?-iter n (- n 1)))\n  (define (is_polite? n)\n    (define (is_polite?-iter n d)\n      (cond ((= d 1) #t)\n            ((is_divisible? n d) (is_prime? d))\n            (else (is_polite?-iter n (- d 1)))))\n    (is_polite?-iter n (- n 1)))\n  (is_polite? n))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= (remainder n 2) 0) (is_polite (/ n 2))]\n    [(= (remainder n 3) 0) (is_polite (/ n 3))]\n    [(= (remainder n 5) 0) (is_polite (/ n 5))]\n    [else #f]))\n",
    "  (define (is_prime? n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((is_divisible? n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_prime? i) (iter (+ i 1)))\n          ((is_divisible? n i) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (is_divisor? d)\n      (= (remainder n d) 0))\n    (define (iter d)\n      (cond ((&gt; d (/ n 2)) #t)\n            ((is_divisor? d) #f)\n            (else (iter (+ d 1)))))\n    (iter 2))\n  (define (is_polite? n)\n    (define (iter d)\n      (cond ((&gt; d (/ n 2)) #t)\n            ((is_prime d) #f)\n            (else (iter (+ d 1)))))\n    (iter 2))\n  (is_polite? n))\n",
    "  (let loop ((i 2))\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (loop (+ i 1))))))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (let loop ((i 3))\n                  (cond ((&gt; i (sqrt n)) #t)\n                        ((= (modulo n i) 0) #f)\n                        (else (loop (+ i 2))))))))\n  (define (is_sum_of_two_primes n)\n    (let loop ((i 2))\n      (cond ((&gt; i (sqrt n)) #f)\n            ((and (is_prime i) (is_prime (- n i))) #t)\n            (else (loop (+ i 1))))))\n  (is_sum_of_two_primes n))\n",
    "  (define (is_prime? n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_divisible? n i) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          (else\n           (let loop ((i 2))\n             (cond ((&gt; i (sqrt n)) #t)\n                   ((= (modulo n i) 0) #f)\n                   (else (loop (+ i 1))))))))\n  (let loop ((i 1))\n    (cond ((&gt; i n) #f)\n          ((= (modulo n i) 0) (is_prime i))\n          (else (loop (+ i 1))))))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #t\n        (if (is_prime i) (iter (+ i 1))\n            (if (= (remainder n i) 0) #f\n                (iter (+ i 1))))))\n  (iter 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(zero? n) #t]\n      [(zero? (modulo n i)) (loop (quotient n i) i)]\n      [(> i n) #f]\n      [else (loop n (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) (iter (+ i 1)))\n            (else #f)))\n  (iter 1))\n",
    "  (let loop ([i 1])\n    (if (= n 1)\n        #t\n        (if (= (remainder n i) 0)\n            (loop (+ i 1))\n            #f))))\n",
    "  (define (is_divisible? n d)\n    (= (remainder n d) 0))\n  (define (is_prime? n)\n    (define (iter d)\n      (cond ((= d n) #t)\n            ((is_divisible? n d) #f)\n            (else (iter (+ d 1)))))\n    (iter 2))\n  (define (iter n d)\n    (cond ((= n 1) #t)\n          ((is_divisible? n d) (iter (/ n d) d))\n          ((is_prime? d) (iter n (+ d 1)))\n          (else (iter n (+ d 1)))))\n  (iter n 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (define (is_polite-helper n i)\n    (cond ((= i n) #t)\n          ((= (modulo n i) 0) #f)\n          (else (is_polite-helper n (+ i 1)))))\n  (is_polite-helper n 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) (iter (+ i 1)))\n            (else #f)))\n  (iter 1))\n",
    "  (define (is_polite-iter n i)\n    (if (= n 1)\n        #t\n        (if (= (modulo n i) 0)\n            (is_polite-iter (/ n i) i)\n            (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (define (is_prime n)\n    (define (divides? a b) (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (define (is_sum_of_two_primes n)\n    (define (sum_of_two_primes? n i)\n      (cond ((= i n) #f)\n            ((and (is_prime i) (is_prime (- n i))) #t)\n            (else (sum_of_two_primes? n (+ i 1)))))\n    (sum_of_two_primes? n 2))\n  (cond ((is_prime n) #t)\n        ((is_sum_of_two_primes n) #t)\n        (else #f)))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_prime? i)\n           (if (= (remainder n i) 0)\n               (iter (+ i 1))\n               #f))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) (iter (+ i 1)))\n            (else #f)))\n  (iter 1))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= n 1) #t)\n          ((= (modulo n i) 0) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (define (is_polite-iter n i)\n    (cond [(= n 1) #t]\n          [(= (remainder n i) 0) #f]\n          [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 2))\n",
    "  (define (is_polite-iter n i)\n    (cond\n      [(= n 1) true]\n      [(= n 0) false]\n      [(= n i) true]\n      [(= (remainder n i) 0) (is_polite-iter (/ n i) i)]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 2))\n",
    "  (define (is_polite-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n)\n        #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0)\n                (iter (+ i 1))\n                #f)\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0) #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (let loop ([i 1])\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) #f]\n          [else (loop (+ i 1))])))\n",
    "  (let loop ((i 2))\n    (cond ((= i n) #t)\n          ((zero? (modulo n i)) #f)\n          (else (loop (+ i 1))))))\n",
    "  (let loop ([i 1])\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) #f]\n          [else (loop (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n)\n        #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0)\n                #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (define (is_sum_of_two_primes? n)\n    (define (iter i)\n      (cond ((> i n) #f)\n            ((and (is_prime i) (is_prime (- n i))) #t)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is_sum_of_two_primes? n))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) (iter (+ i 1)))\n            (else #f)))\n  (iter 1))\n",
    "  (let loop ([n n])\n    (cond [(= n 1) #t]\n          [(= (modulo n 2) 0) (loop (/ n 2))]\n          [(= (modulo n 3) 0) (loop (/ n 3))]\n          [(= (modulo n 5) 0) (loop (/ n 5))]\n          [else #f])))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= (remainder n i) 0) #f\n        (if (= i n) #t\n            (iter (+ i 1)))))\n  (if (is_prime n) #f\n      (iter 2)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime i)]\n      [else (iter (+ i 1))]))\n  (iter 1))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (modulo n i) 0) (loop (quotient n i) i)]\n          [else (loop n (+ i 1))])))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (equal? n (sum-divisors n)))\n",
    "  (define (is_prime? n)\n    (define (is_prime?-iter n divisor)\n      (cond ((= n 1) #f)\n            ((= n 2) #t)\n            ((= n divisor) #t)\n            ((= (remainder n divisor) 0) #f)\n            (else (is_prime?-iter n (+ divisor 1)))))\n    (is_prime?-iter n 2))\n  (define (is_polite?-iter n divisor)\n    (cond ((= n 1) #t)\n          ((= n divisor) #f)\n          ((= (remainder n divisor) 0)\n           (and (is_prime? divisor)\n                (is_polite?-iter (/ n divisor) divisor)))\n          (else (is_polite?-iter n (+ divisor 1)))))\n  (is_polite?-iter n 2))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= i n) #t)\n          ((zero? (modulo n i)) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i n)))))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) (iter (+ i 1)))\n            (else #f)))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (is_prime-iter n div)\n      (if (= div 1)\n          #t\n          (if (zero? (modulo n div))\n              #f\n              (is-prime-iter n (- div 1)))))\n    (is-prime-iter n (- n 1)))\n  (define (is_polite-iter n div)\n    (if (= div 1)\n        #t\n        (if (zero? (modulo n div))\n            (if (is_prime div)\n                #t\n                (is_polite-iter n (- div 1)))\n            (is_polite-iter n (- div 1)))))\n  (is_polite-iter n n))\n",
    "  (let loop ([i 2])\n    (cond\n      [(= i n) #t]\n      [(zero? (modulo n i)) #f]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ([i 2])\n    (cond\n      [(= i n) #t]\n      [(= 0 (modulo n i)) #f]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((is_divisible? n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime (+ n i)) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= (remainder n i) 0) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= n 1) #t]\n      [(= (remainder n i) 0) #f]\n      [else (loop (quotient n i) (+ i 1))])))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime? i) (iter (+ i 1)))\n            (else #f)))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) (iter (+ i 1)))\n            (else #f)))\n  (iter 1))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (remainder n i) 0) (loop (/ n i) i)]\n          [else (loop n (+ i 1))])))\n",
    "  (let loop ((i 2))\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (loop (+ i 1))))))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ([i 2])\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0) #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= (remainder n 2) 0) (is_polite (/ n 2))]\n    [(= (remainder n 3) 0) (is_polite (/ n 3))]\n    [else #f]))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0) #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (let loop ([i 1] [j 1])\n    (cond\n      [(= i n) #t]\n      [(= j n) (loop (+ i 1) 1)]\n      [(= 0 (remainder n j)) (loop i (+ j 1))]\n      [else (loop i (+ j 1))])))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0) #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= n 1) #t]\n      [(= (remainder n i) 0) (loop (/ n i) i)]\n      [else (loop n (+ i 1))])))\n",
    "  (let loop ([i 2])\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n)\n        #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0)\n                #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n)\n        #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0)\n                #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond [(= i 1) #t]\n            [(= (remainder n i) 0) #f]\n            [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) #f]\n          [(is_prime i) (iter (+ i 1))]\n          [else (iter (+ i 1))]))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((is_divisible? n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (polite-iter i)\n    (cond ((= i n) i)\n            ((is_prime i) (polite-iter (+ i 1)))\n            (else (+ i n))))\n  (polite-iter 1))\n",
    "  (let loop ([i 1] [j 1])\n    (cond [(= i n) #t]\n          [(= j n) (loop (+ i 1) 1)]\n          [(= (gcd i j) 1) (loop i (+ j 1))]\n          [else (loop i (+ j 1))])))\n",
    "  (define (is_prime n)\n    (define (is_prime-iter n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (is_prime-iter n (- i 1)))))\n    (is-prime-iter n (- n 1)))\n  (define (is_polite-iter n i)\n    (cond ((= i 0) #t)\n          ((= (modulo n i) 0) (is_prime i))\n          (else (is_polite-iter n (- i 1)))))\n  (is_polite-iter n (- n 1)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime i)]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (modulo n i) 0) (loop (/ n i) i)]\n          [else (loop n (+ i 1))])))\n",
    "  (let loop ([i 1] [j 1])\n    (cond\n      [(= i n) #t]\n      [(= j n) (loop (+ i 1) 1)]\n      [(= (gcd i j) 1) (loop i (+ j 1))]\n      [else (loop i (+ j 1))])))\n",
    "  (define (is_prime n)\n    (define (is_prime-iter n i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (is_prime-iter n (+ i 1))]))\n    (is_prime-iter n 2))\n  (define (is_polite-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime i)]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (remainder n i) 0) (loop (/ n i) i)]\n          [else (loop n (+ i 1))])))\n",
    "  (define (is_polite-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 2))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= (remainder n 2) 0) (is_polite (/ n 2))]\n    [(= (remainder n 3) 0) (is_polite (/ n 3))]\n    [(= (remainder n 5) 0) (is_polite (/ n 5))]\n    [else #f]))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) (is_prime i))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (sum-divisors lst)\n    (apply + lst))\n  (if (= (sum-divisors (divisors n)) n) #t #f))\n",
    "  (define (is_prime? n)\n    (define (iter x)\n      (cond ((= x 1) #t)\n            ((= (remainder n x) 0) #f)\n            (else (iter (- x 1)))))\n    (iter (- n 1)))\n  (define (iter x)\n    (cond ((= x 0) #t)\n          ((= (remainder n x) 0) (is_prime? x))\n          (else (iter (- x 1)))))\n  (iter (- n 1)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is_divisible n)\n    (define (iter i)\n      (cond ((= i 1) #f)\n            ((= (remainder n i) 0) #t)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (cond ((is_prime n) #f)\n        ((is_divisible n) #t)\n        (else #f)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i 0) #t)\n            ((is_prime i) (iter (- i 1)))\n            (else #f)))\n  (iter n))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime i)]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= n 1) #t]\n      [(= (modulo n i) 0) (loop (/ n i) i)]\n      [else (loop n (+ i 1))])))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= n 1) #t)\n          ((= (remainder n i) 0) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (loop n (+ i 1))])))\n",
    "  (let loop ((n n) (i 2))\n    (cond ((= n 1) #t)\n          ((= (modulo n i) 0) (loop (/ n i) i))\n          (else (loop n (+ i 1))))))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) (is_prime? i))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (is_prime-iter n div)\n      (cond ((= n 1) #f)\n            ((= n 2) #t)\n            ((= n div) #t)\n            ((= (modulo n div) 0) #f)\n            (else (is-prime-iter n (+ div 1)))))\n    (is-prime-iter n 2))\n  (define (is_polite-iter n div)\n    (cond ((= n 1) #t)\n          ((= (modulo n div) 0) (is_prime div))\n          (else (is_polite-iter n (+ div 1)))))\n  (is_polite-iter n 2))\n",
    "  (and (not (zero? (remainder n 2)))\n       (not (zero? (remainder n 3)))\n       (not (zero? (remainder n 5)))\n       (not (zero? (remainder n 7)))))\n",
    "  (define (is_polite_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= (remainder n i) 0)\n       (if (is_polite_helper (/ n i) i)\n           #t\n           (is_polite_helper n (+ i 1)))]\n      [else (is_polite_helper n (+ i 1))]))\n  (is_polite_helper n 2))\n",
    "  (define (is_polite_helper n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (is_polite_helper n (+ i 1)))))\n  (is_polite_helper n 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) (is_prime i))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (define (iter i)\n                 (cond ((&gt; i (sqrt n)) #t)\n                       ((= (modulo n i) 0) #f)\n                       (else (iter (+ i 2)))))\n               (iter 3))))\n  (define (iter i)\n    (cond ((&gt; i n) #f)\n          ((and (is_prime i) (= (modulo n i) 0)) #t)\n          (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (remainder n i) 0) (loop (/ n i) i)]\n          [else (loop n (+ i 1))])))\n",
    "  (define (is_polite-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 1))\n",
    "  (define (is_polite-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 1))\n",
    "  (define (is_polite-iter n div)\n    (cond ((= n 0) #t)\n          ((= (remainder n div) 0) #f)\n          (else (is_polite-iter (- n 1) (+ div 1)))))\n  (is_polite-iter n 2))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= n 1) #t)\n          ((= n 0) #f)\n          ((= (remainder n i) 0) (is_polite-iter (/ n i) i))\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (define (is_polite-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 1))\n",
    "  (let loop ([i 2])\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (is_divisible? n i)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= (remainder i n) 0)\n        #t\n        (if (= i n)\n            #f\n            (iter (+ i 1)))))\n  (and (is_prime n) (iter 2)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((&gt; i (/ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((&gt; i n) #f)\n          ((= (modulo n i) 0) (is_prime i))\n          (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (let loop ((n n) (i 2))\n    (cond ((= n 1) #t)\n          ((= (remainder n i) 0) (loop (/ n i) i))\n          (else (loop n (+ i 1))))))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #f\n        (if (is_prime i)\n            (if (= (remainder n i) 0) #t\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0) #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_polite-iter n i)\n    (cond\n      [(= n 1) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_polite-iter n (+ i 1))]))\n  (is_polite-iter n 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= n 1) #t]\n      [(= (modulo n i) 0) (loop (/ n i) i)]\n      [else (loop n (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (&gt; i (/ n 2))\n          #t\n          (if (zero? (modulo n i))\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n)\n        #t\n        (if (is_prime (+ n i))\n            #f\n            (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 1))\n",
    "  (let loop ((n n) (i 1))\n    (cond ((= n 1) #t)\n          ((= (remainder n i) 0) (loop (/ n i) 1))\n          (else (loop n (+ i 1))))))\n",
    "  (define (is_prime? n)\n    (define (loop i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n  (define (loop i)\n    (cond ((= i n) #t)\n            ((= (remainder n i) 0) (is_prime? i))\n            (else (loop (+ i 1)))))\n  (loop 2))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (iter (+ i 1))]))\n  (cond\n    [(= n 1) #t]\n    [(is_prime? n) #t]\n    [else (iter 1)]))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (modulo n i) 0) #f]\n          [else (loop (quotient n i) (+ i 1))])))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= n 1) #t)\n          ((= (modulo n i) 0) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_prime i) (iter (+ i 1)))\n          (else #f)))\n  (iter 2))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i 1) #t)\n          ((is_prime? i) (iter (- i 1)))\n          ((= (modulo n i) 0) #f)\n          (else (iter (- i 1)))))\n  (iter n))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime? i) (iter (+ i 1)))\n            (else #f)))\n  (iter 1))\n",
    "  (define (is_polite-helper n i)\n    (cond\n      [(= i n) #t]\n      [(zero? (modulo n i)) #f]\n      [else (is_polite-helper n (+ i 1))]))\n  (is_polite-helper n 2))\n",
    "  (define (is_polite-helper n i)\n    (cond\n      [(= i n) #t]\n      [(zero? (modulo n i)) #f]\n      [else (is_polite-helper n (+ i 1))]))\n  (is_polite-helper n 2))\n",
    "  (define (is_prime? n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_divisible? n i) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime i)]\n      [else (iter (+ i 1))]))\n  (iter 1))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (equal? (sum-divisors n) n))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (remainder n i) 0) (loop (/ n i) i)]\n          [else (loop n (+ i 1))])))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= (remainder n 2) 0) (is_polite (/ n 2))]\n    [(= (remainder n 3) 0) (is_polite (/ n 3))]\n    [(= (remainder n 5) 0) (is_polite (/ n 5))]\n    [else #f]))\n",
    "  (define (is_divisible? n d)\n    (= (modulo n d) 0))\n  (define (is_prime? n)\n    (define (iter d)\n      (cond\n        [(= d n) #t]\n        [(is_divisible? n d) #f]\n        [else (iter (+ d 1))]))\n    (iter 2))\n  (define (is_polite? n)\n    (define (iter d)\n      (cond\n        [(= d n) #t]\n        [(is_divisible? n d) #f]\n        [(is_prime? d) (iter (+ d 1))]\n        [else (iter (+ d 1))]))\n    (iter 2))\n  (is_polite? n))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i 1) #t)\n          ((= (modulo n i) 0) (and (is_prime i) (iter (- i 1))))\n          (else (iter (- i 1)))))\n  (iter n))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (loop n (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is_sum_of_two_primes n)\n    (define (iter i)\n      (cond ((= i 1) #f)\n            ((and (is_prime i) (is_prime (- n i))) #t)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (and (is_prime n) (is_sum_of_two_primes n)))\n",
    "  (let loop ((i 2))\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (loop (+ i 1))))))\n",
    "  (define (polite? n)\n    (define (is_prime? n)\n      (define (divisible? a b)\n        (= (remainder a b) 0))\n      (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor) n) n)\n              ((divisible? n test-divisor) test-divisor)\n              (else (find-divisor n (+ test-divisor 1)))))\n      (= (find-divisor n 2) n))\n  (define (sum-of-divisors n)\n    (define (divisors n)\n      (define (divisors-iter n i)\n        (cond ((> n i) '())\n              ((= (remainder n i) 0) (cons i (divisors-iter n (+ i 1))))\n              (else (divisors-iter n (+ i 1)))))\n      (divisors-iter n 1))\n    (apply + (divisors n)))\n  (and (is_prime? n) (= (sum-of-divisors n) n)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= (remainder n i) 0) (is_polite-iter (- n i) (+ i 1)))\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 1))\n",
    "  (let loop ((i 2) (j 1))\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (loop (+ i 1) j)))))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime i)]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= (remainder n 2) 0) (is_polite (/ n 2))]\n    [(= (remainder n 3) 0) (is_polite (/ n 3))]\n    [(= (remainder n 5) 0) (is_polite (/ n 5))]\n    [else #f]))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= (modulo n 2) 0) (is_polite (/ n 2))]\n    [(= (modulo n 3) 0) (is_polite (/ n 3))]\n    [(= (modulo n 5) 0) (is_polite (/ n 5))]\n    [else #f]))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) (is_prime? i)]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (let loop ((i 2) (n n))\n    (cond ((= i n) #t)\n          ((zero? (modulo n i)) #f)\n          (else (loop (+ i 1) n)))))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((&gt; i n) #f)\n          ((= (modulo n i) 0) (is_prime i))\n          (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_divisible? n d)\n    (= (modulo n d) 0))\n  (define (is_polite? n)\n    (define (iter d)\n      (cond\n        ((= d n) #t)\n        ((is_divisible? n d) #f)\n        (else (iter (+ d 1)))))\n    (iter 1))\n  (is_polite? n))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((&gt; i (sqrt n)) #t)\n                   ((= (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (is_sum_of_two_primes n)\n    (let loop ((i 1))\n      (cond ((&gt; i (sqrt n)) #f)\n            ((and (is_prime i) (is_prime (- n i))) #t)\n            (else (loop (+ i 1))))))\n  (and (is_prime n) (is_sum_of_two_primes n)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0) #f\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) (is_prime i))\n          (else (iter (+ i 1)))))\n  (iter 2))\n"
  ]
}