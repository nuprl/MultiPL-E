{
  "name": "mbpp_765_is_polite",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n(define (is_polite n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_polite))\n    (check-equal? (candidate 7) 11)\n    (check-equal? (candidate 4) 7)\n    (check-equal? (candidate 9) 13)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_polite-iter n i)\n    (cond ((= i n) #t)\n          ((zero? (modulo n i)) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 2))\n",
    "  (let loop ([n n])\n    (cond\n      [(= n 1) #t]\n      [(= (remainder n 2) 0) (loop (/ n 2))]\n      [(= (remainder n 3) 0) (loop (/ n 3))]\n      [(= (remainder n 5) 0) (loop (/ n 5))]\n      [else #f])))\n",
    "  (define (is_polite-helper n i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_polite-helper n (+ i 1))]))\n  (is_polite-helper n 1))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (let loop ((i 3))\n                  (cond ((&gt; (* i i) n) #t)\n                        ((= (modulo n i) 0) #f)\n                        (else (loop (+ i 2))))))))\n  (define (is_sum_of_two_primes n)\n    (let loop ((i 1))\n      (cond ((&gt; (* i i) n) #f)\n            ((and (is_prime i) (is_prime (- n i))) #t)\n            (else (loop (+ i 1))))))\n  (and (is_prime n) (is_sum_of_two_primes n)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (let loop ([i 1] [n n])\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (loop (+ i 1) n)])))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (define (is_divisible? n d)\n                 (cond ((= d 1) #f)\n                       ((= (remainder n d) 0) #t)\n                       (else (is_divisible? n (- d 1)))))\n               (is_divisible? n (- n 1)))))\n  (define (is_sum_of_two_primes? n)\n    (cond ((= n 2) #t)\n          ((= n 3) #f)\n          (else (define (is_sum_of_two_primes_helper n i)\n                 (cond ((= i n) #f)\n                       ((is_prime i) (if (is_prime (- n i)) #t (is_sum_of_two_primes_helper n (+ i 1))))\n                       (else (is_sum_of_two_primes_helper n (+ i 1)))))\n               (is_sum_of_two_primes_helper n 2))))\n  (and (is_prime n) (is_sum_of_two_primes? n)))\n",
    "  (define (is_polite_helper n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (is_polite_helper n (+ i 1)))))\n  (is_polite_helper n 1))\n",
    "  (define (is_prime n)\n    (define (helper n i)\n      (cond [(= i n) #t]\n            [(= (remainder n i) 0) #f]\n            [else (helper n (+ i 1))]))\n    (helper n 2))\n  (define (helper n i)\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) (is_prime i)]\n          [else (helper n (+ i 1))]))\n  (helper n 2))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (define (is-polite? n)\n    (if (= n (sum-divisors n)) #t #f))\n  (is-polite? n))\n",
    "  (define (is_prime? n)\n    (define (helper n d)\n      (cond\n        [(= d n) #t]\n        [(= (remainder n d) 0) #f]\n        [else (helper n (+ d 1))]))\n    (helper n 2))\n  (define (helper n)\n    (cond\n      [(= n 1) #t]\n      [(and (is_prime? n) (is_prime? (- n 1))) #t]\n      [else (helper (- n 1))]))\n  (helper n))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond [(= i n) #t]\n            [(= (remainder n i) 0) #f]\n            [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) (is_prime? i)]\n          [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= n 1) #t]\n      [(= (modulo n i) 0) (loop (/ n i) i)]\n      [else (loop n (+ i 1))])))\n",
    "  (define (is_prime? n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_divisible? n i) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_polite-helper n i)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (is_polite-helper n (+ i 1))]))\n  (is_polite-helper n 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime i) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (remainder n i) 0) #f]\n          [else (loop (quotient n i) (+ i 1))])))\n",
    "  (define (is_prime? n)\n    (define (helper i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper i)\n    (cond\n      [(= i n) #t]\n      [(= (modulo n i) 0) #f]\n      [else (helper (+ i 1))]))\n  (cond\n    [(is_prime? n) #t]\n    [else (helper 1)]))\n",
    "  (let loop ([n n] [i 2])\n    (cond [(= n 1) #t]\n          [(= (modulo n i) 0)\n           (if (is_polite (/ n i)) #t (loop n (+ i 1)))]\n          [else (loop n (+ i 1))])))\n",
    "  (let loop ([i 2])\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) #f]\n          [else (loop (+ i 1))])))\n"
  ]
}