{
  "name": "mbpp_805_max_sum_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (cond\n    [(empty? lists) empty]\n    [else\n     (let ([max-sum (apply + (first lists))])\n       (for/fold ([max-sum-list (first lists)])\n                 ([lst (in-list (rest lists))])\n                 (let ([sum (apply + lst)])\n                   (if (&gt; sum max-sum)\n                       (values lst sum)\n                       (values max-sum-list max-sum)))))]))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (max_sum_list_helper lists max_sum max_list)\n    (if (null? lists)\n        max_list\n        (let ((sum (sum (car lists))))\n          (if (&gt; sum max_sum)\n              (max_sum_list_helper (cdr lists) sum (car lists))\n              (max_sum_list_helper (cdr lists) max_sum max_list)))))\n  (max_sum_list_helper lists 0 (list)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (foldl (lambda (l1 l2)\n           (if (> (sum l1) (sum l2))\n               l1\n               l2))\n         (car lists)\n         (cdr lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n</code>\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (cond [(empty? lists) empty]\n        [else (max_sum_list_helper (first lists) (rest lists))]))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map (lambda (l) (apply + l)) lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n</code>\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n"
  ]
}