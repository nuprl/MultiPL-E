{
  "name": "mbpp_805_max_sum_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n",
    "  (apply max (map sum lists)))\n"
  ]
}