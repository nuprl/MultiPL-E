{
  "name": "mbpp_247_lps",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the length of the longest palindromic subsequence in the given string.\n(define (lps str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lps))\n    (check-equal? (candidate \"TENS FOR TENS\") 5)\n    (check-equal? (candidate \"CARDIO FOR CARDS\") 7)\n    (check-equal? (candidate \"PART OF THE JOURNEY IS PART\") 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (if (= i j)\n        1\n        (if (= (string-ref str i) (string-ref str j))\n            (+ 2 (lps-helper str (+ i 1) (- j 1)))\n            (max (lps-helper str (+ i 1) j)\n                 (lps-helper str i (- j 1))))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str (+ i 1) j)\n            (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (+ i 1) j) (if (char=? (string-ref str i) (string-ref str j)) 2 1)]\n      [(char=? (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str (+ i 1) j)\n                     (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str (+ i 1) j)\n            (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str (+ i 1) j)\n            (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [(> (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j)) (lps-helper str i (- j 1))]\n      [else (lps-helper str (+ i 1) j)]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str (+ i 1) j)\n                     (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str i (- j 1))\n            (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ([i 0] [j (string-length str)])\n    (cond [(= i j) 0]\n          [(= (string-ref str i) (string-ref str (- j 1)))\n           (+ 2 (loop (+ i 1) (- j 2)))]\n          [else\n           (max (loop (+ i 1) j) (loop i (- j 1)))])))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond ((= i j) 1)\n          ((= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1))))\n          (else (max (lps-helper str i (- j 1))\n                     (lps-helper str (+ i 1) j)))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper (+ i 1) (- j 1)))]\n      [else (max (lps-helper (+ i 1) j) (lps-helper i (- j 1)))]))\n  (lps-helper 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else\n           (max (lps-helper str i (- j 1))\n                (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond ((= i j) 1)\n          ((= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2))\n          (else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1))))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else\n           (max (lps-helper str (+ i 1) j)\n                (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str i (- j 1))\n            (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond ((= i j) 1)\n          ((= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1))))\n          (else (max (lps-helper str (+ i 1) j)\n                     (lps-helper str i (- j 1))))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond ((= i j) 1)\n          ((= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1))))\n          (else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1))))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-rec str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-rec str (+ i 1) (- j 1)))]\n      [else (max (lps-rec str i (- j 1)) (lps-rec str (+ i 1) j))]))\n  (lps-rec str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-iter str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-iter str (+ i 1) (- j 1)))]\n      [else (max (lps-iter str i (- j 1)) (lps-iter str (+ i 1) j))]))\n  (lps-iter str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else\n           (max (lps-helper str (+ i 1) j)\n                (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond ((= i j) 1)\n          ((= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2))\n          (else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1))))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(string=? (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let ([n (string-length str)])\n    (define (lps-helper i j)\n      (cond [(= i j) 1]\n            [(= (string-ref str i) (string-ref str j))\n             (+ 2 (lps-helper (+ i 1) (- j 1)))]\n            [else\n             (max (lps-helper (+ i 1) j)\n                  (lps-helper i (- j 1)))]))\n    (lps-helper 0 (- n 1))))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ((i 0) (j (- (string-length str) 1)) (acc 0))\n    (if (&lt; i j)\n        (if (char=? (string-ref str i) (string-ref str j))\n            (loop (+ i 1) (- j 1) (+ acc 2))\n            (max (loop (+ i 1) j acc)\n                 (loop i (- j 1) acc)))\n        acc)))\n</code>\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str (+ i 1) j)\n            (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (cond\n    [(empty? str) 0]\n    [(equal? (first str) (last str))\n     (+ 2 (lps (substring str 1 (- (string-length str) 1))))]\n    [else\n     (max (lps (substring str 1 (string-length str)))\n          (lps (substring str 0 (- (string-length str) 1))))]))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ([i 0] [j (- (string-length str) 1)])\n    (if (&lt; i j)\n        (if (char=? (string-ref str i) (string-ref str j))\n            (+ 2 (loop (+ i 1) (- j 1)))\n            (max (loop (+ i 1) j) (loop i (- j 1))))\n        1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str (+ i 1) j)\n            (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ((i 0) (j (- (string-length str) 1)) (acc 0))\n    (cond\n      [(= i j) (+ acc 1)]\n      [(= (string-ref str i) (string-ref str j)) (+ acc 2) (loop (+ i 1) (- j 1) acc)]\n      [else (max (loop (+ i 1) j acc) (loop i (- j 1) acc))])))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str (+ i 1) j)\n                     (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n"
  ]
}