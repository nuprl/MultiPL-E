{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list (car list1))\n                (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:16:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:17:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1))\n                (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:15:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:16:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (if (equal? first (car rest))\n                  (pack_consecutive_duplicates_iter rest (cons (cons first (car result)) (cdr result)))\n                  (pack_consecutive_duplicates_iter rest (cons (list first) result)))))))\n  (pack_consecutive_duplicates_iter list1 (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp239vm1t0.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp239vm1t0.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp239vm1t0.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list (car list1))\n                (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond [(empty? list1) empty]\n        [else (cons (list (first list1))\n                    (pack_consecutive_duplicates (remove (first list1) list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw8kxd1d.rkt:14:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw8kxd1d.rkt:15:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw8kxd1d.rkt:16:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (first result)) (first list1)) (pack_consecutive_duplicates_iter (rest list1) (cons (cons (first list1) (first result)) (rest result)))]\n      [else (pack_consecutive_duplicates_iter (rest list1) (cons (list (first list1)) result))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (remove (first list1) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:16:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (6) (7) (8) (9) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:17:4\nactual:     '((10) (15) (19) (18) (17) (26) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:18:4\nactual:     '((\"a\") (\"b\") (\"c\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1))\n                (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:15:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:16:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list list1)]\n    [else\n     (if (equal? (first list1) (first (rest list1)))\n         (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))\n         (cons (list (first list1)) (pack_consecutive_duplicates (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7zv6rwj_.rkt:18:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7zv6rwj_.rkt:19:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7zv6rwj_.rkt:20:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons\n      (list (first list1))\n      (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:17:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:18:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:19:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons\n      (cons (first list1)\n            (filter (lambda (x) (equal? x (first list1))) list1))\n      (pack_consecutive_duplicates (filter (lambda (x) (not (equal? x (first list1)))) list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp279icaa7.rkt:18:4\nactual:\n  '((0 0 0) (1 1) (2 2) (3 3) (4 4 4 4 4) (5 5) (6 6 6 6) (7 7) (8 8) (9 9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp279icaa7.rkt:19:4\nactual:\n  '((10 10 10 10) (15 15) (19 19) (18 18 18 18) (17 17 17) (26 26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp279icaa7.rkt:20:4\nactual:     '((\"a\" \"a\" \"a\") (\"b\" \"b\") (\"c\" \"c\") (\"d\" \"d\" \"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else\n     (let ([sublist (list (car list1))])\n       (for ([elem (cdr list1)])\n         (if (equal? elem (car sublist))\n             (set! sublist (append sublist (list elem)))\n             (set! list1 (append (list sublist) (list elem))\n                   sublist (list elem))))\n       list1)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "/tmp/tmp94zgud5j.rkt:12:13: set!: bad syntax\n  in: (set! list1 (append (list sublist) (list elem)) sublist (list elem))\n  location...:\n   /tmp/tmp94zgud5j.rkt:12:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond [(empty? list1) empty]\n        [else (cons (list (first list1))\n                    (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbsztv3jo.rkt:14:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbsztv3jo.rkt:15:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbsztv3jo.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1)\n             (acc '()))\n    (cond ((null? list1) acc)\n          ((null? (cdr list1)) (cons (list (car list1)) acc))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (cadr list1)) acc)))\n          (else (loop (cdr list1) (cons (list (car list1)) acc))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpztwv9w2i.rkt:18:4\nactual:\n  '((4)\n    (4 . 4)\n    (9)\n    (8)\n    (7)\n    (6)\n    (6 . 6)\n    (6 . 6)\n    (5)\n    (4)\n    (4 . 4)\n    (3)\n    (2)\n    (1)\n    (0)\n    (0 . 0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpztwv9w2i.rkt:19:4\nactual:\n  '((10) (18) (17) (26) (26 . 26) (17) (18) (18 . 18) (19) (15) (10) (10 . 10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpztwv9w2i.rkt:20:4\nactual:     '((\"d\") (\"d\" . \"d\") (\"c\") (\"b\") (\"a\") (\"a\" . \"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [else\n       (let* ([first (first list1)]\n              [rest (rest list1)]\n              [first_rest (cons first rest)]\n              [first_rest_duplicates (filter (lambda (x) (equal? x first)) first_rest)]\n              [rest_duplicates (filter (lambda (x) (not (equal? x first))) first_rest)])\n         (pack_consecutive_duplicates_iter rest_duplicates (cons first_rest_duplicates result)))]))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu16ezt0p.rkt:22:4\nactual:     '((9) (8) (7) (6 6 6) (5) (4 4 4 4) (3) (2) (1) (0 0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu16ezt0p.rkt:23:4\nactual:     '((26 26) (17 17) (18 18 18) (19) (15) (10 10 10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu16ezt0p.rkt:24:4\nactual:     '((\"d\" \"d\") (\"c\") (\"b\") (\"a\" \"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1)\n             (list2 '()))\n    (cond ((null? list1) (reverse list2))\n          ((null? (cdr list1)) (reverse (cons (list (car list1)) list2)))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (car list2)) (cdr list2))))\n          (else (loop (cdr list1) (cons (list (car list1)) list2))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ddc_vvi.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ddc_vvi.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ddc_vvi.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiijvesot.rkt:16:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiijvesot.rkt:17:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiijvesot.rkt:18:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond ((null? list1) '())\n        ((null? (cdr list1)) (list list1))\n        ((equal? (car list1) (cadr list1))\n         (cons (list (car list1) (cadr list1))\n               (pack_consecutive_duplicates (cdr list1))))\n        (else (cons (list (car list1))\n                    (pack_consecutive_duplicates (cdr list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk43ocas8.rkt:18:4\nactual:\n  '((0 0) (0) (1) (2) (3) (4 4) (4) (5) (6 6) (6 6) (6) (7) (8) (9) (4 4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk43ocas8.rkt:19:4\nactual:\n  '((10 10) (10) (15) (19) (18 18) (18) (17) (26 26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk43ocas8.rkt:20:4\nactual:     '((\"a\" \"a\") (\"a\") (\"b\") (\"c\") (\"d\" \"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (car list1))\n           (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jo55rca.rkt:16:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jo55rca.rkt:17:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jo55rca.rkt:18:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list (car list1))\n                (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 acc)\n    (cond\n      [(empty? list1) acc]\n      [(empty? acc) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (first acc)) (first list1)) (pack_consecutive_duplicates_iter (rest list1) (cons (cons (first list1) (first acc)) (rest acc)))]\n      [else (pack_consecutive_duplicates_iter (rest list1) (cons (list (first list1)) acc))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 list2)\n    (cond ((null? list1) list2)\n          ((null? list2) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car list1) (caar list2)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car list2)) (cdr list2))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) list2)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ([list1 list1]\n             [result '()])\n    (cond [(empty? list1) (reverse result)]\n          [else (let ([first (first list1)])\n                  (loop (drop-right list1 (length (take-while (lambda (x) (= x first)) list1)))\n                        (cons (take-while (lambda (x) (= x first)) list1) result)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmpjl8_jri6.rkt:9:51: take-while: unbound identifier\n  in: take-while\n  location...:\n   /tmp/tmpjl8_jri6.rkt:9:51\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (let ((second (car rest)))\n                (if (= first second)\n                    (pack_consecutive_duplicates_iter rest (cons (cons first (car result)) (cdr result)))\n                    (pack_consecutive_duplicates_iter rest (cons (list first) result))))))))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6cknbj2.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6cknbj2.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6cknbj2.rkt:25:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 list2)\n    (cond ((null? list1) list2)\n          ((null? list2) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car list2)) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (append (list (append (car list2) (list (car list1)))) (cdr list2))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (append (list (list (car list1))) list2)))))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx32_vyls.rkt:17:4\nactual:     '((4 4) (9) (8) (7) (6 6 6) (5) (4 4) (3) (2) (1) (0 0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx32_vyls.rkt:18:4\nactual:     '((10) (18) (17) (26 26) (17) (18 18) (19) (15) (10 10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx32_vyls.rkt:19:4\nactual:     '((\"d\" \"d\") (\"c\") (\"b\") (\"a\" \"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ([list1 list1]\n             [list2 '()])\n    (if (null? list1)\n        list2\n        (if (null? (cdr list1))\n            (append list2 (list list1))\n            (if (equal? (car list1) (cadr list1))\n                (loop (cdr list1) list2)\n                (loop (cdr list1) (append list2 (list (list (car list1))))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3c1_d0g.rkt:20:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3c1_d0g.rkt:21:4\nactual:     '((10) (15) (19) (18) (17) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3c1_d0g.rkt:22:4\nactual:     '((\"a\") (\"b\") (\"c\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (equal? (car list1) (cadr list1))\n                (cons (append sublist (list (cadr list1))) (pack_consecutive_duplicates (cdr (cdr list1))))\n                (cons sublist (pack_consecutive_duplicates (cdr list1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyxu1zvph.rkt:19:4\nactual:     '((0 0) (1) (2) (3) (4 4) (5) (6 6) (6) (7) (8) (9) (4 4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((first (car list1))\n            (rest (cdr list1)))\n        (cons (cons first (take-while (lambda (x) (= x first)) rest))\n              (pack_consecutive_duplicates (drop-while (lambda (x) (= x first)) rest))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "/tmp/tmp0lqfnwab.rkt:9:27: take-while: unbound identifier\n  in: take-while\n  location...:\n   /tmp/tmp0lqfnwab.rkt:9:27\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((first (car list1))\n            (rest (cdr list1)))\n        (if (null? rest)\n            (list (list first))\n            (let ((next (car rest)))\n              (if (= first next)\n                  (cons (cons first (car (pack_consecutive_duplicates rest)))\n                        (pack_consecutive_duplicates (cdr (pack_consecutive_duplicates rest))))\n                  (cons (list first) (pack_consecutive_duplicates rest))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtn9kqmo.rkt:22:4\n\n=: contract violation\n  expected: number?\n  given: '(7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtn9kqmo.rkt:23:4\n\n=: contract violation\n  expected: number?\n  given: '(17)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtn9kqmo.rkt:24:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates (filter (lambda (x) (not (equal? x first))) first-rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp265ijimv.rkt:19:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp265ijimv.rkt:20:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)]\n            [rest-duplicates (filter (lambda (x) (not (equal? x first))) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates rest-duplicates)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3fv5bo_b.rkt:20:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3fv5bo_b.rkt:21:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:14:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:15:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:16:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [rest-packed (pack_consecutive_duplicates rest)])\n       (if (equal? first (first rest))\n           (cons (cons first (first rest-packed)) (rest rest-packed))\n           (cons (list first) rest-packed)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8it5ohu.rkt:20:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8it5ohu.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8it5ohu.rkt:22:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"d\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons\n      (list (first list1))\n      (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:17:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:18:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:19:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1) (result '()))\n    (cond ((null? list1) result)\n          ((null? (cdr list1)) (cons (list (car list1)) result))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (loop (cdr list1) (cons (list (car list1)) result))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqrhui_6.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqrhui_6.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqrhui_6.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(null? list1) result]\n      [(null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1))))]\n      [(equal? (car list1) (caar result)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result)))]\n      [else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:16:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:17:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (let ((first_rest (car rest))\n                    (rest_rest (cdr rest)))\n                (if (equal? first first_rest)\n                    (pack_consecutive_duplicates_iter rest_rest (cons (cons first result) '()))\n                    (pack_consecutive_duplicates_iter rest_rest (cons (list first) result))))))))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprv21_6xl.rkt:24:4\nactual:     '((4 (8) (6) (6 (4) (3) (1) (0))))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprv21_6xl.rkt:25:4\nactual:     '((18) (26) (17) (18 (15) (10)))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprv21_6xl.rkt:26:4\nactual:     '((\"d\" (\"b\") (\"a\")))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((first (car list1))\n            (rest (cdr list1)))\n        (if (null? rest)\n            (list (list first))\n            (if (equal? first (car rest))\n                (cons (cons first (car (pack_consecutive_duplicates rest))) (cdr (pack_consecutive_duplicates rest)))\n                (cons (list first) (pack_consecutive_duplicates rest)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-duplicates (filter (lambda (x) (= x first)) rest)]\n            [rest-duplicates (filter (lambda (x) (not (= x first))) rest)])\n       (cons (cons first first-duplicates)\n             (pack_consecutive_duplicates rest-duplicates)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6q0e64e2.rkt:20:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6q0e64e2.rkt:21:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6q0e64e2.rkt:22:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else\n     (let ([first (car list1)]\n           [rest (cdr list1)])\n       (if (null? rest)\n           (list first)\n           (if (equal? first (car rest))\n               (cons first (pack_consecutive_duplicates rest))\n               (list first (pack_consecutive_duplicates rest)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ehmr7cd.rkt:21:4\nactual:     '(0 0 (1 (2 (3 (4 4 (5 (6 6 6 (7 (8 (9 (4 4)))))))))))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ehmr7cd.rkt:22:4\nactual:     '(10 10 (15 (19 (18 18 (17 (26 26 (17 (18 (10)))))))))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ehmr7cd.rkt:23:4\nactual:     '(\"a\" \"a\" (\"b\" (\"c\" (\"d\" \"d\"))))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else\n     (let* ([first (car list1)]\n            [rest (cdr list1)]\n            [first-sublist (list first)])\n       (if (null? rest)\n           (list first-sublist)\n           (if (= first (car rest))\n               (cons first-sublist (pack_consecutive_duplicates rest))\n               (cons first-sublist (pack_consecutive_duplicates rest)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm89vp09l.rkt:22:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm89vp09l.rkt:23:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm89vp09l.rkt:24:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:16:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:17:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 list2)\n    (cond\n      [(empty? list1) list2]\n      [(empty? (cdr list1)) (cons (cons (car list1) (list (car list1))) list2)]\n      [(equal? (car list1) (cadr list1))\n       (pack_consecutive_duplicates_helper (cdr list1) (cons (cons (car list1) (cons (car list1) (car list2))) (cdr list2)))]\n      [else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) list2))]))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz16j3o6p.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz16j3o6p.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz16j3o6p.rkt:21:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond ((null? list1) '())\n        ((null? (cdr list1)) (list list1))\n        (else (let ((first (car list1))\n                     (rest (cdr list1)))\n                 (if (equal? first (car rest))\n                     (cons (cons first (pack_consecutive_duplicates rest))\n                           (pack_consecutive_duplicates (cdr rest)))\n                     (cons (list first)\n                           (pack_consecutive_duplicates rest)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdon5l9aw.rkt:20:4\nactual:\n  '((0\n     (0)\n     (1)\n     (2)\n     (3)\n     (4\n      (4)\n      (5)\n      (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n      (6)\n      (7)\n      (8)\n      (9)\n      (4 (4)))\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4)))\n    (1)\n    (2)\n    (3)\n    (4\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4)))\n    (5)\n    (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n    (6)\n    (7)\n    (8)\n    (9)\n    (4 (4)))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdon5l9aw.rkt:21:4\nactual:\n  '((10\n     (10)\n     (15)\n     (19)\n     (18 (18) (17) (26 (26) (17) (18) (10)) (17) (18) (10))\n     (17)\n     (26 (26) (17) (18) (10))\n     (17)\n     (18)\n     (10))\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjv1mlcwv.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjv1mlcwv.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjv1mlcwv.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [else\n       (if (equal? (first (first result)) (first list1))\n           (pack_consecutive_duplicates_iter (rest list1) (cons (cons (first list1) (first result)) (rest result)))\n           (pack_consecutive_duplicates_iter (rest list1) (cons (list (first list1)) result)))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons\n      (list (first list1))\n      (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:17:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:18:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:19:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((first (car list1))\n            (rest (cdr list1)))\n        (if (null? rest)\n            (list (list first))\n            (let ((rest-result (pack_consecutive_duplicates rest)))\n              (if (equal? first (caar rest-result))\n                  (cons (cons first (car rest-result)) (cdr rest-result))\n                  (cons (list first) rest-result)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let ([first-element (first list1)]\n           [rest-of-list (rest list1)])\n       (cons\n        (cons first-element\n              (filter (lambda (x) (equal? x first-element)) rest-of-list))\n        (pack_consecutive_duplicates (filter (lambda (x) (not (equal? x first-element))) rest-of-list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8vbwyn9c.rkt:20:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8vbwyn9c.rkt:21:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1))\n                (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:15:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:16:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1)\n             (result '()))\n    (cond ((null? list1) (reverse result))\n          (else\n           (let ((sublist (list (car list1))))\n             (loop (cdr list1)\n                   (cons (loop (cdr list1)\n                               (if (equal? (car list1) (car (cdr list1)))\n                                   (cons (car (cdr list1)) sublist)\n                                   (cons (car list1) sublist)))\n                         result)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_4kxtyj.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_4kxtyj.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6_4kxtyj.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [(equal? (first list1) (second list1))\n     (cons (cons (first list1) (cons (second list1) empty))\n           (pack_consecutive_duplicates (rest (rest list1))))]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2fjgbxzn.rkt:18:4\nactual:     '((0 0) (1) (2) (3) (4 4) (5) (6 6) (6) (7) (8) (9) (4 4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car list1) (caar result)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (remove (first list1) list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0s68fyn.rkt:16:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0s68fyn.rkt:17:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0s68fyn.rkt:18:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx9zey8yq.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx9zey8yq.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx9zey8yq.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [(equal? (car list1) (cadr list1))\n     (cons (cons (car list1) (pack_consecutive_duplicates (cdr list1)))\n           (pack_consecutive_duplicates (cdr list1)))]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1kz7pk0j.rkt:18:4\nactual:\n  '((0\n     (0)\n     (1)\n     (2)\n     (3)\n     (4\n      (4)\n      (5)\n      (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n      (6 (6) (7) (8) (9) (4 (4)) (4))\n      (6)\n      (7)\n      (8)\n      (9)\n      (4 (4))\n      (4))\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n     (6 (6) (7) (8) (9) (4 (4)) (4))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4))\n     (4))\n    (0)\n    (1)\n    (2)\n    (3)\n    (4\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n     (6 (6) (7) (8) (9) (4 (4)) (4))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4))\n     (4))\n    (4)\n    (5)\n    (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n    (6 (6) (7) (8) (9) (4 (4)) (4))\n    (6)\n    (7)\n    (8)\n    (9)\n    (4 (4))\n    (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-sublist (list first)])\n       (cond\n         [(empty? rest) (list first-sublist)]\n         [(equal? first (first rest))\n          (cons first-sublist (pack_consecutive_duplicates rest))]\n         [else\n          (cons first-sublist (pack_consecutive_duplicates rest))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8yftigm.rkt:23:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8yftigm.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8yftigm.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else\n     (let ([first (car list1)]\n           [rest (cdr list1)])\n       (if (null? rest)\n           (list (list first))\n           (let ([next (car rest)])\n             (if (equal? first next)\n                 (cons (cons first (car (pack_consecutive_duplicates rest)))\n                       (cdr (pack_consecutive_duplicates rest)))\n                 (cons (list first) (pack_consecutive_duplicates rest))))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons\n      (list (first list1))\n      (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:17:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:18:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gs8dym.rkt:19:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (cons (first list1) (take-while (lambda (x) (= x (first list1))) (rest list1)))\n           (pack_consecutive_duplicates (drop-while (lambda (x) (= x (first list1))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpaw1ndg7n.rkt:8:32: take-while: unbound identifier\n  in: take-while\n  location...:\n   /tmp/tmpaw1ndg7n.rkt:8:32\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (remove (first list1) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:16:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (6) (7) (8) (9) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:17:4\nactual:     '((10) (15) (19) (18) (17) (26) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:18:4\nactual:     '((\"a\") (\"b\") (\"c\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (letrec ([pack (lambda (list1 acc)\n                   (cond [(empty? list1) acc]\n                         [(empty? acc) (pack (rest list1) (list (list (first list1))))]\n                         [(equal? (first (first acc)) (first list1))\n                          (pack (rest list1) (cons (cons (first list1) (first acc)) (rest acc)))]\n                         [else (pack (rest list1) (cons (list (first list1)) acc))]))])\n    (pack list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcafazuxt.rkt:18:4\nactual:     '((4 4) (9) (8) (7) (6 6 6) (5) (4 4) (3) (2) (1) (0 0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcafazuxt.rkt:19:4\nactual:     '((10) (18) (17) (26 26) (17) (18 18) (19) (15) (10 10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcafazuxt.rkt:20:4\nactual:     '((\"d\" \"d\") (\"c\") (\"b\") (\"a\" \"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n</code>\nI'm getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(a a a a b c c a a d e e e e)\n  arguments...:\n   'a\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're not using the <code>cdr</code> of the list, you're using the whole list.\n<code>(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpmhzb110m.rkt:22:49: unquote: not in quasiquote\n  in: (unquote you)\n  location...:\n   /tmp/tmpmhzb110m.rkt:22:49\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (if (equal? first (car rest))\n                  (pack_consecutive_duplicates_helper rest (cons (cons first (car result)) (cdr result)))\n                  (pack_consecutive_duplicates_helper rest (cons (list first) result)))))))\n  (pack_consecutive_duplicates_helper list1 (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdo91f3e.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdo91f3e.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdo91f3e.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (append (list (append (car result) (list (car list1)))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (append (list (list (car list1))) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (letrec ([first (car list1)]\n               [rest (cdr list1)]\n               [first-rest (cons first rest)]\n               [first-rest-duplicates (filter (lambda (x) (equal? first x)) first-rest)])\n        (cons first-rest-duplicates (pack_consecutive_duplicates (filter (lambda (x) (not (equal? first x))) first-rest))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn2xeea43.rkt:18:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn2xeea43.rkt:19:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list (car list1))\n                (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zap8edr.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(null? list1) result]\n      [else\n       (let* ([head (car list1)]\n              [tail (cdr list1)]\n              [sublist (list head)])\n         (cond\n           [(null? tail) (append result (list sublist))]\n           [(equal? head (car tail))\n            (pack_consecutive_duplicates_iter tail result (append sublist (list (car tail))))]\n           [else (pack_consecutive_duplicates_iter tail (append result (list sublist)))]))]))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwxo8qf1_.rkt:24:4\n\npack_consecutive_duplicates_iter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwxo8qf1_.rkt:25:4\n\npack_consecutive_duplicates_iter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwxo8qf1_.rkt:26:4\n\npack_consecutive_duplicates_iter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let ([first (first list1)]\n           [rest (rest list1)])\n       (if (equal? first (first rest))\n           (cons (cons first (pack_consecutive_duplicates rest))\n                 (pack_consecutive_duplicates rest))\n           (cons (list first)\n                 (pack_consecutive_duplicates rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzi_omw8.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzi_omw8.rkt:22:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzi_omw8.rkt:23:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [else\n     (let* ([first-element (first list1)]\n            [rest-of-list (rest list1)]\n            [first-element-of-rest (first rest-of-list)]\n            [rest-of-rest-of-list (rest rest-of-list)])\n       (cond\n         [(equal? first-element first-element-of-rest)\n          (cons (cons first-element (pack_consecutive_duplicates rest-of-list))\n                (pack_consecutive_duplicates rest-of-rest-of-list))]\n         [else\n          (cons (list first-element)\n                (pack_consecutive_duplicates rest-of-list))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptggji6nu.rkt:26:4\nactual:\n  '((0\n     (0)\n     (1)\n     (2)\n     (3)\n     (4\n      (4)\n      (5)\n      (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n      (6)\n      (7)\n      (8)\n      (9)\n      (4 (4)))\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4)))\n    (1)\n    (2)\n    (3)\n    (4\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4)))\n    (5)\n    (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n    (6)\n    (7)\n    (8)\n    (9)\n    (4 (4)))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptggji6nu.rkt:27:4\nactual:\n  '((10\n     (10)\n     (15)\n     (19)\n     (18 (18) (17) (26 (26) (17) (18) (10)) (17) (18) (10))\n     (17)\n     (26 (26) (17) (18) (10))\n     (17)\n     (18)\n     (10))\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else\n     (let ([first (car list1)]\n           [rest (cdr list1)])\n       (cons\n        (cons first (take-while (lambda (x) (eq? x first)) rest))\n        (pack_consecutive_duplicates (drop-while (lambda (x) (eq? x first)) rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmpmuh8facs.rkt:11:21: take-while: unbound identifier\n  in: take-while\n  location...:\n   /tmp/tmpmuh8facs.rkt:11:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((first (car list1))\n            (rest (cdr list1)))\n        (if (null? rest)\n            (list (list first))\n            (let ((next (car rest))\n                  (rest-rest (cdr rest)))\n              (if (equal? first next)\n                  (cons (cons first (car (pack_consecutive_duplicates rest)))\n                        (pack_consecutive_duplicates rest-rest))\n                  (cons (list first)\n                        (pack_consecutive_duplicates rest))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdkuu0e38.rkt:24:4\nactual:     '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (6) (7) (8) (9) (4 4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 list2)\n    (cond ((null? list1) list2)\n          ((null? list2) (pack_consecutive_duplicates_helper (cdr list1) (list (car list1))))\n          ((equal? (car list1) (car (car list2))) (pack_consecutive_duplicates_helper (cdr list1) (append (list (append (car list2) (list (car list1)))) (cdr list2))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (append (list (car list1)) list2)))))\n  (pack_consecutive_duplicates_helper list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdjsbbw4v.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdjsbbw4v.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdjsbbw4v.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjv1mlcwv.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjv1mlcwv.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjv1mlcwv.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (if (= first (car rest))\n                  (pack_consecutive_duplicates_iter rest (cons (cons first (car result)) (cdr result)))\n                  (pack_consecutive_duplicates_iter rest (cons (list first) result)))))))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgt7310_z.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgt7310_z.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgt7310_z.rkt:24:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (if (equal? first (car rest))\n                  (pack_consecutive_duplicates_iter rest (cons (cons first (car result)) (cdr result)))\n                  (pack_consecutive_duplicates_iter rest (cons (list first) result)))))))\n  (pack_consecutive_duplicates_iter list1 (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp239vm1t0.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp239vm1t0.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp239vm1t0.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1)\n             (result '()))\n    (if (null? list1)\n        (reverse result)\n        (let ((sublist (list (car list1))))\n          (loop (cdr list1)\n                (let loop ((list1 (cdr list1))\n                           (sublist sublist))\n                  (if (null? list1)\n                      (cons sublist result)\n                      (if (equal? (car list1) (car sublist))\n                          (loop (cdr list1)\n                                (cons (car list1) sublist))\n                          (cons sublist result)))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuyknk9r.rkt:25:4\nactual:\n  '((0 0) (0) (1) (2) (3) (4 4) (4) (5) (6 6 6) (6 6) (6) (7) (8) (9) (4 4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuyknk9r.rkt:26:4\nactual:\n  '((10 10) (10) (15) (19) (18 18) (18) (17) (26 26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuyknk9r.rkt:27:4\nactual:     '((\"a\" \"a\") (\"a\") (\"b\") (\"c\") (\"d\" \"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:14:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:15:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:16:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (last result)) (first list1)) (pack_consecutive_duplicates_iter (rest list1) (append result (list (list (first list1))))) ]\n      [else (pack_consecutive_duplicates_iter (rest list1) (append result (list (list (first list1)))))]))\n  (pack_consecutive_duplicates_iter list1 empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe1fx74ng.rkt:18:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe1fx74ng.rkt:19:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe1fx74ng.rkt:20:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n</code>\nI am not sure how to make it so that it will pack consecutive duplicates into sublists. I am not sure how to make it so that it will check if the next element is the same as the current element.\n\n\nA:\n\nYou can use <code>split-at</code> to split the list at the first element that is not equal to the first element of the list.\n<code>(define (pack-consecutive-duplicates lst)\n  (if (null? lst)\n      '()\n      (let* ([(first-duplicates . rest) (split-at lst (complement (curry = (car lst))))]\n             [first-duplicates (cons (car lst) first-duplicates)])\n        (cons first-duplicates (pack-consecutive-duplicates rest)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "/tmp/tmphr64yher.rkt:9:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmphr64yher.rkt:9:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhwhzykc.rkt:14:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhwhzykc.rkt:15:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhwhzykc.rkt:16:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [else\n     (let ([sublist (list (first list1))])\n       (for/fold ([acc (list sublist)])\n                 ([x (in-list (rest list1))])\n         (if (equal? (first sublist) x)\n             (set! sublist (cons x sublist))\n             (begin\n               (set! acc (cons sublist acc))\n               (set! sublist (list x))))\n         acc))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqp1wf8ks.rkt:24:4\nactual:     '((9) (8) (7) (6 6 6) (5) (4 4) (3) (2) (1) (0 0) (0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqp1wf8ks.rkt:25:4\nactual:     '((18) (17) (26 26) (17) (18 18) (19) (15) (10 10) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqp1wf8ks.rkt:26:4\nactual:     '((\"c\") (\"b\") (\"a\" \"a\") (\"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let ([first (first list1)]\n           [rest (rest list1)])\n       (if (equal? first (first rest))\n           (cons (cons first (pack_consecutive_duplicates rest)) (pack_consecutive_duplicates rest))\n           (cons (list first) (pack_consecutive_duplicates rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_omhjso.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_omhjso.rkt:20:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_omhjso.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (first result)) (first list1)) (pack_consecutive_duplicates_iter (rest list1) (cons (append (first result) (list (first list1))) (rest result)))]\n      [else (pack_consecutive_duplicates_iter (rest list1) (cons (list (first list1)) result))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list list1)]\n    [(equal? (first list1) (second list1))\n     (cons (list (first list1) (second list1))\n           (pack_consecutive_duplicates (rest (rest list1))))]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplacs7cvo.rkt:20:4\nactual:     '((0 0) (1) (2) (3) (4 4) (5) (6 6) (6) (7) (8) (9) (4 4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (cdr list1)) (list list1)]\n    [(equal? (car list1) (cadr list1))\n     (cons (list (car list1) (cadr list1))\n           (pack_consecutive_duplicates (cddr list1)))]\n    [else\n     (cons (list (car list1))\n           (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2tgfny1s.rkt:20:4\nactual:     '((0 0) (1) (2) (3) (4 4) (5) (6 6) (6) (7) (8) (9) (4 4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((first (car list1))\n            (rest (cdr list1)))\n        (cons (list first)\n              (pack_consecutive_duplicates rest)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pdsv0d1.rkt:17:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pdsv0d1.rkt:18:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pdsv0d1.rkt:19:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (first result)) (first list1))\n       (iter (rest list1) (cons (cons (first list1) (first result)) (rest result)))]\n      [else (iter (rest list1) (cons (list (first list1)) result))]))\n  (reverse (iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [(equal? (car list1) (cadr list1))\n     (cons (cons (car list1) (pack_consecutive_duplicates (cdr list1)))\n           (pack_consecutive_duplicates (cdr list1)))]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1kz7pk0j.rkt:18:4\nactual:\n  '((0\n     (0)\n     (1)\n     (2)\n     (3)\n     (4\n      (4)\n      (5)\n      (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n      (6 (6) (7) (8) (9) (4 (4)) (4))\n      (6)\n      (7)\n      (8)\n      (9)\n      (4 (4))\n      (4))\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n     (6 (6) (7) (8) (9) (4 (4)) (4))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4))\n     (4))\n    (0)\n    (1)\n    (2)\n    (3)\n    (4\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n     (6 (6) (7) (8) (9) (4 (4)) (4))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4))\n     (4))\n    (4)\n    (5)\n    (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n    (6 (6) (7) (8) (9) (4 (4)) (4))\n    (6)\n    (7)\n    (8)\n    (9)\n    (4 (4))\n    (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 list2)\n    (cond ((null? list1) list2)\n          ((null? list2) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car list2)) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (append (list (append (car list2) (list (car list1)))) (cdr list2))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (append (list (list (car list1))) list2)))))\n  (pack_consecutive_duplicates_helper list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxp5owe9t.rkt:17:4\nactual:     '((4 4) (9) (8) (7) (6 6 6) (5) (4 4) (3) (2) (1) (0 0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxp5owe9t.rkt:18:4\nactual:     '((10) (18) (17) (26 26) (17) (18 18) (19) (15) (10 10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxp5owe9t.rkt:19:4\nactual:     '((\"d\" \"d\") (\"c\") (\"b\") (\"a\" \"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:14:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:15:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:16:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons\n      (cons (first list1) (take-while (lambda (x) (equal? x (first list1))) (rest list1)))\n      (pack_consecutive_duplicates (drop-while (lambda (x) (equal? x (first list1))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "/tmp/tmpzd2gzitv.rkt:9:27: take-while: unbound identifier\n  in: take-while\n  location...:\n   /tmp/tmpzd2gzitv.rkt:9:27\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates (filter (lambda (x) (not (equal? x first))) first-rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp265ijimv.rkt:19:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp265ijimv.rkt:20:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_helper (rest list1) (list (list (first list1))))]\n      [(equal? (first (first result)) (first list1)) (pack_consecutive_duplicates_helper (rest list1) (cons (append (first result) (list (first list1))) (rest result)))]\n      [else (pack_consecutive_duplicates_helper (rest list1) (cons (list (first list1)) result))]))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-same? (equal? first-rest (take (length first-rest) list1))])\n       (if first-rest-same?\n           (cons first-rest (pack_consecutive_duplicates (drop (length first-rest) list1)))\n           (cons (list first) (pack_consecutive_duplicates rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuncm8zup.rkt:21:4\n\ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)\n  argument position: 2nd\n  other arguments...:\n   16\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuncm8zup.rkt:22:4\n\ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(10 10 15 19 18 18 17 26 26 17 18 10)\n  argument position: 2nd\n  other arguments...:\n   12\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuncm8zup.rkt:23:4\n\ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(\"a\" \"a\" \"b\" \"c\" \"d\" \"d\")\n  argument position: 2nd\n  other arguments...:\n   6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:14:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:15:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:16:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1))\n                (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcf6250o6.rkt:16:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcf6250o6.rkt:17:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcf6250o6.rkt:18:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [else\n     (let ([first-element (first list1)])\n       (cond\n         [(equal? first-element (first (rest list1)))\n          (cons (cons first-element (first (pack_consecutive_duplicates (rest list1))))\n                (rest (pack_consecutive_duplicates (rest list1))))]\n         [else\n          (cons (list first-element)\n                (pack_consecutive_duplicates (rest list1)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-of-rest (first rest)]\n            [rest-of-rest (rest rest)])\n       (if (equal? first first-of-rest)\n           (cons (cons first (pack_consecutive_duplicates rest))\n                 (pack_consecutive_duplicates rest-of-rest))\n           (cons (list first) (pack_consecutive_duplicates rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpay4q8lh5.rkt:22:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpay4q8lh5.rkt:23:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpay4q8lh5.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [rest-list (pack_consecutive_duplicates rest)])\n       (if (equal? first (first rest-list))\n           (cons first-rest (rest rest-list))\n           (cons first-rest rest-list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbshqgzsl.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbshqgzsl.rkt:22:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbshqgzsl.rkt:23:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"d\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (letrec ([pack (lambda (list1 list2)\n                   (if (null? list1)\n                       list2\n                       (if (null? list2)\n                           (pack (cdr list1) (list (list (car list1))))\n                           (if (equal? (car list1) (caar list2))\n                               (pack (cdr list1) (cons (cons (car list1) (car list2)) (cdr list2)))\n                               (pack (cdr list1) (cons (list (car list1)) list2))))))])\n    (reverse (pack list1 '()))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(null? list1) result]\n      [(null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1))))]\n      [(equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (append (list (append (car result) (list (car list1)))) (cdr result)))]\n      [else (pack_consecutive_duplicates_iter (cdr list1) (append (list (list (car list1))) result))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [else\n       (define (get_duplicates list1 element)\n         (cond\n           [(empty? list1) (list element)]\n           [(equal? (first list1) element) (cons element (get_duplicates (rest list1) element))]\n           [else (list element)]))\n       (define duplicates (get_duplicates list1 (first list1)))\n       (pack_consecutive_duplicates_iter (drop (length duplicates) list1) (append result (list duplicates)))]))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6_8awb3.rkt:23:4\n\ndrop: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)\n  argument position: 2nd\n  other arguments...:\n   3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6_8awb3.rkt:24:4\n\ndrop: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(10 10 15 19 18 18 17 26 26 17 18 10)\n  argument position: 2nd\n  other arguments...:\n   3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6_8awb3.rkt:25:4\n\ndrop: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(\"a\" \"a\" \"b\" \"c\" \"d\" \"d\")\n  argument position: 2nd\n  other arguments...:\n   3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let ([first (first list1)]\n           [rest (rest list1)])\n       (let ([first-sublist (list first)])\n         (let loop ([rest rest]\n                    [sublist first-sublist])\n           (cond\n             [(empty? rest) (list sublist)]\n             [(equal? first (first rest))\n              (loop (rest rest) (append sublist (list (first rest))))]\n             [else\n              (cons sublist (pack_consecutive_duplicates rest))]))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp54n27klv.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp54n27klv.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp54n27klv.rkt:27:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list2 result)\n    (cond\n      [(empty? list2) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list2) (list (list (first list2))))]\n      [(equal? (first (first result)) (first list2)) (pack_consecutive_duplicates_iter (rest list2) (cons (cons (first list2) (first result)) (rest result)))]\n      [else (pack_consecutive_duplicates_iter (rest list2) (cons (list (first list2)) result))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1)\n             (result '()))\n    (cond ((null? list1) (reverse result))\n          ((null? (cdr list1)) (reverse (cons (list (car list1)) result)))\n          (else (if (equal? (car list1) (cadr list1))\n                   (loop (cdr list1) (cons (cons (car list1) (car result)) (cdr result)))\n                   (loop (cdr list1) (cons (list (car list1)) result)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc2sqc8b1.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc2sqc8b1.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc2sqc8b1.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond ((null? list1) '())\n        ((null? (cdr list1)) (list list1))\n        ((equal? (car list1) (cadr list1)) (cons (list (car list1) (cadr list1)) (pack_consecutive_duplicates (cddr list1))))\n        (else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptl7lyig7.rkt:15:4\nactual:     '((0 0) (1) (2) (3) (4 4) (5) (6 6) (6) (7) (8) (9) (4 4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (cdr list1)) (list list1)]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp098ljz_5.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp098ljz_5.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp098ljz_5.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates (remove first first-rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplmeyk25u.rkt:19:4\nactual:\n  '((0 0)\n    (0)\n    (1)\n    (2)\n    (3)\n    (4 4 4 4)\n    (4 4 4)\n    (5)\n    (6 6 6)\n    (6 6)\n    (6)\n    (7)\n    (8)\n    (9)\n    (4 4)\n    (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplmeyk25u.rkt:20:4\nactual:\n  '((10 10 10)\n    (10 10)\n    (15)\n    (19)\n    (18 18 18)\n    (18 18)\n    (17 17)\n    (26 26)\n    (26)\n    (17)\n    (18)\n    (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplmeyk25u.rkt:21:4\nactual:     '((\"a\" \"a\") (\"a\") (\"b\") (\"c\") (\"d\" \"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond [(null? list1) '()]\n        [else (cons (list (car list1))\n                    (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0headn_v.rkt:14:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0headn_v.rkt:15:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0headn_v.rkt:16:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car list1) (caar result)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1)\n             (acc '()))\n    (cond\n      [(empty? list1) (reverse acc)]\n      [else (let ((first (first list1))\n                   (rest (rest list1)))\n              (loop (drop-while (lambda (x) (equal? x first)) rest)\n                    (cons (cons first (take-while (lambda (x) (equal? x first)) rest)) acc)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpcyiqy3fe.rkt:11:21: drop-while: unbound identifier\n  in: drop-while\n  location...:\n   /tmp/tmpcyiqy3fe.rkt:11:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1) (list2 '()) (list3 '()))\n    (cond ((null? list1) (reverse list2))\n          ((null? list2) (loop (cdr list1) (list (list (car list1))) list3))\n          ((equal? (car list1) (caar list2)) (loop (cdr list1) (cons (cons (car list1) (car list2)) (cdr list2)) list3))\n          (else (loop (cdr list1) (list (list (car list1))) list3)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2hrr8aql.rkt:16:4\nactual:     '((4 4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2hrr8aql.rkt:17:4\nactual:     '((10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2hrr8aql.rkt:18:4\nactual:     '((\"d\" \"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (let ((second (car rest)))\n                (if (= first second)\n                    (pack_consecutive_duplicates_iter rest (cons (cons first (car result)) (cdr result)))\n                    (pack_consecutive_duplicates_iter rest (cons (list first) result))))))))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6cknbj2.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6cknbj2.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6cknbj2.rkt:25:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 list2)\n    (if (null? list1)\n        list2\n        (if (null? list2)\n            (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1))))\n            (if (equal? (car list1) (caar list2))\n                (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car list2)) (cdr list2)))\n                (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) list2))))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1))\n           (pack_consecutive_duplicates_iter (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1)\n             (acc '()))\n    (cond ((null? list1) (reverse acc))\n          ((null? (cdr list1)) (reverse (cons (list (car list1)) acc)))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (car acc)) (cdr acc))))\n          (else (loop (cdr list1) (cons (list (car list1)) acc))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppfhyrkao.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppfhyrkao.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppfhyrkao.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let ([first (first list1)]\n           [rest (rest list1)])\n       (if (equal? first (first rest))\n           (cons (cons first (pack_consecutive_duplicates rest))\n                 (pack_consecutive_duplicates rest))\n           (cons (list first)\n                 (pack_consecutive_duplicates rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzi_omw8.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzi_omw8.rkt:22:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptzi_omw8.rkt:23:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (first result)) (first list1)) (pack_consecutive_duplicates_iter (rest list1) (cons (cons (first list1) (first result)) (rest result)))]\n      [else (pack_consecutive_duplicates_iter (rest list1) (cons (list (first list1)) result))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates (remove first-rest-duplicates first-rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123439,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((first (car list1))\n            (rest (cdr list1)))\n        (if (null? rest)\n            (list (list first))\n            (let ((next (car rest)))\n              (if (equal? first next)\n                  (cons (cons first (car (pack_consecutive_duplicates rest)))\n                        (pack_consecutive_duplicates (cdr (pack_consecutive_duplicates rest))))\n                  (cons (list first) (pack_consecutive_duplicates rest))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd8u3tza5.rkt:22:4\nactual:\n  '((0 0)\n    ((1))\n    ((2))\n    ((3))\n    ((4 4))\n    (((5)))\n    (((6 6 6)))\n    (((((7)))))\n    (((((8)))))\n    (((((9)))))\n    (((((4 4))))))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd8u3tza5.rkt:23:4\nactual:\n  '((10 10)\n    ((15))\n    ((19))\n    ((18 18))\n    (((17)))\n    (((26 26)))\n    ((((17))))\n    ((((18))))\n    ((((10)))))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd8u3tza5.rkt:24:4\nactual:     '((\"a\" \"a\") ((\"b\")) ((\"c\")) ((\"d\" \"d\")))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((= (car (car result)) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_h5127e7.rkt:19:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let loop ((list1 list1) (list2 '()) (list3 '()))\n        (if (null? list1)\n            (reverse (cons list2 list3))\n            (if (equal? (car list1) (car list2))\n                (loop (cdr list1) (cons (car list1) list2) list3)\n                (loop (cdr list1) (list (car list1)) (cons list2 list3)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp64wxm8gp.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp64wxm8gp.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp64wxm8gp.rkt:21:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates (filter (lambda (x) (not (equal? x first))) first-rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp265ijimv.rkt:19:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp265ijimv.rkt:20:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-dups (filter (lambda (x) (equal? x first)) rest)]\n            [rest-dups (filter (lambda (x) (not (equal? x first))) rest)])\n       (cons (cons first first-dups) (pack_consecutive_duplicates rest-dups)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptdktzamt.rkt:19:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptdktzamt.rkt:20:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)]\n            [rest-duplicates (filter (lambda (x) (not (equal? x first))) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates rest-duplicates)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3fv5bo_b.rkt:20:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3fv5bo_b.rkt:21:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-sublist (cons first empty)]\n            [rest-sublists (pack_consecutive_duplicates rest)])\n       (if (equal? first (first rest))\n           (cons (cons first first-sublist) rest-sublists)\n           (cons first-sublist rest-sublists)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp9zhvs9z.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp9zhvs9z.rkt:22:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp9zhvs9z.rkt:23:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"d\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1)\n             (result '()))\n    (cond ((null? list1) result)\n          ((null? (cdr list1)) (cons (list (car list1)) result))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (loop (cdr list1) (cons (list (car list1)) result))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfr3flkhm.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfr3flkhm.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfr3flkhm.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 list2)\n    (cond ((null? list1) list2)\n          ((null? list2) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar list2) (car list1))\n           (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car list2)) (cdr list2))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) list2)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (filter (lambda (x) (not (equal? x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc11dlzsu.rkt:16:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc11dlzsu.rkt:17:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc11dlzsu.rkt:18:4\nactual:     '((\"a\") (\"b\") (\"c\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else\n     (let* ([first (car list1)]\n            [rest (cdr list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)]\n            [rest-duplicates (filter (lambda (x) (not (equal? x first))) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates rest-duplicates)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5vtmqjyd.rkt:20:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5vtmqjyd.rkt:21:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1))\n                (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:15:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:16:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu0eqrfqz.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're not doing anything wrong, but you're not doing anything right either.\nThe problem is that you're not using the <code>cdr</code> of the list to compare with the <code>car</code>, and you're not recursing on the <code>cdr</code> of the list.\n<code>(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n</code>\nYou're just recursing on the <code>cdr</code> of the list, and you're not using the <code>cdr</code> of the list to compare with the <code>car</code>.\nThe solution is to use the <code>cdr</code> of the list to compare with the <code>car</code>, and to recurse on the <code>cdr</code> of the list.\n<code>(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [(equal? (car list1) (cadr list1)) (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpqrgsqmt7.rkt:15:31: unquote: not in quasiquote\n  in: (unquote but)\n  location...:\n   /tmp/tmpqrgsqmt7.rkt:15:31\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx9zey8yq.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx9zey8yq.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx9zey8yq.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [else (if (equal? (first (last result)) (first list1))\n                (pack_consecutive_duplicates_iter (rest list1) (append (butlast result) (list (append (last result) (list (first list1))))))\n                (pack_consecutive_duplicates_iter (rest list1) (append result (list (list (first list1))))))]))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmpxcrufke8.rkt:10:72: butlast: unbound identifier\n  in: butlast\n  location...:\n   /tmp/tmpxcrufke8.rkt:10:72\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (append result (list (list first)))\n              (let ((second (car rest)))\n                (if (equal? first second)\n                    (pack_consecutive_duplicates_iter rest (append result (list (list first second))))\n                    (pack_consecutive_duplicates_iter rest (append result (list (list first)))))))))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "/tmp/tmp5czld9ke.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 18\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (remove (first list1) list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0s68fyn.rkt:16:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0s68fyn.rkt:17:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf0s68fyn.rkt:18:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (last result)) (first list1)) (pack_consecutive_duplicates_iter (rest list1) (append result (list (first list1))))]\n      [else (pack_consecutive_duplicates_iter (rest list1) (append result (list (list (first list1)))))]))\n  (pack_consecutive_duplicates_iter list1 empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbrdqdnn3.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbrdqdnn3.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbrdqdnn3.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [else\n     (let ([first-element (first list1)]\n           [rest-list (rest list1)])\n       (cond\n         [(equal? first-element (first rest-list))\n          (cons (cons first-element (first (pack_consecutive_duplicates rest-list)))\n                (pack_consecutive_duplicates (rest (pack_consecutive_duplicates rest-list))))]\n         [else\n          (cons (list first-element) (pack_consecutive_duplicates rest-list))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_569m902.rkt:23:4\nactual:\n  '((0 0)\n    ((1))\n    ((2))\n    ((3))\n    ((4 4))\n    (((5)))\n    (((6 6 6)))\n    (((((7)))))\n    (((((8)))))\n    (((((9)))))\n    (((((4 4))))))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_569m902.rkt:24:4\nactual:\n  '((10 10)\n    ((15))\n    ((19))\n    ((18 18))\n    (((17)))\n    (((26 26)))\n    ((((17))))\n    ((((18))))\n    ((((10)))))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_569m902.rkt:25:4\nactual:     '((\"a\" \"a\") ((\"b\")) ((\"c\")) ((\"d\" \"d\")))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car list1) (caar result)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (cdr list1)) (list (list (car list1)))]\n    [(equal? (car list1) (cadr list1))\n     (cons (cons (car list1) (pack_consecutive_duplicates (cdr list1)))\n           (pack_consecutive_duplicates (cdr list1)))]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf9lfxzjo.rkt:18:4\nactual:\n  '((0\n     (0)\n     (1)\n     (2)\n     (3)\n     (4\n      (4)\n      (5)\n      (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n      (6 (6) (7) (8) (9) (4 (4)) (4))\n      (6)\n      (7)\n      (8)\n      (9)\n      (4 (4))\n      (4))\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n     (6 (6) (7) (8) (9) (4 (4)) (4))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4))\n     (4))\n    (0)\n    (1)\n    (2)\n    (3)\n    (4\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n     (6 (6) (7) (8) (9) (4 (4)) (4))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4))\n     (4))\n    (4)\n    (5)\n    (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n    (6 (6) (7) (8) (9) (4 (4)) (4))\n    (6)\n    (7)\n    (8)\n    (9)\n    (4 (4))\n    (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else\n     (cons (list (car list1))\n           (pack_consecutive_duplicates (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4ysj_l5.rkt:16:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4ysj_l5.rkt:17:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4ysj_l5.rkt:18:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 list2)\n    (if (null? list1)\n        list2\n        (if (null? list2)\n            (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1))))\n            (if (equal? (car (car list2)) (car list1))\n                (pack_consecutive_duplicates_iter (cdr list1) (cons (append (car list2) (list (car list1))) (cdr list2)))\n                (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) list2))))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (equal? (car list1) (cadr list1))\n                (cons (append sublist (list (cadr list1)))\n                      (pack_consecutive_duplicates (cdr list1)))\n                (cons sublist (pack_consecutive_duplicates (cdr list1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptxo_3ia2.rkt:20:4\nactual:\n  '((0 0) (0) (1) (2) (3) (4 4) (4) (5) (6 6) (6 6) (6) (7) (8) (9) (4 4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptxo_3ia2.rkt:21:4\nactual:\n  '((10 10) (10) (15) (19) (18 18) (18) (17) (26 26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptxo_3ia2.rkt:22:4\nactual:     '((\"a\" \"a\") (\"a\") (\"b\") (\"c\") (\"d\" \"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1) (list2 '()))\n    (cond ((null? list1) list2)\n          ((null? (cdr list1)) (cons (list (car list1)) list2))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (car list2)) (cdr list2))))\n          (else (loop (cdr list1) (cons (list (car list1)) list2))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3t_lxj95.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3t_lxj95.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3t_lxj95.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (equal? (car list1) (cadr list1))\n                (append (pack_consecutive_duplicates (cdr list1)) (list sublist))\n                (cons sublist (pack_consecutive_duplicates (cdr list1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgq8qhbgv.rkt:19:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (4) (4) (6) (6) (4) (0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgq8qhbgv.rkt:20:4\nactual:     '((10) (15) (19) (18) (17) (26) (17) (18) (10) (26) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgq8qhbgv.rkt:21:4\nactual:     '((\"a\") (\"b\") (\"c\") (\"d\") (\"d\") (\"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (remove (first list1) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:16:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (6) (7) (8) (9) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:17:4\nactual:     '((10) (15) (19) (18) (17) (26) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:18:4\nactual:     '((\"a\") (\"b\") (\"c\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ([list1 list1]\n             [result '()])\n    (cond [(empty? list1) (reverse result)]\n          [(empty? result) (loop (cdr list1) (list (list (car list1))))]\n          [(equal? (caar result) (car list1))\n           (loop (cdr list1) (cons (cons (car list1) (car result)) (cdr result)))]\n          [else (loop (cdr list1) (cons (list (car list1)) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (let loop ((list1 list1)\n             (acc '()))\n    (cond ((null? list1) (reverse acc))\n          ((null? (cdr list1)) (reverse (cons (list (car list1)) acc)))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (car acc)) (cdr acc))))\n          (else (loop (cdr list1) (cons (list (car list1)) acc))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppfhyrkao.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppfhyrkao.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppfhyrkao.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:14:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:15:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:16:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else\n     (let* ([first (car list1)]\n            [rest (cdr list1)]\n            [first-rest (car rest)]\n            [rest-rest (cdr rest)])\n       (if (= first first-rest)\n           (cons (cons first (pack_consecutive_duplicates rest))\n                 (pack_consecutive_duplicates rest-rest))\n           (cons (list first)\n                 (pack_consecutive_duplicates rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2kqqpj4o.rkt:24:4\nactual:\n  '((0\n     (0)\n     (1)\n     (2)\n     (3)\n     (4\n      (4)\n      (5)\n      (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n      (6)\n      (7)\n      (8)\n      (9)\n      (4 (4)))\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4)))\n    (1)\n    (2)\n    (3)\n    (4\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4)))\n    (5)\n    (6 (6 (6) (7) (8) (9) (4 (4))) (7) (8) (9) (4 (4)))\n    (6)\n    (7)\n    (8)\n    (9)\n    (4 (4)))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2kqqpj4o.rkt:25:4\nactual:\n  '((10\n     (10)\n     (15)\n     (19)\n     (18 (18) (17) (26 (26) (17) (18) (10)) (17) (18) (10))\n     (17)\n     (26 (26) (17) (18) (10))\n     (17)\n     (18)\n     (10))\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else\n     (let* ([first (car list1)]\n            [rest (cdr list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates (filter (lambda (x) (not (equal? x first))) first-rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8cqivo70.rkt:19:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8cqivo70.rkt:20:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (let ((next (car rest)))\n                (if (= first next)\n                    (pack_consecutive_duplicates_iter rest (cons (cons first (car result)) (cdr result)))\n                    (pack_consecutive_duplicates_iter rest (cons (list first) result))))))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp49s73jh7.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp49s73jh7.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp49s73jh7.rkt:25:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (append (list (append (car result) (list (car list1)))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (append (list (list (car list1))) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((first (car list1))\n            (rest (cdr list1)))\n        (cons (cons first (filter (lambda (x) (equal? x first)) rest))\n              (pack_consecutive_duplicates (filter (lambda (x) (not (equal? x first))) rest))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyd0rvwxq.rkt:17:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyd0rvwxq.rkt:18:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (if (equal? first (car rest))\n                  (pack_consecutive_duplicates_helper rest (cons (cons first (car result)) (cdr result)))\n                  (pack_consecutive_duplicates_helper rest (cons (list first) result)))))))\n  (pack_consecutive_duplicates_helper list1 (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdo91f3e.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdo91f3e.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdo91f3e.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list list1)]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wrwkmd.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wrwkmd.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7wrwkmd.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (let ((second (car rest)))\n                (if (= first second)\n                    (pack_consecutive_duplicates_iter rest (cons (cons first (car result)) (cdr result)))\n                    (pack_consecutive_duplicates_iter rest (cons (list first) result))))))))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6cknbj2.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6cknbj2.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6cknbj2.rkt:25:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond [(empty? list1) empty]\n        [else\n         (let* ([first (first list1)]\n                [rest (rest list1)]\n                [packed (pack_consecutive_duplicates rest)]\n                [first-packed (first packed)]\n                [rest-packed (rest packed)])\n           (cond [(empty? rest) (list first)]\n                 [(equal? first first-packed) (cons first first-packed)]\n                 [else (cons (list first) packed)]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjclzlyzf.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjclzlyzf.rkt:22:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 10\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjclzlyzf.rkt:23:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"d\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (equal? (car list1) (cadr list1))\n                (append (pack_consecutive_duplicates (cdr list1)) (list sublist))\n                (cons sublist (pack_consecutive_duplicates (cdr list1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgq8qhbgv.rkt:19:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (4) (4) (6) (6) (4) (0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgq8qhbgv.rkt:20:4\nactual:     '((10) (15) (19) (18) (17) (26) (17) (18) (10) (26) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgq8qhbgv.rkt:21:4\nactual:     '((\"a\") (\"b\") (\"c\") (\"d\") (\"d\") (\"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (equal? (car list1) (cadr list1))\n                (append (pack_consecutive_duplicates (cdr list1)) (list sublist))\n                (cons sublist (pack_consecutive_duplicates (cdr list1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgq8qhbgv.rkt:19:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (4) (4) (6) (6) (4) (0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgq8qhbgv.rkt:20:4\nactual:     '((10) (15) (19) (18) (17) (26) (17) (18) (10) (26) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgq8qhbgv.rkt:21:4\nactual:     '((\"a\") (\"b\") (\"c\") (\"d\") (\"d\") (\"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (remove (first list1) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:16:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (6) (7) (8) (9) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:17:4\nactual:     '((10) (15) (19) (18) (17) (26) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1lmu1ik8.rkt:18:4\nactual:     '((\"a\") (\"b\") (\"c\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-same? (lambda (lst) (equal? first (first lst)))]\n            [same-as-first (take-while first-rest-same? rest)]\n            [rest-of-rest (drop-while first-rest-same? rest)])\n       (cons (cons first same-as-first)\n             (pack_consecutive_duplicates rest-of-rest)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "/tmp/tmp6tc501t5.rkt:12:28: take-while: unbound identifier\n  in: take-while\n  location...:\n   /tmp/tmp6tc501t5.rkt:12:28\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:16:4\nactual:     '((0) (1) (2) (3) (4) (5) (6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:17:4\nactual:     '((10) (15) (19) (18) (17) (26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo06q3794.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (let ([first (first list1)])\n       (cons (cons first (filter (lambda (x) (equal? x first)) list1))\n             (pack_consecutive_duplicates (remove (lambda (x) (equal? x first)) list1))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123440,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (let ((second (car rest)))\n                (if (= first second)\n                    (pack_consecutive_duplicates_helper rest (cons (cons first (car result)) (cdr result)))\n                    (pack_consecutive_duplicates_helper rest (cons (list first) result))))))))\n  (pack_consecutive_duplicates_helper list1 (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qqa288z.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qqa288z.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qqa288z.rkt:25:4\n\n=: contract violation\n  expected: number?\n  given: \"a\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((first (car list1))\n            (rest (cdr list1)))\n        (if (null? rest)\n            (list list1)\n            (if (equal? first (car rest))\n                (cons (cons first (pack_consecutive_duplicates rest))\n                      (pack_consecutive_duplicates rest))\n                (cons (list first)\n                      (pack_consecutive_duplicates rest)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwp32eto.rkt:22:4\nactual:\n  '((0\n     (0)\n     (1)\n     (2)\n     (3)\n     (4\n      (4)\n      (5)\n      (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n      (6 (6) (7) (8) (9) (4 (4)) (4))\n      (6)\n      (7)\n      (8)\n      (9)\n      (4 (4))\n      (4))\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n     (6 (6) (7) (8) (9) (4 (4)) (4))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4))\n     (4))\n    (0)\n    (1)\n    (2)\n    (3)\n    (4\n     (4)\n     (5)\n     (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n     (6 (6) (7) (8) (9) (4 (4)) (4))\n     (6)\n     (7)\n     (8)\n     (9)\n     (4 (4))\n     (4))\n    (4)\n    (5)\n    (6 (6 (6) (7) (8) (9) (4 (4)) (4)) (6) (7) (8) (9) (4 (4)) (4))\n    (6 (6) (7) (8) (9) (4 (4)) (4))\n    (6)\n    (7)\n    (8)\n    (9)\n    (4 (4))\n    (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (equal? (car list1) (cadr list1))\n                (cons (append sublist (list (cadr list1))) (pack_consecutive_duplicates (cddr list1)))\n                (cons sublist (pack_consecutive_duplicates (cdr list1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoxp20shx.rkt:19:4\nactual:     '((0 0) (1) (2) (3) (4 4) (5) (6 6) (6) (7) (8) (9) (4 4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      list1\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (equal? (car list1) (cadr list1))\n                (append (list (append sublist (list (cadr list1)))) (pack_consecutive_duplicates (cdr (cdr list1))))\n                (append (list sublist) (pack_consecutive_duplicates (cdr list1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj4wz9itn.rkt:19:4\nactual:     '((0 0) (1) (2) (3) (4 4) (5) (6 6) (6) (7) (8) (9) (4 4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(null? list1) '()]\n    [else\n     (let* ([first (car list1)]\n            [rest (cdr list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)]\n            [rest-duplicates (filter (lambda (x) (not (equal? x first))) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates rest-duplicates)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5vtmqjyd.rkt:20:4\nactual:     '((0 0) (1) (2) (3) (4 4 4 4) (5) (6 6 6) (7) (8) (9))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5vtmqjyd.rkt:21:4\nactual:     '((10 10 10) (15) (19) (18 18 18) (17 17) (26 26))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (car (car result)) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (append (list (append (car result) (list (car list1)))) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (append (list (list (car list1))) result)))))\n  (pack_consecutive_duplicates_iter list1 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp80qnzexm.rkt:17:4\nactual:     '((4 4) (9) (8) (7) (6 6 6) (5) (4 4) (3) (2) (1) (0 0))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp80qnzexm.rkt:18:4\nactual:     '((10) (18) (17) (26 26) (17) (18 18) (19) (15) (10 10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp80qnzexm.rkt:19:4\nactual:     '((\"d\" \"d\") (\"c\") (\"b\") (\"a\" \"a\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:14:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:15:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmg1a53kc.rkt:16:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (first result)) (first list1)) (pack_consecutive_duplicates_iter (rest list1) (cons (append (first result) (list (first list1))) (rest result)))]\n      [else (pack_consecutive_duplicates_iter (rest list1) (cons (list (first list1)) result))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (if (null? list1)\n      '()\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (equal? (car list1) (cadr list1))\n                (cons (cons (car list1) (pack_consecutive_duplicates (cdr list1)))\n                      (cddr list1))\n                (cons sublist (pack_consecutive_duplicates (cdr list1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgke_wgum.rkt:20:4\nactual:\n  '((0\n     (0)\n     (1)\n     (2)\n     (3)\n     (4 (4) (5) (6 (6 (6) (7) (8) (9) (4 (4))) 7 8 9 4 4) 6 7 8 9 4 4)\n     5\n     6\n     6\n     6\n     7\n     8\n     9\n     4\n     4)\n    1\n    2\n    3\n    4\n    4\n    5\n    6\n    6\n    6\n    7\n    8\n    9\n    4\n    4)\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgke_wgum.rkt:21:4\nactual:\n  '((10\n     (10)\n     (15)\n     (19)\n     (18 (18) (17) (26 (26) (17) (18) (10)) 17 18 10)\n     17\n     26\n     26\n     17\n     18\n     10)\n    15\n    19\n    18\n    18\n    17\n    26\n    26\n    17\n    18\n    10)\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgke_wgum.rkt:22:4\nactual:     '((\"a\" (\"a\") (\"b\") (\"c\") (\"d\" (\"d\"))) \"b\" \"c\" \"d\" \"d\")\nexpected: ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (first result)) (first list1)) (pack_consecutive_duplicates_iter (rest list1) (cons (cons (first list1) (first result)) (rest result)))]\n      [else (pack_consecutive_duplicates_iter (rest list1) (cons (list (first list1)) result))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1665517595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [else (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123423,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx9zey8yq.rkt:15:4\nactual:     '((0) (0) (1) (2) (3) (4) (4) (5) (6) (6) (6) (7) (8) (9) (4) (4))\nexpected:   '((0 0) (1) (2) (3) (4 4) (5) (6 6 6) (7) (8) (9) (4 4))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx9zey8yq.rkt:16:4\nactual:     '((10) (10) (15) (19) (18) (18) (17) (26) (26) (17) (18) (10))\nexpected:   '((10 10) (15) (19) (18 18) (17) (26 26) (17) (18) (10))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx9zey8yq.rkt:17:4\nactual:     '((\"a\") (\"a\") (\"b\") (\"c\") (\"d\") (\"d\"))\nexpected:   '((\"a\" \"a\") (\"b\") (\"c\") (\"d\" \"d\"))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n  (define (pack_consecutive_duplicates_helper list1 list2)\n    (cond\n      [(null? list1) list2]\n      [(null? list2) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1))))]\n      [(equal? (car list1) (caar list2)) (pack_consecutive_duplicates_helper (cdr list1) (cons (cons (car list1) (car list2)) (cdr list2)))]\n      [else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) list2))]))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}