{
  "name": "mbpp_227_min_of_three",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (<= a b) (<= a c)) a]\n    [(and (<= b a) (<= b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min_of_two a c)]\n        [(< b c) (min_of_two b c)]\n        [else (min_of_two a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "/tmp/tmpke7nn6tm.rkt:5:18: min_of_two: unbound identifier\n  in: min_of_two\n  location...:\n   /tmp/tmpke7nn6tm.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond\n                [(< a c) a]\n                [else c])]\n    [else (cond\n            [(< b c) b]\n            [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond ((and (<= a b) (<= a c)) a)\n        ((and (<= b a) (<= b c)) b)\n        (else c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min_of_two a c)]\n        [(< b c) (min_of_two b c)]\n        [else (min_of_two a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "/tmp/tmpke7nn6tm.rkt:5:18: min_of_two: unbound identifier\n  in: min_of_two\n  location...:\n   /tmp/tmpke7nn6tm.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond\n                [(< a c) a]\n                [else c])]\n    [else (cond\n            [(< b c) b]\n            [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (<= a b) (<= a c)) a]\n    [(and (<= b a) (<= b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c)]\n    [(< b c) (min_of_three b c)]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm06r8pzi.rkt:15:4\n\nmin_of_three: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 3\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm06r8pzi.rkt:16:4\n\nmin_of_three: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 3\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (cond [(< a c) a] [else c])]\n        [(< b c) b]\n        [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond ((and (<= a b) (<= a c)) a)\n        ((and (<= b a) (<= b c)) b)\n        ((and (<= c a) (<= c b)) c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min_of_two a c)]\n        [(< b c) (min_of_two b c)]\n        [else (min_of_two a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "/tmp/tmpke7nn6tm.rkt:5:18: min_of_two: unbound identifier\n  in: min_of_two\n  location...:\n   /tmp/tmpke7nn6tm.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b)\n     (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond\n               [(< a c) a]\n               [else c])]\n    [else (cond\n            [(< b c) b]\n            [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (&lt; a b) (&lt; a c)) a]\n    [(and (&lt; b a) (&lt; b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122604,
      "stdout": "",
      "stderr": "/tmp/tmpkilq948v.rkt:7:4: read-syntax: expected a `]` to close `[`\n  possible cause: indentation suggests a missing `]` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min_of_two a c)]\n        [(< b c) (min_of_two b c)]\n        [else (min_of_two a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "/tmp/tmpke7nn6tm.rkt:5:18: min_of_two: unbound identifier\n  in: min_of_two\n  location...:\n   /tmp/tmpke7nn6tm.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond ((and (< a b) (< a c)) a)\n        ((and (< b a) (< b c)) b)\n        (else c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min_of_two a c)]\n        [(< b c) (min_of_two b c)]\n        [else (min_of_two a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "/tmp/tmpke7nn6tm.rkt:5:18: min_of_two: unbound identifier\n  in: min_of_two\n  location...:\n   /tmp/tmpke7nn6tm.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond\n                [(< a c) a]\n                [else c])]\n    [else (cond\n            [(< b c) b]\n            [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b)\n     (cond\n       [(< a c) a]\n       [else c])]\n    [else\n     (cond\n       [(< b c) b]\n       [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (<= a b) (<= a c)) a]\n    [(and (<= b a) (<= b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond [(< a c) a] [else c])]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min_of_two a c)]\n        [(< b c) (min_of_two b c)]\n        [else (min_of_two a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "/tmp/tmpke7nn6tm.rkt:5:18: min_of_two: unbound identifier\n  in: min_of_two\n  location...:\n   /tmp/tmpke7nn6tm.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (&lt; a b) (&lt; a c)) a]\n    [(and (&lt; b a) (&lt; b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122604,
      "stdout": "",
      "stderr": "/tmp/tmpkilq948v.rkt:7:4: read-syntax: expected a `]` to close `[`\n  possible cause: indentation suggests a missing `]` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond\n               [(< a c) a]\n               [else c])]\n    [else (cond\n            [(< b c) b]\n            [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b)\n     (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [(and (< c a) (< c b)) c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond\n               [(< a c) a]\n               [else c])]\n    [else (cond\n            [(< b c) b]\n            [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond\n                [(< a c) a]\n                [else c])]\n    [else (cond\n            [(< b c) b]\n            [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b)\n     (if (< a c) a c)]\n    [(< b c)\n     b]\n    [else\n     c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b)\n     (cond\n       [(< a c) a]\n       [else c])]\n    [else\n     (cond\n       [(< b c) b]\n       [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (<= a b) (<= a c)) a]\n    [(and (<= b a) (<= b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytemi84b.rkt:15:4\n\nmin_of_three: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 3\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond\n               [(< a c) a]\n               [else c])]\n    [else (cond\n            [(< b c) b]\n            [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond [(< a c) a] [else c])]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (&lt; a b)\n      (if (&lt; a c)\n          a\n          c)\n      (if (&lt; b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "/tmp/tmp0s7o1e4h.rkt:5:6: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 6\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min_of_two a c)]\n        [(< b c) (min_of_two b c)]\n        [else (min_of_two a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "/tmp/tmpke7nn6tm.rkt:5:18: min_of_two: unbound identifier\n  in: min_of_two\n  location...:\n   /tmp/tmpke7nn6tm.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond [(< a c) a] [else c])]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(<= a b) (cond [(<= a c) a] [else c])]\n        [else (cond [(<= b c) b] [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (cond [(< a c) a] [else c])]\n        [else (cond [(< b c) b] [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (<= a b) (<= a c)) a]\n    [(and (<= b a) (<= b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b)\n     (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min_of_two a c)]\n        [(< b c) (min_of_two b c)]\n        [else (min_of_two a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "/tmp/tmpke7nn6tm.rkt:5:18: min_of_two: unbound identifier\n  in: min_of_two\n  location...:\n   /tmp/tmpke7nn6tm.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min_of_two a c)]\n        [(< b c) (min_of_two b c)]\n        [else (min_of_two a b)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "/tmp/tmpke7nn6tm.rkt:5:18: min_of_two: unbound identifier\n  in: min_of_two\n  location...:\n   /tmp/tmpke7nn6tm.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond [(< a c) a] [else c])]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (&lt; a b) (&lt; a c)) a]\n    [(and (&lt; b a) (&lt; b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122604,
      "stdout": "",
      "stderr": "/tmp/tmpkilq948v.rkt:7:4: read-syntax: expected a `]` to close `[`\n  possible cause: indentation suggests a missing `]` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond ((and (< a b) (< a c)) a)\n        ((and (< b a) (< b c)) b)\n        (else c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (cond\n                [(< a c) a]\n                [else c])]\n    [else (cond\n            [(< b c) b]\n            [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c)\n          a\n          c)\n      (if (< b c)\n          b\n          c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (cond [(< a c) a] [else c])]\n        [else (cond [(< b c) b] [else c])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (&lt; a b)\n      (if (&lt; a c) a c)\n      (if (&lt; b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "/tmp/tmpcwq4k_be.rkt:7:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond ((and (< a b) (< a c)) a)\n        ((and (< b a) (< b c)) b)\n        ((and (< c a) (< c b)) c)\n        (else a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (cond [(< a c) a]\n                        [else c])]\n        [(< b c) b]\n        [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond [(< a b) (min a c)]\n        [(< b c) b]\n        [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (if (< a b)\n      (if (< a c) a c)\n      (if (< b c) b c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (<= a b) (<= a c)) a]\n    [(and (<= b a) (<= b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (min_of_three a c b)]\n    [(< a c) a]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:15:4\nactual:     10\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rq5th3p.rkt:16:4\nactual:     18\nexpected:   15\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond ((and (< a b) (< a c)) a)\n        ((and (< b a) (< b c)) b)\n        (else c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1666122605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(and (< a b) (< a c)) a]\n    [(and (< b a) (< b c)) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (cond\n    [(< a b) (if (< a c) a c)]\n    [(< b c) b]\n    [else c]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-equal? (candidate 10 20 0) 0)\n    (check-equal? (candidate 19 15 18) 15)\n    (check-equal? (candidate -10 -20 -30) -30)\n))\n\n(test-humaneval)",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}