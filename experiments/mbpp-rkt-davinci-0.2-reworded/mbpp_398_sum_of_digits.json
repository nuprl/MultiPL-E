{
  "name": "mbpp_398_sum_of_digits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to compute the sum of digits of each number of a given list.\n(define (sum_of_digits nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_of_digits))\n    (check-equal? (candidate (list 10 2 56)) 14)\n    (check-equal? (candidate (list (list 10 20 4 5 \"b\" 70 \"a\"))) 19)\n    (check-equal? (candidate (list 10 20 -4 5 -70)) 19)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map (lambda (x)\n         (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x)))))\n       nums))\n",
    "  (map (lambda (x) (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x))))) nums))\n",
    "  (map (lambda (x) (apply + (map string->number (string-&gt;list (number-&gt;string x))))) nums))\n",
    "  (map sum-digits nums))\n",
    "  (map (lambda (x) (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x))))) nums))\n",
    "  (map (lambda (x) (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x))))) nums))\n",
    "  (map (lambda (x) (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x))))) nums))\n",
    "  (map (lambda (x)\n         (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x)))))\n       nums))\n",
    "  (map (lambda (x)\n         (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x)))))\n       nums))\n",
    "  (map (lambda (x) (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x))))) nums))\n",
    "  (map (lambda (x)\n         (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x)))))\n       nums))\n",
    "  (map (lambda (x)\n         (apply + (map (lambda (y) (string->number (string y)))\n                       (string-&gt;list (number-&gt;string x)))))\n       nums))\n",
    "  (map (lambda (x)\n         (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x)))))\n       nums))\n",
    "  (map (lambda (x) (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x))))) nums))\n",
    "  (map (lambda (x)\n         (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x)))))\n       nums))\n",
    "  (map (lambda (x) (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x))))) nums))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n",
    "  (map (lambda (x)\n         (apply + (map string-&gt;number (string-&gt;list (number-&gt;string x)))))\n       nums))\n",
    "  (map (lambda (n)\n         (apply + (map (lambda (d) (string->number (string d)))\n                       (string-&gt;list (number-&gt;string n)))))\n       nums))\n",
    "  (map (lambda (num)\n         (apply + (map string-&gt;number (string-&gt;list (number-&gt;string num)))))\n       nums))\n",
    "  (map (lambda (num)\n         (apply + (map string-&gt;number (string-&gt;list (number-&gt;string num)))))\n       nums))\n"
  ]
}