{
  "name": "mbpp_167_next_power_of_2",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the smallest power of 2 greater than or equal to n.\n(define (next_power_of_2 n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_power_of_2))\n    (check-equal? (candidate 0) 1)\n    (check-equal? (candidate 5) 8)\n    (check-equal? (candidate 17) 32)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (not (positive? n))\n      (error \"n must be positive\"))\n  (if (even? n)\n      n\n      (next_power_of_2 (+ n 1))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ((n n))\n            (if (even? n)\n                (loop (/ n 2))\n                (expt 2 (ceiling (log n 2))))))))\n",
    "  (if (not (zero? n))\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n         ",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ((n n) (pow 2))\n            (if (&gt;= n pow)\n                (loop n (* pow 2))\n                pow)))))\n</code>\n",
    "  (define (helper n p)\n    (if (&gt;= n p)\n        p\n        (helper n (* 2 p))))\n  (helper n 1))\n</code>\n",
    "  (if (not (zero? n))\n      (let loop ((n n) (pow 2))\n        (if (&lt; n pow)\n            pow\n            (loop n (* pow 2))))\n      1))\n</code>\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (define (next_power_of_2_iter n i)\n    (cond\n      [(= n i) i]\n      [else (next_power_of_2_iter n (* i 2))]))\n  (next_power_of_2_iter n 1))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (if (= n 1)\n              1\n              (let loop ([n n])\n                (if (even? n)\n                    (loop (/ n 2))\n                    (expt 2 (ceiling (log n 2)))))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (not (even? n))\n                (loop (+ n 1))\n                (if (= n 1)\n                    2\n                    (* 2 (loop (/ n 2)))))))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (> n 0))\n          (error \"n must be greater than 0\")\n          (let loop ([n n])\n            (if (not (even? n))\n                (loop (+ n 1))\n                (if (= n 1)\n                    2\n                    (* 2 (loop (/ n 2)))))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (define (helper n power)\n    (if (&gt;= n power)\n        (helper n (* 2 power))\n        power))\n  (helper n 1))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (remainder n 2) 0) (next_power_of_2 (/ n 2))]\n    [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (if (= n 1)\n              1\n              (let ([m (next_power_of_2 (/ n 2))])\n                (if (= n (* m 2))\n                    (* m 2)\n                    (* m 4)))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (remainder n 2) 0) (next_power_of_2 (/ n 2))]\n    [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (if (= n 0)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (* 2 (next_power_of_2 (/ n 2)))))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (let loop ((n n))\n        (if (not (positive? n))\n            (error \"n must be positive\")\n            (if (even? n)\n                (loop (/ n 2))\n                (expt 2 (ceiling (log n 2))))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (if (not (positive? n))\n      (error \"n must be positive\"))\n  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (* 2 (next_power_of_2 (/ n 2)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (>= n 0))\n          (error \"n must be non-negative\")\n          (if (= n 0)\n              1\n              (let loop ((n n) (pow 2))\n                (if (<= pow n)\n                    (loop n (* 2 pow))\n                    pow))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          n\n          (next_power_of_2 (add1 n)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          n\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ((n n))\n            (if (not (even? n))\n                (loop (+ n 1))\n                (if (= n 1)\n                    2\n                    (* 2 (loop (/ n 2)))))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          1\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (if (= n 1)\n              2\n              (let ([m (next_power_of_2 (/ n 2))])\n                (if (= n m)\n                    m\n                    (* 2 m)))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (not (positive? n))\n      0\n      (if (even? n)\n          n\n          (next_power_of_2 (+ n 1)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (>= n 0))\n          (error \"n must be non-negative\")\n          (let loop ((n n))\n            (if (= n 1)\n                1\n                (if (even? n)\n                    (loop (/ n 2))\n                    (expt 2 (ceiling (log n 2)))))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (if (= n 1)\n              2\n              (let loop ((i 1))\n                (if (&lt; (* 2 i) n)\n                    (loop (* 2 i))\n                    (* 2 i)))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          1\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (let ([i 1])\n    (while (< i n)\n      (set! i (* 2 i)))\n    i))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (not (even? n))\n                (loop (+ n 1))\n                (if (= n 1)\n                    2\n                    (* 2 (loop (/ n 2)))))))))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          n\n          (next_power_of_2 (add1 n)))))\n",
    "  (if (= n 1)\n      2\n      (next_power_of_2 (if (= (remainder n 2) 0) (/ n 2) (* n 2)))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (> n 0))\n          (error \"n must be greater than 0\")\n          (if (= n 1)\n              1\n              (let loop ([n n])\n                (if (= (remainder n 2) 0)\n                    (loop (/ n 2))\n                    (expt 2 (ceiling (log n 2)))))))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (define (next_power_of_2_iter n p)\n    (if (&gt;= n p)\n        p\n        (next_power_of_2_iter n (* 2 p))))\n  (next_power_of_2_iter n 1))\n",
    "  (if (&lt; n 2)\n      2\n      (let loop ([n n])\n        (if (even? n)\n            (loop (/ n 2))\n            (expt 2 (ceiling (/ (log n) (log 2))))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (remainder n 2) 0) (next_power_of_2 (/ n 2))]\n    [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (next_power_of_2 (/ n 2)))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (remainder n 2) 0) (next_power_of_2 (/ n 2))]\n    [else (* n 2)]))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (if (= n 1)\n              2\n              (let loop ([n n])\n                (if (even? n)\n                    (loop (/ n 2))\n                    (expt 2 (ceiling (log n 2)))))))))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (= n 0)\n      1\n      (if (= n 1)\n          2\n          (if (= (remainder n 2) 0)\n              (next_power_of_2 (/ n 2))\n              (expt 2 (ceiling (log n 2)))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          n\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (even? n)\n                (loop (/ n 2))\n                (if (= n 1)\n                    2\n                    (* 2 (next_power_of_2 (- n 1)))))))))\n",
    "  (define (helper n i)\n    (cond\n      [(= n i) i]\n      [else (helper n (* i 2))]))\n  (helper n 1))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      2\n      (if (odd? n)\n          (next_power_of_2 (+ n 1))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (if (= n 1)\n              1\n              (let loop ([n n])\n                (if (= (bitwise-and n 1) 1)\n                    (loop (bitwise-shift-left n 1))\n                    n))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (* 2 (next_power_of_2 (/ n 2)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ((n n))\n            (if (even? n)\n                (loop (/ n 2))\n                (expt 2 (ceiling (log n 2))))))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (not (zero? n))\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))\n      1))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (even? n)\n                (loop (/ n 2))\n                (expt 2 (ceiling (log n 2))))))))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (= n 1)\n      2\n      (next_power_of_2 (expt 2 (ceiling (/ (log n) (log 2)))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (> n 0))\n          (error \"n must be positive\")\n          (let loop ((n n) (pow 2))\n            (if (>= n pow)\n                (loop n (* pow 2))\n                pow)))))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ((n n))\n            (if (even? n)\n                (loop (/ n 2))\n                (if (= n 1)\n                    2\n                    (* 2 (next_power_of_2 (- n 1)))))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (cond\n    [(<= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (odd? n)\n          (next_power_of_2 (+ 1 n))\n          (* 2 n))))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          n\n          (next_power_of_2 (+ n 1)))))\n",
    "  (cond [(= n 1) 2]\n        [(= n 2) 2]\n        [(= n 3) 4]\n        [(= n 4) 4]\n        [(= n 5) 8]\n        [(= n 6) 8]\n        [(= n 7) 8]\n        [(= n 8) 8]\n        [(= n 9) 16]\n        [(= n 10) 16]\n        [(= n 11) 16]\n        [(= n 12) 16]\n        [(= n 13) 16]\n        [(= n 14) 16]\n        [(= n 15) 16]\n        [(= n 16) 16]\n        [(= n 17) 32]\n        [(= n 18) 32]\n        [(= n 19) 32]\n        [(= n 20) 32]\n        [(= n 21) 32]\n        [(= n 22) 32]\n        [(= n 23) 32]\n        [(= n 24) 32]\n        [(= n 25) 32]\n        [(= n 26) 32]\n        [(= n 27) 32]\n        [(= n 28) 32]\n        [(= n 29) 32]\n        [(= n 30) 32]\n        [(= n 31) 32]\n        [(= n 32) 32]\n        [(= n 33) 64]\n        [(= n 34) 64]\n        [(= n 35) 64]\n        [(= n 36) 64]\n        [(= n 37) 64]\n        [(= n 38) 64]\n        [(= n 39) 64]\n        [(= n 40) 64]\n        [(= n 41) 64]\n        [(= n 42) 64]\n        [(= n 43) 64]\n        [(= n 44) 64]\n        [(= n 45) 64]\n        [(= n 46) 64]\n        [(= n 47) 64]\n        [(= n 48) 64]\n        [(= n 49) 64]\n        [(= n 50) 64]\n        [(= n 51) 64]\n        [(= n 52) 64]\n        [(= n 53) 64]\n        [(= n 54) 64]\n        [(= n 55) 64]\n        [(= n 56) 64]\n        [(= n 57",
    "  (if (not (positive? n))\n      (error \"n must be positive\"))\n  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (zero? n)\n          1\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [(even? n) (next_power_of_2 (/ n 2))]\n    [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (remainder n 2) 0) (next_power_of_2 (/ n 2))]\n    [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (>= n 0))\n          (error \"n must be positive\")\n          (if (= n 0)\n              1\n              (let loop ([n n] [i 1])\n                (if (< n i)\n                    i\n                    (loop n (* i 2))))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (> n 0))\n          (error \"n must be greater than 0\")\n          (let loop ([n n])\n            (if (= n 1)\n                1\n                (if (even? n)\n                    (loop (/ n 2))\n                    (expt 2 (ceiling (log n 2)))))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          n\n          (next_power_of_2 (add1 (bitwise-arithmetic-shift n -1))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (cond [(= n 1) 1]\n        [(even? n) (next_power_of_2 (/ n 2))]\n        [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (> n 0))\n          (error \"n must be greater than 0\")\n          (let loop ([n n])\n            (if (not (even? n))\n                (loop (+ n 1))\n                (if (= n 1)\n                    2\n                    (* 2 (loop (/ n 2)))))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ 1 n)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (>= n 0))\n          (error \"n must be non-negative\")\n          (let loop ([n n])\n            (if (not (even? n))\n                (loop (+ n 1))\n                (if (= n 0)\n                    1\n                    (* 2 (loop (/ n 2)))))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (and (integer? n) (&gt;= n 1))\n      (let loop ((n n) (pow 2))\n        (if (&gt;= n pow)\n            (loop n (* pow 2))\n            pow))\n      (error \"n must be a positive integer\")))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          n\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ 1 n)))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (next_power_of_2 (- n 1)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2)))\n          )))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond [(= n 1) 2]\n        [(= n 2) 2]\n        [(= n 3) 4]\n        [(= n 4) 4]\n        [(= n 5) 8]\n        [(= n 6) 8]\n        [(= n 7) 8]\n        [(= n 8) 8]\n        [(= n 9) 16]\n        [(= n 10) 16]\n        [(= n 11) 16]\n        [(= n 12) 16]\n        [(= n 13) 16]\n        [(= n 14) 16]\n        [(= n 15) 16]\n        [(= n 16) 16]\n        [(= n 17) 32]\n        [(= n 18) 32]\n        [(= n 19) 32]\n        [(= n 20) 32]\n        [(= n 21) 32]\n        [(= n 22) 32]\n        [(= n 23) 32]\n        [(= n 24) 32]\n        [(= n 25) 32]\n        [(= n 26) 32]\n        [(= n 27) 32]\n        [(= n 28) 32]\n        [(= n 29) 32]\n        [(= n 30) 32]\n        [(= n 31) 32]\n        [(= n 32) 32]\n        [(= n 33) 64]\n        [(= n 34) 64]\n        [(= n 35) 64]\n        [(= n 36) 64]\n        [(= n 37) 64]\n        [(= n 38) 64]\n        [(= n 39) 64]\n        [(= n 40) 64]\n        [(= n 41) 64]\n        [(= n 42) 64]\n        [(= n 43) 64]\n        [(= n 44) 64]\n        [(= n 45) 64]\n        [(= n 46) 64]\n        [(= n 47) 64]\n        [(= n 48) 64]\n        [(= n 49) 64]\n        [(= n 50) 64]\n        [(= n 51) 64]\n        [(= n 52) 64]\n        [(= n 53) 64]\n        [(= n 54) 64]\n        [(= n 55) 64]\n        [(= n 56) 64]\n        [(= n 57",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond [(= n 0) 1]\n        [(= n 1) 2]\n        [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (remainder n 2) 0) (next_power_of_2 (/ n 2))]\n    [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (>= n 0))\n          (error \"n must be greater than or equal to 0\")\n          (let loop ((n n))\n            (if (= n 1)\n                1\n                (if (= (remainder n 2) 0)\n                    (loop (/ n 2))\n                    (expt 2 (ceiling (log n 2)))))))))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 0)\n      1\n      (if (= n 1)\n          2\n          (if (= n 2)\n              2\n              (if (= n 3)\n                  4\n                  (if (= n 4)\n                      4\n                      (if (= n 5)\n                          8\n                          (if (= n 6)\n                              8\n                              (if (= n 7)\n                                  8\n                                  (if (= n 8)\n                                      8\n                                      (if (= n 9)\n                                          16\n                                          (if (= n 10)\n                                              16\n                                              (if (= n 11)\n                                                  16\n                                                  (if (= n 12)\n                                                      16\n                                                      (if (= n 13)\n                                                          16\n                                                          (if (= n 14)\n                                                              16\n                                                              (if (= n 15)\n                                                                  16\n                                                                  (if (= n 16)\n                                                                      16\n                                                                      (if (= n 17)\n                                                                          32\n                                                                          (if (= n 18)\n                                                                              32\n                                                                              (if (= n 19)\n                                                                                  32\n                                                                                  (if (= n 20)\n                                                                                      32\n                                                                                      (if (= n 21)\n                                                                                          32\n                                                                                          (if (= n 22)\n                                                                                              32\n                                                                                              (if (= n 23)\n                                                                                                  32\n                                                                                                  (if (= n 24)\n                                                                                                      32\n                                                                                                      (if (= n 25)\n                                                                                                          32\n                                                                                                          (if (= n 26)\n                                                                                                              32\n                                                                                                              (if (= n 27)\n                                                                                                                  32\n                                                                                                                  (if (= n 28)\n                                                                                                                      32\n                                                                                                                      (if (= n 29)\n                                                                                                                          32\n                                                                                                ",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (next_power_of_2 (expt 2 (ceiling (/ (log n) (log 2)))))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (zero? n)\n      1\n      (let loop ([n n])\n        (if (even? n)\n            (loop (/ n 2))\n            (* 2 (next-power-of-2 (- n 1)))))))\n",
    "  (define (helper n)\n    (if (&lt;= n 1)\n        1\n        (if (even? n)\n            n\n            (helper (bitwise-arithmetic-shift n -1)))))\n  (helper n))\n",
    "  (cond [(= n 1) 2]\n        [(= n 2) 2]\n        [(= n 3) 4]\n        [(= n 4) 4]\n        [(= n 5) 8]\n        [(= n 6) 8]\n        [(= n 7) 8]\n        [(= n 8) 8]\n        [(= n 9) 16]\n        [(= n 10) 16]\n        [(= n 11) 16]\n        [(= n 12) 16]\n        [(= n 13) 16]\n        [(= n 14) 16]\n        [(= n 15) 16]\n        [(= n 16) 16]\n        [(= n 17) 32]\n        [(= n 18) 32]\n        [(= n 19) 32]\n        [(= n 20) 32]\n        [(= n 21) 32]\n        [(= n 22) 32]\n        [(= n 23) 32]\n        [(= n 24) 32]\n        [(= n 25) 32]\n        [(= n 26) 32]\n        [(= n 27) 32]\n        [(= n 28) 32]\n        [(= n 29) 32]\n        [(= n 30) 32]\n        [(= n 31) 32]\n        [(= n 32) 32]\n        [(= n 33) 64]\n        [(= n 34) 64]\n        [(= n 35) 64]\n        [(= n 36) 64]\n        [(= n 37) 64]\n        [(= n 38) 64]\n        [(= n 39) 64]\n        [(= n 40) 64]\n        [(= n 41) 64]\n        [(= n 42) 64]\n        [(= n 43) 64]\n        [(= n 44) 64]\n        [(= n 45) 64]\n        [(= n 46) 64]\n        [(= n 47) 64]\n        [(= n 48) 64]\n        [(= n 49) 64]\n        [(= n 50) 64]\n        [(= n 51) 64]\n        [(= n 52) 64]\n        [(= n 53) 64]\n        [(= n 54) 64]\n        [(= n 55) 64]\n        [(= n 56) 64]\n        [(= n 57",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (remainder n 2) 0) (next_power_of_2 (/ n 2))]\n    [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n"
  ]
}