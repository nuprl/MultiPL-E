{
  "name": "mbpp_164_are_equivalent",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to determine if the sum of the divisors of two integers are the same.\n(define (are_equivalent num1 num2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate are_equivalent))\n    (check-equal? (candidate 36 57) #f)\n    (check-equal? (candidate 2 4) #f)\n    (check-equal? (candidate 23 47) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (and (not (= num1 num2))\n       (= (sum-divisors num1) (sum-divisors num2))))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 num)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n      (if (zero? (modulo num i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (= (apply + (divisors num1)) (apply + (divisors num2))))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n      (if (zero? (modulo num i))\n          i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 num)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (+ n 1))))\n  (equal? (divisors num1) (divisors num2)))\n</code>\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (sum-divisors num)\n    (define (sum-divisors-iter num divisor sum)\n      (cond ((= num 1) sum)\n            ((= (remainder num divisor) 0)\n             (sum-divisors-iter (/ num divisor) divisor (+ sum divisor)))\n            (else (sum-divisors-iter num (+ divisor 1) sum))))\n    (sum-divisors-iter num 1 0))\n  (= (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (sum-divisors n)\n    (define (divisors n)\n      (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n    (apply + (divisors n)))\n  (= (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum_divisors num1) (sum_divisors num2)))\n",
    "  (define (sum_of_divisors num)\n    (define (divisors num)\n      (filter (lambda (x) (= (modulo num x) 0)) (range 1 (add1 num))))\n    (apply + (divisors num)))\n  (= (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (equal? (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (sum-divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n        (if (zero? (modulo num i)) i)))\n    (apply + (divisors num)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (sum_divisors num)\n    (define (sum_divisors_helper num divisor sum)\n      (cond\n        [(= num 1) sum]\n        [(= (modulo num divisor) 0) (sum_divisors_helper (/ num divisor) divisor (+ sum divisor))]\n        [else (sum_divisors_helper num (+ divisor 1) sum)]))\n    (sum_divisors_helper num 1 0))\n  (= (sum_divisors num1) (sum_divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i))\n          i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (= (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (+ num 1))]\n               #:when (zero? (modulo num i)))\n      i))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 (+ n 1))))\n  (= (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (define (sum-divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n        (when (zero? (modulo num i)) i)))\n    (apply + (divisors num)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 (+ num 1))))\n  (define (sum-divisors num)\n    (apply + (divisors num)))\n  (= (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (sum-divisors n)\n    (define (sum-divisors-iter n divisor sum)\n      (if (&gt; divisor n)\n          sum\n          (if (zero? (modulo n divisor))\n              (sum-divisors-iter n (+ divisor 1) (+ sum divisor))\n              (sum-divisors-iter n (+ divisor 1) sum))))\n    (sum-divisors-iter n 2 0))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum_divisors num1) (sum_divisors num2)))\n",
    "  (equal? (sum_divisors num1) (sum_divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 num)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 (add1 num))))\n  (define (sum_divisors num)\n    (apply + (divisors num)))\n  (= (sum_divisors num1) (sum_divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (sum_divisors num)\n    (define (sum_divisors_iter num divisor sum)\n      (cond ((= num 1) sum)\n            ((= (modulo num divisor) 0)\n             (sum_divisors_iter (/ num divisor) divisor (+ sum divisor)))\n            (else (sum_divisors_iter num (+ divisor 1) sum))))\n    (sum_divisors_iter num 1 0))\n  (= (sum_divisors num1) (sum_divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 n)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (sum_divisors num)\n    (define (sum_divisors-iter num divisor sum)\n      (cond\n        [(= num 1) sum]\n        [(= (remainder num divisor) 0) (sum_divisors-iter (/ num divisor) divisor (+ sum divisor))]\n        [else (sum_divisors-iter num (+ divisor 1) sum)]))\n    (sum_divisors-iter num 2 0))\n  (= (sum_divisors num1) (sum_divisors num2)))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n      (if (zero? (modulo num i)) i)))\n  (equal? (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (= (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (and (divisor-sum? num1 num2) (divisor-sum? num2 num1)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 num)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (sum-divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (+ num 1))])\n        (if (zero? (modulo num i)) i)))\n    (apply + (divisors num)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (sum_divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n        (if (zero? (modulo num i)) i)))\n    (apply + (divisors num)))\n  (equal? (sum_divisors num1) (sum_divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (sum-divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n        (if (zero? (modulo num i)) i)))\n    (apply + (divisors num)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (= (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n      (if (zero? (modulo num i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 (add1 n))))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (= (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (sum-divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n        (if (zero? (modulo num i)) i)))\n    (apply + (divisors num)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (and (= (sum-divisors num1) (sum-divisors num2))\n       (not (= num1 num2))))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 (add1 num))))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (remainder num x) 0)) (range 1 num)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum_divisors num1) (sum_divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (+ 1 (quotient num 2)))])\n      (if (zero? (modulo num i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (let ([divisors1 (divisors num1)]\n        [divisors2 (divisors num2)])\n    (= (sum divisors1) (sum divisors2))))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (equal? (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (= (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (and (not (= num1 num2))\n       (= (sum-of-divisors num1) (sum-of-divisors num2))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (equal? (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 num)))\n  (= (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum_divisors num1) (sum_divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n      (if (zero? (modulo num i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (define (sum-divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n        (if (zero? (modulo num i)) i)))\n    (apply + (divisors num)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (sum_divisors num)\n    (define (divisors num)\n      (filter (lambda (x) (= (modulo num x) 0)) (range 1 num)))\n    (apply + (divisors num)))\n  (= (sum_divisors num1) (sum_divisors num2)))\n",
    "  (define (sum-divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (+ 1 (quotient num 2)))])\n        (if (zero? (modulo num i)) i)))\n    (apply + (divisors num)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0))\n            (range 1 num)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (= (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (define (sum-divisors num)\n    (define (sum-divisors-iter num divisor sum)\n      (cond ((= divisor num) sum)\n            ((divides? divisor num) (sum-divisors-iter num (+ divisor 1) (+ sum divisor)))\n            (else (sum-divisors-iter num (+ divisor 1) sum))))\n    (sum-divisors-iter num 1 0))\n  (= (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 (add1 num))))\n  (equal? (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (and (divisors-sum num1) (divisors-sum num2)\n       (= (divisors-sum num1) (divisors-sum num2))))\n",
    "  (define (sum_divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (quotient num 2))])\n        (if (zero? (modulo num i))\n            i)))\n    (apply + (divisors num)))\n  (equal? (sum_divisors num1) (sum_divisors num2)))\n",
    "  (equal? (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0))\n            (range 1 (add1 (quotient n 2)))))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (+ num 1))])\n      (if (zero? (modulo num i))\n          i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (+ n 1))))\n  (define (sum_divisors n)\n    (apply + (divisors n)))\n  (= (sum_divisors num1) (sum_divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (sum-divisors num)\n    (define (sum-divisors-iter num divisor sum)\n      (cond ((= num 1) sum)\n            ((= (modulo num divisor) 0) (sum-divisors-iter (/ num divisor) divisor (+ sum divisor)))\n            (else (sum-divisors-iter num (+ divisor 1) sum))))\n    (sum-divisors-iter num 1 0))\n  (= (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (define (iter i)\n      (if (&gt; i n)\n          '()\n          (if (zero? (modulo n i))\n              (cons i (iter (+ i 1)))\n              (iter (+ i 1)))))\n    (iter 1))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ((i (in-range 1 (add1 (quotient n 2)))))\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (sum-divisors num)\n    (define (sum-divisors-iter num divisor sum)\n      (cond ((= num 1) sum)\n            ((= (modulo num divisor) 0)\n             (sum-divisors-iter (/ num divisor) divisor (+ sum divisor)))\n            (else (sum-divisors-iter num (+ divisor 1) sum))))\n    (sum-divisors-iter num 1 0))\n  (= (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (= (sum-divisors num1) (sum-divisors num2)))\n",
    "  (and (equal? (sum-of-divisors num1) (sum-of-divisors num2))\n       (not (equal? num1 num2))))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (sum_divisors n)\n    (let loop ((i 1) (sum 0))\n      (if (&gt; i n)\n          sum\n          (if (zero? (modulo n i))\n              (loop (+ i 1) (+ sum i))\n              (loop (+ i 1) sum)))))\n  (equal? (sum_divisors num1) (sum_divisors num2)))\n</code>\n",
    "  (and (equal? (sum-divisors num1) (sum-divisors num2))\n       (not (equal? num1 num2))))\n",
    "  (define (sum-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 n)])\n        (if (zero? (modulo n i)) i)))\n    (apply + (divisors n)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (+ n 1))))\n  (= (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0))\n            (range 1 num)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0))\n            (range 1 (add1 (quotient num 2)))))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 num)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (sum_divisors num)\n    (define (divisors num)\n      (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n        (if (zero? (modulo num i)) i)))\n    (apply + (divisors num)))\n  (equal? (sum_divisors num1) (sum_divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 (add1 num))))\n  (= (sum (divisors num1)) (sum (divisors num2))))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n"
  ]
}