{
  "name": "mbpp_164_are_equivalent",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to determine if the sum of the divisors of two integers are the same.\n(define (are_equivalent num1 num2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate are_equivalent))\n    (check-equal? (candidate 36 57) #f)\n    (check-equal? (candidate 2 4) #f)\n    (check-equal? (candidate 23 47) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (and (not (= num1 num2))\n       (= (sum-divisors num1) (sum-divisors num2))))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (filter (lambda (x) (= (modulo num x) 0)) (range 1 num)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n      (if (zero? (modulo num i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (equal? (divisors num1) (divisors num2)))\n",
    "  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (= (apply + (divisors num1)) (apply + (divisors num2))))\n",
    "  (equal? (sum-of-divisors num1) (sum-of-divisors num2)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (equal? (sum-divisors num1) (sum-divisors num2)))\n",
    "  (equal? (sum_of_divisors num1) (sum_of_divisors num2)))\n",
    "  (define (divisors num)\n    (for/list ([i (in-range 1 (add1 (quotient num 2)))])\n      (if (zero? (modulo num i))\n          i)))\n  (equal? (divisors num1) (divisors num2)))\n"
  ]
}