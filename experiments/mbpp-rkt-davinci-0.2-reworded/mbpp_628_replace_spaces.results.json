{
  "name": "mbpp_628_replace_spaces",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"%%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:12:4\nactual:     \"My%%20Name%%20is%%20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:13:4\nactual:     \"I%%20am%%20a%%20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:14:4\nactual:     \"I%%20love%%20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? #\\space c)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnundn4i.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnundn4i.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplnundn4i.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string-&gt;list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "/tmp/tmpr8qwkoab.rkt:5:74: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (equal? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (equal? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uqqhv93.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uqqhv93.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uqqhv93.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnblgcc4.rkt:12:4\nactual:     \"My20Name20is20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnblgcc4.rkt:13:4\nactual:     \"I20am20a20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnblgcc4.rkt:14:4\nactual:     \"I20love20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"\\\\%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:12:4\nactual:     \"My %20Name %20is %20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:13:4\nactual:     \"I %20am %20a %20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:14:4\nactual:     \"I %20love %20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncq3t8r6.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncq3t8r6.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncq3t8r6.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"%%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:12:4\nactual:     \"My%%20Name%%20is%%20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:13:4\nactual:     \"I%%20am%%20a%%20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:14:4\nactual:     \"I%%20love%%20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (\u03bb (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe0zps2j0.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe0zps2j0.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe0zps2j0.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"\\\\%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:12:4\nactual:     \"My %20Name %20is %20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:13:4\nactual:     \"I %20am %20a %20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:14:4\nactual:     \"I %20love %20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (equal? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (equal? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"%%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:12:4\nactual:     \"My%%20Name%%20is%%20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:13:4\nactual:     \"I%%20am%%20a%%20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:14:4\nactual:     \"I%%20love%%20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x)\n                      (if (char=? x #\\space)\n                          \"%20\"\n                          (string x)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join\n   (map (lambda (c)\n          (if (char=? c #\\space)\n              \"%20\"\n              (string c)))\n        (string->list string))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplfbju72j.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplfbju72j.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplfbju72j.rkt:20:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"\\\\%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:12:4\nactual:     \"My %20Name %20is %20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:13:4\nactual:     \"I %20am %20a %20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:14:4\nactual:     \"I %20love %20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x)\n                      (if (char=? x #\\space)\n                          \"%20\"\n                          (string x)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"%%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:12:4\nactual:     \"My%%20Name%%20is%%20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:13:4\nactual:     \"I%%20am%%20a%%20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:14:4\nactual:     \"I%%20love%%20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string-&gt;list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122406,
      "stdout": "",
      "stderr": "/tmp/tmpm2onng38.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join\n   (map (lambda (char)\n          (if (char=? char #\\space)\n              \"%20\"\n              (string char)))\n        (string->list string))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpryjc4jlz.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpryjc4jlz.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpryjc4jlz.rkt:20:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"%%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:12:4\nactual:     \"My%%20Name%%20is%%20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:13:4\nactual:     \"I%%20am%%20a%%20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:14:4\nactual:     \"I%%20love%%20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnblgcc4.rkt:12:4\nactual:     \"My20Name20is20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnblgcc4.rkt:13:4\nactual:     \"I20am20a20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnblgcc4.rkt:14:4\nactual:     \"I20love20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (equal? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o5d8apl.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-replace string \" \" \"%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"%%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:12:4\nactual:     \"My%%20Name%%20is%%20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:13:4\nactual:     \"I%%20am%%20a%%20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:14:4\nactual:     \"I%%20love%%20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"%%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:12:4\nactual:     \"My%%20Name%%20is%%20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:13:4\nactual:     \"I%%20am%%20a%%20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:14:4\nactual:     \"I%%20love%%20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x)\n                      (if (char=? x #\\space)\n                          \"%20\"\n                          (string x)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (define (replace_spaces_iter string new-string)\n    (cond\n      [(empty? string) new-string]\n      [(char=? (first string) #\\space)\n       (replace_spaces_iter (rest string) (string-append new-string \"%20\"))]\n      [else (replace_spaces_iter (rest string) (string-append new-string (string (first string))))]))\n  (replace_spaces_iter string \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_0kwwkg.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_0kwwkg.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_0kwwkg.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (equal? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx80ghjfu.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx80ghjfu.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx80ghjfu.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"%%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:12:4\nactual:     \"My%%20Name%%20is%%20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:13:4\nactual:     \"I%%20am%%20a%%20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:14:4\nactual:     \"I%%20love%%20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string-&gt;list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "/tmp/tmpr8qwkoab.rkt:5:74: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"\\\\%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:12:4\nactual:     \"My %20Name %20is %20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:13:4\nactual:     \"I %20am %20a %20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:14:4\nactual:     \"I %20love %20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join\n   (map (lambda (c)\n          (if (char=? c #\\space)\n              \"%20\"\n              (string c)))\n        (string->list string))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplfbju72j.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplfbju72j.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplfbju72j.rkt:20:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join\n   (map\n    (lambda (char)\n      (if (char=? char #\\space)\n          \"%20\"\n          (string char)))\n    (string->list string))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkyfyc132.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkyfyc132.rkt:20:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkyfyc132.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x)\n                      (if (char=? x #\\space)\n                          \"%20\"\n                          (string x)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"\\\\%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:12:4\nactual:     \"My %20Name %20is %20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:13:4\nactual:     \"I %20am %20a %20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd4oby27.rkt:14:4\nactual:     \"I %20love %20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-replace string \" \" \"%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (cond\n                        [(char=? c #\\space) \"%20\"]\n                        [else (string c)]))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptb8kyubo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptb8kyubo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptb8kyubo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4443mfne.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"%%20\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:12:4\nactual:     \"My%%20Name%%20is%%20Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:13:4\nactual:     \"I%%20am%%20a%%20Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpypfj85bg.rkt:14:4\nactual:     \"I%%20love%%20Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x)\n                      (if (char=? x #\\space)\n                          \"%20\"\n                          (string x)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ov1w4_n.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x)\n                      (if (char=? x #\\space)\n                          \"%20\"\n                          (string x)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x)\n                      (if (char=? x #\\space)\n                          \"%20\"\n                          (string x)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122408,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw2kqxd23.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (x) (if (char=? x #\\space) \"%20\" (string x)))\n                    (string->list string))\n                \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4u9ja027.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4u9ja027.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4u9ja027.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c) (if (char=? c #\\space) \"%20\" (string c))) (string->list string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoj91hd_h.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (regexp-replace* #rx\" \" string \"20%\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:12:4\nactual:     \"My20%Name20%is20%Dawood\"\nexpected:   \"My%20Name%20is%20Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:13:4\nactual:     \"I20%am20%a20%Programmer\"\nexpected:   \"I%20am%20a%20Programmer\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4usboe7r.rkt:14:4\nactual:     \"I20%love20%Coding\"\nexpected:   \"I%20love%20Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (c)\n                      (if (char=? c #\\space)\n                          \"%20\"\n                          (string c)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp40utpcqo.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (string-join (map (lambda (char)\n                      (if (char=? char #\\space)\n                          \"%20\"\n                          (string char)))\n                    (string->list string))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-equal? (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\")\n    (check-equal? (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\")\n    (check-equal? (candidate \"I love Coding\") \"I%20love%20Coding\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517260,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"My Name is Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I am a Programmer\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1q0y3nux.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: \"I love Coding\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}