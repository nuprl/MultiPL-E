{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n(define (is_Sum_Of_Powers_Of_Two n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sum_Of_Powers_Of_Two))\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate 7) #f)\n    (check-equal? (candidate 14) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(zero? n) #t]\n      [(not (zero? (modulo n 2))) (is_Sum_Of_Powers_Of_Two_Helper (- n 1))]\n      [else (is_Sum_Of_Powers_Of_Two_Helper (/ n 2))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(> n (expt 2 i)) (or (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (+ i 1)) (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1)))]\n      [else (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= n (expt 2 i)) #t]\n      [(> n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_iter (- n (expt 2 i)) (+ i 1))]\n      [else (is_Sum_Of_Powers_Of_Two_iter n (+ i 1))]))\n  (is_Sum_Of_Powers_Of_Two_iter n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48",
    "  (define (is_Sum_Of_Powers_Of_Two_iter n)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n 2) #t)\n          ((= n 3) #f)\n          ((= n 4) #t)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #t)\n          (else (is_Sum_Of_Powers_Of_Two_iter (- n 1)))))\n  (is_Sum_Of_Powers_Of_Two_iter n))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [else\n       (cond\n         [(= (remainder n 2) 0) (is_Sum_Of_Powers_Of_Two_Helper (quotient n 2) (+ sum 1))]\n         [else (is_Sum_Of_Powers_Of_Two_Helper (- n 1) (+ sum 1))])]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (if (= n 0)\n      #f\n      (let loop ((n n) (i 0))\n        (if (= n 0)\n            #t\n            (if (= (remainder n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) (+ i 1)))))))\n",
    "  (define (is_Power_Of_Two n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 0)\n            (is_Power_Of_Two (/ n 2))\n            #f)))\n  (if (= n 0)\n      #t\n      (if (is_Power_Of_Two n)\n          #t\n          (if (= (remainder n 2) 0)\n              (is_Sum_Of_Powers_Of_Two (/ n 2))\n              (is_Sum_Of_Powers_Of_Two (- n 1))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [else\n       (let ([n (quotient n 2)])\n         (or (is_Sum_Of_Powers_Of_Two_Helper n)\n             (is_Sum_Of_Powers_Of_Two_Helper (- n 1))))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 4) #t)\n          ((= n 8) #t)\n          ((= n 16) #t)\n          ((= n 32) #t)\n          ((= n 64) #t)\n          ((= n 128) #t)\n          ((= n 256) #t)\n          ((= n 512) #t)\n          ((= n 1024) #t)\n          ((= n 2048) #t)\n          ((= n 4096) #t)\n          ((= n 8192) #t)\n          ((= n 16384) #t)\n          ((= n 32768) #t)\n          ((= n 65536) #t)\n          ((= n 131072) #t)\n          ((= n 262144) #t)\n          ((= n 524288) #t)\n          ((= n 1048576) #t)\n          ((= n 2097152) #t)\n          ((= n 4194304) #t)\n          ((= n 8388608) #t)\n          ((= n 16777216) #t)\n          ((= n 33554432) #t)\n          ((= n 67108864) #t)\n          ((= n 134217728) #t)\n          ((= n 268435456) #t)\n          ((= n 536870912) #t)\n          ((= n 1073741824) #t)\n          ((= n 2147483648) #t)\n          ((= n 4294967296) #t)\n          ((= n 8589934592) #t)\n          ((= n 17179869184) #t)\n          ((= n 34359738368) #t)\n          ((= n 68719476736) #t)\n          ((= n 137438953472) #t)\n          ((= n 274877906944) #t)\n          ((= n 549755813888) #t)\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond ((= n 0) #t)\n          ((= n 1) #f)\n          ((= n (expt 2 i)) #t)\n          ((&gt; n (expt 2 i)) (is_Sum_Of_Powers_Of_Two_Helper (- n (expt 2 i)) (+ i 1)))\n          (else (is_Sum_Of_Powers_Of_Two_Helper n (+ i 1)))))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48) #f]\n      [(= n 49) #f",
    "  (if (= n 0)\n      #f\n      (let loop ([n n] [i 0])\n        (if (= n 0)\n            #t\n            (if (= (modulo n 2) 1)\n                (loop (quotient n 2) (+ i 1))\n                (loop (quotient n 2) i))))))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [else (is_Sum_Of_Powers_Of_Two_Helper (- n 32))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48)",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n sum)\n    (cond\n      [(= n 0) #t]\n      [(= n sum) #t]\n      [(> n sum) (is_Sum_Of_Powers_Of_Two_Helper n (+ sum (expt 2 (floor (log n 2)))))])\n      [else #f]))\n  (is_Sum_Of_Powers_Of_Two_Helper n 0))\n",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n i)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #f]\n      [(= n 4) #t]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48",
    "  (define (is_Sum_Of_Powers_Of_Two_Helper n)\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #f]\n      [(= (remainder n 2) 0) (is_Sum_Of_Powers_Of_Two_Helper (/ n 2))]\n      [else (is_Sum_Of_Powers_Of_Two_Helper (- n 1))]))\n  (is_Sum_Of_Powers_Of_Two_Helper n))\n"
  ]
}