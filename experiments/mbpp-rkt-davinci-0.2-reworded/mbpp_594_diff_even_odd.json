{
  "name": "mbpp_594_diff_even_odd",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the difference of the first even and first odd number of a given list.\n(define (diff_even_odd list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate diff_even_odd))\n    (check-equal? (candidate (list 1 3 5 7 4 1 6 8)) 3)\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) 1)\n    (check-equal? (candidate (list 1 5 7 9 10)) 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([even (find-first-even list1)]\n        [odd (find-first-odd list1)])\n    (- even odd)))\n",
    "  (let ((even (first (filter even? list1)))\n        (odd (first (filter odd? list1))))\n    (- even odd)))\n",
    "  (letrec ([even (lambda (list1)\n                   (cond [(empty? list1) empty]\n                         [(even? (first list1)) (first list1)]\n                         [else (even (rest list1))]))]\n           [odd (lambda (list1)\n                  (cond [(empty? list1) empty]\n                        [(odd? (first list1)) (first list1)]\n                        [else (odd (rest list1))]))])\n    (- (even list1) (odd list1))))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([even (find-first-even list1)]\n        [odd (find-first-odd list1)])\n    (- even odd)))\n",
    "  (let ([even (find-first-even list1)]\n        [odd (find-first-odd list1)])\n    (- even odd)))\n",
    "  (let loop ([list list1] [even #f] [odd #f])\n    (cond\n      [(null? list) (if (and even odd) (- even odd) #f)]\n      [(even? (car list)) (if even (loop (cdr list) even odd) (loop (cdr list) (car list) odd))]\n      [(odd? (car list)) (if odd (loop (cdr list) even odd) (loop (cdr list) even (car list)))]\n      [else (loop (cdr list) even odd)])))\n",
    "  (letrec ([even? (lambda (x) (= (remainder x 2) 0))]\n           [odd? (lambda (x) (not (even? x)))]\n           [first-even (lambda (list2)\n                         (cond [(empty? list2) (error \"No even number in the list\")]\n                               [(even? (first list2)) (first list2)]\n                               [else (first-even (rest list2))]))]\n           [first-odd (lambda (list2)\n                        (cond [(empty? list2) (error \"No odd number in the list\")]\n                              [(odd? (first list2)) (first list2)]\n                              [else (first-odd (rest list2))]))])\n    (- (first-even list1) (first-odd list1))))\n",
    "  (let ((even (find-first-even list1))\n        (odd (find-first-odd list1)))\n    (- even odd)))\n",
    "  (let ([even (find-first-even list1)]\n        [odd (find-first-odd list1)])\n    (- even odd)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(and (even? (first list1)) (odd? (second list1))) (- (first list1) (second list1))]\n    [else (diff_even_odd (rest list1))]))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ((even (find-first-even list1))\n        (odd (find-first-odd list1)))\n    (- even odd)))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (odd? n)\n    (if (= (remainder n 2) 1)\n        #t\n        #f))\n  (define (first-even list)\n    (if (null? list)\n        0\n        (if (even? (car list))\n            (car list)\n            (first-even (cdr list)))))\n  (define (first-odd list)\n    (if (null? list)\n        0\n        (if (odd? (car list))\n            (car list)\n            (first-odd (cdr list)))))\n  (- (first-even list1) (first-odd list1)))\n",
    "  (letrec ([even (lambda (list1) (if (null? list1) #f (if (even? (car list1)) (car list1) (even (cdr list1)))))]\n           [odd (lambda (list1) (if (null? list1) #f (if (odd? (car list1)) (car list1) (odd (cdr list1)))))]\n           [diff (lambda (list1) (- (even list1) (odd list1)))])\n    (diff list1)))\n",
    "  (let loop ([list list1] [even #f] [odd #f])\n    (cond [(null? list) (- even odd)]\n          [(even? (car list)) (loop (cdr list) (car list) odd)]\n          [(odd? (car list)) (loop (cdr list) even (car list))]\n          [else (loop (cdr list) even odd)])))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(and (even? (first list1)) (odd? (second list1))) (- (first list1) (second list1))]\n    [else (diff_even_odd (rest list1))]))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n"
  ]
}