{
  "name": "mbpp_279_is_num_decagonal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth decagonal number.\n(define (is_num_decagonal n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_num_decagonal))\n    (check-equal? (candidate 3) 27)\n    (check-equal? (candidate 7) 175)\n    (check-equal? (candidate 10) 370)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 100 (sqr n))))))\n    (and (integer? d)\n         (= d (round d))\n         (= n (+ (* (/ d 2) (- d 1)) (/ (- d 1) 2))))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (* 10 (sqrt (+ (* 3 n) 1))) 1) 3))))\n",
    "  (let* ((d (sqrt (+ (* 4 (* 10 n)) 100)))\n         (d1 (floor d))\n         (d2 (ceiling d)))\n    (and (= d1 d2)\n         (= (* 10 n) (- (* d1 d1) 100)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 2))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (sqrt (+ (* 10 (* 10 n)) 100)) 10) 4))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (and (integer? (/ (+ d1 d2) 2))\n         (or (= d1 d2)\n             (and (integer? (/ (+ d1 d2) 2))\n                  (= d1 (/ (+ d1 d2) 2)))))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (or (and (= d1 d2) (= (modulo d1 4) 3))\n        (and (= d1 (floor (/ d2 2))) (= (modulo d2 4) 3)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (= d (floor d))\n         (= (* 10 n) (- (* d d) (* 9 n)))\n         n)))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) 1)))))\n",
    "  (let ([d (round (sqrt (+ (* 2 n) (* 2 (sqrt 5)))))]\n        [k (- n (* d (+ d 3)) (/ (* d (d+1)) 2))])\n    (and (= k 0) (not (zero? d)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 4 (sqr n)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((x (sqrt (+ (* 4 (* 10 n)) (* 100 n n)))))\n    (and (integer? x)\n         (integer? (/ x 2))\n         (integer? (/ x 10)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))))\n    (and (integer? d)\n         (or (= d (round d))\n             (= d (round (- d 1)))))))\n",
    "  (and (integer? n)\n       (let ((d (sqrt (+ (* 4 (* 10 n)) 1))))\n         (and (integer? d)\n              (or (= d (floor d))\n                  (= d (ceiling d)))))))\n"
  ]
}