{
  "name": "mbpp_279_is_num_decagonal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth decagonal number.\n(define (is_num_decagonal n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_num_decagonal))\n    (check-equal? (candidate 3) 27)\n    (check-equal? (candidate 7) 175)\n    (check-equal? (candidate 10) 370)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 100 (sqr n))))))\n    (and (integer? d)\n         (= d (round d))\n         (= n (+ (* (/ d 2) (- d 1)) (/ (- d 1) 2))))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (* 10 (sqrt (+ (* 3 n) 1))) 1) 3))))\n",
    "  (let* ((d (sqrt (+ (* 4 (* 10 n)) 100)))\n         (d1 (floor d))\n         (d2 (ceiling d)))\n    (and (= d1 d2)\n         (= (* 10 n) (- (* d1 d1) 100)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 2))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (sqrt (+ (* 10 (* 10 n)) 100)) 10) 4))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (and (integer? (/ (+ d1 d2) 2))\n         (or (= d1 d2)\n             (and (integer? (/ (+ d1 d2) 2))\n                  (= d1 (/ (+ d1 d2) 2)))))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (or (and (= d1 d2) (= (modulo d1 4) 3))\n        (and (= d1 (floor (/ d2 2))) (= (modulo d2 4) 3)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (= d (floor d))\n         (= (* 10 n) (- (* d d) (* 9 n)))\n         n)))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) 1)))))\n",
    "  (let ([d (round (sqrt (+ (* 2 n) (* 2 (sqrt 5)))))]\n        [k (- n (* d (+ d 3)) (/ (* d (d+1)) 2))])\n    (and (= k 0) (not (zero? d)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 4 (sqr n)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((x (sqrt (+ (* 4 (* 10 n)) (* 100 n n)))))\n    (and (integer? x)\n         (integer? (/ x 2))\n         (integer? (/ x 10)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))))\n    (and (integer? d)\n         (or (= d (round d))\n             (= d (round (- d 1)))))))\n",
    "  (and (integer? n)\n       (let ((d (sqrt (+ (* 4 (* 10 n)) 1))))\n         (and (integer? d)\n              (or (= d (floor d))\n                  (= d (ceiling d)))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (and (= d1 d2)\n         (= (modulo d1 4) 3))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* n 2) (* n n))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 100 (sqr n)))))))\n",
    "  (let* ([n-sqrt (sqrt (+ (* 10 n) 1))]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt-int)\n         (= n-sqrt-int n-sqrt))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (quotient d 2)]\n         [d2 (quotient (+ d 1) 2)])\n    (and (integer? d1) (integer? d2) (= d1 d2))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ (+ d 3) 4)))))\n",
    "  (let ((r (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? r)\n         (= (modulo r 2) 1))))\n",
    "  (let* ((d (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2)))))\n         (d1 (floor d))\n         (d2 (ceiling d)))\n    (and (= d1 d2)\n         (= (modulo d1 10) 0))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (cond [(= d1 d2)\n           (and (integer? (/ (+ d1 1) 4))\n                (integer? (/ (+ d1 1) 2)))]\n          [else #f])))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (or (= d1 d2)\n        (= d1 (+ d2 1)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (or (= d1 d2)\n        (= d1 (+ d2 1)))))\n",
    "  (let ((d (sqrt (+ (* 40 n) 100))))\n    (and (integer? d)\n         (= (modulo d 10) 0)\n         (= (modulo d 2) 0))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ (+ d 3) 4)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 2)) -1)))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (or (= d1 d2)\n        (= d1 (+ d2 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) 1)))))\n",
    "  (let ([d (sqrt (+ (* 40 n) (* 9 (expt (- n 1) 2))))])\n    (and (integer? d)\n         (= (* 10 (- d 1)) (- n 1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 4 (* 10 n)) 1)))))\n",
    "  (let ((d (sqrt (+ (* 40 n) (* 9 (expt (- n) 2)))))\n        (d2 (sqrt (+ (* 40 n) (* 9 (expt (+ n) 2))))))\n    (and (integer? d) (integer? d2))))\n",
    "  (let* ([sqrt_n (sqrt n)]\n         [sqrt_n_int (round sqrt_n)])\n    (and (= sqrt_n_int sqrt_n)\n         (= (modulo sqrt_n_int 4) 1))))\n",
    "  (let loop ((i 1))\n    (if (= i n)\n        #t\n        (if (= (remainder (expt i 2) 10) 5)\n            #t\n            (loop (+ i 1))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (equal? (sqrt (+ (* 10 n) (* 100 (sqr n))))\n               (round (sqrt (+ (* 10 n) (* 100 (sqr n))))))))\n",
    "  (and (integer? n)\n       (let ((d (sqrt (+ (* 100 n) (* 25 (* n n))))))\n         (and (integer? d)\n              (= d (floor d))\n              (= (* 10 n) (- d 5))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let* ([n-sqrt (sqrt (+ (* 10 n) (* 4 1)))]\n         [n-sqrt-int (floor n-sqrt)])\n    (and (= n-sqrt-int n-sqrt)\n         (= (modulo n-sqrt-int 4) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (or (zero? (modulo d 2))\n             (zero? (modulo d 5))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))])\n    (and (integer? d) (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let ((n-sqrt (sqrt (+ (* 2 n) (* 0.25 (expt 10 4))))))\n    (and (integer? n-sqrt)\n         (= (modulo n-sqrt 5) 2))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 4 (sqrt 10)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 4 (sqrt 10)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 2)) -1)))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (= (modulo n i) 0)\n            #f\n            (loop (+ i 1))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 5)))))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (cond\n      [(= d1 d2)\n       (and (= d1 (+ (* 3 n) 1))\n            (= d2 (+ (* 3 n) 1)))]\n      [else #f])))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 10)) 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ d 2))\n         (= (modulo d 2) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ (+ d 1) 4)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (= d (floor d))\n         (or (= d (+ (* 2 n) 1))\n             (= d (- (* 2 n) 1))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (if (and (= d1 d2)\n             (= (mod d1 4) 1))\n        n\n        0)))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (or (= d1 d2)\n        (= d1 (+ d2 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1)))))\n  )\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 3 n)) 1))])\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (sqrt (+ (* 10 (* 10 n)) 100)) 10) 2))))\n",
    "  (let* ([d (sqrt (+ (* 4 (+ (* 10 n) 1)) 1))])\n    (and (integer? d) (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (exact? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 5)))))))\n",
    "  (let ([d (floor (/ (sqrt (+ (* 100 (+ n (* n n))) 1)) 10))])\n    (= n (* d (d+ d 1) (/ (+ d d 1) 2)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* -1 (expt n 3)))))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (= (modulo i 10) 0)\n            #t\n            (loop (+ i 1))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))))\n    (and (integer? d)\n         (= d (floor d))\n         (or (= (+ (* 3 d) 1) (* 4 n))\n             (= (- (+ (* 3 d) 1) (* 4 n)) 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* 100 (expt n 3)))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (and (= d1 d2)\n         (= (modulo d1 4) 3))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 10)) 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 3 (sqr n)))))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))])\n    (and (integer? d)\n         (zero? (- d (* 2 (floor (/ d 2))))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 10)) 1)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 2 (expt 10 2)) (- (expt 10 4)))))\n        (y (sqrt (+ (* 2 n) (* 2 (expt 10 2)) (- (expt 10 4))))))\n    (and (integer? x) (integer? y) (= x y))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (if (and (= (mod d1 2) 1) (= (mod d2 2) 1))\n        (if (= d1 d2)\n            d1\n            (error \"not a decagonal number\"))\n        (error \"not a decagonal number\"))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (integer? (/ (+ d 10) 4)))))\n",
    "  (let ((m (sqrt (+ (* 4 (* 10 n)) (* 100 (sqr n))))))\n    (and (integer? m)\n         (= (+ (* 10 n) (sqr m)) (* 100 (sqr n)))\n         m)))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 (sqr n)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ([n-sqrt (sqrt (+ (* 4 n) (* 100 n) 1))])\n    (and (integer? n-sqrt)\n         (integer? (/ (+ n-sqrt 1) 2)))))\n",
    "  (and (integer? n)\n       (= n (round n))\n       (integer? (/ (+ (sqrt (+ (* 10 (* 10 n)) 100)) 10) 2))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d-int (floor d)])\n    (and (= d d-int)\n         (= (* 10 n) (- (* d-int d-int) (* 9 n)))\n         (= 1 (modulo d-int 4)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((x (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 100 n n)))))\n    (and (integer? d)\n         (integer? (/ d 2))\n         (integer? (/ d 4)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (or (= d1 d2)\n        (= d1 d))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 10)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let* ([n-sqrt (sqrt (+ (* 2 n) (* 4 (expt 10 4))))]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (= n-sqrt-int n-sqrt)\n         (= (modulo n-sqrt-int 4) 2))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ d 2))\n         (integer? (/ (- d 1) 2)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d) (zero? (modulo d 2)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ([d (round (sqrt (+ (* 2 n) (* 2 (sqrt 5)))))])\n    (and (= (mod d 2) 1)\n         (= n (* (/ d 2) (+ (/ d 2) 1) (+ (* 5 (sqrt 5)) 1))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((x (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? x)\n         (integer? (/ (+ x 1) 2)))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (or (= d1 d2)\n        (= d1 (+ d2 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))])\n    (and (integer? d)\n         (integer? (/ (+ d 3) 10)))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [n1 (/ (+ d 1) 2)]\n        [n2 (/ (- d 1) 2)])\n    (and (integer? n1) (integer? n2))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ((d (sqrt (+ (* 40 n) (* 9 (expt (- n) 2)))))\n        (r (modulo d 10)))\n    (and (integer? d) (= r 0))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (or (= d (floor d))\n             (= d (ceiling d)))\n         (= d (+ (* 2 n) 1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2)) 1))))\n    (and (integer? d)\n         (or (= d (floor d))\n             (= d (ceiling d)))\n         (or (= (modulo d 4) 1)\n             (= (modulo d 4) 3)))))\n",
    "  (let ((d (sqrt (+ (* 40 n) (* 9 (sqr n)))))\n        (d2 (sqrt (+ (* 40 n) (* 9 (sqr n))))))\n    (and (integer? d) (integer? d2) (= d d2))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1))))))\n",
    "  (let ((n-sqrt (sqrt (+ (* 2 n) (* 3 (sqr n))))))\n    (and (integer? n-sqrt)\n         (= n-sqrt (floor n-sqrt)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (or (= d (round d))\n             (= d (round (+ d 1)))))))\n",
    "  (let* ([n-sqrt (sqrt (+ (* 4 n) (* 10 n) 1))]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int n-sqrt)\n         (= (modulo n-sqrt-int 4) 1))))\n",
    "  (and (integer? n)\n       (= n (round n))\n       (integer? (sqrt (+ (* 4 (* 10 n)) 100)))))\n",
    "  (let ((a (- n (* (quotient n 10) 10))))\n    (and (= a 0)\n         (= (remainder n 10) (quotient n 10)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (or (= d (truncate d))\n             (= d (truncate (+ d 1)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (cond\n      [(= d1 d2) n]\n      [else #f])))\n",
    "  (let ((d (sqrt (+ (* 40 n) (* 9 (expt n 2)))))\n        (d1 (sqrt (+ (* 40 n) (* 9 (expt n 2))))))\n    (and (integer? d)\n         (integer? d1)\n         (= d d1)\n         (integer? (/ (+ d 1) 4)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (cond [(= d1 d2) d1]\n          [else #f])))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(= (remainder (* i 10) 3) 1) (loop (+ i 1))]\n      [else #f])))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (sqrt (+ (* 10 (* 3 n)) 1)) 1) 3))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (cond [(= d1 d2)\n           (and (= (modulo d1 4) 3)\n                (= (modulo d1 5) 2))]\n          [else #f])))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1)))))\n  )\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (and (= d1 d2)\n         (= (modulo d1 4) 3))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1)))))\n  )\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1)))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (and (= d1 d2)\n         (= (modulo d1 4) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ d 2)))))\n",
    "  (and (is_num_pentagonal n) (is_num_hexagonal n)))\n",
    "  (and (integer? n)\n       (integer? (/ (- (* 10 (sqrt (+ (* 4 (* 100 n)) 1))) 2) 1))))\n",
    "  (let* ([a 0.1]\n         [b 1]\n         [c (- n (* 10 (/ n 10))))])\n    (= n (+ (* a (expt b 2)) (* b c)))))\n",
    "  (let loop ((i 1) (j 1))\n    (if (= n j)\n        #t\n        (if (= i 10)\n            (loop (+ i 1) (+ j (+ i 1) (* i 10)))\n            (loop (+ i 1) j)))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 100 (sqr n))))])\n    (and (integer? d)\n         (integer? (/ (+ d 1) 4)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (* n n))))))\n    (and (integer? d)\n         (zero? (- d (truncate d))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* -1 1))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 3 (sqr n)))))))\n",
    "  (let* ([n (sqrt (+ (* 4 (* 3 n)) 1))]\n         [n (round n)])\n    (and (= (modulo n 2) 1)\n         (= (modulo n 3) 0)\n         (= (modulo n 5) 2)\n         (= (modulo n 6) 5))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) 25)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (= n (/ (+ (* 10 n) (* 100 (expt n 2))) 100))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (sqrt (+ (* 3 (* n n)) 1)) 1) 2))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (let ([d (sqrt (+ (* 4 (+ (* 10 n) 1)) 1))])\n    (and (integer? d)\n         (integer? (/ d 2))\n         (integer? (/ (- d 1) 2)))))\n",
    "  (and (integer? n)\n       (= n (round n))\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 10)))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))]\n         [d1 (/ (+ d 3) 2)]\n         [d2 (/ (- d 3) 2)])\n    (and (integer? d1) (integer? d2)\n         (or (= d1 d2)\n             (and (= d1 (round d1)) (= d2 (round d2)))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (modulo d 5) 0))))\n",
    "  (let loop ([i 0] [j 0])\n    (cond\n      [(= n j) #t]\n      [(= i 10) (loop (+ i 1) (+ j (+ i 1) (* i 10))) #f]\n      [else (loop (+ i 1) (+ j (+ i 1) (* i 10)))])))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (not (zero? (modulo n 10)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 2 n) (* 2 (sqrt 5)))))))\n",
    "  (and (is_num_pentagonal n) (is_num_hexagonal n)))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) 100))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (or (= d (truncate d))\n             (= d (ceiling d)))\n         (let ((a (/ (+ d 1) 2)))\n           (and (integer? a)\n                (= n (* a (- a 3))))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1))))))\n",
    "  (let ((d (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* 100 (expt n 3)) (* 25 (expt n 4)) (* 25 (expt n 5)) (* 1 (expt n 6))))))\n    (and (integer? d) (not (zero? (modulo d 10))) (not (zero? (modulo d 5))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (= n (round n))\n       (integer? (sqrt (+ (* 2 n) (* 4 (sqr n)))))))\n",
    "  (let ((delta (- (* n (n + 1)) (* 2 n))))\n    (and (is_num_square delta)\n         (is_num_square (+ delta (* 2 n))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))))\n    (and (integer? d)\n         (= (+ (* 4 (* 10 n)) (* 9 (sqr n))) (* d d)))))\n",
    "  (and (integer? n)\n       (let* ([d (sqrt (+ (* 4 (* 10 n)) 100))]\n              [d1 (floor d)]\n              [d2 (ceiling d)])\n         (or (= d1 d2)\n             (and (= d1 d)\n                  (= (modulo d1 10) 0))))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 (sqr n))))))\n    (and (integer? d)\n         (= d (floor d))\n         (exact? d)\n         (zero? (modulo d 5)))))\n",
    "  (let* ([n-sqrt (sqrt (+ (* 2 n) (* 2 (sqrt 5))))]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))]\n         [n-sqrt-dec (round (* (- n-sqrt n-sqrt-int) 10))])\n    (and (= n-sqrt-dec 0)\n         (= (modulo n-sqrt-int 2) 1))))\n",
    "  (let ((n (sqrt (+ (* 4 (* 3 n)) 1))))\n    (and (integer? n)\n         (integer? (/ n 2)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (integer? (/ d 2)))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (and (= d1 d2)\n         (integer? (/ (+ d1 d2) 2)))))\n",
    "  (let ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n        [d1 (floor d)]\n        [d2 (ceiling d)])\n    (if (and (= d1 d2)\n             (= (modulo d1 4) 1))\n        n\n        #f)))\n",
    "  (let loop ([n n] [i 0])\n    (if (= n (* i 10))\n        #t\n        (if (&lt; n (* i 10))\n            #f\n            (loop (- n (* i 10)) (+ i 1))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (- (* 4 (* 3 n)) (* 3 n n)) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 25 1)))))\n  )\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* -1 100))))))\n",
    "  (let* ([d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))]\n         [d1 (floor d)]\n         [d2 (ceiling d)])\n    (cond [(= d1 d2) (list n d1)]\n          [else #f])))\n",
    "  (let ((x (sqrt (+ (* 4 (* 10 n)) 1))))\n    (and (integer? x)\n         (integer? (/ (+ x 1) 4)))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 2)) 1)))))\n",
    "  (let ((n-root (sqrt (+ (* 2 n) (* 3 (expt 10 4))))))\n    (and (integer? n-root)\n         (= n (+ (* (/ n-root 2) (- n-root 1)) (/ (- n-root 1) 2))))))\n",
    "  (equal? (sqrt (+ (* 10 n) (* 100 (sqr n)))) (sqrt (+ (* 100 (sqr n)) (* 10 n)))))\n",
    "  (let ((x (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2))))))\n    (and (integer? x)\n         (= (+ (* -1 x) (sqrt (+ (* 4 (* 10 n)) (* 100 (expt n 2))))) 0))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)) (* 100 (expt n 3)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (= (sqrt (+ (* 10 n) (* 100 (expt n 2))))\n          (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       ))\n",
    "  (and (integer? n)\n       (integer? (/ (+ (sqrt (+ (* 3 (* 3 (* 3 n)) (* 2 n)) 1)) 1) 10))))\n",
    "  (let ([d (round (sqrt (+ (* 2 n) (* -1 100))))])\n    (and (integer? d)\n         (= n (+ (* d (1+ d)) (* 10 (/ d 2)))))))\n",
    "  (let ([d (sqrt (+ (* 10 n) (* 100 (expt n 2))))])\n    (and (integer? d)\n         (= (modulo d 10) 0))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (= n (/ (- (sqrt (+ (* 10 n) (* 100 (expt n 2)))) 10) 4))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (sqrt 10)) 1)))))\n",
    "  (let ((d (sqrt (+ (* 4 (* 10 n)) (* 9 n n)))))\n    (and (integer? d)\n         (= (modulo d 2) 1)\n         (= (quotient d 2) (quotient (- d 1) 2)))))\n",
    "  (let ((d (sqrt (+ (* 40 n) (* 9 (sqr n))))))\n    (and (integer? d)\n         (= d (floor d))\n         (= (* 10 n) (- d (* 4 n))))))\n",
    "  (and (integer? n)\n       (integer? (sqrt (+ (* 10 n) (* 100 (expt n 2)))))\n       (= (sqrt (+ (* 10 n) (* 100 (expt n 2))))\n          (sqrt (+ (* 10 (+ n 1)) (* 100 (expt (+ n 1) 2)))))))\n"
  ]
}