{
  "name": "mbpp_622_get_median",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the median of two sorted lists of same size.\n(define (get_median arr1 arr2 n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_median))\n    (check-equal? (candidate (list 1 12 15 26 38) (list 2 13 17 30 45) 5) 16.0)\n    (check-equal? (candidate (list 2 4 8 9) (list 7 13 19 28) 4) 8.5)\n    (check-equal? (candidate (list 3 6 14 23 36 42) (list 2 18 27 39 49 55) 6) 25.0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median-helper arr1 arr2 m)]\n              [m2 (get_median-helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (= m1 m2) m1\n             (get_median-helper (take arr1 m) (take arr2 m) m)))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (car (drop (sub1 m) arr1)) (car (drop (sub1 m) arr2)))\n             (get_median_helper (drop m arr1) (drop m arr2) m)\n             (get_median_helper (drop (sub1 m) arr1) (drop (sub1 m) arr2) m)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond ((= n 1) (/ (+ (car arr1) (car arr2)) 2))\n          ((= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4))\n          (else\n           (let* ([m (/ n 2)]\n                  [m1 (get_median_helper arr1 arr2 m)]\n                  [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n             (if (< m1 m2)\n                 (get_median_helper arr1 (drop arr2 m) m)\n                 (get_median_helper (drop arr1 m) arr2 m))))))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                    (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (vector-ref arr1 m)]\n               [m2 (vector-ref arr2 m)])\n           (cond\n             [(= m1 m2) m1]\n             [(< m1 m2) (get_median_helper (vector-ref arr1 (add1 m))\n                                           (vector-ref arr2 m)\n                                           (- n m))]\n             [else (get_median_helper (vector-ref arr1 m)\n                                      (vector-ref arr2 (add1 m))\n                                      (- n m))])))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n    [(= n 2) (/ (+ (max (car arr1) (car arr2))\n                  (min (cadr arr1) (cadr arr2))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median arr1 arr2 (min m (- n m)))))]))\n",
    "  (cond [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n        [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                      (min (second arr1) (second arr2))) 2)]\n        [else\n         (let* ([m (/ n 2)]\n                [m1 (get_median arr1 arr2 m)]\n                [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n           (if (= m1 m2) m1\n               (get_median arr1 arr2 (if (&lt; m1 m2) m (- n m)))))]))\n</code>\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                  (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n    [else\n     (let* ([m1 (vector-ref arr1 (/ n 2))]\n            [m2 (vector-ref arr2 (/ n 2))])\n       (cond\n         [(= m1 m2) m1]\n         [(< m1 m2) (get_median (subvector arr1 (/ n 2) n)\n                                (subvector arr2 0 (/ n 2))\n                                (/ n 2))]\n         [else (get_median (subvector arr1 0 (/ n 2))\n                           (subvector arr2 (/ n 2) n)\n                           (/ n 2))]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop (sub1 m) arr1)) (car (drop (sub1 m) arr2)))\n            (get_median_helper (drop m arr1) arr2 m)]\n           [else\n            (get_median_helper arr1 (drop m arr2) m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get-median-helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)]\n             [m1 (get-median-helper (take arr1 m) (take arr2 m) m)]\n             [m2 (get-median-helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             (get-median-helper (take arr1 m) (drop arr2 m) m)\n             (get-median-helper (drop arr1 m) (take arr2 m) (- n m))))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (second arr1) (first arr2) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (first (drop m arr1)) (first (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [(> (first (drop m arr1)) (first (drop m arr2)))\n            (get_median_helper arr1 (drop m arr2) (- n m))]\n           [else\n            (first (drop m arr1))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (if (empty? arr1) (first arr2) (first arr1))]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [else (let ([m (/ n 2)])\n              (cond\n                [(= (first arr1) (first arr2)) (first arr1)]\n                [(> (first arr1) (first arr2)) (get_median_helper arr1 (rest arr2) m)]\n                [else (get_median_helper (rest arr1) arr2 m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)]\n             [m1 (get_median_helper (take arr1 m) (take arr2 m) m)]\n             [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             (get_median_helper (drop arr1 m) (take arr2 m) (- n m))\n             (get_median_helper (take arr1 m) (drop arr2 m) m)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n m1 m2)\n    (cond\n      [(= n 0) (if (= m1 m2) m1 (if (&gt; m1 m2) m1 m2))]\n      [(= (car arr1) (car arr2)) (get_median_helper (cdr arr1) (cdr arr2) (- n 1) (car arr1) (car arr2))]\n      [(&lt; (car arr1) (car arr2)) (get_median_helper (cdr arr1) arr2 (- n 1) (car arr1) m2)]\n      [else (get_median_helper arr1 (cdr arr2) (- n 1) m1 (car arr2))]))\n  (get_median_helper arr1 arr2 n 0 0))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median-helper (take arr1 m) (take arr2 m) m)]\n              [m2 (get_median-helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (&lt; m1 m2)\n             m1\n             m2))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty list\")]\n      [(empty? arr2) (error \"empty list\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [else\n       (cond\n         [(= (first arr1) (first arr2)) (first arr1)]\n         [(< (first arr1) (first arr2))\n          (get_median_helper (rest arr1) (rest arr2) (- n 1))]\n         [else\n          (get_median_helper (rest arr2) (rest arr1) (- n 1))])]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2)\n           m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty list\")]\n      [(empty? arr2) (error \"empty list\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (first arr1) (first arr2))\n            (get_median_helper (rest arr1) (drop arr2 m) (- n m))]\n           [else\n            (get_median_helper (drop arr1 m) (rest arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty list\")]\n      [(empty? arr2) (error \"empty list\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median-helper (rest arr1) (rest arr2) (- m 1))]\n              [m2 (get-median-helper (drop arr1 m) (drop arr2 m) m)])\n         (if (&gt; (first arr1) (first arr2))\n             (get_median-helper (rest arr1) arr2 (- n 1))\n             (get_median-helper arr1 (rest arr2) (- n 1))))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (define m (/ n 2))\n       (define m1 (car arr1))\n       (define m2 (car arr2))\n       (cond\n         [(= m1 m2) m1]\n         [(< m1 m2) (get_median_helper (cdr arr1) (take arr2 m) (- n m))]\n         [else (get_median_helper (take arr1 m) (cdr arr2) (- n m))])]))\n  (get_median_helper arr1 arr2 n))\n"
  ]
}