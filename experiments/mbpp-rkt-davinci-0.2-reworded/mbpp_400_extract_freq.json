{
  "name": "mbpp_400_extract_freq",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to extract the number of unique lists in the given list.\n(define (extract_freq test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_freq))\n    (check-equal? (candidate (list (list 3 4) (list 1 2) (list 4 3) (list 5 6))) 3)\n    (check-equal? (candidate (list (list 4 15) (list 2 3) (list 5 4) (list 6 7))) 4)\n    (check-equal? (candidate (list (list 5 16) (list 2 3) (list 6 5) (list 6 9))) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (length (remove-duplicates test_list)))\n",
    "  (let ([freq_list (map (lambda (x) (list x (count x test_list))) test_list)])\n    (map (lambda (x) (list (car x) (length (filter (lambda (y) (equal? (car x) (car y))) freq_list)))) freq_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_iter test_list freq_list)\n    (cond\n      [(empty? test_list) freq_list]\n      [(member (first test_list) freq_list) (extract_freq_iter (rest test_list) freq_list)]\n      [else (extract_freq_iter (rest test_list) (cons (first test_list) freq_list))]))\n  (extract_freq_iter test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (extract_freq_iter (cdr test_list) (cons (car test_list) acc))]))\n  (length (extract_freq_iter test_list '())))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n"
  ]
}