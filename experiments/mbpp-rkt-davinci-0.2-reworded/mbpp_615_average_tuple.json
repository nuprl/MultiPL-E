{
  "name": "mbpp_615_average_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n",
    "  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n",
    "  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n",
    "  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n",
    "  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n",
    "  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n",
    "  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n",
    "  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n",
    "  (map (lambda (x) (/ (apply + x) (length x))) nums))\n",
    "  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n",
    "  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n",
    "  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n",
    "  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n",
    "  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n",
    "  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n",
    "  (define (average_helper nums sum count)\n    (cond\n      [(empty? nums) (/ sum count)]\n      [else (average_helper (rest nums) (+ sum (first nums)) (+ count 1))]))\n  (average_helper nums 0 0))\n",
    "  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n"
  ]
}