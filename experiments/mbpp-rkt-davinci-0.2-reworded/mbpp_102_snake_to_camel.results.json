{
  "name": "mbpp_102_snake_to_camel",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          (string-append \"_\" x)\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprikhjly2.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprikhjly2.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprikhjly2.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? x \"_\")\n              \"\"\n              (string-upcase x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5wqp3uub.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5wqp3uub.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5wqp3uub.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (string-append result (string-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphgq0q0xi.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphgq0q0xi.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphgq0q0xi.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-capitalize word))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "/tmp/tmpqtjz0tu6.rkt:7:11: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpqtjz0tu6.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87h42mh2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87h42mh2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87h42mh2.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n            (helper (rest word) (string-append result (first word))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsv3wxvv.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsv3wxvv.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsv3wxvv.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (if (equal? (string-length x) 1) x (string-upcase (substring x 0 1)) (substring x 1)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "/tmp/tmp9bkkh3_1.rkt:7:16: if: bad syntax\n  in: (if (equal? (string-length x) 1) x (string-upcase (substring x 0 1)) (substring x 1))\n  location...:\n   /tmp/tmp9bkkh3_1.rkt:7:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              x\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplzr_uo1w.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplzr_uo1w.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplzr_uo1w.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvb_zu1__.rkt:14:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvb_zu1__.rkt:15:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvb_zu1__.rkt:16:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "/tmp/tmpei73sw3o.rkt:8:7: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpei73sw3o.rkt:8:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (string (second word))) (rest acc)))\n            (helper (rest word) (cons (string (first word)) acc)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87tpog93.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87tpog93.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87tpog93.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (equal? (string-length x) 1)\n                       (string-upcase x)\n                       (string-append (string-upcase (substring x 0 1))\n                                      (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (s) (string-capitalize s))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "/tmp/tmp0bf6hl3y.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmp0bf6hl3y.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (if (equal? (string-length w) 1)\n              (string-upcase w)\n              (string-append (string-upcase (substring w 0 1))\n                             (substring w 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (if (equal? (string-ref w 0) #\\_)\n              (string-upcase (substring w 1))\n              w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqya78yg9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqya78yg9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqya78yg9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (snake_to_camel_iter (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else\n       (snake_to_camel_iter (rest word) (string-append result (string (first word))))]))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnm49gwyi.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnm49gwyi.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnm49gwyi.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (string-drop x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "/tmp/tmpxxzua0o9.rkt:7:39: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpxxzua0o9.rkt:7:39\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (\u03bb (x) (if (char=? (string-ref x 0) #\\_)\n                   (string-upcase (substring x 1))\n                   x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsml58cwe.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsml58cwe.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsml58cwe.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (second word)) (rest acc)))\n            (helper (rest word) (cons (first word) acc)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2mvgnlt.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2mvgnlt.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf2mvgnlt.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mn5un6q.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mn5un6q.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mn5un6q.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (second word)) (rest acc)))\n            (helper (rest word) (cons (first word) acc)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmu3xosl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmu3xosl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmu3xosl.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk87jw6sw.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk87jw6sw.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk87jw6sw.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x)\n                      (if (char=? (string-ref x 0) #\\_)\n                          (string-upcase (substring x 1))\n                          x))\n                    (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs1jjto6.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs1jjto6.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs1jjto6.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy28r0xko.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy28r0xko.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy28r0xko.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                         (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyzlihweo.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyzlihweo.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyzlihweo.rkt:22:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "/tmp/tmpa2cfzjm3.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpa2cfzjm3.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:13:4\nactual:     \"Python_program\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:14:4\nactual:     \"Python_language\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:15:4\nactual:     \"Programming_language\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (eq? (string-length x) 1)\n          x\n          (string-append\n           (string-upcase (substring x 0 1))\n           (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:13:4\nactual:     \"Python_program\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:14:4\nactual:     \"Python_language\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:15:4\nactual:     \"Programming_language\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? x #\\_)\n          (string-upcase (string-ref word (add1 (string-position word x))))\n          x))\n    (string->list word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "/tmp/tmprtt8tplc.rkt:9:49: string-position: unbound identifier\n  in: string-position\n  location...:\n   /tmp/tmprtt8tplc.rkt:9:49\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 0 1))\n          (substring w 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9tv63_k.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9tv63_k.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9tv63_k.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char-lower-case? (string-ref x 0))\n                        (string-upcase x)\n                        x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppedo86ed.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppedo86ed.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppedo86ed.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-capitalize w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "/tmp/tmpnkxpmfbe.rkt:7:11: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpnkxpmfbe.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozotkpmm.rkt:15:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozotkpmm.rkt:16:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozotkpmm.rkt:17:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (if (equal? (string-ref w 0) #\\_)\n              (string-upcase (string-drop w 1))\n              w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "/tmp/tmpwvvo613_.rkt:8:30: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpwvvo613_.rkt:8:30\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8mj3z_17.rkt:16:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8mj3z_17.rkt:17:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8mj3z_17.rkt:18:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu5g0j.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu5g0j.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu5g0j.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23k0ffbc.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23k0ffbc.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23k0ffbc.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdfzccw64.rkt:17:4\nactual:     \"ythonrogram\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdfzccw64.rkt:18:4\nactual:     \"ythonanguage\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdfzccw64.rkt:19:4\nactual:     \"rogramminganguage\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiixidlbh.rkt:15:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiixidlbh.rkt:16:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiixidlbh.rkt:17:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (first (rest word))) (rest acc)))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8mqa5h_.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8mqa5h_.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8mqa5h_.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu5g0j.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu5g0j.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu5g0j.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (string-drop x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "/tmp/tmpd1pd104r.rkt:8:30: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpd1pd104r.rkt:8:30\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgd9u_tlt.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgd9u_tlt.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgd9u_tlt.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase (substring x 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvn4blag.rkt:15:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvn4blag.rkt:16:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvn4blag.rkt:17:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-capitalize x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "/tmp/tmp7k_14lt9.rkt:10:11: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmp7k_14lt9.rkt:10:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvb_zu1__.rkt:14:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvb_zu1__.rkt:15:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvb_zu1__.rkt:16:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? #\\_ (string-ref x 0))\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk3jg5wvc.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk3jg5wvc.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk3jg5wvc.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggf9vz3s.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggf9vz3s.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggf9vz3s.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mn5un6q.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mn5un6q.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mn5un6q.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (string-append result (string-upcase (string (second word))) (rest (rest word))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4xoth40.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4xoth40.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4xoth40.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (if (empty? word)\n        result\n        (snake_to_camel_iter (rest word)\n                             (if (char=? (first word) #\\_)\n                                 (string-append result (string-upcase (second word)))\n                                 (string-append result (first word))))))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwugvq0o2.rkt:19:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwugvq0o2.rkt:20:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwugvq0o2.rkt:21:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase (substring x 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvn4blag.rkt:15:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvn4blag.rkt:16:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvn4blag.rkt:17:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ydv7csp.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ydv7csp.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ydv7csp.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (\u03bb (x)\n          (if (string=? x \"_\")\n              \"\"\n              (string-upcase x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyusi0hv.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyusi0hv.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbyusi0hv.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond [(empty? word) (reverse acc)]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n          [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbfuhxxf.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbfuhxxf.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbfuhxxf.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez4nv34u.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez4nv34u.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez4nv34u.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel-iter word acc)\n    (cond [(empty? word) (reverse acc)]\n          [(char=? (first word) #\\_)\n           (snake_to_camel-iter (rest word)\n                                (cons (char-upcase (second word))\n                                      (rest (rest word))))]\n          [else (snake_to_camel-iter (rest word)\n                                     (cons (first word) acc))]))\n  (snake_to_camel-iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn2_aw5jb.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn2_aw5jb.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn2_aw5jb.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppz7pt30i.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppz7pt30i.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppz7pt30i.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggf9vz3s.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggf9vz3s.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggf9vz3s.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (str)\n          (if (string-contains? str \"_\")\n              (string-upcase (string-drop str 1))\n              str))\n        (string-split word \"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "/tmp/tmpc2wkoq94.rkt:8:30: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpc2wkoq94.rkt:8:30\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu5g0j.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu5g0j.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu5g0j.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-upper-case? (string-ref x 0))\n          (string-upcase x)\n          (string-downcase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbk8yead6.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbk8yead6.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbk8yead6.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "/tmp/tmpa2cfzjm3.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpa2cfzjm3.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsvmue6kv.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsvmue6kv.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsvmue6kv.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ei_vris.rkt:15:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ei_vris.rkt:16:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ei_vris.rkt:17:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                      (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp189zapj8.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp189zapj8.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp189zapj8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp224_vurh.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp224_vurh.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp224_vurh.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [result '()])\n    (cond\n      [(empty? word) (string-join (reverse result))]\n      [(char=? (first word) #\\_)\n       (loop (rest word) (cons (string-upcase (second word)) (rest result)))]\n      [else (loop (rest word) (cons (first word) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rgpw7x1.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rgpw7x1.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rgpw7x1.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (second word))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhbjrbnr.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhbjrbnr.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhbjrbnr.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map string-upcase (regexp-split #rx\"_\" word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejmw6c_a.rkt:12:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejmw6c_a.rkt:13:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejmw6c_a.rkt:14:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w) (string-upcase w))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq0on9mz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq0on9mz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq0on9mz.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (cond\n      [(empty? word) empty]\n      [(char=? (first word) #\\_) (cons (char-upcase (second word)) (helper (rest (rest word))))]\n      [else (cons (first word) (helper (rest word)))]))\n  (helper word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz4fqbpio.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz4fqbpio.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz4fqbpio.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x))\n                    (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfkloxo4g.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfkloxo4g.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfkloxo4g.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl7ezsdj.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl7ezsdj.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl7ezsdj.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-titlecase word))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5bost75.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5bost75.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5bost75.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_frg8dl.rkt:16:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_frg8dl.rkt:17:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_frg8dl.rkt:18:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map string-upcase (regexp-split #rx\"_\" word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejmw6c_a.rkt:12:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejmw6c_a.rkt:13:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpejmw6c_a.rkt:14:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map string-upcase (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbpqzksmg.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbpqzksmg.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbpqzksmg.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsvmue6kv.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsvmue6kv.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsvmue6kv.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel-iter word acc)\n    (cond [(empty? word) (reverse acc)]\n          [(char=? (first word) #\\_)\n           (snake_to_camel-iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n          [else (snake_to_camel-iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel-iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpppd932my.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpppd932my.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpppd932my.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8mj3z_17.rkt:16:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8mj3z_17.rkt:17:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8mj3z_17.rkt:18:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk87jw6sw.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk87jw6sw.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk87jw6sw.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-capitalize x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "/tmp/tmpw5zj5oti.rkt:9:15: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpw5zj5oti.rkt:9:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? #\\_ (string-ref x 0))\n          (string-upcase (string-drop x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "/tmp/tmpxk4i8q3a.rkt:9:26: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpxk4i8q3a.rkt:9:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? #\\_ (first word))\n           (loop (rest word) (cons (char-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm9fi6go1.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm9fi6go1.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm9fi6go1.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpit0a9jp1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpit0a9jp1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpit0a9jp1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:13:4\nactual:     \"Python_program\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:14:4\nactual:     \"Python_language\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:15:4\nactual:     \"Programming_language\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (second word))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyxkqqxls.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyxkqqxls.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyxkqqxls.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (string-drop x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "/tmp/tmpvsj2xusb.rkt:8:30: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpvsj2xusb.rkt:8:30\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_) (string-upcase (substring x 1)) x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpayb4t8ov.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpayb4t8ov.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpayb4t8ov.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                  (string-upcase (substring x 1))\n                                  x))\n                    (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps3akv3xu.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps3akv3xu.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps3akv3xu.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_)\n       (snake_to_camel_iter (rest word) (cons (char-upcase (first (rest word))) (rest acc)))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wqcnen_.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wqcnen_.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wqcnen_.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [acc '()])\n    (cond [(empty? word) (string-join (reverse acc))]\n          [(char=? (first word) #\\_)\n           (loop (rest word) (cons (string-upcase (second word)) (rest acc)))]\n          [else (loop (rest word) (cons (first word) acc))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi2dgg7_.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi2dgg7_.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi2dgg7_.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 0 1))\n          (substring w 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9tv63_k.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9tv63_k.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9tv63_k.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map string-upcase (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp89anqv1l.rkt:14:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp89anqv1l.rkt:15:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp89anqv1l.rkt:16:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (cond [(empty? word) empty]\n        [(char=? (first word) #\\_) (cons (char-upcase (second word))\n                                         (snake_to_camel (rest (rest word))))]\n        [else (cons (first word)\n                    (snake_to_camel (rest word)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnspvnent.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnspvnent.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnspvnent.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tme76lr.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggf9vz3s.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggf9vz3s.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggf9vz3s.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw648xld.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                      (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxuzywh_.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxuzywh_.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxuzywh_.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                (string-upcase (substring x 1))\n                x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6nokruv5.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6nokruv5.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6nokruv5.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-capitalize w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "/tmp/tmpgbwypp80.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpgbwypp80.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map string-upcase\n        (regexp-match* #rx\"_([a-z])\" word\n                       (\u03bb (m) (list (match:substring m 1)))))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "/tmp/tmpmzfw0kcu.rkt:8:37: match:substring: unbound identifier\n  in: match:substring\n  location...:\n   /tmp/tmpmzfw0kcu.rkt:8:37\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf_zgvbf.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf_zgvbf.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf_zgvbf.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mn5un6q.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mn5un6q.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mn5un6q.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp46kwglgx.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp46kwglgx.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp46kwglgx.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-lower-case? (string-ref x 0))\n          (string-upcase x)\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ah5xpoa.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ah5xpoa.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ah5xpoa.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}