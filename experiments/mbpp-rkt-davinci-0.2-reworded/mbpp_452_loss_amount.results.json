{
  "name": "mbpp_452_loss_amount",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "/tmp/tmpryv500dn.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (> actual_cost sale_amount)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_9a3149.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_9a3149.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_9a3149.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (> actual_cost sale_amount)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_9a3149.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_9a3149.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_9a3149.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmps59drp6w.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmpl9218_bp.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmpl9218_bp.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmpl9218_bp.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&gt; actual_cost sale_amount)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmps6blyoyd.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmps59drp6w.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost) (- actual_cost sale_amount) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodhj5jcm.rkt:12:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodhj5jcm.rkt:13:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodhj5jcm.rkt:14:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmpl9218_bp.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost) (- actual_cost sale_amount) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122695,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodhj5jcm.rkt:12:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodhj5jcm.rkt:13:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodhj5jcm.rkt:14:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&gt; actual_cost sale_amount)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmps6blyoyd.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmps59drp6w.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmps59drp6w.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmpl9218_bp.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (&lt; sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "/tmp/tmps59drp6w.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< actual_cost sale_amount)\n      0\n      (- actual_cost sale_amount)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiv387k1h.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-equal? (candidate 1500 1200) 0)\n    (check-equal? (candidate 100 200) 100)\n    (check-equal? (candidate 2000 5000) 3000)\n))\n\n(test-humaneval)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:14:4\nactual:     300\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:15:4\nactual:     0\nexpected:   100\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2831fmt3.rkt:16:4\nactual:     0\nexpected:   3000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}