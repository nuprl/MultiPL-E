{
  "name": "mbpp_589_perfect_squares",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpfgmfik67.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpfgmfik67.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer? (sqrt i))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpixhu31tu.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer? (sqrt i)) i)\n  location...:\n   /tmp/tmpixhu31tu.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (and (= (sqrt i) (floor (sqrt i)))\n             (not (= i 0)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpxl3h0fa9.rkt:6:4: if: missing an \"else\" expression\n  in: (if (and (= (sqrt i) (floor (sqrt i))) (not (= i 0))) i)\n  location...:\n   /tmp/tmpxl3h0fa9.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpfgmfik67.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpfgmfik67.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer-sqrt i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmp8iw_olb4.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer-sqrt i) i)\n  location...:\n   /tmp/tmp8iw_olb4.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (integer? (sqrt i))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmp7fthhwip.rkt:6:4: if: missing an \"else\" expression\n  in: (if (integer? (sqrt i)) i)\n  location...:\n   /tmp/tmp7fthhwip.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpfgmfik67.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpfgmfik67.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i))) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpzw763g01.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpzw763g01.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range (ceiling (sqrt a)) (ceiling (sqrt b)))])\n    (* i i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjj9xdv37.rkt:14:4\nactual:     '(64.0 81.0)\nexpected:   '(64 81 100)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (zero? (remainder i (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpc2g9knpf.rkt:6:4: if: missing an \"else\" expression\n  in: (if (zero? (remainder i (sqrt i))) i)\n  location...:\n   /tmp/tmpc2g9knpf.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i))) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpgmn0g4m6.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpgmn0g4m6.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range (ceiling (sqrt a)) (floor (sqrt b)))])\n    (* i i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43a6z484.rkt:13:4\nactual:     '(1 4 9 16)\nexpected:   '(1 4 9 16 25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43a6z484.rkt:14:4\nactual:     '(64.0 81.0)\nexpected:   '(64 81 100)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43a6z484.rkt:15:4\nactual:     '(100 121 144 169)\nexpected:   '(100 121 144 169 196)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i\n        '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1492gbxk.rkt:15:4\nactual:\n  '(1\n    ()\n    ()\n    4\n    ()\n    ()\n    ()\n    ()\n    9\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    16\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    25\n    ()\n    ()\n    ()\n    ())\nexpected:   '(1 4 9 16 25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1492gbxk.rkt:16:4\nactual:\n  '(()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    64\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    81\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ())\nexpected:   '(64 81 100)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1492gbxk.rkt:17:4\nactual:\n  '(100\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n    ()\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range (ceiling (sqrt a)) (ceiling (sqrt b)))])\n    (* i i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjj9xdv37.rkt:14:4\nactual:     '(64.0 81.0)\nexpected:   '(64 81 100)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer? (sqrt i))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpixhu31tu.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer? (sqrt i)) i)\n  location...:\n   /tmp/tmpixhu31tu.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpfgmfik67.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpfgmfik67.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpfgmfik67.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpfgmfik67.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (zero? (remainder i (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpc2g9knpf.rkt:6:4: if: missing an \"else\" expression\n  in: (if (zero? (remainder i (sqrt i))) i)\n  location...:\n   /tmp/tmpc2g9knpf.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (when (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpsqbz_gja.rkt:6:11: perfect-square?: unbound identifier\n  in: perfect-square?\n  location...:\n   /tmp/tmpsqbz_gja.rkt:6:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range (ceiling (sqrt a)) (floor (sqrt b)))])\n    (* i i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43a6z484.rkt:13:4\nactual:     '(1 4 9 16)\nexpected:   '(1 4 9 16 25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43a6z484.rkt:14:4\nactual:     '(64.0 81.0)\nexpected:   '(64 81 100)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43a6z484.rkt:15:4\nactual:     '(100 121 144 169)\nexpected:   '(100 121 144 169 196)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i\n        #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx7rg5abo.rkt:15:4\nactual:\n  '(1\n    #f\n    #f\n    4\n    #f\n    #f\n    #f\n    #f\n    9\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    16\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    25\n    #f\n    #f\n    #f\n    #f)\nexpected:   '(1 4 9 16 25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx7rg5abo.rkt:16:4\nactual:\n  '(#f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    64\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    81\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f)\nexpected:   '(64 81 100)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx7rg5abo.rkt:17:4\nactual:\n  '(100\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    121\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    144\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #f\n    #",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer-sqrt i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmp8iw_olb4.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer-sqrt i) i)\n  location...:\n   /tmp/tmp8iw_olb4.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer-sqrt i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmp8iw_olb4.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer-sqrt i) i)\n  location...:\n   /tmp/tmp8iw_olb4.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i\n        #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpgxynciw7.rkt:6:9: perfect-square?: unbound identifier\n  in: perfect-square?\n  location...:\n   /tmp/tmpgxynciw7.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (zero? (remainder i (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpc2g9knpf.rkt:6:4: if: missing an \"else\" expression\n  in: (if (zero? (remainder i (sqrt i))) i)\n  location...:\n   /tmp/tmpc2g9knpf.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range (ceiling (sqrt a)) (ceiling (sqrt b)))])\n    (* i i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjj9xdv37.rkt:14:4\nactual:     '(64.0 81.0)\nexpected:   '(64 81 100)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer? (sqrt i))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpixhu31tu.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer? (sqrt i)) i)\n  location...:\n   /tmp/tmpixhu31tu.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (and (integer? (sqrt i)) (= i (* (sqrt i) (sqrt i))))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpynss7x15.rkt:6:4: if: missing an \"else\" expression\n  in: (if (and (integer? (sqrt i)) (= i (* (sqrt i) (sqrt i)))) i)\n  location...:\n   /tmp/tmpynss7x15.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range (ceiling (sqrt a)) (ceiling (sqrt b)))])\n    (* i i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjj9xdv37.rkt:14:4\nactual:     '(64.0 81.0)\nexpected:   '(64 81 100)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer? (sqrt i))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpixhu31tu.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer? (sqrt i)) i)\n  location...:\n   /tmp/tmpixhu31tu.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range (ceiling (sqrt a)) (ceiling (sqrt b)))])\n    (* i i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjj9xdv37.rkt:14:4\nactual:     '(64.0 81.0)\nexpected:   '(64 81 100)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (let ([sqrt (sqrt i)])\n      (if (and (integer? sqrt)\n               (integer? (* sqrt sqrt)))\n          i))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpet_5kfk_.rkt:7:6: if: missing an \"else\" expression\n  in: (if (and (integer? sqrt) (integer? (* sqrt sqrt))) i)\n  location...:\n   /tmp/tmpet_5kfk_.rkt:7:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (and (integer? (sqrt i)) (= i (* (sqrt i) (sqrt i))))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpynss7x15.rkt:6:4: if: missing an \"else\" expression\n  in: (if (and (integer? (sqrt i)) (= i (* (sqrt i) (sqrt i)))) i)\n  location...:\n   /tmp/tmpynss7x15.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (filter (lambda (x) (= (sqrt x) (floor (sqrt x)))) (range a b)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvlrr2qah.rkt:13:4\nactual:     '(64 81)\nexpected:   '(64 81 100)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([x (in-range a b)])\n    (if (perfect-square? x)\n        x)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmps7zk7ww0.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? x) x)\n  location...:\n   /tmp/tmps7zk7ww0.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer? (sqrt i))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpixhu31tu.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer? (sqrt i)) i)\n  location...:\n   /tmp/tmpixhu31tu.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpfgmfik67.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpfgmfik67.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range (ceiling (sqrt a)) (ceiling (sqrt b)))])\n    (* i i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjj9xdv37.rkt:14:4\nactual:     '(64.0 81.0)\nexpected:   '(64 81 100)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpfgmfik67.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpfgmfik67.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (floor (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpkdw276zk.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (floor (sqrt i))) i)\n  location...:\n   /tmp/tmpkdw276zk.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer? (sqrt i))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpixhu31tu.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer? (sqrt i)) i)\n  location...:\n   /tmp/tmpixhu31tu.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (integer? (sqrt i))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmp7fthhwip.rkt:6:4: if: missing an \"else\" expression\n  in: (if (integer? (sqrt i)) i)\n  location...:\n   /tmp/tmp7fthhwip.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (exact-integer? (sqrt i))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpixhu31tu.rkt:6:4: if: missing an \"else\" expression\n  in: (if (exact-integer? (sqrt i)) i)\n  location...:\n   /tmp/tmpixhu31tu.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpfgmfik67.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpfgmfik67.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (expt i 0.5) (round (expt i 0.5)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "/tmp/tmpb4s1xz7l.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (expt i 0.5) (round (expt i 0.5))) i)\n  location...:\n   /tmp/tmpb4s1xz7l.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range (ceiling (sqrt a)) (ceiling (sqrt b)))])\n    (* i i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1666123713,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjj9xdv37.rkt:14:4\nactual:     '(64.0 81.0)\nexpected:   '(64 81 100)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i)\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmprwk43anv.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmprwk43anv.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (perfect-square? i) i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpsh_qtayr.rkt:6:4: if: missing an \"else\" expression\n  in: (if (perfect-square? i) i)\n  location...:\n   /tmp/tmpsh_qtayr.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (for/list ([i (in-range a b)])\n    (if (= (sqrt i) (round (sqrt i)))\n        i)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-equal? (candidate 1 30) (list 1 4 9 16 25))\n    (check-equal? (candidate 50 100) (list 64 81 100))\n    (check-equal? (candidate 100 200) (list 100 121 144 169 196))\n))\n\n(test-humaneval)",
      "timestamp": 1665510579,
      "stdout": "",
      "stderr": "/tmp/tmpfgmfik67.rkt:6:4: if: missing an \"else\" expression\n  in: (if (= (sqrt i) (round (sqrt i))) i)\n  location...:\n   /tmp/tmpfgmfik67.rkt:6:4\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}