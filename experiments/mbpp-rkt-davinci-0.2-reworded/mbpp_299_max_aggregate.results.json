{
  "name": "mbpp_299_max_aggregate",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1666123553,
      "stdout": "",
      "stderr": "/tmp/tmpv2zn4dbu.rkt:6:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpv2zn4dbu.rkt:6:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map (lambda (x) (apply + x)) stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8g855jz4.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: \"Juan Whelan\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (apply max (map sum stdata)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72))\n    (check-equal? (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70))\n))\n\n(test-humaneval)",
      "timestamp": 1665510628,
      "stdout": "",
      "stderr": "/tmp/tmp04jyjal3.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp04jyjal3.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}