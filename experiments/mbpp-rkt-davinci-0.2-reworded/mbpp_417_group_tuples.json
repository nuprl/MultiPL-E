{
  "name": "mbpp_417_group_tuples",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find common first element in given list of list.\n(define (group_tuples Input)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate group_tuples))\n    (check-equal? (candidate (list (list \"x\" \"y\") (list \"x\" \"z\") (list \"w\" \"t\"))) (list (list \"x\" \"y\" \"z\") (list \"w\" \"t\")))\n    (check-equal? (candidate (list (list \"a\" \"b\") (list \"a\" \"c\") (list \"d\" \"e\"))) (list (list \"a\" \"b\" \"c\") (list \"d\" \"e\")))\n    (check-equal? (candidate (list (list \"f\" \"g\") (list \"f\" \"g\") (list \"h\" \"i\"))) (list (list \"f\" \"g\" \"g\") (list \"h\" \"i\")))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? Input) empty]\n    [(empty? (rest Input)) (first Input)]\n    [else (cons (first (first Input)) (group_tuples (map rest Input)))]))\n</code>\n",
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (cons\n      (cons (first (first Input))\n            (map first (rest Input)))\n      (group_tuples (map rest Input)))]))\n",
    "  (if (null? Input)\n      '()\n      (cons (list (car (car Input)) (map cadr Input))\n            (group_tuples (map cdr Input)))))\n",
    "  (cond\n    [(empty? Input) empty]\n    [(empty? (cdr Input)) (car Input)]\n    [else (cons (car (car Input)) (group_tuples (cdr Input)))]))\n",
    "  (cond\n    [(empty? Input) empty]\n    [(empty? (cdr Input)) (car Input)]\n    [(equal? (caar Input) (caadr Input)) (cons (caar Input) (group_tuples (cdr Input)))]\n    [else (group_tuples (cdr Input))]))\n",
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (cons (first (first Input))\n           (group_tuples (map rest Input)))]))\n",
    "  (cond\n    [(null? Input) '()]\n    [(null? (cdr Input)) (car Input)]\n    [else (cons (car (car Input)) (group_tuples (map cdr Input)))]))\n",
    "  (if (null? Input)\n      '()\n      (cons (list (car (car Input)) (length (car Input)))\n            (group_tuples (cdr Input)))))\n",
    "  (map (lambda (x) (car x)) Input))\n",
    "  (let ([firsts (map first Input)])\n    (filter (lambda (x) (member x firsts)) Input)))\n",
    "  (cond\n    [(null? Input) '()]\n    [else (cons (list (caar Input) (cdar Input)) (group_tuples (cdr Input)))]))\n",
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (cons\n      (list (first (first Input))\n            (map first (rest Input)))\n      (group_tuples (map rest Input)))]))\n",
    "  (cond\n    [(empty? Input) empty]\n    [(empty? (rest Input)) (list (car Input))]\n    [else (cons (car Input) (group_tuples (rest Input)))]))\n",
    "  (if (null? Input)\n      '()\n      (cons (map car Input) (group_tuples (map cdr Input)))))\n",
    "  (cond\n    [(empty? Input) empty]\n    [(empty? (rest Input)) empty]\n    [else (cons (list (first (first Input)) (first (rest (first Input))))\n                (group_tuples (rest Input)))]))\n",
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (cons\n      (cons (first (first Input))\n            (map first (rest Input)))\n      (group_tuples (map rest Input)))]))\n",
    "  (if (null? Input)\n      '()\n      (cons (car (car Input))\n            (group_tuples (cdr Input)))))\n",
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (cons\n      (list (first (first Input)) (map first (rest Input)))\n      (group_tuples (map rest Input)))]))\n",
    "  (cond\n    [(null? Input) '()]\n    [(null? (car Input)) (group_tuples (cdr Input))]\n    [else (cons (car (car Input)) (group_tuples (cdr Input)))]))\n",
    "  (if (null? Input)\n      '()\n      (cons (list (car (car Input)) (length (filter (lambda (x) (equal? (car x) (car (car Input)))) Input)))\n            (group_tuples (filter (lambda (x) (not (equal? (car x) (car (car Input))))) Input)))))\n"
  ]
}