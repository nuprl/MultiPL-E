{
  "name": "mbpp_584_find_adverbs",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the first adverb ending with ly and its positions in a given string.\n(define (find_adverbs text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverbs))\n    (check-equal? (candidate \"Clearly, he has no excuse for such behavior.\") \"0-7: Clearly\")\n    (check-equal? (candidate \"Please handle the situation carefuly\") \"28-36: carefuly\")\n    (check-equal? (candidate \"Complete the task quickly\") \"18-25: quickly\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([text text] [pos 0])\n    (cond\n      [(empty? text) '()]\n      [(regexp-match #rx\"ly$\" (first text)) (list (first text) pos)]\n      [else (loop (rest text) (+ 1 pos))])))\n",
    "  (let loop ([text text] [pos 0])\n    (cond [(empty? text) '()]\n          [(string-suffix? \"ly\" (first text))\n           (list (first text) pos)]\n          [else (loop (rest text) (+ 1 pos))])))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find_adverb words)\n    (cond ((null? words) '())\n          ((is_adverb (car words)) (list (car words) (list (string-index text (car words)))))\n          (else (find_adverb (cdr words)))))\n  (find_adverb (string-split text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (find_adverbs_helper text pos)\n    (cond\n      [(empty? text) '()]\n      [(regexp-match #rx\"ly$\" text) (cons (list (substring text 0 (regexp-match-end 0)) pos) (find_adverbs_helper (substring text (regexp-match-end 0)) (+ pos (regexp-match-end 0))))]\n      [else (find_adverbs_helper (substring text 1) (+ pos 1))]))\n  (find_adverbs_helper text 0))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb word)\n    (and (string-suffix? \"ly\" word)\n         (member word (string-tokenize text #\\space))))\n  (define (find_adverb text)\n    (cond ((is_adverb text) text)\n          ((string-empty? text) \"\")\n          (else (find_adverb (substring text 1)))))\n  (define (find_adverb_positions text)\n    (cond ((is_adverb text) (list 0))\n          ((string-empty? text) '())\n          (else (cons (+ (find_adverb_positions (substring text 1)) 1)\n                      (find_adverb_positions (substring text 1))))))\n  (list (find_adverb text) (find_adverb_positions text)))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ally\" (substring word 0 (- (string-length word) 2))))))\n  (define (find-adverb-helper text adverbs)\n    (cond ((string-empty? text) adverbs)\n          ((is-adverb? text) (cons (list (substring text 0 (- (string-length text) 2)) 0) adverbs))\n          (else (find-adverb-helper (substring text 1)\n                                    (cond ((is-adverb? (substring text 0 (- (string-length text) 2)))\n                                           (cons (list (substring text 0 (- (string-length text) 2)) (- (string-length text) 2)) adverbs))\n                                          (else adverbs))))))\n  (find-adverb-helper text '()))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb (in-list adverbs)]\n               [pos (in-list (regexp-match-positions #rx\"\\w+ly\" text))])\n      (list adverb pos))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-suffix? \"ly\" (string-downcase word))))\n  (define (find_adverb-helper text pos)\n    (cond ((string-empty? text) '())\n          ((is_adverb? text) (list pos))\n          (else (find-adverb-helper (string-tail text) (+ pos 1)))))\n  (find-adverb-helper text 0))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-suffix? \"ly\" (string-downcase word))))\n  (define (find_adverb text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) (list (string-index text (car text)))))\n          (else (find_adverb (cdr text)))))\n  (find_adverb (string-split text)))\n",
    "  (let loop ([text text] [pos 0] [result '()])\n    (cond\n      [(empty? text) result]\n      [(regexp-match #rx\"ly$\" (first text))\n       (loop (rest text) (+ pos 1) (cons (list (first text) pos) result))]\n      [else (loop (rest text) (+ pos 1) result)])))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))))\n  (define (find-adverb text)\n    (cond\n      [(empty? text) empty]\n      [(is_adverb? (first text)) (cons (first text) (cons (position (first text) text) empty))]\n      [else (find-adverb (rest text))]))\n  (find-adverb (string-split text #\\space)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text] [pos 0])\n    (cond\n      [(empty? text) empty]\n      [(and (string-suffix? \"ly\" (first text))\n            (string-prefix? \" \" (second text)))\n       (cons (list (first text) pos)\n             (loop (rest text) (+ pos 1)))]\n      [else (loop (rest text) (+ pos 1))])))\n</code>\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list-ref (string-split text #\\space) (length words))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text #\\space)))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (let loop ([text (string-split text)])\n    (cond\n      [(empty? text) '()]\n      [(and (string-suffix? \"ly\" (first text)) (string-suffix? \"ly\" (first text)))\n       (cons (first text) (cons (string-index text (first text)) '()))]\n      [else (loop (rest text))])))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #px\"\\\\b\\\\w+ly\\\\b\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))))\n  (define (find-adverb-helper text start-index)\n    (define (find-adverb-helper-2 text start-index)\n      (define (find-adverb-helper-3 text start-index)\n        (define (find-adverb-helper-4 text start-index)\n          (define (find-adverb-helper-5 text start-index)\n            (define (find-adverb-helper-6 text start-index)\n              (define (find-adverb-helper-7 text start-index)\n                (define (find-adverb-helper-8 text start-index)\n                  (define (find-adverb-helper-9 text start-index)\n                    (define (find-adverb-helper-10 text start-index)\n                      (define (find-adverb-helper-11 text start-index)\n                        (define (find-adverb-helper-12 text start-index)\n                          (define (find-adverb-helper-13 text start-index)\n                            (define (find-adverb-helper-14 text start-index)\n                              (define (find-adverb-helper-15 text start-index)\n                                (define (find-adverb-helper-16 text start-index)\n                                  (define (find-adverb-helper-17 text start-index)\n                                    (define (find-adverb-helper-18 text start-index)\n                                      (define (find-adverb-helper-19 text start-index)\n                                        (define (find-adverb-helper-20 text start-index)\n                                          (define (find-adverb-helper-21 text start-index)\n                                            (define (find-adverb-helper-22 text start-index)\n                                              (define (find-adverb-helper-23 text start-index)\n                                                (define (find-adverb-helper-24 text start-index)",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"sly\" word))\n         (not (string-suffix? \"uly\" word))\n         (not (string-suffix? \"bly\" word))\n         (not (string-suffix? \"dly\" word))\n         (not (string-suffix? \"fly\" word))\n         (not (string-suffix? \"gly\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"sly\" word))\n         (not (string-suffix? \"tly\" word))\n         (not (string-suffix? \"wly\" word))\n         (not (string-suffix? \"xly\" word))\n         (not (string-suffix? \"zly\" word))))\n  (define (find-adverb-helper text index)\n    (cond ((string-empty? text) '())\n          ((is_adverb? text) (list (substring text index (+ index (string-length text)))))\n          (else (find-adverb-helper (substring text 1) (+ index 1)))))\n  (find-adverb-helper text 0))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text] [pos 0])\n    (cond [(empty? text) '()]\n          [(string-suffix? \"ly\" (first text))\n           (list (first text) pos)]\n          [else (loop (rest text) (+ 1 pos))])))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" 0)))\n      (list word (string-index word \"ly\")))))\n",
    "  (let* ([words (regexp-split #rx\"\\s+\" text)]\n         [adverbs (filter (lambda (word) (regexp-match #rx\"ly$\" word)) words)])\n    (if (empty? adverbs)\n        (error 'find_adverbs \"No adverbs found\")\n        (list (first adverbs)\n              (regexp-match-positions #rx(regexp (first adverbs)) text)))))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ally\" (substring word 0 (- (string-length word) 2))))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list (string-index text (car words)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find-adverb-helper text pos)\n    (if (is_adverb? text)\n        (list text pos)\n        (find-adverb-helper (string-tail text 1) (+ 1 pos))))\n  (find-adverb-helper text 0))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverbs-helper text index)\n    (cond ((null? text) '())\n          ((is_adverb (car text)) (list (car text) index))\n          (else (find-adverbs-helper (cdr text) (+ index 1)))))\n  (find-adverbs-helper (string-split text #\\space) 0))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"really\" \"finally\" \"happily\")))))\n  (define (find-adverb-helper text pos)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) pos))\n          (else (find-adverb-helper (cdr text) (+ pos 1)))))\n  (find-adverb-helper (string-split text) 0))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index adverb text)))))\n",
    "  (define (is-adverb? word)\n    (and (string-contains word \"ly\")\n         (not (string-contains word \"lyly\"))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words))\n           (list (car words) (list (string-index text (car words)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text #\\space)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (string-contains? text word)))\n      (list word (string-index text word)))))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"nly\" word))\n         (not (string-suffix? \"sly\" word))))\n  (define (find-adverb-positions words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list (string-index text (car words)))))\n          (else (find-adverb-positions (cdr words)))))\n  (find-adverb-positions (string-split text)))\n",
    "  (let ([words (string-split text #\\space)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (string-contains word #\\a)))\n      (list word (string-index word #\\a)))))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverbs-helper words)\n    (cond\n      [(empty? words) empty]\n      [(is-adverb? (first words))\n       (cons (first words) (find-adverbs-helper (rest words)))]\n      [else (find-adverbs-helper (rest words))]))\n  (find-adverbs-helper (string-split text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #px\"\\\\b[a-zA-Z]+ly\\\\b\" text))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (member word (list-of-words text))))\n  (define (find-adverb-positions word)\n    (define (find-adverb-positions-iter word pos)\n      (cond ((string-suffix? word (substring text pos (+ pos (string-length word))))\n             (cons pos (find-adverb-positions-iter word (+ pos 1))))\n            (else (find-adverb-positions-iter word (+ pos 1)))))\n    (find-adverb-positions-iter word 0))\n  (define (find-first-adverb text)\n    (cond ((null? text) '())\n          ((is-adverb? (car text)) (car text))\n          (else (find-first-adverb (cdr text)))))\n  (cons (find-first-adverb (list-of-words text))\n        (find-adverb-positions (find-first-adverb (list-of-words text)))))\n",
    "  (regexp-match* #px\"\\\\b\\\\w+ly\\\\b\" text))\n",
    "  (let loop ([text text] [pos 0] [result '()])\n    (cond\n      [(empty? text) result]\n      [(regexp-match #rx\"ly$\" (first text))\n       (loop (rest text) (+ pos 1) (cons (list (first text) pos) result))]\n      [else (loop (rest text) (+ pos 1) result)])))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (member word (list-of-words text))))\n  (define (find-adverb-helper text adverb-list)\n    (cond ((null? text) adverb-list)\n          ((is_adverb? (car text))\n           (find-adverb-helper (cdr text) (append adverb-list (list (car text)))))\n          (else (find-adverb-helper (cdr text) adverb-list))))\n  (find-adverb-helper (list-of-words text) '()))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((is-adverb? (car text)) (list (car text) (string-index (car text) text)))\n          (else (find-adverb (cdr text)))))\n  (find-adverb (string-split text)))\n",
    "  (regexp-match* #rx\"([^ ]+)ly\" text))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (\u03bb (word) (and (string-suffix? \"ly\" word) (not (string-prefix? \"ly\" word)))) words)])\n    (map (\u03bb (adverb) (list adverb (string-index text adverb))) adverbs)))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))))\n  (define (find_adverb text)\n    (cond ((null? text) #f)\n          ((is_adverb? (car text)) (car text))\n          (else (find_adverb (cdr text)))))\n  (define (find_adverb_positions text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (cons (car text) (find_adverb_positions (cdr text))))\n          (else (find_adverb_positions (cdr text)))))\n  (define (find_adverb_positions_in_text text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (cons (car text) (find_adverb_positions_in_text (cdr text))))\n          (else (find_adverb_positions_in_text (cdr text)))))\n  (define (find_adverb_positions_in_text_with_index text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (cons (cons (car text) (length (find_adverb_positions_in_text text))) (find_adverb_positions_in_text_with_index (cdr text))))\n          (else (find_adverb_positions_in_text_with_index (cdr text)))))\n  (define (find_adverb_positions_in_text_with_index_and_word text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (cons (list (car text) (length (find_adverb_positions_in_text text)) (car (find_adverb_positions_in_text text))) (find_adverb_positions_in_text_with_index_and_word (cdr text))))\n          (else (find_adverb_positions_in_text_with_index_and_word (c",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text]\n             [positions '()])\n    (cond\n      [(empty? text) (values '() positions)]\n      [(regexp-match #rx\"ly$\" (first text))\n       (values (list (first text)) (list (regexp-match-positions #rx\"ly$\" (first text))))]\n      [else (loop (rest text) (cons (regexp-match-positions #rx\"ly$\" (first text)) positions))])))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #px\"\\\\b[a-zA-Z]+ly\\\\b\" text))\n",
    "  (define (find-adverb text)\n    (define (is-adverb? word)\n      (and (string-suffix? \"ly\" word)\n           (not (string-suffix? \"ally\" word))\n           (not (string-suffix? \"ply\" word))))\n    (define (find-adverb-helper text)\n      (cond ((null? text) '())\n            ((is-adverb? (car text)) (list (car text) (list (string-index text (car text)))))\n            (else (find-adverb-helper (cdr text)))))\n    (find-adverb-helper (string-split text #\\space)))\n  (find-adverb (string-split text #\\space)))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))))\n  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) (list (car (cdr text)))))\n          (else (find-adverb (cdr text)))))\n  (find-adverb (string-tokenize text)))\n",
    "  (regexp-match* #rx\"(\\w+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words))\n           (list (car words) (list (car (regexp-match #rx\"\\w+\" text)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text #rx\"\\W+\")))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (regexp-match? #rx\"ly$\" word))\n      (list word (string-index text word)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text]\n             [positions '()])\n    (cond [(empty? text) positions]\n          [(regexp-match #rx\"ly$\" (first text))\n           (loop (rest text) (cons (list (first text) (regexp-match-positions #rx\"ly$\" (first text))) positions))]\n          [else (loop (rest text) positions)])))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))))\n  (define (find-adverb-helper text pos)\n    (cond ((string-empty? text) '())\n          ((is-adverb? text) (list pos))\n          (else (find-adverb-helper (string-tail text) (+ pos 1)))))\n  (find-adverb-helper text 0))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs]\n               #:when (string-suffix? \"ly\" adverb))\n      (list adverb (regexp-match* #rx\"\\w+ly\" text #:start (string-index adverb text))))))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word) (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let loop ((words (string-split text)))\n    (cond\n      [(empty? words) empty]\n      [(string-suffix? \"ly\" (first words))\n       (cons (first words) (cons (string-index text (first words)) empty))]\n      [else (loop (rest words))])))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (regexp-match #rx\"ly$\" word)) words)])\n    (if (empty? adverbs)\n        (error \"No adverbs found!\")\n        (let* ([adverb (first adverbs)]\n               [positions (map (lambda (word) (string-index word adverb)) words)])\n          (list adverb positions)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (and (string-suffix? \"ly\" word) (not (member word '(\"really\" \"actually\" \"basically\"))))) words)])\n    (map (lambda (adverb) (list adverb (list-index words adverb))) adverbs)))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"aly\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"uly\" word))\n         (not (string-suffix? \"oly\" word))\n         (not (string-suffix? \"ely\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ily\" word))\n         (not",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"(\\w+ly)\" text))\n",
    "  (let ((adverbs (regexp-match* #rx\"\\w+ly\" text)))\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index adverb text)))))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (list (string-index text (car words)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text)))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (member word (list \"quickly\" \"slowly\" \"happily\" \"sadly\"))))\n  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) (list (quotient (string-length text) 2))))\n          (else (find-adverb (cdr text)))))\n  (find-adverb (string-split text \" \")))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word)\n                            (and (string-suffix? \"ly\" word)\n                                 (not (string-suffix? \"ally\" word))))\n                          words)])\n    (if (empty? adverbs)\n        #f\n        (list (first adverbs)\n              (list-index (lambda (word) (equal? word (first adverbs))) words)))))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx(regexp adverb) text)))))\n",
    "  (define (find_adverb text)\n    (cond\n      [(empty? text) empty]\n      [(regexp-match #rx\"ly$\" (first text)) (cons (first text) (rest text))]\n      [else (find_adverb (rest text))]))\n  (define (find_adverb_positions text)\n    (cond\n      [(empty? text) empty]\n      [(regexp-match #rx\"ly$\" (first text)) (cons (first text) (rest text))]\n      [else (find_adverb_positions (rest text))]))\n  (cons (find_adverb text) (find_adverb_positions text)))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"really\" \"really?\" \"really!\" \"really.\")))))\n  (define (find-adverb-helper text pos)\n    (cond ((string-empty? text) '())\n          ((is_adverb? text) (list pos (string-length text)))\n          (else (find-adverb-helper (string-tail text) (+ pos 1)))))\n  (find-adverb-helper text 0))\n",
    "  (let ((adverbs (regexp-match* #rx\"([a-zA-Z]+ly)\" text)))\n    (for/list ([adverb adverbs])\n      (list (first adverb) (regexp-match-positions #rx\"([a-zA-Z]+ly)\" text)))))\n",
    "  (regexp-match* #rx\"([^ ]+ly)\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (list (car (string-indexes (car words) text)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text)))\n",
    "  (let ([words (string-split text #\\space)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (member word '(\"quickly\" \"slowly\" \"happily\" \"sadly\" \"angrily\" \"fearfully\" \"anxiously\" \"calmly\" \"carefully\" \"carelessly\" \"cautiously\" \"cheerfully\" \"clearly\" \"closely\" \"coolly\" \"courageously\" \"crossly\" \"cruelly\" \"curiously\" \"daily\" \"dearly\" \"deeply\" \"defiantly\" \"deliberately\" \"delightfully\" \"doubtfully\" \"dreamily\" \"eagerly\" \"easily\" \"elegantly\" \"enormously\" \"enthusiastically\" \"equally\" \"especially\" \"evenly\" \"eventually\" \"exactly\" \"faithfully\" \"famously\" \"far\" \"fast\" \"fatally\" \"fiercely\" \"fondly\" \"foolishly\" \"fortunately\" \"frankly\" \"frantically\" \"freely\" \"frequently\" \"frightfully\" \"fully\" \"furiously\" \"generally\" \"generously\" \"gently\" \"gladly\" \"gracefully\" \"greedily\" \"happily\" \"hastily\" \"healthily\" \"heavily\" \"helpfully\" \"highly\" \"honestly\" \"hopelessly\" \"hourly\" \"hungrily\" \"immediately\" \"innocently\" \"inquisitively\" \"instantly\" \"intensely\" \"intently\" \"interestingly\" \"inwardly\" \"irritably\" \"jealously\" \"joshingly\" \"joyfully\" \"joyously\" \"jovially\" \"jubilantly\" \"justly\" \"keenly\" \"kiddingly\" \"kindly\" \"knavishly\" \"knottily\" \"knowingly\" \"knowledgeably\" \"kookily\" \"lazily\" \"less\" \"lightly\" \"likely\" \"limply\" \"lively\" \"loftily\" \"longingly\" \"loosely\" \"loudly\" \"lovingly\" \"loy",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word) (string-suffix? \"ly\" (string-downcase word))))\n  (for/fold ([result '()]) ([word (in-list (string-split text))])\n    (cond\n      [(is-adverb? word) (cons (list word (string-index text word)) result)]\n      [else result])))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" (sub1 (string-length word)))))\n      (list word (string-index text word)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-contains word #\\y)))\n  (define (find-adverb-helper text)\n    (if (string-empty? text)\n        '()\n        (let ((word (string-tokenize text)))\n          (if (is_adverb? word)\n              (list word (string-index word #\\ly))\n              (find-adverb-helper (substring text (+ 1 (string-length word))))))))\n  (find-adverb-helper text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word)\n                            (and (string-suffix? \"ly\" word)\n                                 (not (string-suffix? \"ally\" word))))\n                          words)])\n    (map (lambda (adverb)\n           (list adverb (find-positions adverb words)))\n         adverbs)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text] [pos 0] [result '()])\n    (cond\n      [(empty? text) result]\n      [(regexp-match #rx\"ly$\" text)\n       (loop (substring text (add1 pos))\n             (add1 pos)\n             (cons (list (substring text pos) pos) result))]\n      [else\n       (loop (substring text (add1 pos))\n             (add1 pos)\n             result)])))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (member word (list-of-words text))))\n  (define (find-adverb-positions word)\n    (define (find-adverb-positions-helper word text pos)\n      (cond ((string=? word (first (list-of-words text)))\n             (cons pos (find-adverb-positions-helper word (rest (list-of-words text)) (+ pos 1))))\n            ((string=? word (first (list-of-words (rest (list-of-words text)))))\n             (cons (+ pos 1) (find-adverb-positions-helper word (rest (list-of-words text)) (+ pos 1))))\n            (else (find-adverb-positions-helper word (rest (list-of-words text)) (+ pos 1)))))\n    (find-adverb-positions-helper word (list-of-words text) 0))\n  (define (find-adverb-positions-helper text)\n    (cond ((is_adverb? (first (list-of-words text)))\n           (cons (first (list-of-words text)) (find-adverb-positions (first (list-of-words text)))))\n          (else (find-adverb-positions-helper (rest (list-of-words text))))))\n  (find-adverb-positions-helper text))\n",
    "  (let loop ([text text]\n             [positions '()])\n    (cond [(empty? text) (values '() positions)]\n          [(regexp-match #rx\"ly$\" (first text))\n           (values (list (first text))\n                   (cons (regexp-match-positions #rx\"ly$\" (first text)) positions))]\n          [else (loop (rest text) positions)])))\n",
    "  (define (is-adverb? word)\n    (and (string-contains word #\\ly)\n         (string-contains word #\\ly #:from-end? #t)))\n  (define (find-adverb word)\n    (if (is-adverb? word)\n        (list word (string-index word #\\ly))\n        (find-adverb (string-drop word 1))))\n  (find-adverb text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word) (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ((adverbs (regexp-match* #rx\"\\w+ly\" text)))\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx(regexp adverb) text)))))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb-helper words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (list (car (regexp-match #rx\"\\w+ly\" text)))))\n          (else (find-adverb-helper (cdr words)))))\n  (find-adverb-helper (string-split text #rx\"\\W+\")))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (member word (list-of-words text))))\n  (define (positions word text)\n    (define (positions-iter word text pos)\n      (cond ((null? text) '())\n            ((equal? word (car text))\n             (cons pos (positions-iter word (cdr text) (+ pos 1))))\n            (else (positions-iter word (cdr text) (+ pos 1)))))\n    (positions-iter word (list-of-words text) 0))\n  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((is-adverb? (car text)) (car text))\n          (else (find-adverb (cdr text)))))\n  (define (find-adverb-positions text)\n    (cond ((null? text) '())\n          ((is-adverb? (car text)) (positions (car text) text))\n          (else (find-adverb-positions (cdr text)))))\n  (list (find-adverb text) (find-adverb-positions text)))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" (sub1 (string-length word)))))\n      (list word (string-index text word)))))\n",
    "  (define (is-adverb? word)\n    (and (string-contains word \"ly\")\n         (not (string-contains word \"lyly\"))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list-ref (string-split text #\\space) (length words))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text #\\space)))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" (string-length word))))\n      (list word (string-index text word)))))\n",
    "  (regexp-match* #rx\"([a-zA-Z]*ly)\" text))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-match* #rx\"\\w+ly\" text)))))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ally\" (substring word 0 (- (string-length word) 2))))))\n  (define (find-adverbs-helper text pos)\n    (cond ((string-empty? text) '())\n          ((is-adverb? text) (list (list (substring text 0 (- (string-length text) 2)) pos)))\n          (else (find-adverbs-helper (substring text 1) (+ pos 1)))))\n  (find-adverbs-helper text 0))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #px\"\\\\b\\\\w+ly\\\\b\" text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (let ((pos 0)\n        (adverbs '()))\n    (while (string-match \"\\\\b[a-zA-Z]+ly\\\\b\" text pos)\n      (set! adverbs (cons (list (substring text (match-beginning 0) (match-end 0))\n                                (match-beginning 0)\n                                (match-end 0))\n                          adverbs))\n      (set! pos (match-end 0)))\n    (reverse adverbs)))\n",
    "  (let ((adverbs '()))\n    (for/list ([word (in-string text)])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word adverbs)))\n          (cons word (list (string-index text word)))))))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-match #rx\"\\w+ly\" text)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text] [pos 0])\n    (cond\n      [(empty? text) empty]\n      [(regexp-match? #rx\"ly$\" (first text))\n       (cons (list (first text) pos) (loop (rest text) (+ pos 1)))]\n      [else (loop (rest text) (+ pos 1))])))\n",
    "  (let loop ([text text] [pos 0])\n    (cond\n      [(empty? text) '()]\n      [(regexp-match #rx\"ly$\" (first text)) (cons (list (first text) pos) (loop (rest text) (+ pos 1)))]\n      [else (loop (rest text) (+ pos 1))])))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-contains? word #\\a)))\n  (define (find-adverb-helper text pos)\n    (cond ((string-empty? text) '())\n          ((is_adverb? text) (list (substring text 0 pos) pos))\n          (else (find-adverb-helper (substring text 1) (+ pos 1)))))\n  (find-adverb-helper text 0))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-suffix? \"ly\" (string-downcase word))))\n  (define (find-adverb-helper text pos)\n    (if (is_adverb? (string-trim text))\n        (list (string-trim text) pos)\n        (find-adverb-helper (string-trim (string-drop text 1)) (+ pos 1))))\n  (find-adverb-helper text 0))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (let loop ([text text] [pos 0] [result '()])\n    (cond\n      [(empty? text) result]\n      [(regexp-match #rx\"ly$\" (first text))\n       (loop (rest text) (+ pos 1) (cons (list (first text) pos) result))]\n      [else (loop (rest text) (+ pos 1) result)])))\n",
    "  (define (find_adverb text)\n    (define (is_adverb? word)\n      (and (string-suffix? \"ly\" word)\n           (not (string-suffix? \"ally\" word))\n           (not (string-suffix? \"ply\" word))))\n    (define (find-adverb-helper text)\n      (cond ((string-empty? text) '())\n            ((is_adverb? text) (list text 0))\n            (else (find-adverb-helper (substring text 1)))))\n    (find-adverb-helper text))\n  (find_adverb text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text] [pos 0])\n    (cond [(empty? text) '()]\n          [(regexp-match #rx\"ly$\" (first text))\n           (list (list (first text) pos))]\n          [else (loop (rest text) (+ pos 1))])))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #px\"\\\\b\\\\w*ly\\\\b\" text))\n",
    "  (regexp-match* #rx\"([^ ]+)ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find-adverbs-helper text pos)\n    (cond ((string-empty? text) '())\n          ((is-adverb? text) (list (substring text 0 (string-length text)) pos))\n          (else (find-adverbs-helper (substring text 1 (string-length text)) (+ pos 1)))))\n  (find-adverbs-helper text 0))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))))\n  (define (find-adverb-helper text pos)\n    (if (empty? text)\n        '()\n        (let ((word (first text)))\n          (if (is-adverb? word)\n              (cons (list word pos) (find-adverb-helper (rest text) (+ pos (string-length word))))\n              (find-adverb-helper (rest text) (+ pos (string-length word)))))))\n  (find-adverb-helper (string-split text) 0))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"really\" \"actually\")))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (list (car (regexp-match #rx\"ly\" (car words))) (length (car words)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (regexp-match #rx\"\\w+\" text)))\n",
    "  (let loop ([text text]\n             [positions '()])\n    (cond\n      [(empty? text) (values '() positions)]\n      [(regexp-match #rx\"ly$\" (first text))\n       (values (list (first text)) (list (substring-index text (first text))))]\n      [else (loop (rest text) (cons (substring-index text (first text)) positions))])))\n</code>\n",
    "  (regexp-match* #rx\"([^ ]+)ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #px\"\\\\b\\\\w*ly\\\\b\" text))\n",
    "  (define (find-adverb text)\n    (define (is-adverb? word)\n      (and (string-suffix? \"ly\" word)\n           (not (string-suffix? \"ally\" word))\n           (not (string-suffix? \"ely\" word))))\n    (define (find-adverb-helper text)\n      (cond ((null? text) '())\n            ((is-adverb? (car text)) (list (car text) (list-ref (regexp-match #px\"\\\\w+\" text) 1)))\n            (else (find-adverb-helper (cdr text)))))\n    (find-adverb-helper (regexp-match #px\"\\\\w+\" text)))\n  (find-adverb text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (string-contains? text word)))\n      (list word (string-index text word)))))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" (sub1 (string-length word)))))\n      (list word (string-index text word)))))\n",
    "  (let loop ([text text]\n             [pos 0]\n             [result '()])\n    (cond [(empty? text) result]\n          [(regexp-match #rx\"ly$\" text)\n           (loop (substring text (+ pos 1)) (+ pos 1) (cons (list (substring text 0 pos) pos) result))]\n          [else (loop (substring text (+ pos 1)) (+ pos 1) result)])))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find-adverb-helper text adverbs)\n    (cond ((empty? text) adverbs)\n          ((is_adverb? (first text))\n           (find-adverb-helper (rest text) (cons (first text) adverbs)))\n          (else (find-adverb-helper (rest text) adverbs))))\n  (find-adverb-helper (string-split text) '()))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-suffix? \"ly\" (string-downcase word))))\n  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((is-adverb? (car text)) (list (car text) (list (string-index text (car text)))))\n          (else (find-adverb (cdr text)))))\n  (find-adverb (string-split text #\\space)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n"
  ]
}