{
  "name": "mbpp_131_reverse_vowels",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to reverse only the vowels of a given string (where y is not a vowel).\n(define (reverse_vowels str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_vowels))\n    (check-equal? (candidate \"Python\") \"Python\")\n    (check-equal? (candidate \"USA\") \"ASU\")\n    (check-equal? (candidate \"ab\") \"ab\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (cond ((= i (string-length str1)) str2)\n          ((is_vowel? (string-ref str1 i))\n           (reverse_vowels_helper str1 (string-append (string (string-ref str1 i)) str2) (+ i 1)))\n          (else (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char-ci=? c #\\a)\n        (char-ci=? c #\\e)\n        (char-ci=? c #\\i)\n        (char-ci=? c #\\o)\n        (char-ci=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (let ((c (string-ref str1 i)))\n          (if (is_vowel? c)\n              (reverse_vowels_helper str1 (string-append str2 (string c)) (+ i 1))\n              (reverse_vowels_helper str1 str2 (+ i 1))))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a) (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels-helper (substring str1 1)\n                                       (string-append (string #\\.) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1)\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else\n           (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (and (not (equal? i (string-length str1)))\n             (is_vowel? (string-ref str1 i)))\n        (reverse_vowels_helper str1 (string-append str2 (string (string-ref str1 i))) (+ i 1))\n        (if (equal? i (string-length str1))\n            str2\n            (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1)) (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n"
  ]
}