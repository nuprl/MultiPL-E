{
  "name": "mbpp_131_reverse_vowels",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to reverse only the vowels of a given string (where y is not a vowel).\n(define (reverse_vowels str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_vowels))\n    (check-equal? (candidate \"Python\") \"Python\")\n    (check-equal? (candidate \"USA\") \"ASU\")\n    (check-equal? (candidate \"ab\") \"ab\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (cond ((= i (string-length str1)) str2)\n          ((is_vowel? (string-ref str1 i))\n           (reverse_vowels_helper str1 (string-append (string (string-ref str1 i)) str2) (+ i 1)))\n          (else (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char-ci=? c #\\a)\n        (char-ci=? c #\\e)\n        (char-ci=? c #\\i)\n        (char-ci=? c #\\o)\n        (char-ci=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (let ((c (string-ref str1 i)))\n          (if (is_vowel? c)\n              (reverse_vowels_helper str1 (string-append str2 (string c)) (+ i 1))\n              (reverse_vowels_helper str1 str2 (+ i 1))))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a) (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels-helper (substring str1 1)\n                                       (string-append (string #\\.) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1)\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else\n           (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (and (not (equal? i (string-length str1)))\n             (is_vowel? (string-ref str1 i)))\n        (reverse_vowels_helper str1 (string-append str2 (string (string-ref str1 i))) (+ i 1))\n        (if (equal? i (string-length str1))\n            str2\n            (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1)) (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (string-drop str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (string-drop str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1 (string-length str1)) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (string-join\n   (reverse\n    (filter (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\u)))\n            (string->list str1)))\n   \"\"))\n",
    "  (string-join (reverse (filter (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\u))) (string->list str1))) \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a) (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons #\\_ str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-null? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (let ([vowels (string-&gt;list \"aeiouAEIOU\")])\n    (string-join\n     (reverse\n      (filter (lambda (x) (member x vowels))\n              (string-&gt;list str1)))\n     \"\")))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse_vowels_helper (rest str1) (cons (first str1) str2)))\n          (else (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (let ((c (string-ref str1 i)))\n          (if (is_vowel? c)\n              (reverse_vowels_helper str1 (string-append str2 (string c)) (+ i 1))\n              (reverse_vowels_helper str1 (string-append str2 (string #\\_)) (+ i 1))))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) (string-append (string-append (string (string-ref str1 0)) str2) \"\")))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a) (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char-ci=? c #\\a)\n        (char-ci=? c #\\e)\n        (char-ci=? c #\\i)\n        (char-ci=? c #\\o)\n        (char-ci=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_iter str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_iter (rest str1) (cons (first str1) str2))\n            (reverse_vowels_iter (rest str1) (cons #\\_ str2)))))\n  (reverse_vowels_iter str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string-ref str1 0) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is-vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (string-join\n   (reverse\n    (filter\n     (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\u)))\n     (string->list str1)))\n   \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_aux str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_aux (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_aux (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_aux str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond [(empty? str1) str2]\n          [(is_vowel? (first str1))\n           (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n          [else (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-null? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (let ([c (string-ref str1 0)])\n          (if (is_vowel? c)\n              (reverse_vowels_helper (substring str1 1) (string-append (string c) str2))\n              (reverse_vowels_helper (substring str1 1) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (cons (first str1) (reverse-vowels-helper (rest str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string-null? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons #\\_ str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (if (is_vowel? (string-ref str1 i))\n            (reverse_vowels_helper str1 (string-append (string (string-ref str1 i)) str2) (+ i 1))\n            (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a) (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      ((null? str1) str2)\n      ((is_vowel? (car str1)) (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n      (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond [(empty? str1) str2]\n          [(is_vowel? (first str1))\n           (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n          [else\n           (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 (list)))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_iter str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (if (is_vowel? (string-ref str1 i))\n            (reverse_vowels_iter str1 (string-append (string (string-ref str1 i)) str2) (+ i 1))\n            (reverse_vowels_iter str1 str2 (+ i 1)))))\n  (reverse_vowels_iter str1 \"\" 0))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons #\\_ str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (let ((ch (string-ref str1 i)))\n          (if (is_vowel? ch)\n              (reverse_vowels_helper str1 (string-append str2 (list ch)) (+ i 1))\n              (reverse_vowels_helper str1 str2 (+ i 1))))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (string-join\n   (reverse\n    (filter (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\u)))\n            (string->list str1)))\n   \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (cond ((= i (string-length str1)) str2)\n          ((is_vowel? (string-ref str1 i))\n           (reverse_vowels_helper str1 (string-append str2 (string (string-ref str1 i))) (+ i 1)))\n          (else (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) (string-append str2 (reverse str2))]\n      [(is_vowel? (first str1)) (reverse_vowels-helper (rest str1) (string-append str2 (string (first str1))))]\n      [else (reverse_vowels-helper (rest str1) (string-append str2 (string (first str1))))]))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                   (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                   (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1)) (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is-vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons #\\_ str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels-helper (rest str1) (append (list (first str1)) str2))\n            (reverse_vowels-helper (rest str1) (append (list (first str1)) str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (cons (first str1) (reverse_vowels-helper (rest str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (equal? ch #\\a)\n        (equal? ch #\\e)\n        (equal? ch #\\i)\n        (equal? ch #\\o)\n        (equal? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (let ([vowels (regexp-match* #rx\"[aeiou]\" str1)])\n    (string-join (reverse vowels) str1)))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (let ([str2 (string-append str1)])\n    (for ([i (in-range (string-length str1))])\n      (cond\n        [(char-set=? #\"aeiou\" (string-ref str1 i))\n         (string-set! str2 (- (string-length str1) 1 i) (string-ref str1 i))]\n        [else (void)]))\n    str2))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (let ([vowels (string-&gt;list \"aeiouAEIOU\")])\n    (string-join\n     (reverse\n      (filter (lambda (x) (member x vowels))\n              (string-&gt;list str1)))\n     \"\")))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1)\n                                   (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1)\n                                   (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-null? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (let ([str2 (string-append str1)])\n    (for ([i (in-range (string-length str1))])\n      (cond\n        [(char-ci=? (string-ref str1 i) #\\a) (string-set! str2 i #\\a)]\n        [(char-ci=? (string-ref str1 i) #\\e) (string-set! str2 i #\\e)]\n        [(char-ci=? (string-ref str1 i) #\\i) (string-set! str2 i #\\i)]\n        [(char-ci=? (string-ref str1 i) #\\o) (string-set! str2 i #\\o)]\n        [(char-ci=? (string-ref str1 i) #\\u) (string-set! str2 i #\\u)]))\n    str2))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons #\\_ str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is-vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1) (string-append (string-ref str1 0) str2)))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond [(empty? str1) str2]\n          [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n          [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_iter str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_iter (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_iter (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_iter str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (null? str1)\n        str2\n        (if (is_vowel? (car str1))\n            (reverse_vowels_helper (cdr str1) (cons (car str1) str2))\n            (reverse_vowels_helper (cdr str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                       (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (if (is_vowel? (string-ref str1 i))\n            (reverse_vowels_helper str1 (string-append (string (string-ref str1 i)) str2) (+ i 1))\n            (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (let ([vowels (regexp-match* #rx\"[aeiouAEIOU]\" str1)])\n    (string-join (reverse vowels) str1)))\n",
    "  (string-join\n   (reverse\n    (filter (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\u)))\n            (string->list str1)))\n   \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (cons (first str1) (reverse_vowels_helper (rest str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is-vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (let ([str2 (string-append str1)])\n    (for ([i (in-range (string-length str1))])\n      (cond\n        [(char-vowel? (string-ref str1 i))\n         (string-set! str2 i (string-ref str1 (- (string-length str1) i 1)))]\n        [else\n         (string-set! str2 i (string-ref str1 i))]))\n    str2))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is-vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1)\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (let loop ((str str1) (vowels '()) (result '()))\n    (cond ((null? str) (reverse result))\n          ((member (car str) '(#\\a #\\e #\\i #\\o #\\u))\n           (loop (cdr str) (cons (car str) vowels) result))\n          (else (loop (cdr str) vowels (cons (car str) result))))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (if (is_vowel? (string-ref str1 i))\n            (reverse_vowels_helper str1 (string-append (string (string-ref str1 i)) str2) (+ i 1))\n            (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (let ([str2 (string-append str1)])\n    (for ([i (in-range (string-length str1))])\n      (cond\n        [(char-ci=? (string-ref str1 i) #\\a) (string-set! str2 i #\\a)]\n        [(char-ci=? (string-ref str1 i) #\\e) (string-set! str2 i #\\e)]\n        [(char-ci=? (string-ref str1 i) #\\i) (string-set! str2 i #\\i)]\n        [(char-ci=? (string-ref str1 i) #\\o) (string-set! str2 i #\\o)]\n        [(char-ci=? (string-ref str1 i) #\\u) (string-set! str2 i #\\u)]\n        [else (string-set! str2 i #\\_)]))\n    (string-reverse str2)))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (cond ((= i (string-length str1)) str2)\n          ((is_vowel? (string-ref str1 i))\n           (reverse_vowels_helper str1 (string-append (string (string-ref str1 i)) str2) (+ i 1)))\n          (else (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (cond ((= i (string-length str1)) str2)\n          ((is_vowel (string-ref str1 i))\n           (reverse_vowels_helper str1 (string-append str2 (list (string-ref str1 i))) (+ i 1)))\n          (else (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is-vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (string-append (string (first str1)) str2) (add1 i))]\n      [else\n       (reverse_vowels_helper (rest str1) (string-append (string (list-ref str1 i)) str2) (add1 i))]))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (append (list (first str1)) str2)))\n          (else (reverse-vowels-helper (rest str1) (append (list (first str1)) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\-) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (null? str1)\n        str2\n        (if (is_vowel? (car str1))\n            (reverse_vowels_helper (cdr str1) (cons (car str1) str2))\n            (reverse_vowels_helper (cdr str1) (cons #\\_ str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (if (is_vowel? (string-ref str1 i))\n            (reverse_vowels-helper str1 (string-append (string (string-ref str1 i)) str2) (+ i 1))\n            (reverse_vowels-helper str1 str2 (+ i 1)))))\n  (reverse_vowels-helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n"
  ]
}