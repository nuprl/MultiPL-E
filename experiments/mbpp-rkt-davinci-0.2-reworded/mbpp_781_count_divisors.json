{
  "name": "mbpp_781_count_divisors",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the count of divisors is even. https://www.w3resource.com/rktthon-exercises/basic/rktthon-basic-1-exercise-24.php\n(define (count_divisors n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_divisors))\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate 100) #f)\n    (check-equal? (candidate 125) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (> i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter n (+ i 1) (+ count 1))\n            (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (divisors-iter i)\n    (if (= i n)\n        0\n        (+ (if (= (modulo n i) 0) 1 0)\n           (divisors-iter (+ i 1)))))\n  (divisors-iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (length (divisors n)))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (if (= i n)\n        count\n        (if (zero? (modulo n i))\n            (count_divisors_iter (+ i 1) (+ count 1))\n            (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= n 1) count)\n          ((= (modulo n i) 0) (count_divisors_iter (/ n i) i (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 2 0))\n",
    "  (define (divisors n i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (divisors n (+ i 1)))\n            (divisors n (+ i 1)))))\n  (divisors n 1))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (length (divisors n)))\n",
    "  (define (count_divisors_iter i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter (+ i 1) (+ count 1))\n            (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= n 1) count)\n          ((= (modulo n i) 0) (count_divisors_iter (/ n i) i (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 2 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= n 1) 1)\n          ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= n 1) i]\n      [(= (modulo n i) 0) (count_divisors_iter (/ n i) (+ i 1))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        1\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (if (= (remainder n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count-divisors-iter (+ i 1)))\n            (count-divisors-iter (+ i 1)))))\n  (count-divisors-iter 1))\n",
    "  (define (count_divisors_iter n i count)\n    (if (= n 1)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter (/ n i) i (+ count 1))\n            (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 2 0))\n",
    "  (define (count_divisors_iter i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter (+ i 1)))]\n      [else (count_divisors_iter (+ i 1))]))\n  (count_divisors_iter 1))\n",
    "  (define (divisors n d)\n    (if (= n 1)\n        d\n        (if (= (modulo n d) 0)\n            (divisors (/ n d) (+ d 1))\n            (divisors n (+ d 1)))))\n  (divisors n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        1\n        (if (= (remainder n i) 0)\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (+ (if (= (modulo n i) 0) 1 0) (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n 1)\n        i\n        (if (zero? (modulo n i))\n            (count_divisors_iter (/ n i) (+ i 1))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (if (&gt; i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter n (+ i 1) (+ count 1))\n            (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (divisors-iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (divisors-iter (+ i 1)))\n            (divisors-iter (+ i 1)))))\n  (divisors-iter 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((&gt; n i) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (divisors-iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisors-iter (+ i 1)))\n            (divisors-iter (+ i 1)))))\n  (divisors-iter 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n i)\n        0\n        (if (= (remainder n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (helper n i)\n    (if (&gt; i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (helper n (+ i 1)))))\n  (helper n 1))\n",
    "  (define (count_divisors-iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors-iter n (+ i 1) (+ count 1)))\n          (else (count_divisors-iter n (+ i 1) count))))\n  (count_divisors-iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (divisors n i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (divisors n (+ i 1)))\n            (divisors n (+ i 1)))))\n  (divisors n 1))\n",
    "  (define (divisors-iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (divisors-iter (+ i 1) (+ count 1)))\n          (else (divisors-iter (+ i 1) count))))\n  (divisors-iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n i)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (let loop ([i 1] [count 0])\n    (cond\n      [(= i n) count]\n      [(zero? (modulo n i)) (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((divides? i n) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        1\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (divisors-iter i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (divisors-iter (+ i 1) (+ count 1))\n            (divisors-iter (+ i 1) count))))\n  (divisors-iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1))))\n          (else (count-divisors-iter n (+ i 1)))))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((&gt; i n) count)\n          ((= (remainder n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (divisors-iter i)\n    (if (= i n)\n        0\n        (if (= (remainder n i) 0)\n            (+ 1 (divisors-iter (+ i 1)))\n            (divisors-iter (+ i 1)))))\n  (divisors-iter 1))\n",
    "  (define (count_divisors_iter i acc)\n    (if (= i n)\n        acc\n        (if (= (modulo n i) 0)\n            (count_divisors_iter (+ i 1) (+ acc 1))\n            (count_divisors_iter (+ i 1) acc))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (remainder n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter n (+ i 1) (+ count 1))\n            (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n 1)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter (/ n i) i))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 2))\n",
    "  (define (divisors-iter i count)\n    (if (= i n)\n        count\n        (if (= (remainder n i) 0)\n            (divisors-iter (+ i 1) (+ count 1))\n            (divisors-iter (+ i 1) count))))\n  (divisors-iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((zero? (modulo n i)) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (divisors-iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisors-iter (+ i 1)))\n            (divisors-iter (+ i 1)))))\n  (divisors-iter 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n 1)\n        i\n        (if (= (modulo n i) 0)\n            (count_divisors_iter (/ n i) (+ i 1))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n 1)\n        i\n        (if (zero? (modulo n i))\n            (count_divisors_iter (/ n i) (+ i 1))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i)\n    (if (&gt; i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= n 1) count)\n          ((= (modulo n i) 0) (count_divisors_iter (/ n i) i (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 2 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((&gt; i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= (remainder n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n 1)\n        i\n        (if (zero? (modulo n i))\n            (count_divisors_iter (/ n i) (+ i 1))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(> i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1))))\n          (else (count-divisors-iter n (+ i 1)))))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= n 1) count]\n      [(= (modulo n i) 0) (count_divisors_iter (/ n i) i (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 2 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (&gt; i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (divisors n i)\n    (if (= i n)\n        1\n        (+ (if (= (modulo n i) 0) 1 0) (divisors n (+ i 1)))))\n  (divisors n 1))\n",
    "  (define (divisors-iter i count)\n    (cond ((= i n) count)\n          ((= (remainder n i) 0) (divisors-iter (+ i 1) (+ count 1)))\n          (else (divisors-iter (+ i 1) count))))\n  (divisors-iter 1 0))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (length (divisors n)))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (divisors-iter i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (divisors-iter (+ i 1) (+ count 1))\n            (divisors-iter (+ i 1) count))))\n  (divisors-iter 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        1\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (divisors n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisors n (+ i 1)))\n            (divisors n (+ i 1)))))\n  (divisors n 1))\n",
    "  (define (helper i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (helper (+ i 1)))\n            (helper (+ i 1)))))\n  (helper 1))\n",
    "  (define (count-divisors-iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count-divisors-iter (+ i 1) (+ count 1)))\n          (else (count-divisors-iter (+ i 1) count))))\n  (count-divisors-iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n i)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n i)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        1\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (+ (if (= (modulo n i) 0) 1 0)\n           (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (divisors n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (divisors n (+ i 1)))]\n      [else (divisors n (+ i 1))]))\n  (divisors n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1))))\n          (else (count_divisors-iter n (+ i 1)))))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (divisors n i)\n    (if (= n i)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisors n (+ i 1)))\n            (divisors n (+ i 1)))))\n  (divisors n 1))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        1\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n 1)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter (/ n i) i))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 2))\n",
    "  (define (count_divisors-iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors-iter n (+ i 1) (+ count 1)))\n          (else (count_divisors-iter n (+ i 1) count))))\n  (count_divisors-iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter (+ i 1) (+ count 1))\n            (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors-iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1))))\n          (else (count_divisors-iter n (+ i 1)))))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n 1)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter (/ n i) i))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 2))\n",
    "  (define (divisors-iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (divisors-iter (+ i 1)))\n            (divisors-iter (+ i 1)))))\n  (divisors-iter 1))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        1\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter i count)\n    (if (&gt; i n)\n        count\n        (if (zero? (modulo n i))\n            (count_divisors_iter (+ i 1) (+ count 1))\n            (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (divisors n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisors n (+ i 1)))\n            (divisors n (+ i 1)))))\n  (divisors n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (divisors-iter n i)\n    (if (= i n)\n        1\n        (if (= (modulo n i) 0)\n            (+ 1 (divisors-iter n (+ i 1)))\n            (divisors-iter n (+ i 1)))))\n  (divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors-iter (+ i 1) (+ count 1)))\n          (else (count_divisors-iter (+ i 1) count))))\n  (count_divisors-iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter n (+ i 1) (+ count 1))\n            (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= n i) 0)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter (+ i 1) (+ count 1))\n            (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((> i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i acc)\n    (cond ((= i n) acc)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ acc 1)))\n          (else (count_divisors_iter (+ i 1) acc))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n 1)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter (/ n i) i))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 2))\n",
    "  (define (count_divisors_iter i count)\n    (if (&gt; i n)\n        count\n        (if (zero? (modulo n i))\n            (count_divisors_iter (+ i 1) (+ count 1))\n            (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (remainder n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((divides? i n) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        1\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (&gt; n i)\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))\n        0))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1))))\n          (else (count_divisors-iter n (+ i 1)))))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter n (+ i 1) (+ count 1))\n            (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (cond ((= i n) 0)\n          ((= (remainder n i) 0) (+ 1 (count-divisors-iter n (+ i 1))))\n          (else (count-divisors-iter n (+ i 1)))))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= n 1) count]\n      [(= (modulo n i) 0) (count_divisors_iter (/ n i) i (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 2 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (count_divisors_iter (/ n i) (+ i 1))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 2))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (&gt; i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter (+ i 1) (+ count 1))\n            (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (divisors-iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (divisors-iter n (+ i 1) (+ count 1))]\n      [else (divisors-iter n (+ i 1) count)]))\n  (divisors-iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (if (= i n)\n        count\n        (if (= (modulo n i) 0)\n            (count_divisors_iter n (+ i 1) (+ count 1))\n            (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (divisors n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisors n (+ i 1)))\n            (divisors n (+ i 1)))))\n  (divisors n 1))\n"
  ]
}