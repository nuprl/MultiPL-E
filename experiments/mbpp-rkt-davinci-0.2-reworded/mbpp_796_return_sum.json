{
  "name": "mbpp_796_return_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (hash-fold + 0 dict))\n",
    "  (letrec ([sum 0]\n           [iter (lambda (key value)\n                   (set! sum (+ sum value))\n                   (hash-for-each iter dict))])\n    (hash-for-each iter dict)\n    sum))\n",
    "  (hash-fold + 0 dict))\n",
    "  (let ([sum 0])\n    (hash-for-each (lambda (key value)\n                     (set! sum (+ sum value)))\n                   dict)\n    sum))\n",
    "  (hash-fold + 0 dict))\n",
    "  (let ([sum 0])\n    (for ([(key value) dict])\n      (set! sum (+ sum value)))\n    sum))\n",
    "  (hash-fold + 0 dict))\n",
    "  (hash-fold + 0 dict))\n",
    "  (hash-fold + 0 dict))\n",
    "  (let ([sum 0])\n    (hash-for-each\n     (lambda (k v)\n       (set! sum (+ sum v)))\n     dict)\n    sum))\n",
    "  (letrec ([sum 0]\n           [iterate (lambda (key value)\n                      (set! sum (+ sum value))\n                      (hash-for-each iterate dict))])\n    (hash-for-each iterate dict)\n    sum))\n",
    "  (let ((sum 0))\n    (hash-map (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n",
    "  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n",
    "  (let ([sum 0])\n    (hash-map (lambda (k v)\n                (set! sum (+ sum v)))\n              dict)\n    sum))\n",
    "  (hash-fold + 0 dict))\n",
    "  (letrec ([helper (lambda (dict)\n                     (if (null? dict)\n                         0\n                         (+ (cdr (car dict))\n                            (helper (cdr dict)))))]\n           [result (helper dict)])\n    result))\n",
    "  (define (iter dict sum)\n    (if (empty? dict)\n        sum\n        (iter (rest dict) (+ sum (first dict)))))\n  (iter dict 0))\n",
    "  (let ([sum 0])\n    (hash-for-each (lambda (k v) (set! sum (+ sum v))) dict)\n    sum))\n",
    "  (hash-fold + 0 dict))\n",
    "  (hash-fold + 0 dict))\n"
  ]
}