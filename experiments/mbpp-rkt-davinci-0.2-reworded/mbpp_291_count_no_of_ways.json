{
  "name": "mbpp_291_count_no_of_ways",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n(define (count_no_of_ways n k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_no_of_ways))\n    (check-equal? (candidate 2 4) 16)\n    (check-equal? (candidate 3 2) 6)\n    (check-equal? (candidate 4 4) 228)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count_no_of_ways_helper n k same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (if (= same-color-count 0) (* k k) (+ (* k k) k))]\n          [else (if (= same-color-count 0)\n                   (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                      (* (count_no_of_ways_helper (- n 1) k 1) (- k 1)))\n                   (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                      (* (count_no_of_ways_helper (- n 1) k 1) (- k 1))))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2)\n           (if (= prev-color 0)\n               (* k (add1 k))\n               (* k k))]\n          [else\n           (if (= prev-color 0)\n               (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                  (* (sub1 k) (count_no_of_ways_helper (- n 1) k 1)))\n               (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                  (* (sub1 k) (count_no_of_ways_helper (- n 1) k 1))))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (if (= prev-color-count k) (- k 1) 0)))]\n          [else (+ (* k (count_no_of_ways-iter (- n 1) k k 0)) (* (if (= prev-color-count k) (- k 1) 0) (count_no_of_ways-iter (- n 1) k k same-color-count)))]))\n  (count_no_of_ways-iter n k k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (if (or (= n 0) (= k 0))\n        0\n        (if (= n 1)\n            k\n            (+ (* (count_no_of_ways_helper (- n 1) k) k)\n               (* (count_no_of_ways_helper (- n 2) k) (- k 1))))))\n  (count_no_of_ways_helper n k))\n",
    "  (cond [(= n 1) k]\n        [(= n 2) (* k k)]\n        [else (+ (* k (- (count_no_of_ways (- n 1) k) (count_no_of_ways (- n 2) k)))\n                  (* k (- (count_no_of_ways (- n 1) k) (count_no_of_ways (- n 2) k))))]))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (if (= prev-color-count 1) 1 0)))]\n          [else (+ (* k (count_no_of_ways-iter (- n 1) k 0 same-color-count))\n                  (* (if (= prev-color-count 1) 1 0) (count_no_of_ways-iter (- n 1) k 1 same-color-count)))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count_no_of_ways-iter n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1))\n          (* k (- k 1)))]))\n  (count_no_of_ways-iter n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k k)]\n         [else (* k (sub1 k))])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* k (count_no_of_ways-iter (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1)))]\n         [else\n          (+ (* k (count_no_of_ways-iter (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 2)))])]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else\n           (+ (* k (count-ways (- n 1) k))\n              (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1)) (* (- k 1) (count-ways-helper (- n 1) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (if (= prev-color 0) (* k k) (* k (k-1)))]\n          [else (if (= prev-color 0)\n                   (+ (* k (count_no_of_ways-iter (- n 1) k 0))\n                      (* (k-1) (count_no_of_ways-iter (- n 1) k 1)))\n                   (* (k-1) (count_no_of_ways-iter (- n 1) k 1)))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (if (= prev-color -1) (* k k) (* k (k-1)))]\n      [else (if (= prev-color -1)\n               (+ (* (count_no_of_ways_helper (- n 1) k -1) k)\n                  (* (count_no_of_ways_helper (- n 2) k -1) k))\n               (+ (* (count_no_of_ways_helper (- n 1) k -1) k)\n                  (* (count_no_of_ways_helper (- n 2) k -1) (k-1))))]))\n  (count_no_of_ways_helper n k -1))\n",
    "  (cond ((= n 1) k)\n        ((= n 2) (* k k))\n        (else (+ (* (count_no_of_ways (- n 1) k) k)\n                 (* (count_no_of_ways (- n 2) k) (- k 1))))))\n",
    "  (define (count_no_of_ways_rec n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways_rec (- n 1) k 1))]\n          [else (* (count_no_of_ways_rec (- n 1) k 1) (- k 1))]))\n  (count_no_of_ways_rec n k 0))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (let ([same-color (- (* k (- (count-ways (- n 1) k) 1))]\n                       [diff-color (* k (- (count-ways (- n 1) k))])])\n                  (+ same-color diff-color))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways-iter n k ways)\n    (cond [(= n 0) ways]\n          [(= n 1) (* ways k)]\n          [(= n 2) (* ways (+ k (* k (- k 1))))]\n          [else (count_no_of_ways-iter (- n 1) k (+ (* ways k) (* ways (- k 1))))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k c1 c2)\n    (cond\n      [(= n 0) c1]\n      [(= n 1) c2]\n      [else\n       (count_no_of_ways-iter (- n 1) k c2 (+ (* c1 (- k 1)) c2))]))\n  (count_no_of_ways-iter n k 0 k))\n",
    "  (define (count_no_of_ways-iter n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways-iter (- n 1) k))\n          (* (- k 1) (count_no_of_ways-iter (- n 2) k)))]))\n  (count_no_of_ways-iter n k))\n",
    "  (define (count_no_of_ways_helper n k same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                   (* (- k 1) (count_no_of_ways_helper (- n 1) k 1)))]))\n  (count_no_of_ways_helper n k 0))\n"
  ]
}