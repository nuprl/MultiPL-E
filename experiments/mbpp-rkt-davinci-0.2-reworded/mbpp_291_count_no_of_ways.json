{
  "name": "mbpp_291_count_no_of_ways",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n(define (count_no_of_ways n k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_no_of_ways))\n    (check-equal? (candidate 2 4) 16)\n    (check-equal? (candidate 3 2) 6)\n    (check-equal? (candidate 4 4) 228)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count_no_of_ways_helper n k same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (if (= same-color-count 0) (* k k) (+ (* k k) k))]\n          [else (if (= same-color-count 0)\n                   (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                      (* (count_no_of_ways_helper (- n 1) k 1) (- k 1)))\n                   (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                      (* (count_no_of_ways_helper (- n 1) k 1) (- k 1))))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2)\n           (if (= prev-color 0)\n               (* k (add1 k))\n               (* k k))]\n          [else\n           (if (= prev-color 0)\n               (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                  (* (sub1 k) (count_no_of_ways_helper (- n 1) k 1)))\n               (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                  (* (sub1 k) (count_no_of_ways_helper (- n 1) k 1))))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (if (= prev-color-count k) (- k 1) 0)))]\n          [else (+ (* k (count_no_of_ways-iter (- n 1) k k 0)) (* (if (= prev-color-count k) (- k 1) 0) (count_no_of_ways-iter (- n 1) k k same-color-count)))]))\n  (count_no_of_ways-iter n k k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (if (or (= n 0) (= k 0))\n        0\n        (if (= n 1)\n            k\n            (+ (* (count_no_of_ways_helper (- n 1) k) k)\n               (* (count_no_of_ways_helper (- n 2) k) (- k 1))))))\n  (count_no_of_ways_helper n k))\n",
    "  (cond [(= n 1) k]\n        [(= n 2) (* k k)]\n        [else (+ (* k (- (count_no_of_ways (- n 1) k) (count_no_of_ways (- n 2) k)))\n                  (* k (- (count_no_of_ways (- n 1) k) (count_no_of_ways (- n 2) k))))]))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (if (= prev-color-count 1) 1 0)))]\n          [else (+ (* k (count_no_of_ways-iter (- n 1) k 0 same-color-count))\n                  (* (if (= prev-color-count 1) 1 0) (count_no_of_ways-iter (- n 1) k 1 same-color-count)))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count_no_of_ways-iter n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1))\n          (* k (- k 1)))]))\n  (count_no_of_ways-iter n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k k)]\n         [else (* k (sub1 k))])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* k (count_no_of_ways-iter (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1)))]\n         [else\n          (+ (* k (count_no_of_ways-iter (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 2)))])]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else\n           (+ (* k (count-ways (- n 1) k))\n              (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1)) (* (- k 1) (count-ways-helper (- n 1) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (if (= prev-color 0) (* k k) (* k (k-1)))]\n          [else (if (= prev-color 0)\n                   (+ (* k (count_no_of_ways-iter (- n 1) k 0))\n                      (* (k-1) (count_no_of_ways-iter (- n 1) k 1)))\n                   (* (k-1) (count_no_of_ways-iter (- n 1) k 1)))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (if (= prev-color -1) (* k k) (* k (k-1)))]\n      [else (if (= prev-color -1)\n               (+ (* (count_no_of_ways_helper (- n 1) k -1) k)\n                  (* (count_no_of_ways_helper (- n 2) k -1) k))\n               (+ (* (count_no_of_ways_helper (- n 1) k -1) k)\n                  (* (count_no_of_ways_helper (- n 2) k -1) (k-1))))]))\n  (count_no_of_ways_helper n k -1))\n",
    "  (cond ((= n 1) k)\n        ((= n 2) (* k k))\n        (else (+ (* (count_no_of_ways (- n 1) k) k)\n                 (* (count_no_of_ways (- n 2) k) (- k 1))))))\n",
    "  (define (count_no_of_ways_rec n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways_rec (- n 1) k 1))]\n          [else (* (count_no_of_ways_rec (- n 1) k 1) (- k 1))]))\n  (count_no_of_ways_rec n k 0))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (let ([same-color (- (* k (- (count-ways (- n 1) k) 1))]\n                       [diff-color (* k (- (count-ways (- n 1) k))])])\n                  (+ same-color diff-color))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways-iter n k ways)\n    (cond [(= n 0) ways]\n          [(= n 1) (* ways k)]\n          [(= n 2) (* ways (+ k (* k (- k 1))))]\n          [else (count_no_of_ways-iter (- n 1) k (+ (* ways k) (* ways (- k 1))))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k c1 c2)\n    (cond\n      [(= n 0) c1]\n      [(= n 1) c2]\n      [else\n       (count_no_of_ways-iter (- n 1) k c2 (+ (* c1 (- k 1)) c2))]))\n  (count_no_of_ways-iter n k 0 k))\n",
    "  (define (count_no_of_ways-iter n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways-iter (- n 1) k))\n          (* (- k 1) (count_no_of_ways-iter (- n 2) k)))]))\n  (count_no_of_ways-iter n k))\n",
    "  (define (count_no_of_ways_helper n k same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                   (* (- k 1) (count_no_of_ways_helper (- n 1) k 1)))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count-ways-helper n k)\n    (cond ((= n 1) k)\n          ((= n 2) (* k k))\n          (else (+ (* k (- (count-ways-helper (- n 1) k) (count-ways-helper (- n 2) k)))\n                 (* (- k 1) (count-ways-helper (- n 2) k))))))\n  (count-ways-helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else (+ (* k (count-no-of-ways-helper (- n 1) k))\n              (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2)\n           (if (= prev-color 0)\n               (* k k)\n               (* (sub1 k) k))]\n          [else\n           (if (= prev-color 0)\n               (+ (* k (count_no_of_ways-iter (- n 1) k 0))\n                  (* (sub1 k) (count_no_of_ways-iter (- n 1) k 1)))\n               (+ (* k (count_no_of_ways-iter (- n 1) k 0))\n                  (* (sub1 k) (count_no_of_ways-iter (- n 1) k 1))))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways-iter (- n 1) k))\n          (* (- k 1) (count_no_of_ways-iter (- n 2) k)))]))\n  (count_no_of_ways-iter n k))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1))\n          (* k (- k 1)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else (+ (* k (count-ways-helper (- n 1) k))\n               (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (sub1 k)))]\n      [else\n       (cond\n         [(= prev-color-count 1)\n          (+ (* k same-color-count) (* (sub1 k) (count_no_of_ways-iter (- n 1) k 1 same-color-count)))]\n         [else\n          (+ (* k same-color-count) (* (sub1 k) (count_no_of_ways-iter (- n 1) k 1 same-color-count))\n           (* k (count_no_of_ways-iter (- n 1) k 2 same-color-count)))])]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (- (count-ways-helper (- n 1) k) (count-ways-helper (- n 3) k)))\n          (* (+ k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k (- 1)))]\n      [else\n       (+ (* k (count-no-of-ways-helper (- n 1) k))\n          (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (if (= n 1)\n      k\n      (let ([same-color (- (* k (- k 1)) (* k (- k 1)))])\n        (+ same-color (count_no_of_ways (- n 1) k)))))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev-color 0) (* k (count_no_of_ways_helper (- n 1) k prev-color))]\n      [else (- (* k (count_no_of_ways_helper (- n 1) k prev-color))\n               (count_no_of_ways_helper (- n 2) k prev-color))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways-iter (- n 1) k 0))]\n          [(= prev-color 1) (+ (* (count_no_of_ways-iter (- n 1) k 0) (- k 1)) (* (count_no_of_ways-iter (- n 1) k 1) 1))]\n          [(= prev-color 2) (* (count_no_of_ways-iter (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else (+ (* k (count_no_of_ways_helper (- n 1) k))\n               (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k (- 1)))]\n      [else\n       (+ (* k (count-no-of-ways-helper (- n 1) k))\n          (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count-no-of-ways-helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k k)]\n         [else (* k (sub1 k))])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* (sub1 k) (count-no-of-ways-helper (sub1 n) k prev-color))\n             (* k (count-no-of-ways-helper (sub1 n) k (add1 prev-color))))]\n         [else\n          (+ (* (sub1 k) (count-no-of-ways-helper (sub1 n) k prev-color))\n             (* (sub1 k) (count-no-of-ways-helper (sub1 n) k (add1 prev-color))))])]))\n  (count-no-of-ways-helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-same? prev-color-diff?)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (if prev-color-same?\n           k\n           (+ (* k (sub1 k)) k))]\n      [else\n       (if prev-color-same?\n           (+ (* (sub1 k) prev-color-diff?) (* k prev-color-same?))\n           (+ (* (sub1 k) prev-color-diff?) (* k prev-color-same?)))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond [(= n 1) k]\n          [(= n 2) (* k k)]\n          [else\n           (let ([same-color (+ (* k 1) (* (count_no_of_ways_helper (- n 1) k) (- k 1)))])\n             (+ same-color (* (count_no_of_ways_helper (- n 1) k) (- k 1))))]))\n  (count_no_of_ways_helper n k))\n",
    "  (cond\n    [(= n 1) k]\n    [(= n 2) (* k k)]\n    [else\n     (+ (* k (count_no_of_ways (- n 1) k))\n        (* (- k 1) (count_no_of_ways (- n 2) k)))]))\n",
    "  (define (count_no_of_ways-iter n k)\n    (cond [(= n 1) k]\n          [(= n 2) (* k k)]\n          [else (+ (* k (count_no_of_ways-iter (- n 1) k))\n                   (* (- k 1) (count_no_of_ways-iter (- n 2) k)))]))\n  (count_no_of_ways-iter n k))\n",
    "  (define (count_no_of_ways-iter n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else (+ (* k (- k 1)) (* k (- k 1)))]))\n  (count_no_of_ways-iter n k))\n",
    "  (define (count-ways-helper n k same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (- k 1)))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k 0))\n          (* (- k 1) (count-ways-helper (- n 1) k same-color-count)))]))\n  (count-ways-helper n k 0))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (- k 1))]\n          [else (+ (* k (- k 1)) (* (- k 1) (count-no-of-ways-helper (- n 1) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev-color 0) (* k (count_no_of_ways_helper (- n 1) k 0))]\n      [else (- (* k (count_no_of_ways_helper (- n 1) k 0))\n              (count_no_of_ways_helper (- n 1) k 1))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k prev-color-count) (* (- k 1) same-color-count))]))\n  (count_no_of_ways-iter n k (- k 1) k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k last-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (if (= last-color 0)\n           (* k k)\n           (* (sub1 k) k))]\n      [else\n       (if (= last-color 0)\n           (+ (* (count_no_of_ways_helper (sub1 n) k 0) k)\n              (* (count_no_of_ways_helper (sub1 n) k 1) (sub1 k)))\n           (* (count_no_of_ways_helper (sub1 n) k 0) k))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (- k 1))]\n          [else (* k (- k 1) (count_no_of_ways-iter (- n 1) k))]))\n  (count_no_of_ways-iter n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (- (count-ways-helper (- n 1) k) (count-ways-helper (- n 3) k)))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* same-color-count (- k 1))\n                   (* (- k 1) (count_no_of_ways-iter (- n 1) k (- k 1))))]))\n  (count_no_of_ways-iter n k k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways_helper (- n 1) k 0))]\n          [else (* (count_no_of_ways_helper (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else (+ (* k (count_no_of_ways_helper (- n 1) k))\n               (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (- k 1))]\n          [else (+ (* k (- k 1)) (* (- k 1) (- k 1)))]))\n  (count-ways n k))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k k)]\n          [else (+ (* k (count-ways (- n 1) k))\n                   (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways-iter (- n 1) k 0))]\n          [else (* (count_no_of_ways-iter (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k (- k 1)) (* k (- k 1)))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count-ways n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways (- n 1) k))\n          (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (- (count-no-of-ways-helper (- n 1) k)\n                          (count-no-of-ways-helper (- n 2) k)))\n                   (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count-ways n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else (+ (* k (count-ways (- n 1) k))\n               (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev-color 0) (count_no_of_ways-iter (- n 1) k 0)]\n      [(= prev-color 1) (count_no_of_ways-iter (- n 1) k 1)]\n      [else (+ (count_no_of_ways-iter (- n 1) k 0)\n               (count_no_of_ways-iter (- n 1) k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count_no_of_ways_iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (if (= prev-color 0) k (* k (sub1 k)))]\n          [else (if (= prev-color 0)\n                   (count_no_of_ways_iter (- n 1) k 0)\n                   (count_no_of_ways_iter (- n 1) k 0)\n                   (+ (count_no_of_ways_iter (- n 1) k 0)\n                      (count_no_of_ways_iter (- n 1) k 1)))]))\n  (count_no_of_ways_iter n k 0))\n",
    "  (cond\n    [(= n 1) k]\n    [(= n 2) (* k k)]\n    [else (+ (* k (count_no_of_ways (- n 1) k))\n             (* (- k 1) (count_no_of_ways (- n 2) k)))]))\n",
    "  (define (count-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (- (count-ways-helper (- n 1) k) (count-ways-helper (- n 3) k)))\n                  (* k (- (count-ways-helper (- n 2) k) (count-ways-helper (- n 4) k))))]))\n  (count-ways-helper n k))\n",
    "  (cond [(= n 1) k]\n        [(= n 2) (* k k)]\n        [else (+ (* k (- (count_no_of_ways (- n 1) k)\n                          (count_no_of_ways (- n 2) k)))\n                  (* (- k 1) (count_no_of_ways (- n 2) k)))]))\n",
    "  (define (count_no_of_ways_helper n k same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (- k 1)))]\n      [else (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n               (* (- k 1) (count_no_of_ways_helper (- n 1) k same-color-count)))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-helper (- n 1) k))\n          (* (- k 1) (count-helper (- n 2) k)))]))\n  (count-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (sub1 k)))]\n          [else (+ (* k prev-color-count) (* (sub1 k) same-color-count))]))\n  (count_no_of_ways-iter n k (sub1 k) k))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else (+ (* k (- (count_no_of_ways_helper (- n 1) k) (count_no_of_ways_helper (- n 3) k)))\n              (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else\n           (let ([same-color-count (if (= prev-color-count 1) k (- k 1))]\n                 [diff-color-count (* k (- k 1))])\n             (+ (* same-color-count (count_no_of_ways-iter (- n 1) k 1))\n                (* diff-color-count (count_no_of_ways-iter (- n 1) k 2))))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) k)]\n          [else (+ (* k prev-color-count) (* (- k 1) same-color-count))]))\n  (count_no_of_ways-iter n k (- k 1) k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else (+ (* k (- (count-ways-helper (- n 1) k) (count-ways-helper (- n 3) k))) (count-ways-helper (- n 2) k))]))\n  (count-ways-helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k (- 1)))]\n      [else (+ (* k (count-ways-helper (- n 1) k)) (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond\n      [(zero? n) same-color-count]\n      [(zero? prev-color-count) (count_no_of_ways-iter (- n 1) k k k)]\n      [(zero? same-color-count) (count_no_of_ways-iter (- n 1) k k (* k (- k 1)))]\n      [else (count_no_of_ways-iter (- n 1) k same-color-count (+ (* k (- k 1)) same-color-count))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [(= prev-color 0) (* (count_no_of_ways-iter (- n 1) k 0) k)]\n      [else (* (count_no_of_ways-iter (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(zero? n) same-color-count]\n          [else (count_no_of_ways-iter (sub1 n) k same-color-count (+ (* (sub1 k) same-color-count) prev-color-count))]))\n  (count_no_of_ways-iter n k 0 k))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k -1))]\n          [else (+ (* k (count-ways (- n 1) k)) (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways-iter n k a b)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* a k) (* b (sub1 k)))]\n      [else (count_no_of_ways-iter (- n 1) k b (+ (* a k) (* b (sub1 k))))]))\n  (count_no_of_ways-iter n k k (sub1 k)))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (sub1 k)))]\n      [else\n       (let ([diff-color-count (- (* k (sub1 k)) same-color-count)])\n         (+ (* diff-color-count (count_no_of_ways-iter (sub1 n) k diff-color-count same-color-count))\n            (* same-color-count (count_no_of_ways-iter (sub1 n) k diff-color-count diff-color-count))))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count-helper n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (- (count-helper (- n 1) k) (count-helper (- n 2) k)))\n                   (* k (- (count-helper (- n 2) k) (count-helper (- n 3) k))))]))\n  (count-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev-color 1)\n       (if (= n 2)\n           (* k k)\n           (+ (* k k) (* k (- k 1))))]\n      [(= prev-color 2)\n       (if (= n 2)\n           (* k k)\n           (+ (* k k) (* k (- k 1))))]\n      [else\n       (if (= n 2)\n           (* k k)\n           (+ (* k k) (* k (- k 1))))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev-color 0) (* k (count_no_of_ways-iter (- n 1) k 0))]\n      [else (* (count_no_of_ways-iter (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else\n           (+ (* k (count-no-of-ways-helper (- n 1) k))\n              (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond ((= n 0) 1)\n          ((= n 1) k)\n          (else (+ (* k (- (count-ways-helper (- n 1) k)\n                           (count-ways-helper (- n 2) k)))\n                  (count-ways-helper (- n 1) k)))))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color-count same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (sub1 k)))]\n      [else\n       (+ (* k prev-color-count) (* (sub1 k) same-color-count))]))\n  (count_no_of_ways_helper n k (sub1 k) k))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (count-ways (- n 1) k))\n                   (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k (- 1)))]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k (count-ways-helper (- n 1) k)) (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k k)]\n          [else\n           (+ (* k prev-color-count)\n              (* (sub1 k) same-color-count))]))\n  (count_no_of_ways_iter n k (sub1 k) k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (if (= prev-color-count k) (- k 1) 0)))]\n      [else\n       (+\n        (* k (count_no_of_ways-iter (- n 1) k k 0))\n        (* (- k 1) (count_no_of_ways-iter (- n 1) k prev-color-count same-color-count))\n        (* (- k 1) (count_no_of_ways-iter (- n 2) k prev-color-count same-color-count))\n        (* (- k 1) (count_no_of_ways-iter (- n 3) k prev-color-count same-color-count)))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (expt k 2)]\n      [else (+ (* (count_no_of_ways_helper (- n 1) k) k)\n               (* (count_no_of_ways_helper (- n 2) k) (- k 1)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k k)]\n          [(= prev-color 0) (* (count_no_of_ways-iter (- n 1) k 0) k)]\n          [else (* (count_no_of_ways-iter (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k (add1 k))]\n         [else (* k k)])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* (add1 k) (count_no_of_ways-iter (- n 1) k 0))\n             (* k (count_no_of_ways-iter (- n 2) k 0)))]\n         [else\n          (+ (* (add1 k) (count_no_of_ways-iter (- n 1) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (- n 2) k 0)))])]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k prev-color-count same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (- k 1)))]\n      [else\n       (+ (* k (- k 1) same-color-count) (* k prev-color-count))]))\n  (count_no_of_ways_helper n k (- k 1) k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev-color 0) (* k (count_no_of_ways-iter (- n 1) k 0))]\n      [else (- (* k (count_no_of_ways-iter (- n 1) k 0)) (count_no_of_ways-iter (- n 1) k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (exact-integer-sqrt (+ (* k k) (* k (- k 1))))]\n      [else (count-helper (- n 1) k)]))\n  (count-helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (- (count-no-of-ways-helper (- n 1) k)\n                          (count-no-of-ways-helper (- n 2) k)))\n                   (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (if (= prev-color -1)\n           (* k k)\n           (* k (sub1 k)))]\n      [else\n       (if (= prev-color -1)\n           (+ (* (sub1 k) (count_no_of_ways-iter (- n 1) k -1))\n              (* k (count_no_of_ways-iter (- n 2) k -1)))\n           (+ (* (sub1 k) (count_no_of_ways-iter (- n 1) k -1))\n              (* (sub1 k) (count_no_of_ways-iter (- n 2) k -1))))]))\n  (count_no_of_ways-iter n k -1))\n",
    "  (define (count_no_of_ways_helper n k prev)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [(= prev 0) (* k (count_no_of_ways_helper (- n 1) k 0))]\n      [(= prev 1) (* k (count_no_of_ways_helper (- n 1) k 0))]\n      [(= prev 2) (* k (count_no_of_ways_helper (- n 1) k 0))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond ((= n 0) 0)\n          ((= n 1) k)\n          ((= n 2) (* k (+ k 1)))\n          (else (+ (* k (- (count_no_of_ways_helper (- n 1) k) (count_no_of_ways_helper (- n 3) k)))\n                 (* (- k 1) (count_no_of_ways_helper (- n 2) k))))))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count-ways n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways (- n 1) k))\n          (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (count-no-of-ways-helper (- n 1) k)) (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond [(= n 1) k]\n          [(= n 2) (* k k)]\n          [else (+ (* k (count_no_of_ways_helper (- n 1) k))\n                  (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (count-ways-helper (- n 1) k))\n                   (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev_color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev_color 0) (count_no_of_ways_helper (- n 1) k 0)]\n      [else (+ (count_no_of_ways_helper (- n 1) k 0)\n               (count_no_of_ways_helper (- n 1) k 1))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else\n       (+ (* (count_no_of_ways-iter (- n 1) k prev-color) k)\n          (* (count_no_of_ways-iter (- n 2) k prev-color) (- k 1)))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (cond [(= n 0) 0]\n        [(= n 1) k]\n        [(= n 2) (* k (+ k 1))]\n        [else\n         (+ (* k (count_no_of_ways (- n 1) k))\n            (* (- k 1) (count_no_of_ways (- n 2) k)))]))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else\n           (cond [(= prev-color-count 0)\n                  (count_no_of_ways-iter (- n 1) k k k)]\n                 [(= same-color-count 0)\n                  (count_no_of_ways-iter (- n 1) k k k)]\n                 [else\n                  (count_no_of_ways-iter (- n 1) k k (- same-color-count 1))])]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count_no_of_ways-iter n k prev-prev-color prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color prev-prev-color)\n          (* k (- k 1))]\n         [else\n          (* k k)])]\n      [else\n       (cond\n         [(= prev-color prev-prev-color)\n          (* k (- k 1))]\n         [else\n          (* k k)])]))\n  (count_no_of_ways-iter n k -1 -1))\n",
    "  (define (count-ways-helper n k)\n    (cond [(= n 1) k]\n          [(= n 2) (* k k)]\n          [else (+ (* k (count-ways-helper (- n 1) k))\n                  (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (- (count-ways-helper (- n 1) k) (count-ways-helper (- n 3) k)))\n                  (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (if (= prev-color -1) (* k k) (+ (* k k) (- k 1)))]\n          [else (if (= prev-color -1)\n                   (+ (* (count_no_of_ways-iter (- n 1) k -1) k)\n                    (count_no_of_ways-iter (- n 1) k (-1)))\n                   (+ (* (count_no_of_ways-iter (- n 1) k -1) k)\n                    (count_no_of_ways-iter (- n 1) k (-1))\n                    (count_no_of_ways-iter (- n 1) k prev-color)))]))\n  (count_no_of_ways-iter n k -1))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count)\n    (cond ((= n 0) 1)\n          ((= n 1) k)\n          ((= prev-color-count 1)\n           (+ (* (count_no_of_ways-iter (- n 1) k 2) k)\n              (* (count_no_of_ways-iter (- n 1) k 1) (- k 1))))\n          ((= prev-color-count 2)\n           (* (count_no_of_ways-iter (- n 1) k 1) (- k 1)))))\n  (count_no_of_ways-iter n k 1))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (cond [(= n 0) 0]\n        [(= n 1) k]\n        [(= n 2) (* k (+ k (- 1)))]\n        [else (+ (* k (- k 1)) (* k (- k 1)))]))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (- (count-ways (- n 1) k) (count-ways (- n 3) k)))\n                   (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k (add1 k))]\n         [else (* k k)])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n             (* k (count_no_of_ways-iter (sub1 n) k 1)))]\n         [else\n          (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1)))]\n         )]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (sub1 k)))]\n          [else\n           (cond [(= prev-color-count 0)\n                  (count_no_of_ways-iter (- n 1) k k k)]\n                 [(= prev-color-count 1)\n                  (count_no_of_ways-iter (- n 1) k k (sub1 k))]\n                 [(= prev-color-count 2)\n                  (count_no_of_ways-iter (- n 1) k k same-color-count)])]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count-ways-aux n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways-aux (- n 1) k))\n          (* (- k 1) (count-ways-aux (- n 2) k)))]))\n  (count-ways-aux n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (count_no_of_ways-iter (- n 1) k 0)]\n          [else (+ (* (count_no_of_ways-iter (- n 1) k 0) (- k 1))\n                   (count_no_of_ways-iter (- n 1) k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k (add1 k))]\n         [else (* k k)])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* (add1 k) (count_no_of_ways-iter (sub1 n) k 0))\n             (* k (count_no_of_ways-iter (sub1 n) k 1)))]\n         [else\n          (+ (* k (count_no_of_ways-iter (sub1 n) k 0))\n             (* (add1 k) (count_no_of_ways-iter (sub1 n) k 1)))])]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color-count same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else\n       (+ (* prev-color-count (- k 1))\n          (* same-color-count (- k 1)))]))\n  (count_no_of_ways_helper n k k k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k prev-color-count) (* (- k 1) same-color-count))]))\n  (count_no_of_ways-iter n k (- k 1) k))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count_no_of_ways_helper (- n 1) k))\n          (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-no-of-ways-helper (- n 1) k))\n          (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (- (count-no-of-ways-helper (- n 1) k)\n                 (count-no-of-ways-helper (- n 2) k)))\n          (count-no-of-ways-helper (- n 2) k))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k (- 1)))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (expt k 2)]\n      [else\n       (+ (* (count_no_of_ways_helper (- n 1) k) k)\n          (* (count_no_of_ways_helper (- n 2) k) (- k 1)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count-ways n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k (- 1)))]\n      [else\n       (+ (* k (count-ways (- n 1) k))\n          (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2)\n           (cond [(= prev-color 0) (* k k)]\n                 [else (* k (sub1 k))])]\n          [else\n           (cond [(= prev-color 0)\n                  (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                     (* (sub1 k) (count_no_of_ways_helper (- n 1) k 1)))]\n                 [else\n                  (+ (* k (count_no_of_ways_helper (- n 1) k 0))\n                     (* (sub1 k) (count_no_of_ways_helper (- n 1) k 1)))])]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (count_no_of_ways_helper (- n 1) k))\n                   (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k prev-color-count) (* (- k 1) same-color-count))]))\n  (count_no_of_ways-iter n k (- k 1) k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-no-of-ways-helper (- n 1) k))\n          (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (if (= prev 0) (* k k) (* k (add1 k)))]\n          [else (if (= prev 0)\n                   (+ (* (sub1 k) (count_no_of_ways_helper (- n 1) k 0))\n                    (count_no_of_ways_helper (- n 1) k 1))\n                   (count_no_of_ways_helper (- n 1) k 0))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (if (= prev-color-count k) (- k 1) 0)))]\n          [else (+ (* k (count_no_of_ways-iter (- n 1) k k 0)) (* (if (= prev-color-count k) (- k 1) 0) (count_no_of_ways-iter (- n 1) k k same-color-count)))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (helper n k)\n    (cond\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else (+ (* k (helper (- n 1) k)) (* (- k 1) (helper (- n 2) k)))]))\n  (helper n k))\n",
    "  (define (count_no_of_ways-iter n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1)) (* (- k 1) (count_no_of_ways-iter (- n 1) k)))]))\n  (count_no_of_ways-iter n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1)) (* (- k 1) (count-ways-helper (- n 1) k)))]))\n  (count-ways-helper n k))\n",
    "  (cond [(= n 0) 0]\n        [(= n 1) k]\n        [(= n 2) (* k (+ k 1))]\n        [else (+ (* k (- (count_no_of_ways (- n 1) k) (count_no_of_ways (- n 2) k)))\n                 (* (- k 1) (count_no_of_ways (- n 2) k)))]))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways-iter (- n 1) k 0))]\n          [else (* (count_no_of_ways-iter (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k (- k 1)) (* k (- k 1)))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (cond\n    [(= n 1) k]\n    [(= n 2) (* k k)]\n    [else\n     (+ (* k (- (count_no_of_ways (- n 1) k) (count_no_of_ways (- n 2) k)))\n        (* k (- (count_no_of_ways (- n 2) k) (count_no_of_ways (- n 3) k))))]))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (count-ways (- n 1) k))\n                   (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev-color 0) (* k (count_no_of_ways_helper (- n 1) k 0))]\n      [else (* (count_no_of_ways_helper (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count-ways-helper n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count-ways-helper (- n 1) k 0))]\n          [else (* (count-ways-helper (- n 1) k 0) (- k 1))]))\n  (count-ways-helper n k 0))\n",
    "  (define (count-ways n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways (- n 1) k))\n          (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (if (= prev-color -1) (* k k) (* k (k-1)))]\n          [else (if (= prev-color -1)\n                   (+ (* k (count_no_of_ways-iter (- n 1) k -1))\n                      (* k (count_no_of_ways-iter (- n 2) k -1)))\n                   (+ (* (k-1) (count_no_of_ways-iter (- n 1) k -1))\n                      (* (k-1) (count_no_of_ways-iter (- n 2) k -1))))]))\n  (count_no_of_ways-iter n k -1))\n",
    "  (define (count-ways n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else\n       (+ (* k (count-ways (- n 1) k))\n          (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways_helper (- n 1) k 0))]\n          [else (* (count_no_of_ways_helper (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k k)]\n          [else\n           (+ (* prev-color-count (- k 1))\n              (* (- prev-color-count 1) (- k 1)))]))\n  (count_no_of_ways-iter n k k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-no-of-ways-helper (- n 1) k))\n          (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* (count_no_of_ways_helper (- n 1) k 0) k)]\n          [else (* (count_no_of_ways_helper (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (let loop ([n n] [k k] [prev-prev-ways 0] [prev-ways k])\n    (cond\n      [(zero? n) prev-ways]\n      [(zero? k) 0]\n      [else (loop (sub1 n) k prev-ways (+ (* prev-ways (sub1 k)) prev-prev-ways))])))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways_helper (- n 1) k 0))]\n          [(= prev-color 1) (+ (* (count_no_of_ways_helper (- n 1) k 0) (- k 1))\n                               (* (count_no_of_ways_helper (- n 1) k 1) 1))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways-iter (- n 1) k 0))]\n          [(= prev-color 1) (+ (* (count_no_of_ways-iter (- n 1) k 0) (- k 1))\n                               (* (count_no_of_ways-iter (- n 1) k 1) 1))]\n          [(= prev-color 2) (* (count_no_of_ways-iter (- n 1) k 0) 1)]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) same-color-count)]\n          [else (+ (* k (count_no_of_ways_helper (- n 1) k (- k 1)))\n                   (* same-color-count (count_no_of_ways_helper (- n 1) k (- k 1))))]))\n  (count_no_of_ways_helper n k (- k 1)))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k (sub1 k))]\n         [else (* k k)])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1)))]\n         [else\n          (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 1))\n             (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 2)))]\n         )\n       ]\n      )\n    )\n  (count_no_of_ways-iter n k 0)\n  )\n",
    "  (define (count-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (exact-integer-sqrt (+ (* k k) (* k k (- k 1))))]\n      [else (let ([same-color-ways (count-helper (- n 1) k)]\n                  [diff-color-ways (count-helper (- n 2) k)])\n              (+ (* same-color-ways (- k 1))\n                 (* diff-color-ways k)))]))\n  (count-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev_color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (if (= prev_color 0) (* k (add1 k)) k)]\n      [else\n       (if (= prev_color 0)\n           (+ (* (add1 k) (count_no_of_ways_helper (sub1 n) k 0))\n              (* (sub1 k) (count_no_of_ways_helper (sub1 n) k 1)))\n           (* (sub1 k) (count_no_of_ways_helper (sub1 n) k 1)))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count-ways n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (count-ways (- n 1) k))\n                   (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways_aux n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else\n           (+ (* k (count_no_of_ways_aux (- n 1) k))\n              (* (- k 1) (count_no_of_ways_aux (- n 2) k)))]))\n  (count_no_of_ways_aux n k))\n",
    "  (define (count-ways n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k (- 1)))]\n      [else (+ (* k (- (count-ways (- n 1) k) (count-ways (- n 2) k))) (count-ways (- n 2) k))]))\n  (count-ways n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else (+ (* k (- k 1)) (* k (- k 1)))]))\n  (count-ways-helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k (- 1)))]\n      [else (+ (* k (count-no-of-ways-helper (- n 1) k))\n               (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (if (= prev-color 0) (* k k) (* k (k-1)))]\n      [else (if (= prev-color 0)\n               (+ (* (count_no_of_ways-iter (- n 1) k 0) k)\n                  (* (count_no_of_ways-iter (- n 1) k 1) (k-1)))\n               (+ (* (count_no_of_ways-iter (- n 1) k 0) (k-1))\n                  (* (count_no_of_ways-iter (- n 1) k 1) (k-2))))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways-iter n k ways)\n    (cond [(= n 0) ways]\n          [(= n 1) (* ways k)]\n          [(= n 2) (* ways (+ k (* k (- k 1))))]\n          [else (count_no_of_ways-iter (- n 1) k (* ways k))]))\n  (count_no_of_ways-iter n k 1))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* k (- k 1)) (* k prev-color-count))]))\n  (count_no_of_ways-iter n k (- k 1) (- k 1)))\n",
    "  (define (count_no_of_ways-iter n k prev-color-count same-color-count)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (+ (* k k) (* k (sub1 k)))]\n      [else\n       (let ([diff-color-count (- (* k (sub1 k)) same-color-count)])\n         (+ (* diff-color-count (count_no_of_ways-iter (- n 1) k diff-color-count same-color-count))\n            (* same-color-count (count_no_of_ways-iter (- n 1) k diff-color-count diff-color-count))))]))\n  (count_no_of_ways-iter n k 0 0))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k (sub1 k))]\n         [else (* k (sub1 k))])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (+ (* (sub1 k) (count_no_of_ways_helper (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways_helper (sub1 n) k 1)))]\n         [else\n          (+ (* (sub1 k) (count_no_of_ways_helper (sub1 n) k 0))\n             (* (sub1 k) (count_no_of_ways_helper (sub1 n) k 1))\n             (* (sub1 k) (count_no_of_ways_helper (sub1 n) k 2)))]\n         )\n       ]\n      )\n    )\n  (count_no_of_ways_helper n k 0)\n  )\n",
    "  (define (count-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k (- k 1)))]\n          [else (+ (* k (count-ways-helper (- n 1) k))\n                   (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2)\n       (cond\n         [(= prev-color 0) (* k (add1 k))]\n         [else (* k (add1 k))])]\n      [else\n       (cond\n         [(= prev-color 0)\n          (add1 (* (count_no_of_ways_helper (sub1 n) k 1) k))]\n         [else\n          (add1 (* (count_no_of_ways_helper (sub1 n) k 1) k))])]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k (add1 k))]\n          [else (+ (* k (count-no-of-ways-helper (- n 1) k))\n                   (* (- k 1) (count-no-of-ways-helper (- n 2) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2)\n           (cond [(= prev-color 0) (* k (add1 k))]\n                 [else (* k k)])]\n          [else\n           (cond [(= prev-color 0)\n                  (+ (* (add1 k) (count_no_of_ways-iter (- n 1) k 0))\n                     (* k (count_no_of_ways-iter (- n 1) k 1)))]\n                 [else\n                  (+ (* (add1 k) (count_no_of_ways-iter (- n 1) k 0))\n                     (* (sub1 k) (count_no_of_ways-iter (- n 1) k 1)))])]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else (+ (* k (count-helper (- n 1) k))\n               (* (- k 1) (count-helper (- n 2) k)))]))\n  (count-helper n k))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond [(= n 0) 0]\n          [(= n 1) k]\n          [(= n 2) (* k (+ k 1))]\n          [else (+ (* k (- (count-no-of-ways-helper (- n 1) k)\n                           (count-no-of-ways-helper (- n 2) k)))\n                   (count-no-of-ways-helper (- n 1) k))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= prev-color 0) (* k (count_no_of_ways-iter (- n 1) k 0))]\n          [else (* (count_no_of_ways-iter (- n 1) k 0) (- k 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count_no_of_ways_helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else (+ (* k (count_no_of_ways_helper (- n 1) k))\n               (* (- k 1) (count_no_of_ways_helper (- n 2) k)))]))\n  (count_no_of_ways_helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev-color 0) (* (count_no_of_ways-iter (- n 1) k 0) k)]\n      [(= prev-color 1) (+ (* (count_no_of_ways-iter (- n 1) k 0) (sub1 k)) (* (count_no_of_ways-iter (- n 1) k 1) (sub1 k)))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k k)]\n          [else (+ (* k (count-ways-helper (- n 1) k))\n                   (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count (- n 1) k))\n          (* (- k 1) (count (- n 2) k)))]))\n  (count n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (if (= prev-color 0) (* k (sub1 k)) k)]\n          [else (if (= prev-color 0)\n                   (+ (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0))\n                      (* k (count_no_of_ways-iter (sub1 n) k 1)))\n                   (* (sub1 k) (count_no_of_ways-iter (sub1 n) k 0)))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (define (count-ways n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k k)]\n      [else (+ (* k (count-ways (- n 1) k))\n               (* (- k 1) (count-ways (- n 2) k)))]))\n  (count-ways n k))\n",
    "  (define (count_no_of_ways_helper n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= prev-color 0) (count_no_of_ways_helper (- n 1) k 0)]\n      [else (+ (* (count_no_of_ways_helper (- n 1) k 0) (count_no_of_ways_helper (- n 1) k 1))\n              (* (count_no_of_ways_helper (- n 1) k 1) (count_no_of_ways_helper (- n 1) k 0)))]))\n  (count_no_of_ways_helper n k 0))\n",
    "  (define (count-no-of-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (- k 1))]\n      [else\n       (+ (* k (- k 1))\n          (* (- k 1) (count-no-of-ways-helper (- n 1) k)))]))\n  (count-no-of-ways-helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond\n      [(= n 0) 1]\n      [(= n 1) k]\n      [(= n 2) (* k (+ k 1))]\n      [else\n       (+ (* k (count-ways-helper (- n 1) k))\n          (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count-ways-helper n k)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (* k k)]\n          [else (+ (* k (count-ways-helper (- n 1) k))\n                   (* (- k 1) (count-ways-helper (- n 2) k)))]))\n  (count-ways-helper n k))\n",
    "  (define (count_no_of_ways-iter n k prev-color)\n    (cond\n      [(= n 0) 1]\n      [(= k 1) 1]\n      [(= prev-color 0) (* k (count_no_of_ways-iter (- n 1) k 0))]\n      [else (+ (count_no_of_ways-iter (- n 1) k 0) (count_no_of_ways-iter (- n 1) (- k 1) 1))]))\n  (count_no_of_ways-iter n k 0))\n",
    "  (cond [(= n 1) k]\n        [(= n 2) (* k k)]\n        [else (+ (* k (count_no_of_ways (- n 1) k))\n                 (* (- k 1) (count_no_of_ways (- n 2) k)))]))\n",
    "  (define (count_no_of_ways_helper n k same-color-count)\n    (cond [(= n 0) 1]\n          [(= n 1) k]\n          [(= n 2) (+ (* k k) (* k (- k 1)))]\n          [else (+ (* same-color-count (- k 1)) (* (- k 1) (- k 1)))]))\n  (count_no_of_ways_helper n k k))\n"
  ]
}