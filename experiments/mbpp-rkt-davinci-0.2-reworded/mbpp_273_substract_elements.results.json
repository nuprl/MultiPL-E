{
  "name": "mbpp_273_substract_elements",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (empty? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2)) (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond [(empty? test_tup1) empty]\n        [(empty? test_tup2) empty]\n        [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (car test_tup1) (car test_tup2))\n           (substract_elements (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map - test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (define (substract_elements_iter tup1 tup2)\n    (if (null? tup1)\n        '()\n        (cons (- (car tup1) (car tup2)) (substract_elements_iter (cdr tup1) (cdr tup2)))))\n  (substract_elements_iter test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2)) (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n</code>\nI am getting the following error:\n<code>substract_elements: expects type &lt;listof number&gt;; given: '(1 2 3)\n</code>\nI am not sure why this is happening. I have tried to use <code>list</code> instead of <code>cons</code> but I am getting the same error.\n\n\nA:\n\nThe problem is that you're using <code>cons</code> to build a list, but you're not using it correctly. The first argument to <code>cons</code> must be a single element, not a list. This is the correct way to use it:\n<code>(cons (first test_tup1) (substract_elements (rest test_tup1) (rest test_tup2)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "/tmp/tmp217tk3xe.rkt:17:66: unquote: not in quasiquote\n  in: (unquote but)\n  location...:\n   /tmp/tmp217tk3xe.rkt:17:66\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (car test_tup1) (car test_tup2))\n                (substract_elements (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (- (car test_tup1) (car test_tup2)) (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "/tmp/tmpqs6t0lvz.rkt:9:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpqs6t0lvz.rkt:9:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (list (- (car test_tup1) (car test_tup2))\n        (- (cadr test_tup1) (cadr test_tup2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7ls_u9z.rkt:13:4\nactual:     '(8 -1)\nexpected:   '(8 -1 -13)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7ls_u9z.rkt:14:4\nactual:     '(-13 -43)\nexpected:   '(-13 -43 -13)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7ls_u9z.rkt:15:4\nactual:     '(-3 7)\nexpected:   '(-3 7 -3)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2)) (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) '()]\n    [(empty? test_tup2) '()]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (list (- (car test_tup1) (car test_tup2)) (- (cadr test_tup1) (cadr test_tup2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd_l_sq5m.rkt:12:4\nactual:     '(8 -1)\nexpected:   '(8 -1 -13)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd_l_sq5m.rkt:13:4\nactual:     '(-13 -43)\nexpected:   '(-13 -43 -13)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd_l_sq5m.rkt:14:4\nactual:     '(-3 7)\nexpected:   '(-3 7 -3)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2)) (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2)) (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2)) (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (- (car test_tup1) (car test_tup2)) (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(null? test_tup1) '()]\n    [(null? test_tup2) '()]\n    [else (cons (- (car test_tup1) (car test_tup2)) (substract_elements (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (- (first test_tup1) (first test_tup2))\n           (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (map (lambda (x y) (- x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons\n      (- (first test_tup1) (first test_tup2))\n      (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (apply vector (- (apply vector test_tup1) (apply vector test_tup2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9057utpr.rkt:12:4\n\n-: contract violation\n  expected: number?\n  given: '#(10 4 5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9057utpr.rkt:13:4\n\n-: contract violation\n  expected: number?\n  given: '#(11 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9057utpr.rkt:14:4\n\n-: contract violation\n  expected: number?\n  given: '#(7 18 9)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
      "timestamp": 1666123130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}