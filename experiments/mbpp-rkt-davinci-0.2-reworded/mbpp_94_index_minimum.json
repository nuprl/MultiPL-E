{
  "name": "mbpp_94_index_minimum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) 0]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (list-ref (rest test_list) min_index)]\n            [cur_value (list-ref test_list 1)])\n       (if (&lt; cur_value min_value)\n           0\n           (+ min_index 1)))]))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((&lt; (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n</code>\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n            [current_value (second (first test_list))])\n       (if (empty? min_index)\n           0\n           (if (< current_value min_value)\n               0\n               (+ 1 min_index))))]))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (find min_index test_list)))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_second (second first_list)]\n            [second_second (second second_list)])\n       (if (< first_second second_second)\n           first_list\n           (index_minimum (rest test_list))))]))\n",
    "  (let loop ([index 0] [min_index 0] [min_value (second (list-ref test_list 0))])\n    (if (= index (length test_list))\n        min_index\n        (let ([new_value (second (list-ref test_list index))])\n          (if (< new_value min_value)\n              (loop (+ index 1) index new_value)\n              (loop (+ index 1) min_index min_value))))))\n",
    "  (cond\n    [(null? test_list) (error \"index_minimum: empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_pair (car test_list)]\n            [first_value (car first_pair)]\n            [first_index (cdr first_pair)]\n            [second_pair (index_minimum (cdr test_list))]\n            [second_value (car second_pair)]\n            [second_index (cdr second_pair)])\n       (if (< first_index second_index)\n           first_pair\n           second_pair))]))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (let ([min (index_minimum (cdr test_list))])\n            (if (< (cadr min) (cadr (car test_list)))\n                min\n                (car test_list)))]))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (find-first (lambda (x) (= (second x) min_index)) test_list)))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list)))\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 min_value)]\n          [else (loop (cdr test_list)\n                      min_index\n                      (second (car test_list)))])))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let*\n         ([first_list (first test_list)]\n          [first_list_second_value (second first_list)]\n          [rest_list (rest test_list)]\n          [rest_list_minimum (index_minimum rest_list)]\n          [rest_list_minimum_second_value (second rest_list_minimum)])\n       (if (< first_list_second_value rest_list_minimum_second_value)\n           first_list\n           rest_list_minimum))]))\n",
    "  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n",
    "  (let ((min_index 0)\n        (min_value (cadr (car test_list))))\n    (for ([(index value) (in-indexed test_list)])\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (&lt; (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n</code>\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n",
    "  (let ([min_index (index_minimum_helper test_list 0)])\n    (list-ref test_list min_index)))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([first_item (first test_list)]\n            [first_item_second (second first_item)]\n            [rest_of_list (rest test_list)]\n            [rest_of_list_minimum (index_minimum rest_of_list)])\n       (if (empty? rest_of_list_minimum)\n           first_item\n           (let* ([rest_of_list_minimum_second (second rest_of_list_minimum)])\n             (if (< first_item_second rest_of_list_minimum_second)\n                 first_item\n                 rest_of_list_minimum))))]))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [second_list (cadr test_list)]\n            [first_value (car first_list)]\n            [second_value (car second_list)]\n            [first_index (cadr first_list)]\n            [second_index (cadr second_list)])\n       (if (< first_index second_index)\n           first_list\n           (index_minimum (cdr test_list))))]))\n",
    "  (define (index_minimum_helper test_list index)\n    (if (null? test_list)\n        index\n        (let ((current_index (index_minimum_helper (cdr test_list) index)))\n          (if (< (cadr (car test_list)) (cadr (car (nth current_index test_list))))\n              index\n              current_index))))\n  (car (nth (index_minimum_helper test_list 0) test_list)))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [second_list (cadr test_list)]\n            [first_list_second_value (cadr first_list)]\n            [second_list_second_value (cadr second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           (index_minimum (cons first_list (cddr test_list)))\n           (index_minimum (cons second_list (cddr test_list)))))\n     ]))\n",
    "  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n",
    "  (let ((min_index 0)\n        (min_value (second (car test_list))))\n    (for ([(index value) (in-indexed test_list)])\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let*\n         ([first_list (first test_list)]\n          [second_list (first (rest test_list))]\n          [first_second (second first_list)]\n          [second_second (second second_list)])\n       (if (< first_second second_second)\n           first_list\n           (index_minimum (rest test_list))))]))\n",
    "  (cond\n    [(null? test_list) (error \"Empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [first_min (if (< (cadr first) (cadr second)) first second)]\n            [rest_min (index_minimum (cdr test_list))])\n       (if (< (cadr first_min) (cadr rest_min))\n           first_min\n           rest_min))]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(= (length test_list) 1) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_second (second first_list)]\n            [second_second (second second_list)])\n       (if (< first_second second_second)\n           first_list\n           (index_minimum (rest test_list))))]))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_value (first test_list)]\n            [rest_value (index_minimum (rest test_list))])\n       (if (< (second first_value) (second rest_value))\n           first_value\n           rest_value))]))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((< (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n",
    "  (if (null? test_list)\n      '()\n      (let* ([smallest (apply min (map second test_list))]\n             [smallest_index (index-of smallest (map second test_list))])\n        (list (list-ref test_list smallest_index) smallest_index))))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else\n     (let* ([min_index (argmin (map second test_list))]\n            [min_value (list-ref test_list min_index)])\n       (list min_index min_value))]))\n",
    "  (let ([min_index (index_minimum_helper test_list 0)])\n    (list-ref test_list min_index)))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (first (filter (lambda (x) (= (second x) min_index)) test_list))))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (min (first test_list) (index_minimum (rest test_list)))]))\n",
    "  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [first-value (car first)]\n            [first-index (cadr first)]\n            [second-value (car second)]\n            [second-index (cadr second)])\n       (if (< first-index second-index)\n           first\n           second))]))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(= (length test_list) 1) (first test_list)]\n    [else\n     (let ([first_list (first test_list)]\n           [second_list (second test_list)])\n       (if (< (second first_list) (second second_list))\n           first_list\n           (index_minimum (rest test_list))))]))\n",
    "  (let loop ([test_list test_list] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [else (let ([value (second (car test_list))])\n                  (if (< value min_value)\n                      (loop (cdr test_list) (add1 min_index) value)\n                      (loop (cdr test_list) min_index min_value)))])))\n",
    "  (if (null? test_list)\n      '()\n      (let ((min_index (index_minimum (cdr test_list))))\n        (if (null? min_index)\n            (car test_list)\n            (if (< (cadr (car test_list)) (cadr min_index))\n                (car test_list)\n                min_index)))))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (first (filter (lambda (x) (= (second x) min_index)) test_list))))\n",
    "  (define (index_minimum_helper test_list min_index min_value)\n    (if (null? test_list)\n        min_index\n        (let ((current_index (car test_list))\n              (current_value (cadr test_list)))\n          (if (< current_value min_value)\n              (index_minimum_helper (cddr test_list) current_index current_value)\n              (index_minimum_helper (cddr test_list) min_index min_value)))))\n  (index_minimum_helper test_list (car test_list) (cadr test_list)))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [first-second (car first)]\n            [second-second (car second)])\n       (if (< first-second second-second)\n           first\n           second))]))\n",
    "  (if (null? test_list)\n      '()\n      (let ((min (car test_list)))\n        (for ((i (cdr test_list)))\n          (if (< (cadr i) (cadr min))\n              (set! min i)))\n        min)))\n",
    "  (define (index_minimum_helper test_list index)\n    (if (null? test_list)\n        index\n        (let ((current_index (index_minimum_helper (cdr test_list) index)))\n          (if (< (cadr (car test_list)) (cadr (car (nth current_index test_list))))\n              index\n              current_index))))\n  (car (nth (index_minimum_helper test_list 0) test_list)))\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (define (index_minimum_helper test_list current_index current_min_index)\n    (if (null? test_list)\n        current_min_index\n        (let ([current_value (car test_list)])\n          (if (< (cadr current_value) (cadr (list-ref test_list current_min_index)))\n              (index_minimum_helper (cdr test_list) (add1 current_index) current_index)\n              (index_minimum_helper (cdr test_list) (add1 current_index) current_min_index)))))\n  (index_minimum_helper test_list 0 0))\n",
    "  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (if (< (second (first test_list)) (second (first (rest test_list))))\n             (first test_list)\n             (index_minimum (rest test_list)))]))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [(< (cadr test_list) (cadr (cdr test_list))) (index_minimum (cdr test_list))]\n    [else (index_minimum (cons (car test_list) (cddr test_list)))]))\n",
    "  (if (null? test_list)\n      '()\n      (let ([min_index (index_minimum (cdr test_list))])\n        (if (null? min_index)\n            (list (car test_list))\n            (if (< (cadr (car test_list)) (cadr (car min_index)))\n                (list (car test_list))\n                min_index)))))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let ([first (car test_list)]\n           [second (car (cdr test_list))])\n       (if (< (cadr first) (cadr second))\n           first\n           (index_minimum (cdr test_list))))]))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(empty? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [first-second (car first)]\n            [second-second (car second)])\n       (if (< first-second second-second)\n           first\n           (index_minimum (cdr test_list))))]))\n",
    "  (if (null? test_list)\n      '()\n      (let ((min_index (index_minimum (cdr test_list))))\n        (if (null? min_index)\n            (car test_list)\n            (if (< (cadr (car test_list)) (cadr min_index))\n                (car test_list)\n                min_index)))))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_value (first first_list)]\n            [second_value (first second_list)])\n       (if (< (second first_list) (second second_list))\n           first_value\n           (index_minimum (rest test_list))))]))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n</code>\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [(< (cadr test_list) (cadr (cdr test_list))) (index_minimum test_list)]\n    [else (index_minimum (cdr test_list))]))\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else (min-index test_list)]))\n",
    "  (define (index_minimum_helper test_list current_index current_minimum)\n    (if (null? test_list)\n        current_index\n        (let* ([current_value (car test_list)]\n               [current_value_second (cadr current_value)]\n               [current_minimum_second (cadr current_minimum)])\n          (if (< current_value_second current_minimum_second)\n              (index_minimum_helper (cdr test_list) current_index current_value)\n              (index_minimum_helper (cdr test_list) (add1 current_index) current_minimum)))))\n  (index_minimum_helper test_list 0 (car test_list)))\n",
    "  (define (index_minimum_helper test_list min_index min_value)\n    (cond\n      [(null? test_list) min_index]\n      [(< (cadr (car test_list)) min_value)\n       (index_minimum_helper (cdr test_list) (car test_list) (cadr (car test_list)))]\n      [else (index_minimum_helper (cdr test_list) min_index min_value)]))\n  (index_minimum_helper test_list (car test_list) (cadr (car test_list))))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (first (filter (lambda (x) (= (second x) min_index)) test_list))))\n",
    "  (let loop ([test_list test_list] [index 0] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [else\n           (if (< (second (car test_list)) min_value)\n               (loop (cdr test_list) (+ index 1) index (second (car test_list)))\n               (loop (cdr test_list) (+ index 1) min_index min_value))])))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (if (< (second (first test_list)) (second (first (rest test_list))))\n             (first test_list)\n             (index_minimum (rest test_list)))]))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_list_second_value (second first_list)]\n            [second_list_second_value (second second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           first_list\n           (index_minimum (rest test_list))))]))\n",
    "  (let loop ([test_list test_list]\n             [min_value (second (car test_list))]\n             [min_index 0])\n    (cond [(empty? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (second (car test_list))\n                 (add1 min_index))]\n          [else (loop (cdr test_list)\n                      min_value\n                      (add1 min_index))])))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(= (length test_list) 1) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [rest (cdr (cdr test_list))])\n       (if (< (second first) (second second))\n           (index_minimum (cons first rest))\n           (index_minimum (cons second rest))))]))\n",
    "  (cond\n    [(null? test_list) (error \"Empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (let ([min-index (index_minimum (cdr test_list))])\n            (if (< (cadr (car test_list)) (cadr min-index))\n                (car test_list)\n                min-index))]))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(empty? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [second_list (car (cdr test_list))]\n            [first_value (car first_list)]\n            [second_value (car second_list)]\n            [first_index (cadr first_list)]\n            [second_index (cadr second_list)])\n       (if (< first_index second_index)\n           first_list\n           (index_minimum (cdr test_list))))]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let ([min_index (index_minimum (rest test_list))])\n       (if (empty? min_index)\n           (list (first test_list))\n           (if (< (second (first test_list)) (second (first min_index)))\n               (list (first test_list))\n               min_index)))]))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(empty? test_list) min_index]\n          [else (let ([current_index (add1 min_index)]\n                      [current_value (second (car test_list))])\n                  (if (< current_value min_value)\n                      (loop (cdr test_list) current_index current_value)\n                      (loop (cdr test_list) min_index min_value)))])))\n",
    "  (let ([min_index (argmin (map second test_list))])\n    (list-ref test_list min_index)))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0])\n    (if (null? test_list)\n        min_index\n        (let ([current_index (car test_list)])\n          (if (< (cadr current_index) (cadr (list-ref test_list min_index)))\n              (loop (cdr test_list) (car test_list))\n              (loop (cdr test_list) min_index))))))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (find min_index test_list)))\n",
    "  (define (helper test_list min_index min_value)\n    (cond ((null? test_list) min_index)\n          ((< (cadr (car test_list)) min_value)\n           (helper (cdr test_list) (car test_list) (cadr (car test_list))))\n          (else (helper (cdr test_list) min_index min_value))))\n  (helper test_list (car test_list) (cadr (car test_list))))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n",
    "  (let ((min_index 0)\n        (min_value (cadr (car test_list))))\n    (for ([(index value) (in-indexed test_list)])\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n",
    "  (let loop ([test_list test_list] [index 0] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [else\n           (if (< (second (car test_list)) min_value)\n               (loop (cdr test_list) (+ index 1) index (second (car test_list)))\n               (loop (cdr test_list) (+ index 1) min_index min_value))])))\n",
    "  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (if (< (second (first test_list)) (second (index_minimum (rest test_list))))\n             (first test_list)\n             (index_minimum (rest test_list)))]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([first_list (first test_list)]\n            [first_value (first first_list)]\n            [first_index (second first_list)]\n            [rest_list (rest test_list)]\n            [rest_minimum (index_minimum rest_list)])\n       (cond\n         [(empty? rest_minimum) first_list]\n         [(< first_index (second rest_minimum)) first_list]\n         [else rest_minimum]))]))\n",
    "  (let ([min_val (apply min (map second test_list))])\n    (find-first (lambda (x) (= (second x) min_val)) test_list)))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(= (length test_list) 1) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [second_list (cadr test_list)]\n            [first_list_second_value (cadr first_list)]\n            [second_list_second_value (cadr second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           first_list\n           (index_minimum (cdr test_list))))]))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) 0]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (second (list-ref test_list min_index))]\n            [current_value (second (first test_list))])\n       (if (&lt; current_value min_value)\n           0\n           (+ 1 min_index)))]))\n</code>\n",
    "  (define (index_minimum_helper test_list index min_index)\n    (cond\n      [(empty? test_list) min_index]\n      [(< (second (first test_list)) (second (list-ref test_list min_index)))\n       (index_minimum_helper (rest test_list) (add1 index) index)]\n      [else (index_minimum_helper (rest test_list) (add1 index) min_index)]))\n  (list-ref test_list (index_minimum_helper test_list 0 0)))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list)))]\n          [else (loop (cdr test_list)\n                      min_index\n                      min_value)])))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n</code>\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n            [current_value (second (first test_list))])\n       (if (empty? min_index)\n           0\n           (if (< current_value min_value)\n               0\n               (add1 min_index))))]))\n",
    "  (define (index_minimum_helper test_list min_index min_val)\n    (cond\n      [(empty? test_list) min_index]\n      [(< (second (first test_list)) min_val) (index_minimum_helper (rest test_list) (first test_list) (second (first test_list)))]\n      [else (index_minimum_helper (rest test_list) min_index min_val)]))\n  (index_minimum_helper test_list (first test_list) (second (first test_list))))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((< (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list) min_index min_value)))))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else\n     (let* ([min_index (argmin (map second test_list))]\n            [min_value (list-ref test_list min_index)])\n       min_value)]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (argmin (map second test_list))]\n            [min_value (list-ref test_list min_index)])\n       min_value)]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(empty? (cdr test_list)) (car test_list)]\n    [else (let* ([first (car test_list)]\n                 [second (cadr test_list)]\n                 [rest (cddr test_list)])\n            (if (&lt; (cadr first) (cadr second))\n                (index_minimum (cons first rest))\n                (index_minimum (cons second rest))))]))\n</code>\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [first_value (car first_list)]\n            [first_index (cadr first_list)]\n            [second_list (cadr test_list)]\n            [second_value (car second_list)]\n            [second_index (cadr second_list)])\n       (if (< first_index second_index)\n           first_value\n           (index_minimum (cdr test_list))))]))\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (define (index_minimum_helper test_list min_index min_value)\n    (cond\n      [(empty? test_list) min_index]\n      [else (let ([index (first test_list)]\n                 [value (second test_list)])\n              (if (< value min_value)\n                  (index_minimum_helper (rest (rest test_list)) index value)\n                  (index_minimum_helper (rest (rest test_list)) min_index min_value)))]))\n  (index_minimum_helper test_list 0 (second (first test_list))))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [else (let ([min (apply min (map second test_list))])\n            (index_of min test_list))]))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list)))\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 min_value)]\n          [else (loop (cdr test_list)\n                      min_index\n                      (second (car test_list)))])))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else (let* ([min_index (argmin (map second test_list))]\n                 [min_value (list-ref test_list min_index)])\n            (list min_index min_value))]))\n",
    "  (let ((min_index (first test_list))\n        (min_value (second (first test_list))))\n    (for ([i test_list])\n      (when (< (second i) min_value)\n        (set! min_index i)\n        (set! min_value (second i))))\n    min_index))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [rest (cddr test_list)])\n       (if (< (cadr first) (cadr second))\n           (index_minimum (cons first rest))\n           (index_minimum (cons second rest))))]))\n",
    "  (cond\n    [(null? test_list) '()]\n    [else\n     (let* ([first_list (car test_list)]\n            [first_value (car first_list)]\n            [second_value (cadr first_list)])\n       (cond\n         [(null? (cdr test_list)) first_value]\n         [else\n          (let* ([next_list (cadr test_list)]\n                 [next_value (car next_list)]\n                 [next_second_value (cadr next_list)])\n            (if (< second_value next_second_value)\n                first_value\n                next_value))]))]))\n",
    "  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n",
    "  (let ([min_index (apply min (map (lambda (x) (cadr x)) test_list))])\n    (find (lambda (x) (= (cadr x) min_index)) test_list)))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((&lt; (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (cadr (car test_list))])\n    (if (null? test_list)\n        min_index\n        (let ([new_value (cadr (car test_list))])\n          (if (< new_value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    new_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (if (null? test_list)\n        min_index\n        (let ([new_index (add1 min_index)]\n              [new_value (second (car test_list))])\n          (if (&lt; new_value min_value)\n              (loop (cdr test_list) new_index new_value)\n              (loop (cdr test_list) min_index min_value))))))\n",
    "  (let ([min_index 0]\n        [min_value (second (list-ref test_list 0))])\n    (for ([i (in-range (length test_list))])\n      (when (< (second (list-ref test_list i)) min_value)\n        (set! min_index i)\n        (set! min_value (second (list-ref test_list i)))))\n    (list-ref test_list min_index)))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (if (null? test_list)\n        min_index\n        (let ((current_index (add1 min_index))\n              (current_value (cadr (car test_list))))\n          (if (&lt; current_value min_value)\n              (loop (cdr test_list)\n                    current_index\n                    current_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n",
    "  (let ([min_index (index_minimum_helper test_list 0 1)])\n    (list-ref test_list min_index)))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (second (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((&lt; (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n",
    "  (let loop ([test_list test_list] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list))) (loop (cdr test_list) (+ min_index 1) min_value)]\n          [else (loop (cdr test_list) (+ min_index 1) (second (car test_list)))])))\n",
    "  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (define (index_minimum_helper test_list index)\n    (if (null? test_list)\n        index\n        (if (< (cadr (car test_list)) (cadr (list-ref test_list index)))\n            (index_minimum_helper (cdr test_list) (car test_list))\n            (index_minimum_helper (cdr test_list) index))))\n  (index_minimum_helper test_list (car test_list)))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [rest (cddr test_list)])\n       (if (< (cadr first) (cadr second))\n           (index_minimum (cons first rest))\n           (index_minimum (cons second rest))))]))\n",
    "  (let ([min_index (argmin (map second test_list))])\n    (list-ref test_list min_index)))\n",
    "  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n",
    "  (cond [(empty? test_list) '()]\n        [else (index_minimum_helper test_list (car test_list) (cadr test_list) 0)]))\n",
    "  (let ([min (apply min (map second test_list))])\n    (first (filter (lambda (x) (= min (second x))) test_list))))\n",
    "  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (let ([first_min (first test_list)]\n                [rest_min (index_minimum (rest test_list))])\n            (if (< (second first_min) (second rest_min))\n                first_min\n                rest_min))]))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(= (length test_list) 1) (car test_list)]\n    [else (let ([first_element (car test_list)]\n                [second_element (car (cdr test_list))])\n            (if (< (cadr first_element) (cadr second_element))\n                first_element\n                second_element))]))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(empty? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list)))]\n          [else (loop (cdr test_list)\n                      min_index\n                      min_value)])))\n",
    "  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (let ([first_value (first test_list)]\n                [second_value (second test_list)]\n                [rest_of_list (rest test_list)])\n             (if (< (second first_value) (second (index_minimum rest_of_list)))\n                 first_value\n                 (index_minimum rest_of_list)))]))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (find min_index test_list)))\n",
    "  (let ((min_index 0)\n        (min_value (second (car test_list))))\n    (for ([(index value) (in-indexed test_list)])\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n",
    "  (let loop ([test_list test_list] [index 0] [min_index 0] [min_value (second (car test_list))])\n    (if (null? test_list)\n        min_index\n        (if (< (second (car test_list)) min_value)\n            (loop (cdr test_list) (+ index 1) index (second (car test_list)))\n            (loop (cdr test_list) (+ index 1) min_index min_value)))))\n",
    "  (if (null? test_list)\n      '()\n      (let ([min_index (index_minimum (cdr test_list))])\n        (if (null? min_index)\n            (car test_list)\n            (if (< (cadr (car test_list)) (cadr min_index))\n                (car test_list)\n                min_index)))))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (find-first (lambda (x) (= min_index (second x))) test_list)))\n",
    "  (define (index_minimum_helper test_list min_index min_value)\n    (if (null? test_list)\n        min_index\n        (let ((current_value (cadr (car test_list))))\n          (if (&lt; current_value min_value)\n              (index_minimum_helper (cdr test_list) (car test_list) current_value)\n              (index_minimum_helper (cdr test_list) min_index min_value)))))\n  (index_minimum_helper test_list (car test_list) (cadr (car test_list))))\n",
    "  (letrec ([min-index (lambda (lst)\n                        (if (null? lst)\n                            0\n                            (let ([min-index (min-index (cdr lst))])\n                              (if (< (cadr (car lst)) (cadr (list-ref lst min-index)))\n                                  0\n                                  (+ 1 min-index)))))])\n    (list-ref test_list (min-index test_list))))\n",
    "  (cond\n    [(null? test_list) #f]\n    [else\n     (let* ([min-index (index_minimum (cdr test_list))]\n            [min-value (if min-index (cadr (list-ref test_list min-index)) #f)]\n            [current-value (cadr (car test_list))])\n       (cond\n         [(null? min-index) 0]\n         [(< current-value min-value) 0]\n         [else (+ 1 min-index)]))]))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let*\n         ([first_list (first test_list)]\n          [second_list (first (rest test_list))]\n          [first_value (first first_list)]\n          [second_value (first second_list)])\n       (if (< (second first_list) (second second_list))\n           first_list\n           (index_minimum (rest test_list))))]))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= min_index (second x))) test_list)))\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [rest (cddr test_list)])\n       (if (< (cadr first) (cadr second))\n           (index_minimum (cons first rest))\n           (index_minimum (cons second rest))))]))\n",
    "  (define (index_minimum_helper test_list index min_index min_value)\n    (cond\n      [(empty? test_list) min_index]\n      [else\n       (define current_value (second (first test_list)))\n       (cond\n         [(< current_value min_value) (index_minimum_helper (rest test_list) (add1 index) index current_value)]\n         [else (index_minimum_helper (rest test_list) (add1 index) min_index min_value)])]))\n  (index_minimum_helper test_list 0 0 (second (first test_list))))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr test_list) (cadr (cdr test_list)))\n             (index_minimum (cons (car test_list) (cddr test_list)))\n             (index_minimum (cdr test_list)))]))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (second (car test_list))))\n    (if (null? test_list)\n        min_index\n        (let ((current_value (second (car test_list))))\n          (if (&lt; current_value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    current_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n</code>\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list)))\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 min_value)]\n          [else (loop (cdr test_list)\n                      min_index\n                      (second (car test_list)))])))\n",
    "  (let ((min_index 0)\n        (min_value (second (first test_list))))\n    (for ((index (in-range (length test_list)))\n          (value (in-list (map second test_list))))\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n",
    "  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (if (< (second (first test_list)) (second (first (rest test_list))))\n              (first test_list)\n              (index_minimum (rest test_list)))]))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_list_second_value (second first_list)]\n            [second_list_second_value (second second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           (index_minimum (cons first_list (rest (rest test_list))))\n           (index_minimum (cons second_list (rest (rest test_list))))))]))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n",
    "  (cond\n    [(null? test_list) '()]\n    [else (index_minimum_helper test_list (car test_list) 0)]))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (if (null? test_list)\n        min_index\n        (let ((current_value (cadr (car test_list))))\n          (if (< current_value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    current_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n",
    "  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let*\n         ([current_min (index_minimum (cdr test_list))]\n          [current_min_index (cadr current_min)]\n          [test_list_index (cadr (car test_list))])\n       (if (< current_min_index test_list_index)\n           current_min\n           (car test_list)))]))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [first_second (car first)]\n            [second_second (car second)])\n       (if (< first_second second_second)\n           first\n           second))]))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (second (first test_list)) 0)]))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else\n     (let ([min_index (index_minimum (rest test_list))])\n       (cond\n         [(empty? min_index) (list (first test_list))]\n         [(< (second (first test_list)) (second (first min_index))) (list (first test_list))]\n         [else min_index]))]))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (if (null? test_list)\n        min_index\n        (let ((current_value (cadr (car test_list))))\n          (if (< current_value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    current_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n",
    "  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (equal? (second x) min_index)) test_list)))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0])\n    (if (null? test_list)\n        min_index\n        (let ([index (car test_list)])\n          (if (< (cadr index) (cadr (list-ref test_list min_index)))\n              (loop (cdr test_list) (car test_list))\n              (loop (cdr test_list) min_index))))))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (find-first (lambda (x) (= (second x) min_index)) test_list)))\n",
    "  (if (null? test_list)\n      '()\n      (let loop ((test_list test_list)\n                 (min_index 0)\n                 (min_value (cadr (car test_list))))\n        (if (null? test_list)\n            min_index\n            (let ((current_value (cadr (car test_list))))\n              (if (< current_value min_value)\n                  (loop (cdr test_list)\n                        (add1 min_index)\n                        current_value)\n                  (loop (cdr test_list)\n                        min_index\n                        min_value)))))))\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [first-second (car first)]\n            [second-second (car second)])\n       (if (< first-second second-second)\n           first\n           second))]))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [first_list_second (cadr first_list)]\n            [rest_list (cdr test_list)]\n            [rest_list_minimum (index_minimum rest_list)]\n            [rest_list_minimum_second (cadr rest_list_minimum)])\n       (if (< first_list_second rest_list_minimum_second)\n           first_list\n           rest_list_minimum))]))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list))) (loop (cdr test_list) min_index min_value)]\n          [else (loop (cdr test_list) (+ min_index 1) (second (car test_list)))])))\n",
    "  (let loop ([test_list test_list] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< (second (car test_list)) min_value) (loop (cdr test_list) (add1 min_index) (second (car test_list)))]\n          [else (loop (cdr test_list) min_index min_value)])))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [first_value (cadr first_list)]\n            [rest_list (cdr test_list)]\n            [rest_value (index_minimum rest_list)])\n       (if (< first_value (cadr rest_value))\n           first_list\n           rest_value))]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) (second (first test_list)) (second (list-ref test_list min_index)))]\n            [current_index (if (empty? min_index) 0 (add1 min_index))]\n            [current_value (second (list-ref test_list current_index))])\n       (if (&lt; current_value min_value)\n           current_index\n           min_index))]))\n",
    "  (cond\n    [(empty? test_list) #f]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_list_second_value (second first_list)]\n            [second_list_second_value (second second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           (index_minimum (cons first_list (rest (rest test_list))))\n           (index_minimum (cons second_list (rest (rest test_list))))))]))\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (define (min_index test_list)\n    (if (null? test_list)\n        '()\n        (if (null? (cdr test_list))\n            (car test_list)\n            (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n                (car test_list)\n                (min_index (cdr test_list))))))\n  (car (min_index test_list)))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_value (car test_list)]\n            [second_value (cadr test_list)]\n            [first_value_second_value (cadr first_value)]\n            [second_value_second_value (cadr second_value)])\n       (if (< first_value_second_value second_value_second_value)\n           first_value\n           (index_minimum (cdr test_list))))]))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else\n     (let* ([min_index (argmin (map second test_list))]\n            [min_value (list-ref test_list min_index)])\n       min_value)]))\n",
    "  (if (null? test_list)\n      '()\n      (let* ([smallest (apply min (map second test_list))]\n             [smallest_index (index-of smallest (map second test_list))])\n        (list-ref test_list smallest_index))))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n            [current_index (rest test_list)]\n            [current_value (second (list-ref test_list current_index))])\n       (cond\n         [(empty? min_index) current_index]\n         [(< min_value current_value) min_index]\n         [else current_index]))]))\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [(< (cadr (car test_list)) (cadr (car (cdr test_list)))) (car test_list)]\n    [else (index_minimum (cdr test_list))]))\n",
    "  (define (index_minimum_helper test_list index min)\n    (cond\n      [(empty? test_list) index]\n      [(< (second (first test_list)) min) (index_minimum_helper (rest test_list) (first test_list) (second (first test_list)))]\n      [else (index_minimum_helper (rest test_list) index min)]))\n  (index_minimum_helper test_list (first test_list) (second (first test_list))))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let*\n         ([min_index (index_minimum (rest test_list))]\n          [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n          [current_index (if (empty? min_index) 0 (add1 min_index))]\n          [current_value (second (list-ref test_list current_index))])\n       (if (or (empty? min_index) (< current_value min_value))\n           current_index\n           min_index))]))\n",
    "  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((&lt; (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n</code>\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list)))]\n          [else (loop (cdr test_list)\n                      min_index\n                      min_value)])))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_list_second_value (second first_list)]\n            [second_list_second_value (second second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           first_list\n           (index_minimum (rest test_list))))]))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (if (null? test_list)\n        min_index\n        (let ([current_index (add1 min_index)]\n              [current_value (second (car test_list))])\n          (if (&lt; current_value min_value)\n              (loop (cdr test_list) current_index current_value)\n              (loop (cdr test_list) min_index min_value))))))\n",
    "  (define (index_minimum_helper test_list index)\n    (if (null? test_list)\n        index\n        (if (< (cadr (car test_list)) (cadr (list-ref test_list index)))\n            (index_minimum_helper (cdr test_list) (car test_list))\n            (index_minimum_helper (cdr test_list) index))))\n  (index_minimum_helper test_list (car test_list)))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else\n     (let* ([min_index (list-ref test_list 0)]\n            [min_value (list-ref (list-ref test_list 0) 1)])\n       (for ([i (in-range (length test_list))])\n         (let* ([curr_index (list-ref test_list i)]\n                [curr_value (list-ref (list-ref test_list i) 1)])\n           (when (< curr_value min_value)\n             (set! min_index curr_index)\n             (set! min_value curr_value))))\n       min_index)]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n            [current_value (second (first test_list))])\n       (if (empty? min_index)\n           0\n           (if (< current_value min_value)\n               0\n               (add1 min_index))))]))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (for/first ([x test_list]\n                #:when (equal? (second x) min_index))\n      (first x))))\n",
    "  (let* ([min_index (apply min (map second test_list))]\n         [min_index_list (filter (lambda (x) (= min_index (second x))) test_list)])\n    (first (first min_index_list))))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (if (null? test_list)\n        min_index\n        (let ([value (second (car test_list))])\n          (if (< value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n",
    "  (let ([min_index (index_minimum_helper test_list 0)])\n    (list-ref test_list min_index)))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n",
    "  (let ([min_index (argmin (map second test_list))])\n    (list-ref test_list min_index)))\n",
    "  (letrec ([min_index (lambda (index)\n                        (if (null? (cdr test_list))\n                            index\n                            (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n                                (min_index index)\n                                (min_index (add1 index)))))])\n    (car (list-ref test_list (min_index 0)))))\n",
    "  (let ([min_index (first (min-indexes (map second test_list)))]\n        [min_value (nth test_list min_index)])\n    (first min_value)))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list))) (loop (cdr test_list) (add1 min_index) min_value)]\n          [else (loop (cdr test_list) min_index (second (car test_list)))])))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n",
    "  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(empty? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list)))]\n          [else (loop (cdr test_list)\n                      min_index\n                      min_value)])))\n",
    "  (cond\n    [(null? test_list) '()]\n    [else (index_minimum_helper test_list (car test_list) 0)]))\n",
    "  (let ([min_index (apply min (map second test_list))])\n    (first (filter (lambda (x) (= (second x) min_index)) test_list))))\n",
    "  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [(< (cadr (car test_list)) (cadr (cadr test_list))) (car test_list)]\n    [else (index_minimum (cdr test_list))]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (list-ref (rest test_list) min_index))]\n            [current_value (list-ref (rest test_list) 0)])\n       (if (empty? min_index) 0\n           (if (< min_value current_value) min_index 0)))]))\n"
  ]
}