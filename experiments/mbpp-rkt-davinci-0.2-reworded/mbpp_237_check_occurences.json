{
  "name": "mbpp_237_check_occurences",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list of lists and returns a hash mapping each unique list to the number of times it occurs in the list.\n(define (check_occurences test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([occurences (make-hash)])\n    (for ([lst test_list])\n      (hash-update! occurences lst add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (if (hash-has-key? occurences item)\n          (hash-update! occurences item add1)\n          (hash-set! occurences item 1)))\n    occurences))\n",
    "  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (check_occurences_helper (rest test_list) (hash-update (first test_list) add1 1 result))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ([hash (make-hash)])\n    (for ([i test_list])\n      (hash-update hash i add1 0))\n    hash))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ((occurences (make-hash)))\n    (for ([x test_list])\n      (hash-update! occurences x add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 1))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([element test_list])\n      (hash-update! occurences element add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (letrec ([occurrences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurrences item add1 0))\n    occurrences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-set! occurences i (add1 (hash-ref occurences i 0))))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (hash-update (first test_list) (lambda (x) (+ x 1)) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(hash-has-key? acc (first test_list))\n       (hash-set acc (first test_list) (+ 1 (hash-ref acc (first test_list))))]\n      [else (hash-set acc (first test_list) 1)]))\n  (check_occurences_helper test_list (make-hash)))\n",
    "  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n",
    "  (letrec ([occurences (for/hash ([item (in-list test_list)])\n                          (values item (count item test_list)))]\n           [unique_lists (for/list ([item (in-list test_list)])\n                           (if (hash-ref occurences item 0)\n                               item\n                               '()))])\n    (hash-remove occurences '())))\n",
    "  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update! occurences i add1 0))\n    occurences))\n",
    "  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (hash-update (first test_list) (lambda (k v) (+ v 1)) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n"
  ]
}