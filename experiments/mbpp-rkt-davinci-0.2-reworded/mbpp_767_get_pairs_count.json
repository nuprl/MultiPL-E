{
  "name": "mbpp_767_get_pairs_count",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n(define (get_pairs_count arr sum)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_pairs_count))\n    (check-equal? (candidate (list 1 1 1 1) 2) 6)\n    (check-equal? (candidate (list 1 5 7 -1 5) 6) 3)\n    (check-equal? (candidate (list 1 -2 3) 1) 1)\n    (check-equal? (candidate (list -1 -2 3) -3) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (letrec ([count (lambda (arr sum)\n                    (cond [(empty? arr) 0]\n                          [(= sum (car arr)) (+ 1 (count (cdr arr) sum))]\n                          [else (count (cdr arr) sum)]))]\n           [count_all (lambda (arr sum)\n                        (cond [(empty? arr) 0]\n                              [else (+ (count (cdr arr) (- sum (car arr)))\n                                       (count_all (cdr arr) sum))]))])\n    (count_all arr sum)))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 count))]\n      [else (get_pairs_count_helper (rest arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (if (= (sum (first arr) (second arr)) sum)\n             (+ 1 (get_pairs_count (rest arr) sum))\n             (get_pairs_count (rest arr) sum))]))\n",
    "  (define (get_pairs_count_helper arr sum acc)\n    (cond\n      [(empty? arr) acc]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 acc))]\n      [else (get_pairs_count_helper (cdr arr) sum acc)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum i)\n    (cond\n      [(= i (length arr)) 0]\n      [(= sum (+ (list-ref arr i) (list-ref arr (- (length arr) i 1)))) (+ 1 (get_pairs_count_helper arr sum (+ i 1)))]\n      [else (get_pairs_count_helper arr sum (+ i 1))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= (sum (first arr) (second arr)) sum) (loop (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
    "  (cond [(empty? arr) 0]\n        [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n        [else (get_pairs_count (rest arr) sum)]))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) count)]\n      [else\n       (loop (add1 i) j count)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (define (helper arr sum count)\n    (if (null? arr)\n        count\n        (if (member (sub1 sum (car arr)) arr)\n            (helper (cdr arr) sum (add1 count))\n            (helper (cdr arr) sum count))))\n  (helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member sum (rest arr)) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [j (sub1 len)] [count 0])\n      (cond\n        [(> i j) count]\n        [(= (add1 i) j) (if (= (add (list-ref arr i) (list-ref arr j)) sum) (add1 count) count)]\n        [(= (add (list-ref arr i) (list-ref arr j)) sum) (loop (add1 i) (sub1 j) (add1 count))]\n        [(> (add (list-ref arr i) (list-ref arr j)) sum) (loop i (sub1 j) count)]\n        [else (loop (add1 i) j count)]))))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (if (= sum (+ first (first rest)))\n           (+ 1 (get_pairs_count (rest rest) sum))\n           (get_pairs_count rest sum)))]))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) (+ count 1))\n            (loop (cdr arr) count)))))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (helper (cdr arr) sum (+ count 1))]\n      [else (helper (cdr arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [else\n       (define first (first arr))\n       (define rest (rest arr))\n       (define rest_pairs_count (get_pairs_count_helper rest sum pairs_count))\n       (cond\n         [(member (- sum first) rest) (+ rest_pairs_count 1)]\n         [else rest_pairs_count])]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [else (get_pairs_count_helper (rest arr) sum\n                                    (+ pairs_count (if (member (sub1 sum (first arr)) arr) 1 0)))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= (sum (first arr) (second arr)) sum) (helper (rest (rest arr)) sum (+ count 1))]\n      [else (helper (rest arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum_of_pair (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= (sum (first arr) (second arr)) sum) (get_pairs_count_helper (rest arr) sum (+ count 1))]\n      [else (get_pairs_count_helper (rest arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (+ (if (member sum (rest arr)) 1 0)\n        (get_pairs_count (rest arr) sum))]))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) j count)]\n          [else (loop i (sub1 j) count)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (+ (if (member (sub1 sum (first arr)) (rest arr)) 1 0)\n        (get_pairs_count (rest arr) sum))]))\n",
    "  (let ([n (length arr)])\n    (let loop ([i 0] [j (- n 1)] [count 0])\n      (cond\n        [(= i j) count]\n        [(= (+ (list-ref arr i) (list-ref arr j)) sum)\n         (loop (+ i 1) (- j 1) (+ count 2))]\n        [else (loop (+ i 1) (- j 1) count)]))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (+ (if (member sum (cons first rest)) 1 0)\n          (get_pairs_count rest sum)))]))\n",
    "  (cond [(empty? arr) 0]\n        [else (cond [(= (first arr) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n                    [else (get_pairs_count (rest arr) sum)])]))\n",
    "  (define (helper arr sum acc)\n    (cond\n      [(empty? arr) acc]\n      [(= (first arr) sum) (helper (rest arr) sum (+ acc 1))]\n      [else (helper (rest arr) sum acc)]))\n  (helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) count)]\n      [else (loop (add1 i) j count)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (cond\n         [(= sum first) (+ 1 (get_pairs_count (rest arr) sum))]\n         [else (get_pairs_count (rest arr) sum)]))]))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ count 1))\n            (get_pairs_count_helper (cdr arr) sum count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let* ([first (first arr)]\n            [rest (rest arr)]\n            [rest-pairs-count (get_pairs_count rest sum)])\n       (cond\n         [(= first (- sum (first rest))) (+ 1 rest-pairs-count)]\n         [else rest-pairs-count]))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let* ([first (first arr)]\n            [rest (rest arr)]\n            [rest-count (get_pairs_count rest sum)]\n            [first-count (get_pairs_count rest (- sum first))])\n       (+ rest-count first-count))]))\n",
    "  (cond [(empty? arr) 0]\n        [else (cond [(= sum (add1 (car arr))) (add1 (get_pairs_count (cdr arr) sum))]\n                    [else (get_pairs_count (cdr arr) sum)])]))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) (rest arr))\n       (get_pairs_count_helper (rest arr) sum (add1 count))]\n      [else (get_pairs_count_helper (rest arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond [(empty? arr) 0]\n        [else (let ([x (first arr)]\n                     [xs (rest arr)])\n                (+ (if (member sum (- sum x)) 1 0)\n                   (get_pairs_count xs sum)))]))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i (sub1 j)) count]\n      [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) count)]\n      [else (loop (add1 i) j count)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (first arr) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member sum (rest arr)) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (cond [(empty? arr) 0]\n        [else (let ([first (first arr)]\n                    [rest (rest arr)])\n                (+ (if (member sum (cons first rest)) 1 0)\n                   (get_pairs_count rest sum)))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([count 0])\n    (for ([i (in-range (length arr))])\n      (for ([j (in-range (length arr))])\n        (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n            (set! count (+ count 1)))))\n    count))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (add1 (first arr))) (helper (rest arr) sum (add1 count))]\n      [else (helper (rest arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (define (helper arr sum)\n    (cond\n      [(empty? arr) 0]\n      [(= (first arr) sum) (+ 1 (helper (rest arr) sum))]\n      [else (helper (rest arr) sum)]))\n  (helper arr sum))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= sum (add1 (car arr))) (add1 (get_pairs_count (cdr arr) sum))]\n    [else (get_pairs_count (cdr arr) sum)]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= (sum (first arr) (second arr)) sum) (loop (rest (rest arr)) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ count 1))\n            (get_pairs_count_helper (cdr arr) sum count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (+ (if (= (sum (first arr) (second arr)) sum) 1 0)\n            (get_pairs_count (rest arr) sum))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (cond\n       [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n       [else (get_pairs_count (rest arr) sum)])]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member sum (map (lambda (x) (- sum x)) arr)) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (define (helper arr sum)\n    (if (null? arr)\n        0\n        (if (= (car arr) sum)\n            (+ (helper (cdr arr) sum) 1)\n            (helper (cdr arr) sum))))\n  (helper arr sum))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond [(empty? arr) pairs_count]\n          [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs_count))]\n          [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (cond [(empty? arr) 0]\n        [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n        [else (get_pairs_count (rest arr) sum)]))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (let ([first (first arr)]\n               [rest (rest arr)])\n           (+ (if (= (+ first (first rest)) sum) 1 0)\n              (get_pairs_count rest sum)))]))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (if (= (sum (first arr) (second arr)) sum)\n             (+ 1 (get_pairs_count (rest (rest arr)) sum))\n             (get_pairs_count (rest arr) sum))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (+ (if (member (sub1 sum (first arr)) (rest arr)) 1 0)\n        (get_pairs_count (rest arr) sum))]))\n",
    "  (define (get_pairs_count_helper arr sum i)\n    (cond\n      [(empty? arr) 0]\n      [(= (list-ref arr i) sum) (+ 1 (get_pairs_count_helper arr sum (+ i 1)))]\n      [else (get_pairs_count_helper arr sum (+ i 1))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= sum (car arr)) (+ 1 (get_pairs_count (cdr arr) sum))]\n    [else (get_pairs_count (cdr arr) sum)]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member sum (rest arr)) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (define (get_pairs_count_helper arr sum)\n    (cond [(empty? arr) 0]\n          [(= (car arr) sum) (+ 1 (get_pairs_count_helper (cdr arr) sum))]\n          [else (get_pairs_count_helper (cdr arr) sum)]))\n  (get_pairs_count_helper arr sum))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (+ (get_pairs_count rest sum)\n          (if (member? (- sum first) rest)\n              1\n              0)))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (cond\n         [(= sum (+ first (first rest)))\n          (+ 1 (get_pairs_count rest sum))]\n         [else\n          (get_pairs_count rest sum)]))]))\n",
    "  (cond [(empty? arr) 0]\n        [else (let ([first (first arr)])\n                (cond [(empty? (rest arr)) 0]\n                      [(= (+ first (first (rest arr))) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n                      [else (get_pairs_count (rest arr) sum)]))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= (sum (first arr) (second arr)) sum) (helper (rest (rest arr)) sum (+ count 1))]\n      [else (helper (rest arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (cond [(null? arr) 0]\n        [else (let ([first (car arr)]\n                   [rest (cdr arr)])\n                (+ (if (= (+ first (car rest)) sum) 1 0)\n                   (get_pairs_count rest sum)))]))\n",
    "  (cond [(empty? arr) 0]\n        [else (let ([first (first arr)])\n                (cond [(= first sum) (+ 1 (get_pairs_count (rest arr) sum))]\n                      [else (get_pairs_count (rest arr) sum)]))]))\n",
    "  (define (get_pairs_count_helper arr sum acc)\n    (cond\n      [(empty? arr) acc]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 acc))]\n      [else (get_pairs_count_helper (cdr arr) sum acc)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (length (filter (lambda (x) (member (- sum x) arr)) arr)))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(>= i j) count]\n          [(= (add (list-ref arr i) (list-ref arr j)) sum)\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [else (loop (add1 i) j count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (if (null? arr)\n        pairs_count\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))\n            (get_pairs_count_helper (cdr arr) sum pairs_count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum i)\n    (cond\n      [(= i (length arr)) 0]\n      [(= (list-ref arr i) sum) (+ 1 (get_pairs_count_helper arr sum (+ i 1)))]\n      [(= (list-ref arr i) (- sum (list-ref arr (+ i 1)))) (+ 1 (get_pairs_count_helper arr sum (+ i 2)))]\n      [else (get_pairs_count_helper arr sum (+ i 1))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member (- sum first) arr) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (cond\n         [(= first sum) (+ 1 (get_pairs_count (rest arr) sum))]\n         [(= (first arr) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n         [else (get_pairs_count (rest arr) sum)]))]))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [else (let ([first (first arr)])\n                  (loop (rest arr)\n                        (+ count\n                           (let loop ([arr arr] [count 0])\n                             (cond [(empty? arr) count]\n                                   [else (let ([second (first arr)])\n                                           (if (= (+ first second) sum)\n                                               (loop (rest arr) (+ count 1))\n                                               (loop (rest arr) count)))])\n                             )))))])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (if (null? arr)\n        pairs_count\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))\n            (get_pairs_count_helper (cdr arr) sum pairs_count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([len (length arr)])\n    (for/sum ([i (in-range len)]\n              [j (in-range i len)])\n      (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n          1\n          0))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let* ([first (first arr)]\n            [rest (rest arr)]\n            [rest-count (get_pairs_count rest sum)])\n       (cond\n         [(= (+ first (first rest)) sum) (+ 1 rest-count)]\n         [else rest-count]))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member (- sum first) (rest arr)) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (let* ([first (first arr)]\n                [rest (rest arr)]\n                [rest-sum (- sum first)]\n                [rest-count (get_pairs_count rest rest-sum)])\n           (if (member rest-sum rest)\n               (+ rest-count 1)\n               rest-count))]))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [else\n       (let ([first (first arr)] [rest (rest arr)])\n         (loop rest sum\n               (+ count (length (filter (lambda (x) (= (+ first x) sum)) rest)))))])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum_of_pair (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) arr) (get_pairs_count_helper (rest arr) sum (add1 count))]\n      [else (get_pairs_count_helper (rest arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([len (length arr)])\n    (for/fold ([count 0])\n              ([i (in-range len)])\n      (for/fold ([count count])\n                ([j (in-range (add1 i))])\n        (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n            (add1 count)\n            count)))))\n",
    "  (cond [(empty? arr) 0]\n        [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n        [else (get_pairs_count (rest arr) sum)]))\n",
    "  (define (helper arr sum acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (helper (cdr arr) sum (+ acc 1))\n            (helper (cdr arr) sum acc))))\n  (helper arr sum 0))\n",
    "  (let loop ([arr arr]\n             [sum sum]\n             [count 0])\n    (if (null? arr)\n        count\n        (if (= (car arr) sum)\n            (loop (cdr arr) sum (+ count 1))\n            (loop (cdr arr) sum count)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (cond [(empty? arr) 0]\n        [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n        [else (get_pairs_count (rest arr) sum)]))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (add1 (first arr))) (helper (rest arr) sum (add1 count))]\n      [else (helper (rest arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member sum (rest arr)) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (let ([count 0])\n    (for ([i (in-range (length arr))])\n      (for ([j (in-range (length arr))])\n        (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n            (set! count (+ count 1)))))\n    count))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [else\n       (define first_element (first arr))\n       (define second_element (second arr))\n       (define rest_of_arr (rest (rest arr)))\n       (if (= (+ first_element second_element) sum)\n           (get_pairs_count_helper rest_of_arr sum (+ pairs_count 1))\n           (get_pairs_count_helper rest_of_arr sum pairs_count))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (if (null? arr)\n        pairs_count\n        (if (member (car arr) arr)\n            (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))\n            (get_pairs_count_helper (cdr arr) sum pairs_count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(null? arr) 0]\n    [(= (list-ref arr 0) sum) (+ 1 (get_pairs_count (cdr arr) sum))]\n    [else (get_pairs_count (cdr arr) sum)]))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i (- len 1)) count]\n        [(= (list-ref arr i) (list-ref arr (- len 1)))\n         (loop (+ i 1) count)]\n        [(= (+ (list-ref arr i) (list-ref arr (- len 1))) sum)\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) arr)\n       (get_pairs_count_helper (rest arr) sum (add1 count))]\n      [else (get_pairs_count_helper (rest arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member (- sum first) (rest arr)) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (let ([first (first arr)]\n               [rest (rest arr)])\n           (+ (get_pairs_count rest sum)\n              (if (member (- sum first) rest) 1 0)))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (car arr)) (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))]\n      [(> sum (car arr)) (get_pairs_count_helper (cdr arr) sum pairs_count)]\n      [else (get_pairs_count_helper (cdr arr) (- sum (car arr)) pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum i)\n    (cond [(= i (length arr)) 0]\n          [(= (+ (list-ref arr i) (list-ref arr (- (length arr) i 1))) sum) (+ 1 (get_pairs_count_helper arr sum (+ i 1)))]\n          [else (get_pairs_count_helper arr sum (+ i 1))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (if (member sum (cons first rest))\n           (+ 1 (get_pairs_count rest sum))\n           (get_pairs_count rest sum)))]))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= (car arr) sum) (loop (cdr arr) sum (+ count 1))]\n          [(= (car arr) 0) (loop (cdr arr) sum (+ count 1))]\n          [else (loop (cdr arr) sum count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(> i j) count]\n          [(= (add (list-ref arr i) (list-ref arr j)) sum)\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(> (add (list-ref arr i) (list-ref arr j)) sum)\n           (loop (add1 i) (sub1 j) count)]\n          [else (loop (add1 i) j count)])))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (helper (cdr arr) sum (+ count 1))]\n      [else (helper (cdr arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum_of_pair (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([a (first arr)])\n       (cond\n         [(= a sum) (+ 1 (get_pairs_count (rest arr) sum))]\n         [(= a 0) (get_pairs_count (rest arr) sum)]\n         [else (get_pairs_count (rest arr) (- sum a))]))]))\n",
    "  (define (get_pairs_count_helper arr sum)\n    (cond\n      [(empty? arr) 0]\n      [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count_helper (rest arr) sum))]\n      [else (get_pairs_count_helper (rest arr) sum)]))\n  (get_pairs_count_helper arr sum))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (+ (if (member sum (cons first rest)) 1 0)\n          (get_pairs_count rest sum)))]))\n",
    "  (cond [(empty? arr) 0]\n        [else (cond [(= (first arr) sum) 1]\n                    [else (cond [(= (first arr) (sub1 sum)) 1]\n                                [else (cond [(= (first arr) (add1 sum)) 1]\n                                            [else (cond [(= (first arr) (sub1 (sub1 sum))) 1]\n                                                        [else (cond [(= (first arr) (add1 (add1 sum))) 1]\n                                                                    [else (cond [(= (first arr) (sub1 (sub1 (sub1 sum)))) 1]\n                                                                                [else (cond [(= (first arr) (add1 (add1 (add1 sum)))) 1]\n                                                                                            [else (cond [(= (first arr) (sub1 (sub1 (sub1 (sub1 sum))))) 1]\n                                                                                                        [else (cond [(= (first arr) (add1 (add1 (add1 (add1 sum))))) 1]\n                                                                                                                    [else (cond [(= (first arr) (sub1 (sub1 (sub1 (sub1 (sub1 sum)))))) 1]\n                                                                                                                                [else (cond [(= (first arr) (add1 (add1 (add1 (add1 (add1 sum)))))) 1]\n                                                                                                                                            [else (cond [(= (first arr) (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 sum))))))) 1]\n                                                                                                                                                        [else (cond [(= (first arr) (add1 (add1 (add1 (add1 (add1 (add1 sum))))))) 1]\n                                                                                                                                                                    [else (cond [(= (first arr) (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 (sub1 sum)))))))) 1]\n                                                                                                                                                                                [else (cond [(= (first arr) (add1 (add1 (add1 (add1 (add1 (add1 (add1 sum)))))))) 1]\n                                                                                                                                                                                            [else",
    "  (define (get_pairs_count_iter arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) (rest arr)) (get_pairs_count_iter (rest arr) sum (add1 count))]\n      [else (get_pairs_count_iter (rest arr) sum count)]))\n  (get_pairs_count_iter arr sum 0))\n",
    "  (let loop ((i 0) (j (add1 (length arr))) (count 0))\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) count)]\n      [else (loop (add1 i) j count)])))\n",
    "  (let ([count 0])\n    (for ([i (in-range (length arr))])\n      (for ([j (in-range (length arr))])\n        (when (= (+ (list-ref arr i) (list-ref arr j)) sum)\n          (set! count (+ count 1)))))\n    count))\n",
    "  (cond [(empty? arr) 0]\n        [else (cond [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n                   [else (get_pairs_count (rest arr) sum)])]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (if (member sum (cons first rest))\n           (+ 1 (get_pairs_count rest sum))\n           (get_pairs_count rest sum)))]))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= (list-ref arr 0) sum)\n       (helper (rest arr) sum (+ count 1))]\n      [(> (list-ref arr 0) sum)\n       (helper (rest arr) sum count)]\n      [else\n       (helper (rest arr) (- sum (list-ref arr 0)) count)]))\n  (helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member sum (- first (rest arr))) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum)\n       (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else\n       (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (letrec ([helper (lambda (arr sum)\n                     (cond [(empty? arr) 0]\n                           [(= sum (car arr)) (+ (helper (cdr arr) sum) 1)]\n                           [else (helper (cdr arr) sum)]))])\n    (helper arr sum)))\n",
    "  (cond [(empty? arr) 0]\n        [else (let ([first (first arr)])\n                (cond [(= sum first) (+ 1 (get_pairs_count (rest arr) sum))]\n                      [else (get_pairs_count (rest arr) sum)]))]))\n",
    "  (cond [(empty? arr) 0]\n        [else (+ (get_pairs_count (cdr arr) sum)\n                 (get_pairs_count (cdr arr) (- sum (car arr))))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (cond [(empty? arr) 0]\n        [else (let ([first (first arr)])\n                (+ (if (= (+ first (second arr)) sum) 1 0)\n                   (get_pairs_count (rest arr) sum)))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (if (null? arr)\n        pairs_count\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))\n            (get_pairs_count_helper (cdr arr) sum pairs_count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (cond\n         [(member sum (cons first rest)) (+ 1 (get_pairs_count rest sum))]\n         [else (get_pairs_count rest sum)]))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (+ (get_pairs_count (rest arr) sum)\n        (get_pairs_count (rest arr) (- sum (first arr))))]))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) (rest arr)) (loop (rest arr) sum (add1 count))]\n      [else (loop (rest arr) sum count)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (+ (get_pairs_count (rest arr) sum)\n        (get_pairs_count (rest arr) (- sum (first arr))))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (+ (if (member sum (cons first rest)) 1 0)\n          (get_pairs_count rest sum)))]))\n",
    "  (define (get_pairs_count_helper arr sum i)\n    (cond\n      [(= i (length arr)) 0]\n      [(= sum (+ (list-ref arr i) (list-ref arr (- (length arr) i 1)))) (+ 1 (get_pairs_count_helper arr sum (+ i 1)))]\n      [else (get_pairs_count_helper arr sum (+ i 1))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) (rest arr)) (loop (rest arr) (+ count 1))]\n      [else (loop (rest arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (car arr)) (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (let ([first (first arr)]\n               [rest (rest arr)])\n           (+ (if (= (+ first (first rest)) sum) 1 0)\n              (get_pairs_count rest sum)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i j)\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (loop (add1 i) (sub1 j) count))\n        count)))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) arr)\n       (get_pairs_count_helper (rest arr) sum (add1 count))]\n      [else (get_pairs_count_helper (rest arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(null? arr) 0]\n    [(= (sum (car arr) (cadr arr)) sum) (+ 1 (get_pairs_count (cdr arr) sum))]\n    [else (get_pairs_count (cdr arr) sum)]))\n",
    "  (cond [(empty? arr) 0]\n        [else (cond [(= (sum_of_first_two arr) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n                    [else (get_pairs_count (rest arr) sum)])]))\n",
    "  (cond [(empty? arr) 0]\n        [else (let ([first (first arr)])\n                (+ (if (= (+ first (second arr)) sum) 1 0)\n                   (get_pairs_count (rest arr) sum)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (if (member (- sum first) (rest arr))\n           (+ 1 (get_pairs_count (rest arr) sum))\n           (get_pairs_count (rest arr) sum)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let* ([first (first arr)]\n            [rest (rest arr)]\n            [rest-sum (- sum first)]\n            [rest-count (get_pairs_count rest rest-sum)])\n       (cond\n         [(member rest-sum rest) (+ rest-count 1)]\n         [else rest-count]))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (car arr) sum) (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum result)\n    (cond\n      [(empty? arr) result]\n      [(member (car arr) (cdr arr)) (get_pairs_count_helper (cdr arr) sum (+ result 1))]\n      [else (get_pairs_count_helper (cdr arr) sum result)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([pairs (filter (lambda (x) (= (sum x) sum)) (combinations 2 arr))])\n    (length pairs)))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) count)]\n      [else (loop (add1 i) j count)])))\n",
    "  (define (get_pairs_count_helper arr sum acc)\n    (cond\n      [(empty? arr) acc]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 acc))]\n      [else (get_pairs_count_helper (cdr arr) sum acc)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= (sum_of_pair (first arr) (second arr)) sum) (get_pairs_count_helper (rest arr) sum (+ count 1))]\n      [else (get_pairs_count_helper (rest arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 count))]\n      [else (get_pairs_count_helper (rest arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (+ (if (member (- sum first) rest) 1 0)\n          (get_pairs_count rest sum)))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum i)\n    (if (= i (length arr))\n        0\n        (+ (if (equal? sum (+ (list-ref arr i) (list-ref arr (- (length arr) i))))\n               1\n               0)\n           (get_pairs_count_helper arr sum (+ i 1)))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [j (sub1 len)] [count 0])\n      (cond\n        [(> i j) count]\n        [(= (add1 i) j) (if (= (add (list-ref arr i) (list-ref arr j)) sum) (add1 count) count)]\n        [(= (add (list-ref arr i) (list-ref arr j)) sum) (loop (add1 i) (sub1 j) (add1 count))]\n        [(< (add (list-ref arr i) (list-ref arr j)) sum) (loop (add1 i) j count)]\n        [(> (add (list-ref arr i) (list-ref arr j)) sum) (loop i (sub1 j) count)]))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member (sub1 sum first) (rest arr)) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(= (car arr) sum) (loop (cdr arr) sum (+ count 1))]\n      [(= (car arr) 0) (loop (cdr arr) sum (+ count 1))]\n      [else (loop (cdr arr) sum count)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (if (member sum (rest arr))\n           (+ 1 (get_pairs_count (rest arr) sum))\n           (get_pairs_count (rest arr) sum)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (cond [(empty? arr) 0]\n        [else (let ([head (first arr)]\n                     [tail (rest arr)])\n                (cond [(= sum (+ head (first tail))) (+ 1 (get_pairs_count tail sum))]\n                      [else (get_pairs_count tail sum)]))]))\n",
    "  (cond [(empty? arr) 0]\n        [else (let ([n (first arr)])\n                (+ (if (= sum (+ n (second arr))) 1 0)\n                   (get_pairs_count (rest arr) sum)))]))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n          [else (loop (cdr arr) sum count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (apply + (take 2 arr)))\n           (loop (drop 2 arr) (+ count 1))]\n          [else (loop (drop 1 arr) count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n          [else (loop (cdr arr) sum count)])))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ count 1))\n            (get_pairs_count_helper (cdr arr) sum count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) (rest arr)) (loop (rest arr) (add1 count))]\n      [else (loop (rest arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum_of_pair (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (let ([first (first arr)]\n               [rest (rest arr)])\n           (+ (if (= (+ first (first rest)) sum) 1 0)\n              (get_pairs_count rest sum)))]))\n",
    "  (cond [(empty? arr) 0]\n        [else (if (= (sum (first arr) (second arr)) sum)\n                 (+ 1 (get_pairs_count (rest arr) sum))\n                 (get_pairs_count (rest arr) sum))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(null? arr) pairs_count]\n      [(= sum (car arr)) (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (let ([first (car arr)]\n              [rest (cdr arr)])\n          (loop rest\n               (if (member (- sum first) rest)\n                   (+ count 1)\n                   count))))))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (if (= (sum (first arr) (second arr)) sum)\n             (+ 1 (get_pairs_count (rest (rest arr)) sum))\n             (get_pairs_count (rest arr) sum))]))\n",
    "  (let ([count 0])\n    (for ([i (in-list arr)])\n      (for ([j (in-list arr)])\n        (when (= (+ i j) sum)\n          (set! count (+ count 1)))))\n    count))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i j)\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (if (&lt; (list-ref arr i) (list-ref arr j))\n                (loop (add1 i) j count)\n                (loop i (sub1 j) count)))\n        count)))\n</code>\nI'm trying to write a function that gets as input a list of numbers and the sum, and returns the number of pairs whose sum is equal to the sum.\nFor example, if the list is <code>(1 2 3 4 5 6 7 8 9 10)</code> and the sum is <code>10</code>, the function should return <code>2</code> (because <code>(1 9)</code> and <code>(2 8)</code> are the pairs whose sum is <code>10</code>).\nI tried to write the function, but it doesn't work.\nWhat's wrong with my code?\n\n\nA:\n\nI think you're overcomplicating things. You can simply use <code>for/fold</code> to iterate over the list and count the number of times that the sum of two elements is equal to the given number. Here's an implementation:\n<code>(define (get-pairs-count lst sum)\n  (for/fold ([count 0])\n            ([x (in-list lst)]\n             [y (in-list lst)])\n    (if (= (+ x y) sum)\n        (add1 count)\n        count)))\n</code>\nIt works as expected:\n<code>(get-pairs-count '(1 2 3 4 5 6 7 8 9 10) 10)\n=&gt; 2\n</code>\n",
    "  (if (null? arr)\n      0\n      (if (= (car arr) sum)\n          (+ 1 (get_pairs_count (cdr arr) sum))\n          (get_pairs_count (cdr arr) sum))))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= (sum (first arr) (second arr)) sum) (helper (rest arr) sum (+ count 1))]\n      [else (helper (rest arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond [(empty? arr) pairs_count]\n          [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs_count))]\n          [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (+ (get_pairs_count rest sum)\n          (get_pairs_count rest (- sum first))))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest arr) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (define (get_pairs_count_helper arr sum i j)\n    (cond\n      [(= i j) 0]\n      [(= (+ (list-ref arr i) (list-ref arr j)) sum) (+ 1 (get_pairs_count_helper arr sum (+ i 1) (+ j 1)))]\n      [else (get_pairs_count_helper arr sum (+ i 1) (+ j 1))]))\n  (get_pairs_count_helper arr sum 0 (sub1 (length arr))))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (let ([first (first arr)]\n               [rest (rest arr)])\n           (+ (if (= (+ first (last arr)) sum) 1 0)\n              (get_pairs_count rest sum)))]))\n"
  ]
}