{
  "name": "mbpp_767_get_pairs_count",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n(define (get_pairs_count arr sum)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_pairs_count))\n    (check-equal? (candidate (list 1 1 1 1) 2) 6)\n    (check-equal? (candidate (list 1 5 7 -1 5) 6) 3)\n    (check-equal? (candidate (list 1 -2 3) 1) 1)\n    (check-equal? (candidate (list -1 -2 3) -3) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (letrec ([count (lambda (arr sum)\n                    (cond [(empty? arr) 0]\n                          [(= sum (car arr)) (+ 1 (count (cdr arr) sum))]\n                          [else (count (cdr arr) sum)]))]\n           [count_all (lambda (arr sum)\n                        (cond [(empty? arr) 0]\n                              [else (+ (count (cdr arr) (- sum (car arr)))\n                                       (count_all (cdr arr) sum))]))])\n    (count_all arr sum)))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 count))]\n      [else (get_pairs_count_helper (rest arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond [(empty? arr) 0]\n        [else\n         (if (= (sum (first arr) (second arr)) sum)\n             (+ 1 (get_pairs_count (rest arr) sum))\n             (get_pairs_count (rest arr) sum))]))\n",
    "  (define (get_pairs_count_helper arr sum acc)\n    (cond\n      [(empty? arr) acc]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 acc))]\n      [else (get_pairs_count_helper (cdr arr) sum acc)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum i)\n    (cond\n      [(= i (length arr)) 0]\n      [(= sum (+ (list-ref arr i) (list-ref arr (- (length arr) i 1)))) (+ 1 (get_pairs_count_helper arr sum (+ i 1)))]\n      [else (get_pairs_count_helper arr sum (+ i 1))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= (sum (first arr) (second arr)) sum) (loop (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
    "  (cond [(empty? arr) 0]\n        [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n        [else (get_pairs_count (rest arr) sum)]))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) count)]\n      [else\n       (loop (add1 i) j count)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(= (sum (first arr) (second arr)) sum) (+ 1 (get_pairs_count (rest (rest arr)) sum))]\n    [else (get_pairs_count (rest arr) sum)]))\n",
    "  (define (helper arr sum count)\n    (if (null? arr)\n        count\n        (if (member (sub1 sum (car arr)) arr)\n            (helper (cdr arr) sum (add1 count))\n            (helper (cdr arr) sum count))))\n  (helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (if (member sum (rest arr)) 1 0)\n          (get_pairs_count (rest arr) sum)))]))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [j (sub1 len)] [count 0])\n      (cond\n        [(> i j) count]\n        [(= (add1 i) j) (if (= (add (list-ref arr i) (list-ref arr j)) sum) (add1 count) count)]\n        [(= (add (list-ref arr i) (list-ref arr j)) sum) (loop (add1 i) (sub1 j) (add1 count))]\n        [(> (add (list-ref arr i) (list-ref arr j)) sum) (loop i (sub1 j) count)]\n        [else (loop (add1 i) j count)]))))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (if (= sum (+ first (first rest)))\n           (+ 1 (get_pairs_count (rest rest) sum))\n           (get_pairs_count rest sum)))]))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) (+ count 1))\n            (loop (cdr arr) count)))))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (helper (cdr arr) sum (+ count 1))]\n      [else (helper (cdr arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [else\n       (define first (first arr))\n       (define rest (rest arr))\n       (define rest_pairs_count (get_pairs_count_helper rest sum pairs_count))\n       (cond\n         [(member (- sum first) rest) (+ rest_pairs_count 1)]\n         [else rest_pairs_count])]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [else (get_pairs_count_helper (rest arr) sum\n                                    (+ pairs_count (if (member (sub1 sum (first arr)) arr) 1 0)))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= (sum (first arr) (second arr)) sum) (helper (rest (rest arr)) sum (+ count 1))]\n      [else (helper (rest arr) sum count)]))\n  (helper arr sum 0))\n"
  ]
}