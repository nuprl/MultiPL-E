{
  "name": "mbpp_580_extract_even",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove uneven elements in the nested mixed list.\n(define (extract_even test_tuple)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_even))\n    (check-equal? (candidate (list 4 5 (list 7 6 (list 2 4)) 6 8)) (list 4 (list 6 (list 2 4)) 6 8))\n    (check-equal? (candidate (list 5 6 (list 8 7 (list 4 8)) 7 9)) (list 6 (list 8 (list 4 8))))\n    (check-equal? (candidate (list 5 6 (list 9 8 (list 4 6)) 8 10)) (list 6 (list 8 (list 4 6)) 8 10))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple))\n     (cons (car test_tuple)\n           (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) '()]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) '()]\n    [(and (list? (car test_tuple)) (even? (car (car test_tuple))))\n     (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [(and (list? (car test_tuple)) (odd? (car (car test_tuple))))\n     (extract_even (cdr test_tuple))]\n    [(and (not (list? (car test_tuple))) (even? (car test_tuple)))\n     (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [(and (not (list? (car test_tuple))) (odd? (car test_tuple)))\n     (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) '()]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) '()]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) '()]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) '()]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) '()]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (car test_tuple)) (cons (car test_tuple) (extract_even (cdr test_tuple)))]\n    [else (extract_even (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) empty]\n    [(even? (first test_tuple)) (cons (first test_tuple) (extract_even (rest test_tuple)))]\n    [else (extract_even (rest test_tuple))]))\n"
  ]
}