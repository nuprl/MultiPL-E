{
  "name": "mbpp_751_check_min_heap",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\n(define (check_min_heap arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_min_heap))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) #t)\n    (check-equal? (candidate (list 2 3 4 5 10 15)) #t)\n    (check-equal? (candidate (list 2 10 4 5 3 15)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (check_min_heap_helper arr i)\n    (cond\n      [(>= i (length arr)) #t]\n      [(< (vector-ref arr i) (vector-ref arr (+ i 1)))\n       (and (check_min_heap_helper arr (+ i 1))\n            (check_min_heap_helper arr (+ i 2)))]\n      [else #f]))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (not (and (not (null? (cdr arr)))\n                  (not (null? (cddr arr)))))\n        #t\n        (and (or (null? (cdr arr))\n                 (< (car arr) (cadr arr)))\n             (or (null? (cddr arr))\n                 (< (car arr) (caddr arr)))\n             (check_min_heap_helper (cdr arr) (+ i 1)))))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&lt; i (length arr))\n        (and (&lt;= (list-ref arr i) (list-ref arr (quotient (+ i 1) 2)))\n             (check_min_heap_helper arr (+ i 1)))\n        #t))\n  (check_min_heap_helper arr 1))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&lt; i (length arr))\n        (if (&lt; (list-ref arr i) (list-ref arr (quotient (+ i 1) 2)))\n            (check_min_heap_helper arr (+ i 1))\n            #f)\n        #t))\n  (check_min_heap_helper arr 1))\n",
    "  (define (check_min_heap_helper arr i)\n    (cond\n      [(= i (length arr)) #t]\n      [(< (list-ref arr i) (list-ref arr (* 2 i))) #f]\n      [(< (list-ref arr i) (list-ref arr (+ (* 2 i) 1))) #f]\n      [else (check_min_heap_helper arr (+ i 1))]))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) #t]\n      [(and (< (list-ref arr i) (list-ref arr (add1 i)))\n            (< (list-ref arr i) (list-ref arr (add1 (add1 i)))))\n       (check_min_heap_helper arr (add1 i))]\n      [else #f]))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check-heap-rec arr i)\n    (cond\n      [(empty? arr) #t]\n      [(< i (length arr))\n       (and\n        (and\n         (and\n          (check-heap-rec arr (+ i 1))\n          (check-heap-rec arr (+ i 2)))\n         (or\n          (= i 0)\n          (< (list-ref arr i) (list-ref arr (- i 1)))))\n        (or\n         (= i 0)\n         (< (list-ref arr i) (list-ref arr (/ i 2)))))\n       ]\n      [else #f]))\n  (check-heap-rec arr 0))\n",
    "  (define (is_leaf? i)\n    (= i (sub1 (length arr))))\n  (define (left-child i)\n    (list-ref arr (+ i 1)))\n  (define (right-child i)\n    (list-ref arr (+ i 2)))\n  (define (is_min_heap? i)\n    (if (is_leaf? i)\n        #t\n        (and (<= (list-ref arr i) (left-child i))\n             (<= (list-ref arr i) (right-child i))\n             (is_min_heap? (+ i 1))\n             (is_min_heap? (+ i 2)))))\n  (is_min_heap? 0))\n",
    "  (define (check_min_heap_rec arr i)\n    (if (= i (length arr))\n        #t\n        (and (or (null? (list-ref arr (+ i 1)))\n                 (< (list-ref arr i) (list-ref arr (+ i 1))))\n             (and (or (null? (list-ref arr (+ i 2)))\n                      (< (list-ref arr i) (list-ref arr (+ i 2))))\n                  (check_min_heap_rec arr (+ i 1))))))\n  (check_min_heap_rec arr 0))\n",
    "  (let loop ([i 0])\n    (if (= i (quotient (length arr) 2))\n        #t\n        (and (and (<= (list-ref arr i) (list-ref arr (* 2 i 1)))\n                  (<= (list-ref arr i) (list-ref arr (* 2 i 1))))\n             (loop (+ i 1))))))\n",
    "  (let loop ((i 0) (n (length arr)))\n    (if (= i n)\n        #t\n        (let ((left-child (+ i 1))\n              (right-child (+ i 2)))\n          (if (and (< left-child n)\n                   (< (list-ref arr left-child) (list-ref arr i)))\n              (loop left-child n)\n              (if (and (< right-child n)\n                       (< (list-ref arr right-child) (list-ref arr i)))\n                  (loop right-child n)\n                  #f))))))\n",
    "  (define (check-heap-rec arr i)\n    (cond\n      [(>= i (length arr)) #t]\n      [(< (vector-ref arr i) (vector-ref arr (+ i 1))) #f]\n      [(< (vector-ref arr i) (vector-ref arr (+ i 2))) #f]\n      [else (and (check-heap-rec arr (+ i 1)) (check-heap-rec arr (+ i 2)))]))\n  (check-heap-rec arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&lt; i (length arr))\n        (and (&lt;= (list-ref arr i) (list-ref arr (floor (/ (+ i 1) 2))))\n             (check_min_heap_helper arr (+ i 1)))\n        #t))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check_min_heap_rec arr i)\n    (if (&lt; i (length arr))\n        (and (&lt;= (list-ref arr i) (list-ref arr (* 2 i)))\n             (&lt;= (list-ref arr i) (list-ref arr (+ (* 2 i) 1)))\n             (check_min_heap_rec arr (+ i 1)))\n        #t))\n  (check_min_heap_rec arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&lt; i (length arr))\n        (if (&lt; (list-ref arr i) (list-ref arr (* 2 i 1)))\n            (if (&lt; (list-ref arr i) (list-ref arr (* 2 i 1 1)))\n                (check_min_heap_helper arr (+ i 1))\n                #f)\n            #f)\n        #t))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check-min-heap-helper arr i)\n    (if (&lt; i (length arr))\n        (and (&lt;= (list-ref arr i) (list-ref arr (min (+ i 1) (length arr))))\n             (and (&lt;= (list-ref arr i) (list-ref arr (min (+ i 2) (length arr))))\n                  (check-min-heap-helper arr (+ i 1))))\n        #t))\n  (check-min-heap-helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (= i (length arr))\n        #t\n        (if (and (<= (list-ref arr i) (list-ref arr (* 2 i 1)))\n                 (<= (list-ref arr i) (list-ref arr (* 2 i 1))))\n            (check_min_heap_helper arr (+ i 1))\n            #f)))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (>= i (length arr))\n        #t\n        (and (and (<= (list-ref arr i) (list-ref arr (* 2 i 1)))\n                  (<= (list-ref arr i) (list-ref arr (* 2 i 1))))\n             (check_min_heap_helper arr (+ i 1)))))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&lt; i (quotient (length arr) 2))\n        (and (check_min_heap_helper arr (+ i 1))\n             (and (&lt; (list-ref arr i) (list-ref arr (* 2 i 1)))\n                  (&lt; (list-ref arr i) (list-ref arr (* 2 i 1 1)))))\n        #t))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&gt;= i (length arr))\n        #t\n        (and (and (&lt;= (list-ref arr i) (list-ref arr (quotient (+ i 1) 2)))\n                  (&lt;= (list-ref arr i) (list-ref arr (quotient (+ i 2) 2))))\n             (check_min_heap_helper arr (+ i 1)))))\n  (check_min_heap_helper arr 1))\n"
  ]
}