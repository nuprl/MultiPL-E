{
  "name": "mbpp_392_get_max_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n(define (get_max_sum n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_sum))\n    (check-equal? (candidate 60) 106)\n    (check-equal? (candidate 10) 12)\n    (check-equal? (candidate 2) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let* ([n1 (quotient n 2)]\n              [n2 (quotient n 3)]\n              [n3 (quotient n 4)]\n              [n4 (quotient n 5)]\n              [sum1 (get_max_sum-iter n1 0)]\n              [sum2 (get_max_sum-iter n2 0)]\n              [sum3 (get_max_sum-iter n3 0)]\n              [sum4 (get_max_sum-iter n4 0)]\n              [max-sum (max sum1 sum2 sum3 sum4)])\n         (get_max_sum-iter (- n 1) (+ sum max-sum)))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n    [else\n     (let ([a (/ n 2)]\n           [b (/ n 3)]\n           [c (/ n 4)]\n           [d (/ n 5)])\n       (+ (get_max_sum a)\n          (get_max_sum b)\n          (get_max_sum c)\n          (get_max_sum d)))]))\n",
    "  (define (get_max_sum_helper n cache)\n    (if (and (not (null? cache)) (assoc n cache))\n        (cdr (assoc n cache))\n        (let* ([n1 (/ n 2)]\n               [n2 (/ n 3)]\n               [n3 (/ n 4)]\n               [n4 (/ n 5)]\n               [max1 (get_max_sum_helper n1 cache)]\n               [max2 (get_max_sum_helper n2 cache)]\n               [max3 (get_max_sum_helper n3 cache)]\n               [max4 (get_max_sum_helper n4 cache)]\n               [max-sum (+ max1 max2 max3 max4)])\n          (if (&gt; n max-sum)\n              (cons (cons n n) cache)\n              (cons (cons n max-sum) cache)))))\n  (get_max_sum_helper n '()))\n</code>\n",
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max-sum-iter n (+ sum (max (get_max_sum-iter n1 0) (get_max_sum-iter n2 0) (get_max_sum-iter n3 0) (get_max_sum-iter n4 0))))])))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (get_max_sum_helper (quotient n 2))]\n             [b (get_max_sum_helper (quotient n 3))]\n             [c (get_max_sum_helper (quotient n 4))]\n             [d (get_max_sum_helper (quotient n 5))])\n         (max (+ a b c d) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(> n 0)\n       (let* ([n1 (/ n 2)]\n              [n2 (/ n 3)]\n              [n3 (/ n 4)]\n              [n4 (/ n 5)]\n              [max-sum (max (+ sum n1) (+ sum n2) (+ sum n3) (+ sum n4))])\n         (get_max_sum_iter (- n 1) max-sum))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get-max-sum-helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get-max-sum-helper (/ n 2))]\n             [n2 (get-max-sum-helper (/ n 3))]\n             [n3 (get-max-sum-helper (/ n 4))]\n             [n4 (get-max-sum-helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get-max-sum-helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_iter (/ n 2))\n                        (get_max_sum_iter (/ n 3))\n                        (get_max_sum_iter (/ n 4))\n                        (get_max_sum_iter (/ n 5)))\n                      n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond ((&lt; n 0) sum)\n          ((= n 0) sum)\n          (else (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter (/ n 2) 0)\n                                             (get_max_sum_iter (/ n 3) 0)\n                                             (get_max_sum_iter (/ n 4) 0)\n                                             (get_max_sum_iter (/ n 5) 0))))))\n  (get_max_sum_iter n 0))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (helper (/ n 2))]\n             [n2 (helper (/ n 3))]\n             [n3 (helper (/ n 4))]\n             [n4 (helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(> n 0)\n       (let* ([n1 (/ n 2)]\n              [n2 (/ n 3)]\n              [n3 (/ n 4)]\n              [n4 (/ n 5)]\n              [sum1 (+ sum n1)]\n              [sum2 (+ sum n2)]\n              [sum3 (+ sum n3)]\n              [sum4 (+ sum n4)])\n         (get_max_sum_iter (- n 1) (max sum1 sum2 sum3 sum4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (max (max n1 n2) n3) n4))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(= n 1) (max max-sum 1)]\n      [(= n 2) (max max-sum 2)]\n      [(= n 3) (max max-sum 3)]\n      [(= n 4) (max max-sum 4)]\n      [(= n 5) (max max-sum 5)]\n      [else\n       (get_max_sum_iter n (max max-sum (+ (get_max_sum_iter (/ n 2) 0)\n                                           (get_max_sum_iter (/ n 3) 0)\n                                           (get_max_sum_iter (/ n 4) 0)\n                                           (get_max_sum_iter (/ n 5) 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(<= n 0) 0]\n      [(= n 1) 1]\n      [else\n       (max n\n            (+ (get_max_sum_helper (/ n 2))\n               (get_max_sum_helper (/ n 3))\n               (get_max_sum_helper (/ n 4))\n               (get_max_sum_helper (/ n 5))))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([a (get_max_sum_iter (/ n 2) 0)]\n             [b (get_max_sum_iter (/ n 3) 0)]\n             [c (get_max_sum_iter (/ n 4) 0)]\n             [d (get_max_sum_iter (/ n 5) 0)])\n         (get_max_sum_iter (- n 1) (max (+ sum a b c d) n)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(> n 0)\n       (let* ([n2 (/ n 2)]\n              [n3 (/ n 3)]\n              [n4 (/ n 4)]\n              [n5 (/ n 5)]\n              [n2-sum (+ n2 (get_max_sum_iter n2 max-sum))]\n              [n3-sum (+ n3 (get_max_sum_iter n3 max-sum))]\n              [n4-sum (+ n4 (get_max_sum_iter n4 max-sum))]\n              [n5-sum (+ n5 (get_max_sum_iter n5 max-sum))]\n              [max-sum-n (+ (max n2-sum n3-sum n4-sum n5-sum) n)])\n         (get_max_sum_iter (- n 1) max-sum-n))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (quotient n 2)])\n         (let ([n2 (quotient n 3)])\n           (let ([n3 (quotient n 4)])\n             (let ([n4 (quotient n 5)])\n               (let ([s1 (get_max_sum-iter n1 sum)])\n                 (let ([s2 (get_max_sum-iter n2 sum)])\n                   (let ([s3 (get_max_sum-iter n3 sum)])\n                     (let ([s4 (get_max_sum-iter n4 sum)])\n                       (let ([s5 n])\n                         (let ([max-sum (max s1 s2 s3 s4 s5)])\n                           (get_max_sum-iter (- n 1) max-sum))))))))))))))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum-iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (add1 acc)]\n      [(= n 2) (add1 (add1 acc))]\n      [(= n 3) (add1 (add1 (add1 acc)))]\n      [(= n 4) (add1 (add1 (add1 (add1 acc))))]\n      [else\n       (let ([n1 (quotient n 2)]\n             [n2 (quotient n 3)]\n             [n3 (quotient n 4)]\n             [n4 (quotient n 5)])\n         (get_max_sum-iter n (max (+ (get_max_sum-iter n1 acc)\n                                     (get_max_sum-iter n2 acc)\n                                     (get_max_sum-iter n3 acc)\n                                     (get_max_sum-iter n4 acc))\n                                  n)))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_helper (/ n 2))\n                        (get_max_sum_helper (/ n 3))\n                        (get_max_sum_helper (/ n 4))\n                        (get_max_sum_helper (/ n 5)))\n                      n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2)) (get_max_sum_helper (/ n 3)) (get_max_sum_helper (/ n 4)) (get_max_sum_helper (/ n 5))) n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (max (+ (get_max_sum-iter n1)\n                 (get_max_sum-iter n2)\n                 (get_max_sum-iter n3)\n                 (get_max_sum-iter n4))\n              n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum-iter (/ n 2))]\n             [n3 (get_max_sum-iter (/ n 3))]\n             [n4 (get_max_sum-iter (/ n 4))]\n             [n5 (get_max_sum-iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([a (/ n 2)]\n             [b (/ n 3)]\n             [c (/ n 4)]\n             [d (/ n 5)])\n         (get_max_sum_iter a (+ sum a))\n         (get_max_sum_iter b (+ sum b))\n         (get_max_sum_iter c (+ sum c))\n         (get_max_sum_iter d (+ sum d)))]))\n  (get_max_sum_iter n 0))\n",
    "  (if (&lt; n 6)\n      n\n      (let ([n2 (quotient n 2)]\n            [n3 (quotient n 3)]\n            [n4 (quotient n 4)]\n            [n5 (quotient n 5)])\n        (max (+ (get_max_sum n2)\n                (get_max_sum n3)\n                (get_max_sum n4)\n                (get_max_sum n5))\n             n))))\n</code>\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum-iter (/ n 2))]\n             [n3 (get_max_sum-iter (/ n 3))]\n             [n4 (get_max_sum-iter (/ n 4))]\n             [n5 (get_max_sum-iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n1 (+ sum n1))\n         (get_max_sum_iter n2 (+ sum n2))\n         (get_max_sum_iter n3 (+ sum n3))\n         (get_max_sum_iter n4 (+ sum n4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n max-sum-so-far)\n    (cond\n      [(= n 0) max-sum-so-far]\n      [(= n 1) (+ max-sum-so-far 1)]\n      [(= n 2) (+ max-sum-so-far 2)]\n      [(= n 3) (+ max-sum-so-far 3)]\n      [(= n 4) (+ max-sum-so-far 4)]\n      [(= n 5) (+ max-sum-so-far 5)]\n      [else\n       (let* ([n-by-2 (/ n 2)]\n              [n-by-3 (/ n 3)]\n              [n-by-4 (/ n 4)]\n              [n-by-5 (/ n 5)]\n              [max-sum-by-recursion (max (+ (get_max_sum_iter n-by-2 0)\n                                            (get_max_sum_iter n-by-3 0)\n                                            (get_max_sum_iter n-by-4 0)\n                                            (get_max_sum_iter n-by-5 0))\n                                           n)])\n         (get_max_sum_iter (- n 1) (max max-sum-by-recursion max-sum-so-far)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (add1 acc)]\n      [(= n 2) (add1 (add1 acc))]\n      [(= n 3) (add1 (add1 (add1 acc)))]\n      [(= n 4) (add1 (add1 (add1 (add1 acc))))]\n      [else (get_max_sum_iter (- n 5) (+ (get_max_sum_iter (/ n 2) 0) (get_max_sum_iter (/ n 3) 0) (get_max_sum_iter (/ n 4) 0) (get_max_sum_iter (/ n 5) 0) acc))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [(< n 0) sum]\n      [else\n       (get_max_sum_helper (- n 1) (+ sum (get_max_sum_helper (/ n 2) 0) (get_max_sum_helper (/ n 3) 0) (get_max_sum_helper (/ n 4) 0) (get_max_sum_helper (/ n 5) 0)))]))\n  (get_max_sum_helper n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n1 (+ sum n1))\n         (get_max_sum_iter n2 (+ sum n2))\n         (get_max_sum_iter n3 (+ sum n3))\n         (get_max_sum_iter n4 (+ sum n4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (quotient n 2))]\n             [n2 (get_max_sum_helper (quotient n 3))]\n             [n3 (get_max_sum_helper (quotient n 4))]\n             [n4 (get_max_sum_helper (quotient n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n result)\n    (cond ((= n 0) result)\n          ((&lt; n 0) 0)\n          (else (get_max_sum_iter (- n 1) (+ result (get_max_sum_iter (/ n 2) 0) (get_max_sum_iter (/ n 3) 0) (get_max_sum_iter (/ n 4) 0) (get_max_sum_iter (/ n 5) 0)))))\n    (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2)) (get_max_sum_helper (/ n 3)) (get_max_sum_helper (/ n 4)) (get_max_sum_helper (/ n 5))) n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (quotient n 2)]\n             [n3 (quotient n 3)]\n             [n4 (quotient n 4)]\n             [n5 (quotient n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (get_max_sum_iter n2 (+ sum (get_max_sum n2)))\n         (get_max_sum_iter n3 (+ sum (get_max_sum n3)))\n         (get_max_sum_iter n4 (+ sum (get_max_sum n4)))\n         (get_max_sum_iter n5 (+ sum (get_max_sum n5))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_iter (/ n 2))]\n             [n3 (get_max_sum_iter (/ n 3))]\n             [n4 (get_max_sum_iter (/ n 4))]\n             [n5 (get_max_sum_iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (get_max_sum_iter (- n 1)\n                          (+ sum\n                             (max (get_max_sum_iter (/ n 2) 0)\n                                  (get_max_sum_iter (/ n 3) 0)\n                                  (get_max_sum_iter (/ n 4) 0)\n                                  (get_max_sum_iter (/ n 5) 0)\n                                  n)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          ((= n 2) 2)\n          ((= n 3) 3)\n          ((= n 4) 4)\n          ((= n 5) 5)\n          (else (max (+ (get_max_sum-iter (/ n 2))\n                       (get_max_sum-iter (/ n 3))\n                       (get_max_sum-iter (/ n 4))\n                       (get_max_sum-iter (/ n 5)))\n                     n))))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([a (/ n 2)]\n             [b (/ n 3)]\n             [c (/ n 4)]\n             [d (/ n 5)])\n         (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter a 0) (get_max_sum_iter b 0) (get_max_sum_iter c 0) (get_max_sum_iter d 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (let ([s1 (+ (get_max_sum-iter n1) (get_max_sum-iter n2) (get_max_sum-iter n3) (get_max_sum-iter n4))])\n           (if (&gt; s1 n) s1 n)))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n    [else\n     (let ([n2 (get_max_sum (/ n 2))]\n           [n3 (get_max_sum (/ n 3))]\n           [n4 (get_max_sum (/ n 4))]\n           [n5 (get_max_sum (/ n 5))])\n       (if (&gt; (+ n2 n3 n4 n5) n)\n           (+ n2 n3 n4 n5)\n           n))]))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond [(<= n 0) 0]\n          [(= n 1) 1]\n          [else (max (+ (get_max-sum-iter (/ n 2))\n                        (get_max-sum-iter (/ n 3))\n                        (get_max-sum-iter (/ n 4))\n                        (get_max-sum-iter (/ n 5)))\n                       n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let* ([n1 (/ n 2)]\n              [n2 (/ n 3)]\n              [n3 (/ n 4)]\n              [n4 (/ n 5)])\n         (get_max_sum_iter n1 (+ sum n1))\n         (get_max_sum_iter n2 (+ sum n2))\n         (get_max_sum_iter n3 (+ sum n3))\n         (get_max_sum_iter n4 (+ sum n4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n    [else\n     (let ([n1 (get_max_sum (/ n 2))]\n           [n2 (get_max_sum (/ n 3))]\n           [n3 (get_max_sum (/ n 4))]\n           [n4 (get_max_sum (/ n 5))])\n       (max (+ n1 n2 n3 n4) n))]))\n",
    "  (define (max_sum n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (max_sum (quotient n 2))]\n             [n2 (max_sum (quotient n 3))]\n             [n3 (max_sum (quotient n 4))]\n             [n4 (max_sum (quotient n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (max_sum n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (if (&lt; n 6)\n        n\n        (max n (+ (get_max_sum_iter (/ n 2))\n                  (get_max_sum_iter (/ n 3))\n                  (get_max_sum_iter (/ n 4))\n                  (get_max_sum_iter (/ n 5))))))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum-iter (/ n 2))]\n             [n3 (get_max_sum-iter (/ n 3))]\n             [n4 (get_max_sum-iter (/ n 4))]\n             [n5 (get_max_sum-iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max\n              (+ (get_max_sum-iter (/ n 2))\n                 (get_max_sum-iter (/ n 3))\n                 (get_max_sum-iter (/ n 4))\n                 (get_max_sum-iter (/ n 5)))\n              n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (let ([sum1 (+ sum n1)]\n               [sum2 (+ sum n2)]\n               [sum3 (+ sum n3)]\n               [sum4 (+ sum n4)])\n           (let ([sum1 (get_max_sum_iter n1 sum1)]\n                 [sum2 (get_max_sum_iter n2 sum2)]\n                 [sum3 (get_max_sum_iter n3 sum3)]\n                 [sum4 (get_max_sum_iter n4 sum4)])\n             (max sum1 sum2 sum3 sum4)))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (max (+ (helper (/ n 2)) (helper (/ n 3)) (helper (/ n 4)) (helper (/ n 5))) n)]))\n  (helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([sum1 (+ sum (/ n 2))]\n             [sum2 (+ sum (/ n 3))]\n             [sum3 (+ sum (/ n 4))]\n             [sum4 (+ sum (/ n 5))])\n         (get_max_sum_iter (- n 5) (max sum1 (max sum2 (max sum3 sum4)))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (get_max_sum_helper (/ n 2))\n                 (get_max_sum_helper (/ n 3))\n                 (get_max_sum_helper (/ n 4))\n                 (get_max_sum_helper (/ n 5))\n                 n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let*\n           ([n1 (quotient n 2)]\n            [n2 (quotient n 3)]\n            [n3 (quotient n 4)]\n            [n4 (quotient n 5)]\n            [s1 (get_max_sum_iter n1 0)]\n            [s2 (get_max_sum_iter n2 0)]\n            [s3 (get_max_sum_iter n3 0)]\n            [s4 (get_max_sum_iter n4 0)])\n         (get_max_sum_iter (- n 1) (max (+ sum s1 s2 s3 s4) n)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((&lt; n 0) 0)\n          (else\n           (let ([n2 (/ n 2)]\n                 [n3 (/ n 3)]\n                 [n4 (/ n 4)]\n                 [n5 (/ n 5)])\n             (get_max_sum_iter (- n 1)\n                               (max sum\n                                    (+ (get_max_sum_iter n2 0)\n                                       (get_max_sum_iter n3 0)\n                                       (get_max_sum_iter n4 0)\n                                       (get_max_sum_iter n5 0))))))))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum-iter (/ n 2)) (get_max_sum-iter (/ n 3)) (get_max_sum-iter (/ n 4)) (get_max_sum-iter (/ n 5))) n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max-sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(= n 1) (max max-sum 1)]\n      [(= n 2) (max max-sum 2)]\n      [(= n 3) (max max-sum 3)]\n      [(= n 4) (max max-sum 4)]\n      [(= n 5) (max max-sum 5)]\n      [else\n       (get_max_sum-iter\n        (- n 5)\n        (max\n         max-sum\n         (+ (get_max_sum-iter (/ n 2) 0)\n            (get_max_sum-iter (/ n 3) 0)\n            (get_max_sum-iter (/ n 4) 0)\n            (get_max_sum-iter (/ n 5) 0))))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (let ([sum1 (+ sum n1)]\n               [sum2 (+ sum n2)]\n               [sum3 (+ sum n3)]\n               [sum4 (+ sum n4)])\n           (let ([sum1 (get_max_sum_iter n1 sum1)]\n                 [sum2 (get_max_sum_iter n2 sum2)]\n                 [sum3 (get_max_sum_iter n3 sum3)]\n                 [sum4 (get_max_sum_iter n4 sum4)])\n             (let ([max_sum (max sum1 sum2 sum3 sum4)])\n               (if (&gt; max_sum n)\n                   max_sum\n                   n)))))))))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n  arguments...:\n   [none]\n</code>\nI am not able to figure out what is wrong with the code.\n\n\nA:\n\nThe problem is that you're calling <code>max</code> with more than two arguments. The <code>max</code> procedure only accepts two arguments, so you need to call it with two arguments at a time.\n<code>(max sum1 sum2 sum3 sum4)\n</code>\nshould be\n<code>(max (max sum1 sum2) (max sum3 sum4))\n</code>\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum-iter (/ n 2))]\n             [n3 (get_max_sum-iter (/ n 3))]\n             [n4 (get_max_sum-iter (/ n 4))]\n             [n5 (get_max_sum-iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(< n 0) 0]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter (- n 1)\n                           (+ sum\n                              (max (get_max_sum_iter n1 0)\n                                   (get_max_sum_iter n2 0)\n                                   (get_max_sum_iter n3 0)\n                                   (get_max_sum_iter n4 0)\n                                   n))))]))\n  (get_max_sum_iter n 0))\n",
    "  (if (&lt; n 0)\n      0\n      (let ([n2 (/ n 2)]\n            [n3 (/ n 3)]\n            [n4 (/ n 4)]\n            [n5 (/ n 5)])\n        (max n\n             (+ (get_max_sum n2)\n                (get_max_sum n3)\n                (get_max_sum n4)\n                (get_max_sum n5))))))\n</code>\nThis is a recursive function that works fine for small numbers. But when I try to use it with a large number, it takes a long time to compute.\nI'm trying to use memoization to speed up the function. I'm using <code>memoize</code> from the <code>memoize</code> package.\n<code>#lang racket\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (max-sum-helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (max-sum-helper (/ n 2)) (max-sum-helper (/ n 3)) (max-sum-helper (/ n 4)) (max-sum-helper (/ n 5))) n)]))\n  (max-sum-helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max-sum-iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max-sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2)) (get_max_sum_helper (/ n 3)) (get_max_sum_helper (/ n 4)) (get_max_sum_helper (/ n 5))) n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([sum1 (+ sum (/ n 2))]\n             [sum2 (+ sum (/ n 3))]\n             [sum3 (+ sum (/ n 4))]\n             [sum4 (+ sum (/ n 5))])\n         (max (get_max_sum_iter (/ n 2) sum1)\n              (get_max_sum_iter (/ n 3) sum2)\n              (get_max_sum_iter (/ n 4) sum3)\n              (get_max_sum_iter (/ n 5) sum4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (max (+ (get_max_sum_helper (/ n 2))\n               (get_max_sum_helper (/ n 3))\n               (get_max_sum_helper (/ n 4))\n               (get_max_sum_helper (/ n 5)))\n            n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_helper (/ n 2))\n                       (get_max_sum_helper (/ n 3))\n                       (get_max_sum_helper (/ n 4))\n                       (get_max_sum_helper (/ n 5)))\n                     n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n max-sum-so-far)\n    (cond\n      [(= n 0) max-sum-so-far]\n      [(= n 1) (+ max-sum-so-far 1)]\n      [(= n 2) (+ max-sum-so-far 2)]\n      [(= n 3) (+ max-sum-so-far 3)]\n      [(= n 4) (+ max-sum-so-far 4)]\n      [(= n 5) (+ max-sum-so-far 5)]\n      [else\n       (let ([max-sum-so-far (+ max-sum-so-far n)])\n         (get_max_sum-iter (- n 1) max-sum-so-far))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get-max-sum-helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get-max-sum-helper (/ n 2))\n                    (get-max-sum-helper (/ n 3))\n                    (get-max-sum-helper (/ n 4))\n                    (get-max-sum-helper (/ n 5)))\n                  n)]))\n  (get-max-sum-helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum-iter (/ n 2))\n                        (get_max_sum-iter (/ n 3))\n                        (get_max_sum-iter (/ n 4))\n                        (get_max_sum-iter (/ n 5)))\n                      n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(= n 1) (max max-sum 1)]\n      [(= n 2) (max max-sum 2)]\n      [(= n 3) (max max-sum 3)]\n      [(= n 4) (max max-sum 4)]\n      [(= n 5) (max max-sum 5)]\n      [else (get_max_sum_iter (- n 5) (max max-sum (+ (get_max_sum (/ n 2)) (get_max_sum (/ n 3)) (get_max_sum (/ n 4)) (get_max_sum (/ n 5)))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(= n 1) (max max-sum 1)]\n      [(= n 2) (max max-sum 2)]\n      [(= n 3) (max max-sum 3)]\n      [(= n 4) (max max-sum 4)]\n      [(= n 5) (max max-sum 5)]\n      [else\n       (get_max_sum_iter\n        (- n 5)\n        (max\n         max-sum\n         (+ (get_max_sum_iter (/ n 2) 0)\n            (get_max_sum_iter (/ n 3) 0)\n            (get_max_sum_iter (/ n 4) 0)\n            (get_max_sum_iter (/ n 5) 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_helper (/ n 2))\n                        (get_max_sum_helper (/ n 3))\n                        (get_max_sum_helper (/ n 4))\n                        (get_max_sum_helper (/ n 5)))\n                     n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          ((= n 2) 2)\n          ((= n 3) 3)\n          ((= n 4) 4)\n          ((= n 5) 5)\n          (else (max (+ (get_max_sum-iter (/ n 2))\n                       (get_max_sum-iter (/ n 3))\n                       (get_max_sum-iter (/ n 4))\n                       (get_max_sum-iter (/ n 5)))\n                     n))))\n  (get_max-sum-iter n))\n</code>\nThe problem is that this function is very slow. I have tried to use memoization to speed it up, but I am not sure how to do it. I have tried to use the <code>memoize</code> function from the <code>memoize</code> package, but it does not work.\n<code>#lang racket\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n1 (+ sum n1))\n         (get_max_sum_iter n2 (+ sum n2))\n         (get_max_sum_iter n3 (+ sum n3))\n         (get_max_sum_iter n4 (+ sum n4))\n         (max (+ sum n1) (+ sum n2) (+ sum n3) (+ sum n4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let* ([n1 (quotient n 2)]\n              [n2 (quotient n 3)]\n              [n3 (quotient n 4)]\n              [n4 (quotient n 5)]\n              [s1 (get_max_sum-iter n1 sum)]\n              [s2 (get_max_sum-iter n2 sum)]\n              [s3 (get_max_sum-iter n3 sum)]\n              [s4 (get_max_sum-iter n4 sum)])\n         (max (+ sum n) (max s1 (max s2 (max s3 s4)))))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(< n 0) 0]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter (- n 1)\n                           (max (+ (get_max_sum_iter n1 0)\n                                   (get_max_sum_iter n2 0)\n                                   (get_max_sum_iter n3 0)\n                                   (get_max_sum_iter n4 0))\n                               n)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max-sum-iter n))\n</code>\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum_helper n2) (get_max_sum_helper n3) (get_max_sum_helper n4) (get_max_sum_helper n5)) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n sum)\n    (cond ((= n 0) sum)\n          ((&lt; n 0) 0)\n          (else (get_max-sum-iter (- n 1) (+ sum (get-max-sum-iter (/ n 2) 0) (get-max-sum-iter (/ n 3) 0) (get-max-sum-iter (/ n 4) 0) (get-max-sum-iter (/ n 5) 0))))))\n  (get-max-sum-iter n 0))\n</code>\nI'm getting the following error:\n<code>get-max-sum-iter: unbound identifier in module in: get-max-sum-iter\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou have a few typos in your code:\n<code>(define (get_max_sum n)\n  (define (get_max_sum-iter n sum)\n    (cond ((= n 0) sum)\n          ((&lt; n 0) 0)\n          (else (get_max_sum-iter (- n 1) (+ sum (get_max_sum-iter (/ n 2) 0) (get_max_sum-iter (/ n 3) 0) (get_max_sum-iter (/ n 4) 0) (get_max_sum-iter (/ n 5) 0))))))\n  (get_max_sum-iter n 0))\n</code>\nNotice that the <code>-</code> in <code>get-max-sum-iter</code> is replaced by an underscore.\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((&lt; n 0) 0)\n          (else (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter (/ n 2) 0) (get_max_sum_iter (/ n 3) 0) (get_max_sum_iter (/ n 4) 0) (get_max_sum_iter (/ n 5) 0)))))\n    (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_iter (/ n 2))\n                        (get_max_sum_iter (/ n 3))\n                        (get_max_sum_iter (/ n 4))\n                        (get_max_sum_iter (/ n 5)))\n                      n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let* ([n1 (/ n 2)]\n              [n2 (/ n 3)]\n              [n3 (/ n 4)]\n              [n4 (/ n 5)])\n         (get_max_sum_iter n1 (+ sum (get_max_sum_iter n1 0)))\n         (get_max_sum_iter n2 (+ sum (get_max_sum_iter n2 0)))\n         (get_max_sum_iter n3 (+ sum (get_max_sum_iter n3 0)))\n         (get_max_sum_iter n4 (+ sum (get_max_sum_iter n4 0)))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond [(= n 0) 0]\n          [else (max n (+ (get_max_sum_iter (/ n 2))\n                          (get_max_sum_iter (/ n 3))\n                          (get_max_sum_iter (/ n 4))\n                          (get_max_sum_iter (/ n 5))))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2)) (get_max_sum_helper (/ n 3)) (get_max_sum_helper (/ n 4)) (get_max_sum_helper (/ n 5))) n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get-max-sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(> n 0)\n       (let* ([n2 (quotient n 2)]\n              [n3 (quotient n 3)]\n              [n4 (quotient n 4)]\n              [n5 (quotient n 5)]\n              [sum2 (+ sum (get-max-sum-iter n2 0))]\n              [sum3 (+ sum (get-max-sum-iter n3 0))]\n              [sum4 (+ sum (get-max-sum-iter n4 0))]\n              [sum5 (+ sum (get-max-sum-iter n5 0))])\n         (max sum2 sum3 sum4 sum5))]))\n  (get-max-sum-iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_iter (/ n 2))\n                        (get_max_sum_iter (/ n 3))\n                        (get_max_sum_iter (/ n 4))\n                        (get_max_sum_iter (/ n 5)))\n                     n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n</code>\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          ((= n 2) 2)\n          ((= n 3) 3)\n          ((= n 4) 4)\n          ((= n 5) 5)\n          (else (max (+ (get_max_sum_helper (/ n 2))\n                       (get_max_sum_helper (/ n 3))\n                       (get_max_sum_helper (/ n 4))\n                       (get_max_sum_helper (/ n 5)))\n                     n))))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max-sum-iter (- n 1) (+ sum (max (+ (get_max_sum-iter n1 0)\n                                                  (get_max_sum-iter n2 0)\n                                                  (get_max_sum-iter n3 0)\n                                                  (get_max_sum-iter n4 0))\n                                             n))))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (add1 acc)]\n      [(= n 2) (add1 (add1 acc))]\n      [(= n 3) (add1 (add1 (add1 acc)))]\n      [(= n 4) (add1 (add1 (add1 (add1 acc))))]\n      [else\n       (get_max_sum_iter (- n 5)\n                          (add1\n                           (add1\n                            (add1\n                             (add1\n                              (get_max_sum_iter (/ n 2) acc))))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n sum-so-far)\n    (cond\n      [(= n 0) sum-so-far]\n      [(> n 0)\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max-sum-iter (- n 1)\n                           (max sum-so-far\n                                (+ (get_max_sum-iter n1 0)\n                                   (get_max_sum-iter n2 0)\n                                   (get_max_sum-iter n3 0)\n                                   (get_max_sum-iter n4 0))))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (if (&lt;= n 0)\n      0\n      (let ([n2 (/ n 2)]\n            [n3 (/ n 3)]\n            [n4 (/ n 4)]\n            [n5 (/ n 5)])\n        (max n\n             (+ (get_max_sum n2)\n                (get_max_sum n3)\n                (get_max_sum n4)\n                (get_max_sum n5))))))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (if (&lt; n 5)\n        sum\n        (get_max_sum_iter (- n 1) (+ sum (get_max_sum (- n 1))))))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (/ n 2)]\n             [b (/ n 3)]\n             [c (/ n 4)]\n             [d (/ n 5)])\n         (max (+ (get_max_sum_helper a)\n                 (get_max_sum_helper b)\n                 (get_max_sum_helper c)\n                 (get_max_sum_helper d))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else (get_max_sum_iter (- n 5) (+ sum (get_max_sum (- n 5))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum-iter (/ n 2))]\n             [n3 (get_max_sum-iter (/ n 3))]\n             [n4 (get_max_sum-iter (/ n 4))]\n             [n5 (get_max_sum-iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(< n 0) sum]\n      [else\n       (get_max_sum_iter (- n 1) (+ sum (max (+ (get_max_sum_iter (/ n 2) 0)\n                                               (+ (get_max_sum_iter (/ n 3) 0)\n                                                  (+ (get_max_sum_iter (/ n 4) 0)\n                                                     (get_max_sum_iter (/ n 5) 0))))\n                                          n))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (quotient n 2)]\n             [n3 (quotient n 3)]\n             [n4 (quotient n 4)]\n             [n5 (quotient n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (add1 acc)]\n      [(= n 2) (add1 (add1 acc))]\n      [(= n 3) (add1 (add1 (add1 acc)))]\n      [(= n 4) (add1 (add1 (add1 (add1 acc))))]\n      [else\n       (get_max_sum_iter (- n 5)\n                          (add1 (add1 (add1 (add1 (add1 acc))))))]))\n  (get_max_sum_iter n 0))\n</code>\nI am not sure if this is the best way to do it. I am also not sure if this is the most efficient way to do it. I am also not sure if this is the most elegant way to do it. I am also not sure if this is the most functional way to do it.\nI am also not sure if this is the most Racket way to do it.\nI am also not sure if this is the most idiomatic way to do it.\nI am also not sure if this is the most correct way to do it.\nI am also not sure if this is the most readable way to do it.\nI am also not sure if this is the most maintainable way to do it.\nI am also not sure if this is the most testable way to do it.\nI am also not sure if this is the most debuggable way to do it.\nI am also not sure if this is the most optimal way to do it.\nI am also not sure if this is the most performant way to do it.\nI am also not sure if this is the most scalable way to do it.\nI am also not sure if this is the most extensible way to do it.\nI am also not sure if this is the most reusable way to do it.\nI am also not sure if this is the most composable way to do it.\nI am also not sure if this is the most modular way to do it.\nI am also not sure if this is the most reusable way to do it.\nI am also not sure if this is the most composable way to do it.\nI am also not sure if this is the most modular",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (max (+ (get_max_sum-iter n1)\n                 (get_max_sum-iter n2)\n                 (get_max_sum-iter n3)\n                 (get_max_sum-iter n4))\n              n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (if (&lt; n 0)\n        sum\n        (get_max_sum_iter (- n 1)\n                          (max sum\n                               (+ (get_max_sum_iter (/ n 2) 0)\n                                  (get_max_sum_iter (/ n 3) 0)\n                                  (get_max_sum_iter (/ n 4) 0)\n                                  (get_max_sum_iter (/ n 5) 0))))))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max-sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (let ([m1 (+ (get_max_sum_iter n1) (get_max_sum_iter n2) (get_max_sum_iter n3) (get_max_sum_iter n4))]\n               [m2 n])\n           (if (&gt; m1 m2) m1 m2)))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(< n 0) sum]\n      [else\n       (get_max_sum_iter (- n 1)\n                          (max sum\n                               (+ (get_max_sum_iter (/ n 2) 0)\n                                  (get_max_sum_iter (/ n 3) 0)\n                                  (get_max_sum_iter (/ n 4) 0)\n                                  (get_max_sum_iter (/ n 5) 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (if (&lt; n 6)\n        n\n        (max n (+ (get_max_sum_iter (/ n 2))\n                  (get_max_sum_iter (/ n 3))\n                  (get_max_sum_iter (/ n 4))\n                  (get_max_sum_iter (/ n 5))))))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (max (+ (get_max_sum_iter n1)\n                 (get_max_sum_iter n2)\n                 (get_max_sum_iter n3)\n                 (get_max_sum_iter n4))\n              n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(> n 0)\n       (let* ([n2 (/ n 2)]\n              [n3 (/ n 3)]\n              [n4 (/ n 4)]\n              [n5 (/ n 5)])\n         (get_max-sum-iter (- n 1)\n                           (max max-sum\n                                (+ (get_max_sum-iter n2 0)\n                                   (get_max_sum-iter n3 0)\n                                   (get_max_sum-iter n4 0)\n                                   (get_max_sum-iter n5 0))))]\n      [else 0]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max-sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (if (&lt; n 6)\n        n\n        (max n (+ (get_max_sum_helper (/ n 2))\n                  (get_max_sum_helper (/ n 3))\n                  (get_max_sum_helper (/ n 4))\n                  (get_max_sum_helper (/ n 5))))))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [else (max n (+ (get_max_sum-iter (/ n 2))\n                      (get_max_sum-iter (/ n 3))\n                      (get_max_sum-iter (/ n 4))\n                      (get_max_sum-iter (/ n 5))))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(> n 0) (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter (quotient n 2) 0) (get_max_sum_iter (quotient n 3) 0) (get_max_sum_iter (quotient n 4) 0) (get_max_sum_iter (quotient n 5) 0)))]\n      [else sum]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(<= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (define (get_max_sum_helper_helper n)\n         (cond\n           [(= n 0) 0]\n           [(= n 1) 1]\n           [(= n 2) 2]\n           [(= n 3) 3]\n           [(= n 4) 4]\n           [(= n 5) 5]\n           [else\n            (max (+ (get_max_sum_helper (/ n 2))\n                   (get_max_sum_helper (/ n 3))\n                   (get_max_sum_helper (/ n 4))\n                   (get_max_sum_helper (/ n 5)))\n                n)]))\n       (get_max_sum_helper_helper n)])\n    (get_max_sum_helper n))\n  (get_max_sum_helper n))\n",
    "  (define (get-max-sum-iter n max-sum-so-far)\n    (cond [(= n 0) max-sum-so-far]\n          [(= n 1) (+ max-sum-so-far 1)]\n          [(= n 2) (+ max-sum-so-far 2)]\n          [(= n 3) (+ max-sum-so-far 3)]\n          [(= n 4) (+ max-sum-so-far 4)]\n          [else\n           (let ([n1 (/ n 2)]\n                 [n2 (/ n 3)]\n                 [n3 (/ n 4)]\n                 [n4 (/ n 5)])\n             (let ([sum1 (+ max-sum-so-far (get-max-sum-iter n1 0))]\n                   [sum2 (+ max-sum-so-far (get-max-sum-iter n2 0))]\n                   [sum3 (+ max-sum-so-far (get-max-sum-iter n3 0))]\n                   [sum4 (+ max-sum-so-far (get-max-sum-iter n4 0))])\n               (max sum1 sum2 sum3 sum4)))]))\n  (get-max-sum-iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n (+ sum (get_max_sum n1) (get_max_sum n2) (get_max_sum n3) (get_max_sum n4))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_iter (/ n 2))]\n             [n3 (get_max_sum_iter (/ n 3))]\n             [n4 (get_max_sum_iter (/ n 4))]\n             [n5 (get_max_sum_iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum-iter n2)\n                 (get_max_sum-iter n3)\n                 (get_max_sum-iter n4)\n                 (get_max_sum-iter n5))\n              n))]))\n  (get_max_sum-iter n))\n"
  ]
}