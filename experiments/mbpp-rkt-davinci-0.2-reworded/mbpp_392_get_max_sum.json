{
  "name": "mbpp_392_get_max_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n(define (get_max_sum n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_sum))\n    (check-equal? (candidate 60) 106)\n    (check-equal? (candidate 10) 12)\n    (check-equal? (candidate 2) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let* ([n1 (quotient n 2)]\n              [n2 (quotient n 3)]\n              [n3 (quotient n 4)]\n              [n4 (quotient n 5)]\n              [sum1 (get_max_sum-iter n1 0)]\n              [sum2 (get_max_sum-iter n2 0)]\n              [sum3 (get_max_sum-iter n3 0)]\n              [sum4 (get_max_sum-iter n4 0)]\n              [max-sum (max sum1 sum2 sum3 sum4)])\n         (get_max_sum-iter (- n 1) (+ sum max-sum)))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n    [else\n     (let ([a (/ n 2)]\n           [b (/ n 3)]\n           [c (/ n 4)]\n           [d (/ n 5)])\n       (+ (get_max_sum a)\n          (get_max_sum b)\n          (get_max_sum c)\n          (get_max_sum d)))]))\n",
    "  (define (get_max_sum_helper n cache)\n    (if (and (not (null? cache)) (assoc n cache))\n        (cdr (assoc n cache))\n        (let* ([n1 (/ n 2)]\n               [n2 (/ n 3)]\n               [n3 (/ n 4)]\n               [n4 (/ n 5)]\n               [max1 (get_max_sum_helper n1 cache)]\n               [max2 (get_max_sum_helper n2 cache)]\n               [max3 (get_max_sum_helper n3 cache)]\n               [max4 (get_max_sum_helper n4 cache)]\n               [max-sum (+ max1 max2 max3 max4)])\n          (if (&gt; n max-sum)\n              (cons (cons n n) cache)\n              (cons (cons n max-sum) cache)))))\n  (get_max_sum_helper n '()))\n</code>\n",
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max-sum-iter n (+ sum (max (get_max_sum-iter n1 0) (get_max_sum-iter n2 0) (get_max_sum-iter n3 0) (get_max_sum-iter n4 0))))])))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (get_max_sum_helper (quotient n 2))]\n             [b (get_max_sum_helper (quotient n 3))]\n             [c (get_max_sum_helper (quotient n 4))]\n             [d (get_max_sum_helper (quotient n 5))])\n         (max (+ a b c d) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(> n 0)\n       (let* ([n1 (/ n 2)]\n              [n2 (/ n 3)]\n              [n3 (/ n 4)]\n              [n4 (/ n 5)]\n              [max-sum (max (+ sum n1) (+ sum n2) (+ sum n3) (+ sum n4))])\n         (get_max_sum_iter (- n 1) max-sum))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get-max-sum-helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get-max-sum-helper (/ n 2))]\n             [n2 (get-max-sum-helper (/ n 3))]\n             [n3 (get-max-sum-helper (/ n 4))]\n             [n4 (get-max-sum-helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get-max-sum-helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_iter (/ n 2))\n                        (get_max_sum_iter (/ n 3))\n                        (get_max_sum_iter (/ n 4))\n                        (get_max_sum_iter (/ n 5)))\n                      n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond ((&lt; n 0) sum)\n          ((= n 0) sum)\n          (else (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter (/ n 2) 0)\n                                             (get_max_sum_iter (/ n 3) 0)\n                                             (get_max_sum_iter (/ n 4) 0)\n                                             (get_max_sum_iter (/ n 5) 0))))))\n  (get_max_sum_iter n 0))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (helper (/ n 2))]\n             [n2 (helper (/ n 3))]\n             [n3 (helper (/ n 4))]\n             [n4 (helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(> n 0)\n       (let* ([n1 (/ n 2)]\n              [n2 (/ n 3)]\n              [n3 (/ n 4)]\n              [n4 (/ n 5)]\n              [sum1 (+ sum n1)]\n              [sum2 (+ sum n2)]\n              [sum3 (+ sum n3)]\n              [sum4 (+ sum n4)])\n         (get_max_sum_iter (- n 1) (max sum1 sum2 sum3 sum4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (max (max n1 n2) n3) n4))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(= n 1) (max max-sum 1)]\n      [(= n 2) (max max-sum 2)]\n      [(= n 3) (max max-sum 3)]\n      [(= n 4) (max max-sum 4)]\n      [(= n 5) (max max-sum 5)]\n      [else\n       (get_max_sum_iter n (max max-sum (+ (get_max_sum_iter (/ n 2) 0)\n                                           (get_max_sum_iter (/ n 3) 0)\n                                           (get_max_sum_iter (/ n 4) 0)\n                                           (get_max_sum_iter (/ n 5) 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(<= n 0) 0]\n      [(= n 1) 1]\n      [else\n       (max n\n            (+ (get_max_sum_helper (/ n 2))\n               (get_max_sum_helper (/ n 3))\n               (get_max_sum_helper (/ n 4))\n               (get_max_sum_helper (/ n 5))))]))\n  (get_max_sum_helper n))\n"
  ]
}