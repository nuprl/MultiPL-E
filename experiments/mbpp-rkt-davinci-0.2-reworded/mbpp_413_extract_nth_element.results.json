{
  "name": "mbpp_413_extract_nth_element",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list-ref (car list1) n) (extract_nth_element (cdr list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [(= n 0) (first list1)]\n    [else (extract_nth_element (rest list1) (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:15:4\nactual:     '(\"Greyson Fulton\" 98 99)\nexpected:   '(\"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:16:4\nactual:     '(\"Wyatt Knott\" 91 94)\nexpected:   '(99 96 94 98)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:17:4\nactual:     '(\"Brady Kent\" 97 96)\nexpected:   '(98 97 91 94)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list-ref (first list1) n)\n           (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [(= n 0) (map first list1)]\n    [else (extract_nth_element (map rest list1) (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list-ref (first list1) n)\n           (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list-ref (car list1) n) (extract_nth_element (cdr list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list-ref (car list1) n) (extract_nth_element (cdr list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (lst) (list-ref lst n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [(= n 0) (first list1)]\n    [else (extract_nth_element (rest list1) (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:15:4\nactual:     '(\"Greyson Fulton\" 98 99)\nexpected:   '(\"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:16:4\nactual:     '(\"Wyatt Knott\" 91 94)\nexpected:   '(99 96 94 98)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:17:4\nactual:     '(\"Brady Kent\" 97 96)\nexpected:   '(98 97 91 94)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n)\n                (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list-ref (car list1) n) (extract_nth_element (cdr list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (lst) (list-ref lst n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(null? list1) '()]\n    [(null? (car list1)) (extract_nth_element (cdr list1) n)]\n    [else (cons (list-ref (car list1) n) (extract_nth_element (cdr list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) '()]\n    [else (cons (list-ref (first list1) n)\n                (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(null? list1) '()]\n    [else (cons (list-ref (car list1) n) (extract_nth_element (cdr list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [(= n 0) (first list1)]\n    [else (extract_nth_element (rest list1) (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:15:4\nactual:     '(\"Greyson Fulton\" 98 99)\nexpected:   '(\"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:16:4\nactual:     '(\"Wyatt Knott\" 91 94)\nexpected:   '(99 96 94 98)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:17:4\nactual:     '(\"Brady Kent\" 97 96)\nexpected:   '(98 97 91 94)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond ((null? list1) '())\n        ((= n 0) (car list1))\n        (else (extract_nth_element (cdr list1) (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcy_hd0n5.rkt:14:4\nactual:     '(\"Greyson Fulton\" 98 99)\nexpected:   '(\"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcy_hd0n5.rkt:15:4\nactual:     '(\"Wyatt Knott\" 91 94)\nexpected:   '(99 96 94 98)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcy_hd0n5.rkt:16:4\nactual:     '(\"Brady Kent\" 97 96)\nexpected:   '(98 97 91 94)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n) (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list-ref (first list1) n)\n           (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else (cons (list-ref (first list1) n)\n                (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [(= n 0) (first list1)]\n    [else (extract_nth_element (rest list1) (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:15:4\nactual:     '(\"Greyson Fulton\" 98 99)\nexpected:   '(\"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:16:4\nactual:     '(\"Wyatt Knott\" 91 94)\nexpected:   '(99 96 94 98)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:17:4\nactual:     '(\"Brady Kent\" 97 96)\nexpected:   '(98 97 91 94)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list-ref (first list1) n)\n           (extract_nth_element (rest list1) n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (cond\n    [(empty? list1) empty]\n    [(= n 0) (first list1)]\n    [else (extract_nth_element (rest list1) (- n 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:15:4\nactual:     '(\"Greyson Fulton\" 98 99)\nexpected:   '(\"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:16:4\nactual:     '(\"Wyatt Knott\" 91 94)\nexpected:   '(99 96 94 98)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i0q7ofd.rkt:17:4\nactual:     '(\"Brady Kent\" 97 96)\nexpected:   '(98 97 91 94)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (x) (list-ref x n)) list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\"))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98))\n    (check-equal? (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94))\n))\n\n(test-humaneval)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}