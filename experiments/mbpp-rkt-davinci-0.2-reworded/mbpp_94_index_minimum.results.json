{
  "name": "mbpp_94_index_minimum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) 0]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (list-ref (rest test_list) min_index)]\n            [cur_value (list-ref test_list 1)])\n       (if (&lt; cur_value min_value)\n           0\n           (+ min_index 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpszn3cf7k.rkt:14:28: read-syntax: missing `)` to close `(` on line 9, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((&lt; (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpu7x_xryv.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n            [current_value (second (first test_list))])\n       (if (empty? min_index)\n           0\n           (if (< current_value min_value)\n               0\n               (+ 1 min_index))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8qwj023y.rkt:22:4\nactual:     0\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8qwj023y.rkt:23:4\nactual:     2\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8qwj023y.rkt:24:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (find min_index test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp60abd2mh.rkt:6:5: find: unbound identifier\n  in: find\n  location...:\n   /tmp/tmp60abd2mh.rkt:6:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_second (second first_list)]\n            [second_second (second second_list)])\n       (if (< first_second second_second)\n           first_list\n           (index_minimum (rest test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6nwqpp7j.rkt:22:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6nwqpp7j.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6nwqpp7j.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([index 0] [min_index 0] [min_value (second (list-ref test_list 0))])\n    (if (= index (length test_list))\n        min_index\n        (let ([new_value (second (list-ref test_list index))])\n          (if (< new_value min_value)\n              (loop (+ index 1) index new_value)\n              (loop (+ index 1) min_index min_value))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmie92n68.rkt:18:4\nactual:     2\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmie92n68.rkt:19:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmie92n68.rkt:20:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) (error \"index_minimum: empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_pair (car test_list)]\n            [first_value (car first_pair)]\n            [first_index (cdr first_pair)]\n            [second_pair (index_minimum (cdr test_list))]\n            [second_value (car second_pair)]\n            [second_index (cdr second_pair)])\n       (if (< first_index second_index)\n           first_pair\n           second_pair))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyytnwxnu.rkt:24:4\n\n<: contract violation\n  expected: real?\n  given: '(200)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyytnwxnu.rkt:25:4\n\n<: contract violation\n  expected: real?\n  given: '(125)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyytnwxnu.rkt:26:4\n\n<: contract violation\n  expected: real?\n  given: '(145)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:13:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:14:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:15:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (let ([min (index_minimum (cdr test_list))])\n            (if (< (cadr min) (cadr (car test_list)))\n                min\n                (car test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprqbsc5jw.rkt:18:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprqbsc5jw.rkt:19:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprqbsc5jw.rkt:20:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (find-first (lambda (x) (= (second x) min_index)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpd0bm1lg9.rkt:6:5: find-first: unbound identifier\n  in: find-first\n  location...:\n   /tmp/tmpd0bm1lg9.rkt:6:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list)))\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 min_value)]\n          [else (loop (cdr test_list)\n                      min_index\n                      (second (car test_list)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxkp6hfw.rkt:22:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxkp6hfw.rkt:23:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxkp6hfw.rkt:24:4\nactual:     0\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwetwumfu.rkt:7:11: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpwetwumfu.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let*\n         ([first_list (first test_list)]\n          [first_list_second_value (second first_list)]\n          [rest_list (rest test_list)]\n          [rest_list_minimum (index_minimum rest_list)]\n          [rest_list_minimum_second_value (second rest_list_minimum)])\n       (if (< first_list_second_value rest_list_minimum_second_value)\n           first_list\n           rest_list_minimum))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1fy4429y.rkt:24:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1fy4429y.rkt:25:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1fy4429y.rkt:26:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfdxvcf_9.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpfdxvcf_9.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ((min_index 0)\n        (min_value (cadr (car test_list))))\n    (for ([(index value) (in-indexed test_list)])\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqt4dcwa.rkt:18:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqt4dcwa.rkt:19:4\nactual:     '(\"Yash\" 185)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqt4dcwa.rkt:20:4\nactual:     '(\"Sai\" 345)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (&lt; (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510251,
      "stdout": "",
      "stderr": "/tmp/tmpe1wkf8eb.rkt:10:45: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpqdjy99fx.rkt:7:11: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpqdjy99fx.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:13:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:14:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:15:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp0dv1kwkw.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmp0dv1kwkw.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([first_item (first test_list)]\n            [first_item_second (second first_item)]\n            [rest_of_list (rest test_list)]\n            [rest_of_list_minimum (index_minimum rest_of_list)])\n       (if (empty? rest_of_list_minimum)\n           first_item\n           (let* ([rest_of_list_minimum_second (second rest_of_list_minimum)])\n             (if (< first_item_second rest_of_list_minimum_second)\n                 first_item\n                 rest_of_list_minimum))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2n2jyddb.rkt:24:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2n2jyddb.rkt:25:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2n2jyddb.rkt:26:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [second_list (cadr test_list)]\n            [first_value (car first_list)]\n            [second_value (car second_list)]\n            [first_index (cadr first_list)]\n            [second_index (cadr second_list)])\n       (if (< first_index second_index)\n           first_list\n           (index_minimum (cdr test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxztjj8iu.rkt:24:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxztjj8iu.rkt:25:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxztjj8iu.rkt:26:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list index)\n    (if (null? test_list)\n        index\n        (let ((current_index (index_minimum_helper (cdr test_list) index)))\n          (if (< (cadr (car test_list)) (cadr (car (nth current_index test_list))))\n              index\n              current_index))))\n  (car (nth (index_minimum_helper test_list 0) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "/tmp/tmp10o0opqm.rkt:9:52: nth: unbound identifier\n  in: nth\n  location...:\n   /tmp/tmp10o0opqm.rkt:9:52\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpqdjy99fx.rkt:7:11: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpqdjy99fx.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [second_list (cadr test_list)]\n            [first_list_second_value (cadr first_list)]\n            [second_list_second_value (cadr second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           (index_minimum (cons first_list (cddr test_list)))\n           (index_minimum (cons second_list (cddr test_list)))))\n     ]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1qq17gqi.rkt:23:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1qq17gqi.rkt:24:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1qq17gqi.rkt:25:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfdxvcf_9.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpfdxvcf_9.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ((min_index 0)\n        (min_value (second (car test_list))))\n    (for ([(index value) (in-indexed test_list)])\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpasu4xsgy.rkt:18:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpasu4xsgy.rkt:19:4\nactual:     '(\"Yash\" 185)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpasu4xsgy.rkt:20:4\nactual:     '(\"Sai\" 345)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let*\n         ([first_list (first test_list)]\n          [second_list (first (rest test_list))]\n          [first_second (second first_list)]\n          [second_second (second second_list)])\n       (if (< first_second second_second)\n           first_list\n           (index_minimum (rest test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kd9_g5e.rkt:23:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kd9_g5e.rkt:24:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kd9_g5e.rkt:25:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) (error \"Empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq9mri5ru.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq9mri5ru.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq9mri5ru.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [first_min (if (< (cadr first) (cadr second)) first second)]\n            [rest_min (index_minimum (cdr test_list))])\n       (if (< (cadr first_min) (cadr rest_min))\n           first_min\n           rest_min))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpctjdsz34.rkt:22:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpctjdsz34.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpctjdsz34.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [(= (length test_list) 1) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_second (second first_list)]\n            [second_second (second second_list)])\n       (if (< first_second second_second)\n           first_list\n           (index_minimum (rest test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9l1363x.rkt:22:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9l1363x.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe9l1363x.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_value (first test_list)]\n            [rest_value (index_minimum (rest test_list))])\n       (if (< (second first_value) (second rest_value))\n           first_value\n           rest_value))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkl136jxo.rkt:20:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkl136jxo.rkt:21:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkl136jxo.rkt:22:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((< (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb_vm2c.rkt:22:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb_vm2c.rkt:23:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb_vm2c.rkt:24:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (if (null? test_list)\n      '()\n      (let* ([smallest (apply min (map second test_list))]\n             [smallest_index (index-of smallest (map second test_list))])\n        (list (list-ref test_list smallest_index) smallest_index))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfylbl_ir.rkt:16:4\n\nindex-of: contract violation\n  expected: list?\n  given: 100\n  argument position: 1st\n  other arguments...:\n   '(143 200 100)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfylbl_ir.rkt:17:4\n\nindex-of: contract violation\n  expected: list?\n  given: 125\n  argument position: 1st\n  other arguments...:\n   '(185 125 175)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfylbl_ir.rkt:18:4\n\nindex-of: contract violation\n  expected: list?\n  given: 96\n  argument position: 1st\n  other arguments...:\n   '(345 145 96)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else\n     (let* ([min_index (argmin (map second test_list))]\n            [min_value (list-ref test_list min_index)])\n       (list min_index min_value))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp827kdqi8.rkt:17:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp827kdqi8.rkt:18:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp827kdqi8.rkt:19:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp0dv1kwkw.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmp0dv1kwkw.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (first (filter (lambda (x) (= (second x) min_index)) test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:13:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:14:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:15:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (min (first test_list) (index_minimum (rest test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprk9hiw2a.rkt:15:4\n\nmin: contract violation\n  expected: real?\n  given: '(\"Manjeet\" 200)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprk9hiw2a.rkt:16:4\n\nmin: contract violation\n  expected: real?\n  given: '(\"Dawood\" 125)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprk9hiw2a.rkt:17:4\n\nmin: contract violation\n  expected: real?\n  given: '(\"Salman\" 145)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfdxvcf_9.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpfdxvcf_9.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [first-value (car first)]\n            [first-index (cadr first)]\n            [second-value (car second)]\n            [second-index (cadr second)])\n       (if (< first-index second-index)\n           first\n           second))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnm7n4jk.rkt:24:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnm7n4jk.rkt:25:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnm7n4jk.rkt:26:4\nactual:     '(\"Salman\" 145)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzuu_8_5g.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzuu_8_5g.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzuu_8_5g.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [(= (length test_list) 1) (first test_list)]\n    [else\n     (let ([first_list (first test_list)]\n           [second_list (second test_list)])\n       (if (< (second first_list) (second second_list))\n           first_list\n           (index_minimum (rest test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkad0yv0g.rkt:20:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkad0yv0g.rkt:21:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkad0yv0g.rkt:22:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [else (let ([value (second (car test_list))])\n                  (if (< value min_value)\n                      (loop (cdr test_list) (add1 min_index) value)\n                      (loop (cdr test_list) min_index min_value)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwr9wqr9l.rkt:17:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwr9wqr9l.rkt:18:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwr9wqr9l.rkt:19:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (if (null? test_list)\n      '()\n      (let ((min_index (index_minimum (cdr test_list))))\n        (if (null? min_index)\n            (car test_list)\n            (if (< (cadr (car test_list)) (cadr min_index))\n                (car test_list)\n                min_index)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpogt7i9mo.rkt:19:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpogt7i9mo.rkt:20:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpogt7i9mo.rkt:21:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (first (filter (lambda (x) (= (second x) min_index)) test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:13:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:14:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:15:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list min_index min_value)\n    (if (null? test_list)\n        min_index\n        (let ((current_index (car test_list))\n              (current_value (cadr test_list)))\n          (if (< current_value min_value)\n              (index_minimum_helper (cddr test_list) current_index current_value)\n              (index_minimum_helper (cddr test_list) min_index min_value)))))\n  (index_minimum_helper test_list (car test_list) (cadr test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9_rnaul.rkt:20:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Manjeet\" 200)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9_rnaul.rkt:21:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Dawood\" 125)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9_rnaul.rkt:22:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Salman\" 145)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [first-second (car first)]\n            [second-second (car second)])\n       (if (< first-second second-second)\n           first\n           second))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm_lb6qbj.rkt:22:4\n\n<: contract violation\n  expected: real?\n  given: \"Rash\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm_lb6qbj.rkt:23:4\n\n<: contract violation\n  expected: real?\n  given: \"Yash\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm_lb6qbj.rkt:24:4\n\n<: contract violation\n  expected: real?\n  given: \"Sai\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (if (null? test_list)\n      '()\n      (let ((min (car test_list)))\n        (for ((i (cdr test_list)))\n          (if (< (cadr i) (cadr min))\n              (set! min i)))\n        min)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "/tmp/tmp8q42gc5a.rkt:9:10: if: missing an \"else\" expression\n  in: (if (< (cadr i) (cadr min)) (set! min i))\n  location...:\n   /tmp/tmp8q42gc5a.rkt:9:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list index)\n    (if (null? test_list)\n        index\n        (let ((current_index (index_minimum_helper (cdr test_list) index)))\n          (if (< (cadr (car test_list)) (cadr (car (nth current_index test_list))))\n              index\n              current_index))))\n  (car (nth (index_minimum_helper test_list 0) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "/tmp/tmp10o0opqm.rkt:9:52: nth: unbound identifier\n  in: nth\n  location...:\n   /tmp/tmp10o0opqm.rkt:9:52\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list current_index current_min_index)\n    (if (null? test_list)\n        current_min_index\n        (let ([current_value (car test_list)])\n          (if (< (cadr current_value) (cadr (list-ref test_list current_min_index)))\n              (index_minimum_helper (cdr test_list) (add1 current_index) current_index)\n              (index_minimum_helper (cdr test_list) (add1 current_index) current_min_index)))))\n  (index_minimum_helper test_list 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1gdlphnx.rkt:19:4\nactual:     0\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1gdlphnx.rkt:20:4\nactual:     0\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1gdlphnx.rkt:21:4\nactual:     0\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (if (< (second (first test_list)) (second (first (rest test_list))))\n             (first test_list)\n             (index_minimum (rest test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_s86gcq6.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_s86gcq6.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_s86gcq6.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [(< (cadr test_list) (cadr (cdr test_list))) (index_minimum (cdr test_list))]\n    [else (index_minimum (cons (car test_list) (cddr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2yex3aus.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Manjeet\" 200)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2yex3aus.rkt:17:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Dawood\" 125)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2yex3aus.rkt:18:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Salman\" 145)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (if (null? test_list)\n      '()\n      (let ([min_index (index_minimum (cdr test_list))])\n        (if (null? min_index)\n            (list (car test_list))\n            (if (< (cadr (car test_list)) (cadr (car min_index)))\n                (list (car test_list))\n                min_index)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3oej01u.rkt:19:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3oej01u.rkt:20:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3oej01u.rkt:21:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let ([first (car test_list)]\n           [second (car (cdr test_list))])\n       (if (< (cadr first) (cadr second))\n           first\n           (index_minimum (cdr test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8dgb2ios.rkt:20:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8dgb2ios.rkt:21:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8dgb2ios.rkt:22:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [(empty? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [first-second (car first)]\n            [second-second (car second)])\n       (if (< first-second second-second)\n           first\n           (index_minimum (cdr test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp52juyuwv.rkt:22:4\n\n<: contract violation\n  expected: real?\n  given: \"Rash\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp52juyuwv.rkt:23:4\n\n<: contract violation\n  expected: real?\n  given: \"Yash\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp52juyuwv.rkt:24:4\n\n<: contract violation\n  expected: real?\n  given: \"Sai\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (if (null? test_list)\n      '()\n      (let ((min_index (index_minimum (cdr test_list))))\n        (if (null? min_index)\n            (car test_list)\n            (if (< (cadr (car test_list)) (cadr min_index))\n                (car test_list)\n                min_index)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpogt7i9mo.rkt:19:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpogt7i9mo.rkt:20:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpogt7i9mo.rkt:21:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_value (first first_list)]\n            [second_value (first second_list)])\n       (if (< (second first_list) (second second_list))\n           first_value\n           (index_minimum (rest test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdxefrhll.rkt:22:4\nactual:     \"Rash\"\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdxefrhll.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "/tmp/tmpikueufql.rkt:7:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpikueufql.rkt:7:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [(< (cadr test_list) (cadr (cdr test_list))) (index_minimum test_list)]\n    [else (index_minimum (cdr test_list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpid319vvg.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Manjeet\" 200)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpid319vvg.rkt:17:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Dawood\" 125)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpid319vvg.rkt:18:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Salman\" 145)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else (min-index test_list)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "/tmp/tmpu_s28w2v.rkt:7:11: min-index: unbound identifier\n  in: min-index\n  location...:\n   /tmp/tmpu_s28w2v.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list current_index current_minimum)\n    (if (null? test_list)\n        current_index\n        (let* ([current_value (car test_list)]\n               [current_value_second (cadr current_value)]\n               [current_minimum_second (cadr current_minimum)])\n          (if (< current_value_second current_minimum_second)\n              (index_minimum_helper (cdr test_list) current_index current_value)\n              (index_minimum_helper (cdr test_list) (add1 current_index) current_minimum)))))\n  (index_minimum_helper test_list 0 (car test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptyknnbf3.rkt:21:4\nactual:     2\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptyknnbf3.rkt:22:4\nactual:     2\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptyknnbf3.rkt:23:4\nactual:     1\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list min_index min_value)\n    (cond\n      [(null? test_list) min_index]\n      [(< (cadr (car test_list)) min_value)\n       (index_minimum_helper (cdr test_list) (car test_list) (cadr (car test_list)))]\n      [else (index_minimum_helper (cdr test_list) min_index min_value)]))\n  (index_minimum_helper test_list (car test_list) (cadr (car test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwsfzeqv9.rkt:18:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwsfzeqv9.rkt:19:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwsfzeqv9.rkt:20:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (first (filter (lambda (x) (= (second x) min_index)) test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:13:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:14:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:15:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list] [index 0] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [else\n           (if (< (second (car test_list)) min_value)\n               (loop (cdr test_list) (+ index 1) index (second (car test_list)))\n               (loop (cdr test_list) (+ index 1) min_index min_value))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphqjh4vs_.rkt:17:4\nactual:     2\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphqjh4vs_.rkt:18:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphqjh4vs_.rkt:19:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (if (< (second (first test_list)) (second (first (rest test_list))))\n             (first test_list)\n             (index_minimum (rest test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcbcs0nl2.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcbcs0nl2.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcbcs0nl2.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzuu_8_5g.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzuu_8_5g.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzuu_8_5g.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_list_second_value (second first_list)]\n            [second_list_second_value (second second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           first_list\n           (index_minimum (rest test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpup6ylq7s.rkt:22:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpup6ylq7s.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpup6ylq7s.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_value (second (car test_list))]\n             [min_index 0])\n    (cond [(empty? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (second (car test_list))\n                 (add1 min_index))]\n          [else (loop (cdr test_list)\n                      min_value\n                      (add1 min_index))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5fmohpga.rkt:22:4\nactual:     3\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5fmohpga.rkt:23:4\nactual:     3\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5fmohpga.rkt:24:4\nactual:     3\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [(= (length test_list) 1) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [rest (cdr (cdr test_list))])\n       (if (< (second first) (second second))\n           (index_minimum (cons first rest))\n           (index_minimum (cons second rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wl5142p.rkt:21:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(\"Manjeet\" 200)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wl5142p.rkt:22:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(\"Dawood\" 125)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wl5142p.rkt:23:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(\"Salman\" 145)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) (error \"Empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (let ([min-index (index_minimum (cdr test_list))])\n            (if (< (cadr (car test_list)) (cadr min-index))\n                (car test_list)\n                min-index))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjk6rdxx.rkt:18:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjk6rdxx.rkt:19:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjk6rdxx.rkt:20:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [(empty? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [second_list (car (cdr test_list))]\n            [first_value (car first_list)]\n            [second_value (car second_list)]\n            [first_index (cadr first_list)]\n            [second_index (cadr second_list)])\n       (if (< first_index second_index)\n           first_list\n           (index_minimum (cdr test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph1yszmd9.rkt:24:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph1yszmd9.rkt:25:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph1yszmd9.rkt:26:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let ([min_index (index_minimum (rest test_list))])\n       (if (empty? min_index)\n           (list (first test_list))\n           (if (< (second (first test_list)) (second (first min_index)))\n               (list (first test_list))\n               min_index)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe_a4rt54.rkt:20:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe_a4rt54.rkt:21:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe_a4rt54.rkt:22:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(empty? test_list) min_index]\n          [else (let ([current_index (add1 min_index)]\n                      [current_value (second (car test_list))])\n                  (if (< current_value min_value)\n                      (loop (cdr test_list) current_index current_value)\n                      (loop (cdr test_list) min_index min_value)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7bgwmt8.rkt:20:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7bgwmt8.rkt:21:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7bgwmt8.rkt:22:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (argmin (map second test_list))])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzktbwdo8.rkt:13:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzktbwdo8.rkt:14:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzktbwdo8.rkt:15:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0])\n    (if (null? test_list)\n        min_index\n        (let ([current_index (car test_list)])\n          (if (< (cadr current_index) (cadr (list-ref test_list min_index)))\n              (loop (cdr test_list) (car test_list))\n              (loop (cdr test_list) min_index))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfsk4oq5l.rkt:19:4\nactual:     0\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfsk4oq5l.rkt:20:4\nactual:     0\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfsk4oq5l.rkt:21:4\nactual:     0\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (find min_index test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp60abd2mh.rkt:6:5: find: unbound identifier\n  in: find\n  location...:\n   /tmp/tmp60abd2mh.rkt:6:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (helper test_list min_index min_value)\n    (cond ((null? test_list) min_index)\n          ((< (cadr (car test_list)) min_value)\n           (helper (cdr test_list) (car test_list) (cadr (car test_list))))\n          (else (helper (cdr test_list) min_index min_value))))\n  (helper test_list (car test_list) (cadr (car test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5h17ajqg.rkt:17:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5h17ajqg.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5h17ajqg.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:13:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:14:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:15:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ((min_index 0)\n        (min_value (cadr (car test_list))))\n    (for ([(index value) (in-indexed test_list)])\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqt4dcwa.rkt:18:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqt4dcwa.rkt:19:4\nactual:     '(\"Yash\" 185)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqt4dcwa.rkt:20:4\nactual:     '(\"Sai\" 345)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list] [index 0] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [else\n           (if (< (second (car test_list)) min_value)\n               (loop (cdr test_list) (+ index 1) index (second (car test_list)))\n               (loop (cdr test_list) (+ index 1) min_index min_value))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphqjh4vs_.rkt:17:4\nactual:     2\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphqjh4vs_.rkt:18:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphqjh4vs_.rkt:19:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (if (< (second (first test_list)) (second (index_minimum (rest test_list))))\n             (first test_list)\n             (index_minimum (rest test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcvpe3lv6.rkt:17:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcvpe3lv6.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcvpe3lv6.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([first_list (first test_list)]\n            [first_value (first first_list)]\n            [first_index (second first_list)]\n            [rest_list (rest test_list)]\n            [rest_minimum (index_minimum rest_list)])\n       (cond\n         [(empty? rest_minimum) first_list]\n         [(< first_index (second rest_minimum)) first_list]\n         [else rest_minimum]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp054dxxbh.rkt:23:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp054dxxbh.rkt:24:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp054dxxbh.rkt:25:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_val (apply min (map second test_list))])\n    (find-first (lambda (x) (= (second x) min_val)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "/tmp/tmparz9a4o7.rkt:6:5: find-first: unbound identifier\n  in: find-first\n  location...:\n   /tmp/tmparz9a4o7.rkt:6:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [(= (length test_list) 1) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [second_list (cadr test_list)]\n            [first_list_second_value (cadr first_list)]\n            [second_list_second_value (cadr second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           first_list\n           (index_minimum (cdr test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnruuuiws.rkt:22:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnruuuiws.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnruuuiws.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) 0]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (second (list-ref test_list min_index))]\n            [current_value (second (first test_list))])\n       (if (&lt; current_value min_value)\n           0\n           (+ 1 min_index)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "/tmp/tmpfkz5kbak.rkt:14:28: read-syntax: missing `)` to close `(` on line 9, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list index min_index)\n    (cond\n      [(empty? test_list) min_index]\n      [(< (second (first test_list)) (second (list-ref test_list min_index)))\n       (index_minimum_helper (rest test_list) (add1 index) index)]\n      [else (index_minimum_helper (rest test_list) (add1 index) min_index)]))\n  (list-ref test_list (index_minimum_helper test_list 0 0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3f0533x.rkt:18:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3f0533x.rkt:19:4\nactual:     '(\"Yash\" 185)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3f0533x.rkt:20:4\nactual:     '(\"Sai\" 345)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list)))]\n          [else (loop (cdr test_list)\n                      min_index\n                      min_value)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuvl1d4gf.rkt:22:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuvl1d4gf.rkt:23:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuvl1d4gf.rkt:24:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "/tmp/tmpikueufql.rkt:7:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpikueufql.rkt:7:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n            [current_value (second (first test_list))])\n       (if (empty? min_index)\n           0\n           (if (< current_value min_value)\n               0\n               (add1 min_index))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpychx9ask.rkt:22:4\nactual:     0\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpychx9ask.rkt:23:4\nactual:     2\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpychx9ask.rkt:24:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list min_index min_val)\n    (cond\n      [(empty? test_list) min_index]\n      [(< (second (first test_list)) min_val) (index_minimum_helper (rest test_list) (first test_list) (second (first test_list)))]\n      [else (index_minimum_helper (rest test_list) min_index min_val)]))\n  (index_minimum_helper test_list (first test_list) (second (first test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjbu8jkj1.rkt:17:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjbu8jkj1.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjbu8jkj1.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((< (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list) min_index min_value)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1yjwuwmh.rkt:20:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1yjwuwmh.rkt:21:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1yjwuwmh.rkt:22:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else\n     (let* ([min_index (argmin (map second test_list))]\n            [min_value (list-ref test_list min_index)])\n       min_value)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps03xp94.rkt:17:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps03xp94.rkt:18:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps03xp94.rkt:19:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (argmin (map second test_list))]\n            [min_value (list-ref test_list min_index)])\n       min_value)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxmzh1504.rkt:17:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxmzh1504.rkt:18:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxmzh1504.rkt:19:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [(empty? (cdr test_list)) (car test_list)]\n    [else (let* ([first (car test_list)]\n                 [second (cadr test_list)]\n                 [rest (cddr test_list)])\n            (if (&lt; (cadr first) (cadr second))\n                (index_minimum (cons first rest))\n                (index_minimum (cons second rest))))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "/tmp/tmpz8ahkj24.rkt:13:52: read-syntax: missing `)` to close `(` on line 8, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [first_value (car first_list)]\n            [first_index (cadr first_list)]\n            [second_list (cadr test_list)]\n            [second_value (car second_list)]\n            [second_index (cadr second_list)])\n       (if (< first_index second_index)\n           first_value\n           (index_minimum (cdr test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1udiu2gg.rkt:24:4\nactual:     \"Rash\"\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1udiu2gg.rkt:26:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptl3re5v8.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptl3re5v8.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptl3re5v8.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list min_index min_value)\n    (cond\n      [(empty? test_list) min_index]\n      [else (let ([index (first test_list)]\n                 [value (second test_list)])\n              (if (< value min_value)\n                  (index_minimum_helper (rest (rest test_list)) index value)\n                  (index_minimum_helper (rest (rest test_list)) min_index min_value)))]))\n  (index_minimum_helper test_list 0 (second (first test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph6856_2.rkt:20:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Manjeet\" 200)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph6856_2.rkt:21:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Dawood\" 125)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpph6856_2.rkt:22:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Salman\" 145)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [else (let ([min (apply min (map second test_list))])\n            (index_of min test_list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmpxdjkqavm.rkt:8:13: index_of: unbound identifier\n  in: index_of\n  location...:\n   /tmp/tmpxdjkqavm.rkt:8:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list)))\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 min_value)]\n          [else (loop (cdr test_list)\n                      min_index\n                      (second (car test_list)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxkp6hfw.rkt:22:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxkp6hfw.rkt:23:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxkp6hfw.rkt:24:4\nactual:     0\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else (let* ([min_index (argmin (map second test_list))]\n                 [min_value (list-ref test_list min_index)])\n            (list min_index min_value))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggbrfle7.rkt:16:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggbrfle7.rkt:17:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpggbrfle7.rkt:18:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ((min_index (first test_list))\n        (min_value (second (first test_list))))\n    (for ([i test_list])\n      (when (< (second i) min_value)\n        (set! min_index i)\n        (set! min_value (second i))))\n    min_index))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpswpy0jpa.rkt:18:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpswpy0jpa.rkt:19:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpswpy0jpa.rkt:20:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [rest (cddr test_list)])\n       (if (< (cadr first) (cadr second))\n           (index_minimum (cons first rest))\n           (index_minimum (cons second rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaazr17fk.rkt:21:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaazr17fk.rkt:22:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaazr17fk.rkt:23:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [else\n     (let* ([first_list (car test_list)]\n            [first_value (car first_list)]\n            [second_value (cadr first_list)])\n       (cond\n         [(null? (cdr test_list)) first_value]\n         [else\n          (let* ([next_list (cadr test_list)]\n                 [next_value (car next_list)]\n                 [next_second_value (cadr next_list)])\n            (if (< second_value next_second_value)\n                first_value\n                next_value))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc7eq_87.rkt:26:4\nactual:     \"Rash\"\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc7eq_87.rkt:28:4\nactual:     \"Salman\"\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfdxvcf_9.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpfdxvcf_9.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map (lambda (x) (cadr x)) test_list))])\n    (find (lambda (x) (= (cadr x) min_index)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmpkdxisgnd.rkt:6:5: find: unbound identifier\n  in: find\n  location...:\n   /tmp/tmpkdxisgnd.rkt:6:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((&lt; (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmp4vxah295.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (cadr (car test_list))])\n    (if (null? test_list)\n        min_index\n        (let ([new_value (cadr (car test_list))])\n          (if (< new_value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    new_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbpal1_58.rkt:24:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbpal1_58.rkt:25:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbpal1_58.rkt:26:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (if (null? test_list)\n        min_index\n        (let ([new_index (add1 min_index)]\n              [new_value (second (car test_list))])\n          (if (&lt; new_value min_value)\n              (loop (cdr test_list) new_index new_value)\n              (loop (cdr test_list) min_index min_value))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmpspi3m0hd.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index 0]\n        [min_value (second (list-ref test_list 0))])\n    (for ([i (in-range (length test_list))])\n      (when (< (second (list-ref test_list i)) min_value)\n        (set! min_index i)\n        (set! min_value (second (list-ref test_list i)))))\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7h2xvylt.rkt:18:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7h2xvylt.rkt:19:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7h2xvylt.rkt:20:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (if (null? test_list)\n        min_index\n        (let ((current_index (add1 min_index))\n              (current_value (cadr (car test_list))))\n          (if (&lt; current_value min_value)\n              (loop (cdr test_list)\n                    current_index\n                    current_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmpy27hoevo.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0 1)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmpicusn6c3.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpicusn6c3.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (second (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((&lt; (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmpf54u1fa2.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list))) (loop (cdr test_list) (+ min_index 1) min_value)]\n          [else (loop (cdr test_list) (+ min_index 1) (second (car test_list)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqpftqt2k.rkt:15:4\nactual:     3\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqpftqt2k.rkt:16:4\nactual:     3\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqpftqt2k.rkt:17:4\nactual:     3\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfdxvcf_9.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpfdxvcf_9.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_oet38uy.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_oet38uy.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_oet38uy.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list index)\n    (if (null? test_list)\n        index\n        (if (< (cadr (car test_list)) (cadr (list-ref test_list index)))\n            (index_minimum_helper (cdr test_list) (car test_list))\n            (index_minimum_helper (cdr test_list) index))))\n  (index_minimum_helper test_list (car test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnmlxyvwb.rkt:18:4\n\nlist-ref: index '(\"Rash\" 143) is not an exact nonnegative integer\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnmlxyvwb.rkt:19:4\n\nlist-ref: index '(\"Yash\" 185) is not an exact nonnegative integer\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnmlxyvwb.rkt:20:4\n\nlist-ref: index '(\"Sai\" 345) is not an exact nonnegative integer\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [rest (cddr test_list)])\n       (if (< (cadr first) (cadr second))\n           (index_minimum (cons first rest))\n           (index_minimum (cons second rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaazr17fk.rkt:21:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaazr17fk.rkt:22:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaazr17fk.rkt:23:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (argmin (map second test_list))])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzktbwdo8.rkt:13:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzktbwdo8.rkt:14:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzktbwdo8.rkt:15:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfdxvcf_9.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpfdxvcf_9.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond [(empty? test_list) '()]\n        [else (index_minimum_helper test_list (car test_list) (cadr test_list) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmp_60xkd5l.rkt:6:15: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmp_60xkd5l.rkt:6:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min (apply min (map second test_list))])\n    (first (filter (lambda (x) (= min (second x))) test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkfmoo8o4.rkt:13:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkfmoo8o4.rkt:14:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkfmoo8o4.rkt:15:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (let ([first_min (first test_list)]\n                [rest_min (index_minimum (rest test_list))])\n            (if (< (second first_min) (second rest_min))\n                first_min\n                rest_min))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0dcryph8.rkt:19:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0dcryph8.rkt:20:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0dcryph8.rkt:21:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [(= (length test_list) 1) (car test_list)]\n    [else (let ([first_element (car test_list)]\n                [second_element (car (cdr test_list))])\n            (if (< (cadr first_element) (cadr second_element))\n                first_element\n                second_element))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubxdqdzh.rkt:19:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubxdqdzh.rkt:20:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpubxdqdzh.rkt:21:4\nactual:     '(\"Salman\" 145)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(empty? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list)))]\n          [else (loop (cdr test_list)\n                      min_index\n                      min_value)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54vojf0s.rkt:22:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54vojf0s.rkt:23:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54vojf0s.rkt:24:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (let ([first_value (first test_list)]\n                [second_value (second test_list)]\n                [rest_of_list (rest test_list)])\n             (if (< (second first_value) (second (index_minimum rest_of_list)))\n                 first_value\n                 (index_minimum rest_of_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplzcdmwlw.rkt:20:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplzcdmwlw.rkt:21:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplzcdmwlw.rkt:22:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:13:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:14:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:15:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (find min_index test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp60abd2mh.rkt:6:5: find: unbound identifier\n  in: find\n  location...:\n   /tmp/tmp60abd2mh.rkt:6:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ((min_index 0)\n        (min_value (second (car test_list))))\n    (for ([(index value) (in-indexed test_list)])\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpasu4xsgy.rkt:18:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpasu4xsgy.rkt:19:4\nactual:     '(\"Yash\" 185)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpasu4xsgy.rkt:20:4\nactual:     '(\"Sai\" 345)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list] [index 0] [min_index 0] [min_value (second (car test_list))])\n    (if (null? test_list)\n        min_index\n        (if (< (second (car test_list)) min_value)\n            (loop (cdr test_list) (+ index 1) index (second (car test_list)))\n            (loop (cdr test_list) (+ index 1) min_index min_value)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpig_kx1x7.rkt:17:4\nactual:     2\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpig_kx1x7.rkt:18:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpig_kx1x7.rkt:19:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (if (null? test_list)\n      '()\n      (let ([min_index (index_minimum (cdr test_list))])\n        (if (null? min_index)\n            (car test_list)\n            (if (< (cadr (car test_list)) (cadr min_index))\n                (car test_list)\n                min_index)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmaqmb7q.rkt:19:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmaqmb7q.rkt:20:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmaqmb7q.rkt:21:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (find-first (lambda (x) (= min_index (second x))) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "/tmp/tmprpagaeft.rkt:6:5: find-first: unbound identifier\n  in: find-first\n  location...:\n   /tmp/tmprpagaeft.rkt:6:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list min_index min_value)\n    (if (null? test_list)\n        min_index\n        (let ((current_value (cadr (car test_list))))\n          (if (&lt; current_value min_value)\n              (index_minimum_helper (cdr test_list) (car test_list) current_value)\n              (index_minimum_helper (cdr test_list) min_index min_value)))))\n  (index_minimum_helper test_list (car test_list) (cadr (car test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmpf_2t99ct.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (letrec ([min-index (lambda (lst)\n                        (if (null? lst)\n                            0\n                            (let ([min-index (min-index (cdr lst))])\n                              (if (< (cadr (car lst)) (cadr (list-ref lst min-index)))\n                                  0\n                                  (+ 1 min-index)))))])\n    (list-ref test_list (min-index test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nin_ow3.rkt:19:4\n\nlist-ref: index too large for list\n  index: 3\n  in: '((\"Rash\" 143) (\"Manjeet\" 200) (\"Varsha\" 100))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nin_ow3.rkt:20:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nin_ow3.rkt:21:4\n\nlist-ref: index too large for list\n  index: 3\n  in: '((\"Sai\" 345) (\"Salman\" 145) (\"Ayesha\" 96))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [else\n     (let* ([min-index (index_minimum (cdr test_list))]\n            [min-value (if min-index (cadr (list-ref test_list min-index)) #f)]\n            [current-value (cadr (car test_list))])\n       (cond\n         [(null? min-index) 0]\n         [(< current-value min-value) 0]\n         [else (+ 1 min-index)]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw95kymox.rkt:21:4\n\n<: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw95kymox.rkt:22:4\n\n<: contract violation\n  expected: real?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw95kymox.rkt:23:4\n\n<: contract violation\n  expected: real?\n  given: #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let*\n         ([first_list (first test_list)]\n          [second_list (first (rest test_list))]\n          [first_value (first first_list)]\n          [second_value (first second_list)])\n       (if (< (second first_list) (second second_list))\n           first_list\n           (index_minimum (rest test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0gw2_6un.rkt:23:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0gw2_6un.rkt:24:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0gw2_6un.rkt:25:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= min_index (second x))) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ny22wdc.rkt:13:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ny22wdc.rkt:14:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ny22wdc.rkt:15:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (cadr test_list)]\n            [rest (cddr test_list)])\n       (if (< (cadr first) (cadr second))\n           (index_minimum (cons first rest))\n           (index_minimum (cons second rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0o3orep6.rkt:21:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0o3orep6.rkt:22:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0o3orep6.rkt:23:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list index min_index min_value)\n    (cond\n      [(empty? test_list) min_index]\n      [else\n       (define current_value (second (first test_list)))\n       (cond\n         [(< current_value min_value) (index_minimum_helper (rest test_list) (add1 index) index current_value)]\n         [else (index_minimum_helper (rest test_list) (add1 index) min_index min_value)])]))\n  (index_minimum_helper test_list 0 0 (second (first test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsugpl_y4.rkt:20:4\nactual:     2\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsugpl_y4.rkt:21:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsugpl_y4.rkt:22:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr test_list) (cadr (cdr test_list)))\n             (index_minimum (cons (car test_list) (cddr test_list)))\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp67e9tniv.rkt:17:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Manjeet\" 200)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp67e9tniv.rkt:18:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Dawood\" 125)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp67e9tniv.rkt:19:4\n\n<: contract violation\n  expected: real?\n  given: '(\"Salman\" 145)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (second (car test_list))))\n    (if (null? test_list)\n        min_index\n        (let ((current_value (second (car test_list))))\n          (if (&lt; current_value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    current_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "/tmp/tmpngzkrq94.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 18\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list)))\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 min_value)]\n          [else (loop (cdr test_list)\n                      min_index\n                      (second (car test_list)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxkp6hfw.rkt:22:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxkp6hfw.rkt:23:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxkp6hfw.rkt:24:4\nactual:     0\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ((min_index 0)\n        (min_value (second (first test_list))))\n    (for ((index (in-range (length test_list)))\n          (value (in-list (map second test_list))))\n      (when (< value min_value)\n        (set! min_index index)\n        (set! min_value value)))\n    min_index))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lvzewpo.rkt:19:4\nactual:     2\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lvzewpo.rkt:20:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lvzewpo.rkt:21:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfdxvcf_9.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpfdxvcf_9.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(empty? (rest test_list)) (first test_list)]\n    [else (if (< (second (first test_list)) (second (first (rest test_list))))\n              (first test_list)\n              (index_minimum (rest test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ha04wkw.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ha04wkw.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ha04wkw.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_list_second_value (second first_list)]\n            [second_list_second_value (second second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           (index_minimum (cons first_list (rest (rest test_list))))\n           (index_minimum (cons second_list (rest (rest test_list))))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpekn5m2zd.rkt:22:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpekn5m2zd.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpekn5m2zd.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpqdjy99fx.rkt:7:11: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpqdjy99fx.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [else (index_minimum_helper test_list (car test_list) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "/tmp/tmpjnd1jin4.rkt:7:11: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpjnd1jin4.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (if (null? test_list)\n        min_index\n        (let ((current_value (cadr (car test_list))))\n          (if (< current_value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    current_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zpnyaxy.rkt:24:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zpnyaxy.rkt:25:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zpnyaxy.rkt:26:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) (error \"empty list\")]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let*\n         ([current_min (index_minimum (cdr test_list))]\n          [current_min_index (cadr current_min)]\n          [test_list_index (cadr (car test_list))])\n       (if (< current_min_index test_list_index)\n           current_min\n           (car test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgerkzqfk.rkt:22:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgerkzqfk.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgerkzqfk.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [first_second (car first)]\n            [second_second (car second)])\n       (if (< first_second second_second)\n           first\n           second))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2pqj_3bv.rkt:22:4\n\n<: contract violation\n  expected: real?\n  given: \"Rash\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2pqj_3bv.rkt:23:4\n\n<: contract violation\n  expected: real?\n  given: \"Yash\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2pqj_3bv.rkt:24:4\n\n<: contract violation\n  expected: real?\n  given: \"Sai\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (second (first test_list)) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "/tmp/tmpoeh0hyc_.rkt:7:11: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpoeh0hyc_.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else\n     (let ([min_index (index_minimum (rest test_list))])\n       (cond\n         [(empty? min_index) (list (first test_list))]\n         [(< (second (first test_list)) (second (first min_index))) (list (first test_list))]\n         [else min_index]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyi_c1ck.rkt:19:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyi_c1ck.rkt:20:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyi_c1ck.rkt:21:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (if (null? test_list)\n        min_index\n        (let ((current_value (cadr (car test_list))))\n          (if (< current_value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    current_value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zpnyaxy.rkt:24:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zpnyaxy.rkt:25:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_zpnyaxy.rkt:26:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfdxvcf_9.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpfdxvcf_9.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (equal? (second x) min_index)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoby85753.rkt:13:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoby85753.rkt:14:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoby85753.rkt:15:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0])\n    (if (null? test_list)\n        min_index\n        (let ([index (car test_list)])\n          (if (< (cadr index) (cadr (list-ref test_list min_index)))\n              (loop (cdr test_list) (car test_list))\n              (loop (cdr test_list) min_index))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmperq1ss7x.rkt:19:4\nactual:     0\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmperq1ss7x.rkt:20:4\nactual:     0\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmperq1ss7x.rkt:21:4\nactual:     0\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (find-first (lambda (x) (= (second x) min_index)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpd0bm1lg9.rkt:6:5: find-first: unbound identifier\n  in: find-first\n  location...:\n   /tmp/tmpd0bm1lg9.rkt:6:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (if (null? test_list)\n      '()\n      (let loop ((test_list test_list)\n                 (min_index 0)\n                 (min_value (cadr (car test_list))))\n        (if (null? test_list)\n            min_index\n            (let ((current_value (cadr (car test_list))))\n              (if (< current_value min_value)\n                  (loop (cdr test_list)\n                        (add1 min_index)\n                        current_value)\n                  (loop (cdr test_list)\n                        min_index\n                        min_value)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgf974h8l.rkt:26:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgf974h8l.rkt:27:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgf974h8l.rkt:28:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first (car test_list)]\n            [second (car (cdr test_list))]\n            [first-second (car first)]\n            [second-second (car second)])\n       (if (< first-second second-second)\n           first\n           second))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0b07tun.rkt:22:4\n\n<: contract violation\n  expected: real?\n  given: \"Rash\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0b07tun.rkt:23:4\n\n<: contract violation\n  expected: real?\n  given: \"Yash\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0b07tun.rkt:24:4\n\n<: contract violation\n  expected: real?\n  given: \"Sai\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [first_list_second (cadr first_list)]\n            [rest_list (cdr test_list)]\n            [rest_list_minimum (index_minimum rest_list)]\n            [rest_list_minimum_second (cadr rest_list_minimum)])\n       (if (< first_list_second rest_list_minimum_second)\n           first_list\n           rest_list_minimum))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps2wff5au.rkt:23:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps2wff5au.rkt:24:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps2wff5au.rkt:25:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list))) (loop (cdr test_list) min_index min_value)]\n          [else (loop (cdr test_list) (+ min_index 1) (second (car test_list)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy00krr8k.rkt:17:4\nactual:     2\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy00krr8k.rkt:18:4\nactual:     2\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy00krr8k.rkt:19:4\nactual:     3\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list] [min_index 0] [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< (second (car test_list)) min_value) (loop (cdr test_list) (add1 min_index) (second (car test_list)))]\n          [else (loop (cdr test_list) min_index min_value)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqo45ww_5.rkt:15:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqo45ww_5.rkt:16:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqo45ww_5.rkt:17:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_list (car test_list)]\n            [first_value (cadr first_list)]\n            [rest_list (cdr test_list)]\n            [rest_value (index_minimum rest_list)])\n       (if (< first_value (cadr rest_value))\n           first_list\n           rest_value))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcbju64e.rkt:22:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcbju64e.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcbju64e.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) (second (first test_list)) (second (list-ref test_list min_index)))]\n            [current_index (if (empty? min_index) 0 (add1 min_index))]\n            [current_value (second (list-ref test_list current_index))])\n       (if (&lt; current_value min_value)\n           current_index\n           min_index))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "/tmp/tmpvlhaspbh.rkt:14:22: read-syntax: missing `)` to close `(` on line 8, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) #f]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_list_second_value (second first_list)]\n            [second_list_second_value (second second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           (index_minimum (cons first_list (rest (rest test_list))))\n           (index_minimum (cons second_list (rest (rest test_list))))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsaqwbxee.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsaqwbxee.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsaqwbxee.rkt:23:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (cadr test_list)))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphmb0pymp.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (min_index test_list)\n    (if (null? test_list)\n        '()\n        (if (null? (cdr test_list))\n            (car test_list)\n            (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n                (car test_list)\n                (min_index (cdr test_list))))))\n  (car (min_index test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvu54dg3.rkt:20:4\nactual:     \"Rash\"\nexpected:   \"Varsha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else\n     (let* ([first_value (car test_list)]\n            [second_value (cadr test_list)]\n            [first_value_second_value (cadr first_value)]\n            [second_value_second_value (cadr second_value)])\n       (if (< first_value_second_value second_value_second_value)\n           first_value\n           (index_minimum (cdr test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp294vb0eh.rkt:22:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp294vb0eh.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp294vb0eh.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else\n     (let* ([min_index (argmin (map second test_list))]\n            [min_value (list-ref test_list min_index)])\n       min_value)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps03xp94.rkt:17:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps03xp94.rkt:18:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps03xp94.rkt:19:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (if (null? test_list)\n      '()\n      (let* ([smallest (apply min (map second test_list))]\n             [smallest_index (index-of smallest (map second test_list))])\n        (list-ref test_list smallest_index))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdmrh5q7s.rkt:16:4\n\nindex-of: contract violation\n  expected: list?\n  given: 100\n  argument position: 1st\n  other arguments...:\n   '(143 200 100)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdmrh5q7s.rkt:17:4\n\nindex-of: contract violation\n  expected: list?\n  given: 125\n  argument position: 1st\n  other arguments...:\n   '(185 125 175)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdmrh5q7s.rkt:18:4\n\nindex-of: contract violation\n  expected: list?\n  given: 96\n  argument position: 1st\n  other arguments...:\n   '(345 145 96)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n            [current_index (rest test_list)]\n            [current_value (second (list-ref test_list current_index))])\n       (cond\n         [(empty? min_index) current_index]\n         [(< min_value current_value) min_index]\n         [else current_index]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplcdpgj9l.rkt:22:4\n\nlist-ref: index '() is not an exact nonnegative integer\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplcdpgj9l.rkt:23:4\n\nlist-ref: index '() is not an exact nonnegative integer\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplcdpgj9l.rkt:24:4\n\nlist-ref: index '() is not an exact nonnegative integer\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptl3re5v8.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptl3re5v8.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptl3re5v8.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [(null? (cdr test_list)) (car test_list)]\n    [(< (cadr (car test_list)) (cadr (car (cdr test_list)))) (car test_list)]\n    [else (index_minimum (cdr test_list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5qc376zc.rkt:16:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5qc376zc.rkt:17:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5qc376zc.rkt:18:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list index min)\n    (cond\n      [(empty? test_list) index]\n      [(< (second (first test_list)) min) (index_minimum_helper (rest test_list) (first test_list) (second (first test_list)))]\n      [else (index_minimum_helper (rest test_list) index min)]))\n  (index_minimum_helper test_list (first test_list) (second (first test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1y8g5i.rkt:17:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1y8g5i.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_y1y8g5i.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let*\n         ([min_index (index_minimum (rest test_list))]\n          [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n          [current_index (if (empty? min_index) 0 (add1 min_index))]\n          [current_value (second (list-ref test_list current_index))])\n       (if (or (empty? min_index) (< current_value min_value))\n           current_index\n           min_index))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1zjmluv7.rkt:22:4\nactual:     2\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1zjmluv7.rkt:23:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1zjmluv7.rkt:24:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ((test_list test_list)\n             (min_index 0)\n             (min_value (cadr (car test_list))))\n    (cond ((null? test_list) min_index)\n          ((&lt; (cadr (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (cadr (car test_list))))\n          (else (loop (cdr test_list)\n                      min_index\n                      min_value)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpu7x_xryv.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list)))]\n          [else (loop (cdr test_list)\n                      min_index\n                      min_value)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuvl1d4gf.rkt:22:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuvl1d4gf.rkt:23:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuvl1d4gf.rkt:24:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [(empty? (rest test_list)) (first test_list)]\n    [else\n     (let* ([first_list (first test_list)]\n            [second_list (first (rest test_list))]\n            [first_list_second_value (second first_list)]\n            [second_list_second_value (second second_list)])\n       (if (< first_list_second_value second_list_second_value)\n           first_list\n           (index_minimum (rest test_list))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpup6ylq7s.rkt:22:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpup6ylq7s.rkt:23:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpup6ylq7s.rkt:24:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (if (null? test_list)\n        min_index\n        (let ([current_index (add1 min_index)]\n              [current_value (second (car test_list))])\n          (if (&lt; current_value min_value)\n              (loop (cdr test_list) current_index current_value)\n              (loop (cdr test_list) min_index min_value))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "/tmp/tmptvzfc2zo.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 16\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (index_minimum_helper test_list index)\n    (if (null? test_list)\n        index\n        (if (< (cadr (car test_list)) (cadr (list-ref test_list index)))\n            (index_minimum_helper (cdr test_list) (car test_list))\n            (index_minimum_helper (cdr test_list) index))))\n  (index_minimum_helper test_list (car test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnmlxyvwb.rkt:18:4\n\nlist-ref: index '(\"Rash\" 143) is not an exact nonnegative integer\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnmlxyvwb.rkt:19:4\n\nlist-ref: index '(\"Yash\" 185) is not an exact nonnegative integer\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnmlxyvwb.rkt:20:4\n\nlist-ref: index '(\"Sai\" 345) is not an exact nonnegative integer\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else\n     (let* ([min_index (list-ref test_list 0)]\n            [min_value (list-ref (list-ref test_list 0) 1)])\n       (for ([i (in-range (length test_list))])\n         (let* ([curr_index (list-ref test_list i)]\n                [curr_value (list-ref (list-ref test_list i) 1)])\n           (when (< curr_value min_value)\n             (set! min_index curr_index)\n             (set! min_value curr_value))))\n       min_index)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpokc2qhx6.rkt:23:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpokc2qhx6.rkt:24:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpokc2qhx6.rkt:25:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (second (list-ref test_list min_index)))]\n            [current_value (second (first test_list))])\n       (if (empty? min_index)\n           0\n           (if (< current_value min_value)\n               0\n               (add1 min_index))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123583,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpychx9ask.rkt:22:4\nactual:     0\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpychx9ask.rkt:23:4\nactual:     2\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpychx9ask.rkt:24:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (for/first ([x test_list]\n                #:when (equal? (second x) min_index))\n      (first x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let* ([min_index (apply min (map second test_list))]\n         [min_index_list (filter (lambda (x) (= min_index (second x))) test_list)])\n    (first (first min_index_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [else (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n             (car test_list)\n             (index_minimum (cdr test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn731i4wt.rkt:17:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn731i4wt.rkt:18:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn731i4wt.rkt:19:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (if (null? test_list)\n        min_index\n        (let ([value (second (car test_list))])\n          (if (< value min_value)\n              (loop (cdr test_list)\n                    (add1 min_index)\n                    value)\n              (loop (cdr test_list)\n                    min_index\n                    min_value))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pk9bkgj.rkt:24:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pk9bkgj.rkt:25:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pk9bkgj.rkt:26:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (index_minimum_helper test_list 0)])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp0dv1kwkw.rkt:5:20: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmp0dv1kwkw.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else (index_minimum_helper test_list (first test_list) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpqdjy99fx.rkt:7:11: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpqdjy99fx.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (argmin (map second test_list))])\n    (list-ref test_list min_index)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123582,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzktbwdo8.rkt:13:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzktbwdo8.rkt:14:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzktbwdo8.rkt:15:4\n\nargmin: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (letrec ([min_index (lambda (index)\n                        (if (null? (cdr test_list))\n                            index\n                            (if (< (cadr (car test_list)) (cadr (car (cdr test_list))))\n                                (min_index index)\n                                (min_index (add1 index)))))])\n    (car (list-ref test_list (min_index 0)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123599,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (first (min-indexes (map second test_list)))]\n        [min_value (nth test_list min_index)])\n    (first min_value)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "/tmp/tmpip0mu1fh.rkt:5:27: min-indexes: unbound identifier\n  in: min-indexes\n  location...:\n   /tmp/tmpip0mu1fh.rkt:5:27\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(null? test_list) min_index]\n          [(< min_value (second (car test_list))) (loop (cdr test_list) (add1 min_index) min_value)]\n          [else (loop (cdr test_list) min_index (second (car test_list)))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg909w5py.rkt:17:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg909w5py.rkt:18:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg909w5py.rkt:19:4\nactual:     0\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (filter (lambda (x) (= (second x) min_index)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:13:4\nactual:     '((\"Varsha\" 100))\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:14:4\nactual:     '((\"Dawood\" 125))\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8w8zbap.rkt:15:4\nactual:     '((\"Ayesha\" 96))\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let loop ([test_list test_list]\n             [min_index 0]\n             [min_value (second (car test_list))])\n    (cond [(empty? test_list) min_index]\n          [(< (second (car test_list)) min_value)\n           (loop (cdr test_list)\n                 (add1 min_index)\n                 (second (car test_list)))]\n          [else (loop (cdr test_list)\n                      min_index\n                      min_value)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54vojf0s.rkt:22:4\nactual:     1\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54vojf0s.rkt:23:4\nactual:     1\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54vojf0s.rkt:24:4\nactual:     2\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) '()]\n    [else (index_minimum_helper test_list (car test_list) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123584,
      "stdout": "",
      "stderr": "/tmp/tmpjnd1jin4.rkt:7:11: index_minimum_helper: unbound identifier\n  in: index_minimum_helper\n  location...:\n   /tmp/tmpjnd1jin4.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (let ([min_index (apply min (map second test_list))])\n    (first (filter (lambda (x) (= (second x) min_index)) test_list))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123581,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:13:4\nactual:     '(\"Varsha\" 100)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:14:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh7ig0or.rkt:15:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(null? test_list) #f]\n    [(null? (cdr test_list)) (car test_list)]\n    [(< (cadr (car test_list)) (cadr (cadr test_list))) (car test_list)]\n    [else (index_minimum (cdr test_list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcpcfgio_.rkt:16:4\nactual:     '(\"Rash\" 143)\nexpected:   \"Varsha\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcpcfgio_.rkt:17:4\nactual:     '(\"Dawood\" 125)\nexpected:   \"Dawood\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcpcfgio_.rkt:18:4\nactual:     '(\"Ayesha\" 96)\nexpected:   \"Ayesha\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else\n     (let* ([min_index (index_minimum (rest test_list))]\n            [min_value (if (empty? min_index) empty (list-ref (rest test_list) min_index))]\n            [current_value (list-ref (rest test_list) 0)])\n       (if (empty? min_index) 0\n           (if (< min_value current_value) min_index 0)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-equal? (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\")\n    (check-equal? (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\")\n    (check-equal? (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123585,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg5p2zca0.rkt:19:4\n\nlist-ref: index too large for list\n  index: 0\n  in: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg5p2zca0.rkt:20:4\n\nlist-ref: index too large for list\n  index: 0\n  in: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg5p2zca0.rkt:21:4\n\nlist-ref: index too large for list\n  index: 0\n  in: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}