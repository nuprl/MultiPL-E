{
  "name": "mbpp_394_check_distinct",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if given list contains no duplicates.\n(define (check_distinct test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_distinct))\n    (check-equal? (candidate (list 1 4 5 6 1 4)) #f)\n    (check-equal? (candidate (list 1 4 5 6)) #t)\n    (check-equal? (candidate (list 2 3 4 5 6)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([test_list (car test_tup)]\n        [expected (cadr test_tup)])\n    (equal? (distinct? test_list) expected)))\n",
    "  (let ([lst (car test_tup)]\n        [expected (cadr test_tup)])\n    (equal? expected (distinct? lst))))\n",
    "  (let ([test_list (car test_tup)]\n        [expected (cdr test_tup)])\n    (equal? expected (distinct? test_list))))\n",
    "  (let ([test_list (car test_tup)]\n        [expected (cadr test_tup)])\n    (equal? (distinct? test_list) expected)))\n",
    "  (let ([test_list (car test_tup)]\n        [expected_result (cadr test_tup)])\n    (equal? (distinct? test_list) expected_result)))\n",
    "  (cond\n    [(empty? test_tup) true]\n    [else\n     (and (not (member (first test_tup) (rest test_tup)))\n          (check_distinct (rest test_tup)))]))\n",
    "  (let ([test_list (car test_tup)])\n    (and (not (null? test_list))\n         (or (null? (cdr test_list))\n             (and (not (member (car test_list) (cdr test_list)))\n                  (check_distinct (cons (cdr test_list) '())))))))\n",
    "  (cond\n    [(empty? test_tup) true]\n    [(member (first test_tup) (rest test_tup)) false]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (let ((test_list (car test_tup))\n        (expected (cadr test_tup)))\n    (if (equal? (distinct? test_list) expected)\n        'pass\n        (string-append \"FAIL: \" (list->string test_list) \" should be \" (if expected 'distinct 'not-distinct)))))\n",
    "  (let ([lst (car test_tup)]\n        [expected (cadr test_tup)])\n    (equal? expected (distinct? lst))))\n",
    "  (let ([lst (car test_tup)]\n        [expected (cadr test_tup)])\n    (if (equal? (distinct? lst) expected)\n        'pass\n        (string-append \"FAIL: \" (list->string lst) \" should be \" (list->string expected)))))\n",
    "  (let ([lst (car test_tup)]\n        [expected (cadr test_tup)])\n    (equal? expected (distinct? lst))))\n",
    "  (let ([lst (car test_tup)]\n        [res (cadr test_tup)])\n    (equal? (distinct? lst) res)))\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (let ([lst (car test_tup)]\n        [expected (cadr test_tup)])\n    (if (equal? (distinct? lst) expected)\n        'pass\n        (format \"~a: expected ~a, got ~a\" lst expected (distinct? lst)))))\n",
    "  (define (check_distinct_iter test_tup)\n    (if (null? test_tup)\n        #t\n        (if (member (car test_tup) (cdr test_tup))\n            #f\n            (check_distinct_iter (cdr test_tup)))))\n  (check_distinct_iter test_tup))\n",
    "  (let ([test_list (car test_tup)])\n    (define (check_distinct_helper test_list)\n      (if (null? test_list)\n          #t\n          (if (member (car test_list) (cdr test_list))\n              #f\n              (check_distinct_helper (cdr test_list)))))\n    (check_distinct_helper test_list)))\n",
    "  (let ([test_list (car test_tup)]\n        [expected (cdr test_tup)])\n    (equal? expected (distinct? test_list))))\n",
    "  (let ([test_list (car test_tup)]\n        [expected (cdr test_tup)])\n    (equal? expected (distinct? test_list))))\n",
    "  (let loop ([lst (car test_tup)]\n             [acc (cdr test_tup)])\n    (cond [(null? lst) #t]\n          [(member (car lst) acc) #f]\n          [else (loop (cdr lst) (cons (car lst) acc))])))\n"
  ]
}