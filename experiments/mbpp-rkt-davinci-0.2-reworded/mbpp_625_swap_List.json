{
  "name": "mbpp_625_swap_List",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to interchange the first and last element in a given list.\n(define (swap_List newList)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate swap_List))\n    (check-equal? (candidate (list 1 2 3)) (list 3 2 1))\n    (check-equal? (candidate (list 1 2 3 4 4)) (list 4 2 3 4 1))\n    (check-equal? (candidate (list 4 5 6)) (list 6 5 4))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(null? newList) '()]\n    [else (append (cdr (reverse newList)) (list (car newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [(empty? (rest newList)) newList]\n    [else (append (list (last newList)) (butlast newList) (list (first newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [else (append (rest (reverse newList)) (list (first newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [(= (length newList) 1) newList]\n    [else (append (rest (reverse newList)) (list (first newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [(empty? (rest newList)) newList]\n    [else (append (rest newList) (list (first newList)))]))\n",
    "  (cond\n    [(null? newList) '()]\n    [(null? (cdr newList)) newList]\n    [else (append (cdr newList) (list (car newList)))]))\n",
    "  (if (null? newList)\n      '()\n      (append (cdr (reverse newList)) (list (car (reverse newList))))))\n",
    "  (cond\n    [(empty? newList) empty]\n    [(empty? (rest newList)) newList]\n    [else (append (rest newList) (list (first newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [(empty? (rest newList)) newList]\n    [else (append (list (last newList)) (butlast (rest newList)) (list (first newList)))]))\n",
    "  (if (null? newList)\n      '()\n      (append (cdr (reverse newList)) (list (car (reverse newList))))))\n",
    "  (cond\n    [(empty? newList) empty]\n    [else (append (rest (reverse newList)) (list (first newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [(empty? (rest newList)) newList]\n    [else (append (list (last newList)) (rest (butlast newList)) (list (first newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [(= (length newList) 1) newList]\n    [else (append (list (last newList)) (butlast newList) (list (first newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [else\n     (append (rest (reverse newList)) (list (first newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [(empty? (rest newList)) newList]\n    [else (append (rest newList) (list (first newList)))]))\n",
    "  (cond\n    [(empty? newList) empty]\n    [else (append (rest (reverse newList)) (list (first newList)))]))\n",
    "  (cond\n    [(null? newList) '()]\n    [(null? (cdr newList)) newList]\n    [else (append (cdr (cdr newList)) (list (car newList)) (list (car (cdr newList))))]))\n",
    "  (if (null? newList)\n      '()\n      (append (cdr (reverse newList)) (list (car (reverse newList))))))\n",
    "  (cond\n    [(null? newList) '()]\n    [(null? (cdr newList)) newList]\n    [else (append (cdr (reverse newList)) (list (car (reverse newList))))]))\n",
    "  (cond\n    [(null? newList) empty]\n    [(null? (cdr newList)) newList]\n    [else (append (cdr (cdr newList)) (list (car newList)) (list (car (cdr newList))))]))\n"
  ]
}