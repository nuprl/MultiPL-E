{
  "name": "mbpp_57_find_Max_Num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the largest number that can be formed with the given list of digits.\n(define (find_Max_Num arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Max_Num))\n    (check-equal? (candidate (list 1 2 3)) 321)\n    (check-equal? (candidate (list 4 5 6 1)) 6541)\n    (check-equal? (candidate (list 1 2 3 9)) 9321)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (let ([curr (car arr)])\n          (if (&gt; curr max)\n              (find_Max_Num_Helper (cdr arr) curr)\n              (find_Max_Num_Helper (cdr arr) max)))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [else (find_Max_Num_helper (rest arr) (max acc (first arr)))]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr result)\n    (if (empty? arr)\n        result\n        (let ([max (max (first arr) result)])\n          (find_Max_Num_helper (rest arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (first arr) acc) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) acc)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (apply max (list->string arr)))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        0\n        (let* ([first (car arr)]\n               [rest (cdr arr)]\n               [max (helper rest)])\n          (if (> first max)\n              first\n              max))))\n  (helper arr))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(null? arr) max]\n      [(> (car arr) max) (find_Max_Num_helper (cdr arr) (car arr))]\n      [else (find_Max_Num_helper (cdr arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([new-acc (if (> (string->number (number->string acc)) (string->number (number->string (car arr))))\n                           acc\n                           (car arr))])\n          (find_Max_Num_helper (cdr arr) new-acc))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (let ([num (string->number (list->string (reverse arr)))])\n          (if (&gt; num max)\n              (find_Max_Num_Helper (cdr arr) num)\n              (find_Max_Num_Helper (cdr arr) max)))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (let ([arr (sort arr <)])\n    (apply string->number (apply string-append (reverse arr)))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (let ((curr (car arr)))\n          (if (&gt; curr max)\n              (find_Max_Num_helper (cdr arr) curr)\n              (find_Max_Num_helper (cdr arr) max)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (> (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr))) '())))\n  (apply string (helper arr)))\n",
    "  (define (find_Max_Num_helper arr max_num)\n    (cond\n      [(empty? arr) max_num]\n      [(> (first arr) max_num) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max_num)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (cond\n    [(null? arr) 0]\n    [(= (length arr) 1) (car arr)]\n    [else (max (car arr) (find_Max_Num (cdr arr)))]))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([curr (car arr)])\n          (if (&gt; curr acc)\n              (find_Max_Num_helper (cdr arr) curr)\n              (find_Max_Num_helper (cdr arr) acc)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (helper arr)\n    (cond\n      [(empty? arr) '()]\n      [(= (length arr) 1) (list (first arr))]\n      [else (append (helper (rest arr)) (list (first arr)))]))\n  (string->number (list->string (helper (sort arr <)))))\n",
    "  (define (helper arr max)\n    (if (null? arr)\n        max\n        (let* ([num (string->number (list->string arr))]\n               [new-max (if (&gt; num max) num max)])\n          (helper (cdr arr) new-max))))\n  (helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond [(empty? arr) max]\n          [(> (first arr) max) (find_Max_Num_Helper (rest arr) (first arr))]\n          [else (find_Max_Num_Helper (rest arr) max)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply max (map number->string arr)))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (first arr) (first acc)) (helper (rest arr) (cons (first arr) (rest acc)))]\n      [else (helper (rest arr) acc)]))\n  (apply string->number (list->string (helper arr (list (first arr))))))\n",
    "  (define (helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (first arr) (first acc)) (helper (rest arr) (cons (first arr) (rest acc)))]\n      [else (helper (rest arr) acc)]))\n  (helper arr (list (first arr))))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr))) '())))\n  (apply string (helper arr)))\n",
    "  (sort arr >))\n",
    "  (define (helper arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (append (helper (cdr arr)) (list (car arr)))]))\n  (define (helper2 arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (append (helper2 (cdr arr)) (list (car arr)))]))\n  (define (helper3 arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (append (helper3 (cdr arr)) (list (car arr)))]))\n  (define (helper4 arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (append (helper4 (cdr arr)) (list (car arr)))]))\n  (define (helper5 arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (append (helper5 (cdr arr)) (list (car arr)))]))\n  (define (helper6 arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (append (helper6 (cdr arr)) (list (car arr)))]))\n  (define (helper7 arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (append (helper7 (cdr arr)) (list (car arr)))]))\n  (define (helper8 arr)\n    (cond\n      [(null? arr) '()]\n      [(null? (cdr arr)) (list (car arr))]\n      [else (append (helper8 (cdr arr)) (list (car arr)))]))\n ",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (string->number (list->string arr)) acc)])\n          (find_Max_Num_helper (rest arr) max))))\n  (find_Max_Num_helper (sort arr <) 0))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr)))) (helper (cdr arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (apply max (list->string (map number->string arr))))\n",
    "  (define (helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (helper (cdr arr) (car arr))\n            (helper (cdr arr) max))))\n  (helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr))) '())))\n  (apply string (helper arr)))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (sort_arr arr)\n    (cond [(empty? arr) empty]\n          [else (insert (first arr) (sort_arr (rest arr)))]))\n  (define (insert num arr)\n    (cond [(empty? arr) (list num)]\n          [(> num (first arr)) (cons num arr)]\n          [else (cons (first arr) (insert num (rest arr)))]))\n  (define (to_num arr)\n    (cond [(empty? arr) 0]\n          [else (+ (* 10 (to_num (rest arr))) (first arr))]))\n  (to_num (sort_arr arr)))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (> (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond\n      [(empty? arr) max]\n      [else (find_Max_Num_Helper (rest arr) (max (first arr) max))]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (if (null? arr)\n      0\n      (let ([max (find_Max_Num (cdr arr))])\n        (if (&gt; (car arr) max)\n            (car arr)\n            max))))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([num (string->number (list->string (reverse (sort arr <))))])\n          (if (> num acc)\n              (find_Max_Num_Helper (cdr arr) num)\n              (find_Max_Num_Helper (cdr arr) acc)))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (helper arr acc)\n    (cond [(empty? arr) acc]\n          [else (helper (rest arr) (string-append acc (number->string (first arr))))]))\n  (string->number (helper arr \"\")))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr)\n    (cond [(empty? arr) empty]\n          [(empty? (rest arr)) arr]\n          [(> (first arr) (first (rest arr))) (cons (first arr) (find_Max_Num_Helper (rest arr)))]\n          [else (cons (first (rest arr)) (find_Max_Num_Helper (cons (first arr) (rest (rest arr)))))]))\n  (list->number (find_Max_Num_Helper arr)))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (let ([curr (car arr)])\n          (if (> curr max)\n              (find_Max_Num_Helper (cdr arr) curr)\n              (find_Max_Num_Helper (cdr arr) max)))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply max (list->string (map number->string arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (> (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(null? arr) max]\n      [(> (car arr) max) (find_Max_Num_helper (cdr arr) (car arr))]\n      [else (find_Max_Num_helper (cdr arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (cons (first arr) (find_Max_Num_helper (rest arr)))]))\n  (list->number (find_Max_Num_helper (sort arr >))))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr)\n    (cond [(empty? arr) empty]\n          [(empty? (rest arr)) (list (first arr))]\n          [else (append (list (first arr)) (find_Max_Num_Helper (rest arr)))]))\n  (apply string->number (apply string-append (find_Max_Num_Helper arr))))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (find_Max_Num_Helper arr result)\n    (if (null? arr)\n        result\n        (let ([max (max (car arr) (car result))])\n          (if (= max (car arr))\n              (find_Max_Num_Helper (cdr arr) (cons max (cdr result)))\n              (find_Max_Num_Helper (cdr arr) (cons (car arr) (cdr result)))))))\n  (find_Max_Num_Helper arr (list (car arr))))\n",
    "  (define (find_Max_Num_helper arr i max)\n    (if (= i (length arr))\n        max\n        (if (&gt; (list-ref arr i) max)\n            (find_Max_Num_helper arr (+ i 1) (list-ref arr i))\n            (find_Max_Num_helper arr (+ i 1) max))))\n  (find_Max_Num_helper arr 0 (list-ref arr 0)))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr)))) (helper (cdr arr)))))\n  (string->number (list->string (helper arr))))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([num (string->number (string-append acc (number->string (car arr))))])\n          (if (&gt; num (string->number acc))\n              (helper (cdr arr) (number->string num))\n              (helper (cdr arr) acc)))))\n  (helper arr (number->string (car arr))))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([num (string->number (string-append acc (number->string (car arr))))])\n          (if (> num (string->number acc))\n              (helper (cdr arr) (number->string num))\n              (helper (cdr arr) acc)))))\n  (helper arr \"\"))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (apply max arr) (helper (remove (apply max arr) arr)))))\n  (apply string->number (list->string (reverse (helper arr)))))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr)))) (helper (cdr arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        arr\n        (let ([max (apply max arr)])\n          (cons max (helper (remove max arr))))))\n  (apply string->number (reverse (helper arr))))\n",
    "  (define (helper arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper (rest arr)) (list (first arr)))]))\n  (define (helper2 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper2 (rest arr)) (list (first arr)))]))\n  (define (helper3 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper3 (rest arr)) (list (first arr)))]))\n  (define (helper4 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper4 (rest arr)) (list (first arr)))]))\n  (define (helper5 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper5 (rest arr)) (list (first arr)))]))\n  (define (helper6 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper6 (rest arr)) (list (first arr)))]))\n  (define (helper7 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper7 (rest arr)) (list (first arr)))]))\n  (define (helper8 arr)\n    (cond\n      [(empty? arr) empty]\n      [(empty? (rest arr)) (list (first arr))]\n      [else (append (helper8 (rest arr)) (list (first arr)))]))\n  (define (helper9 arr)\n    (cond\n      [(empty? arr) empty]\n      [(",
    "  (apply max (permutations arr)))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply max (list->string (map number->string arr))))\n",
    "  (apply max (map number->string arr)))\n",
    "  (sort arr >))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([num (string->number (list->string (list-ref arr 0)))])\n          (if (> num acc)\n              (find_Max_Num_helper (cdr arr) num)\n              (find_Max_Num_helper (cdr arr) acc)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr result)\n    (if (null? arr)\n        result\n        (let ([max (apply max (map (lambda (x) (string->number (list->string x))) (permutations arr)))]\n              [new-result (if (&gt; max result) max result)])\n          (find_Max_Num_Helper (cdr arr) new-result))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply max (list->string (map number->string arr))))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (helper (cdr arr) (string-append (number->string (car arr)) acc))))\n  (string->number (helper arr \"\")))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (find_Max_Num_helper arr i max)\n    (cond\n      [(= i (length arr)) max]\n      [(> (list-ref arr i) max) (find_Max_Num_helper arr (+ i 1) (list-ref arr i))]\n      [else (find_Max_Num_helper arr (+ i 1) max)]))\n  (find_Max_Num_helper arr 0 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max)]))\n  (find_Max_Num_Helper arr (first arr)))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_Helper (rest arr) (first arr))]\n      [else (find_Max_Num_Helper (rest arr) max)]))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr max)\n    (cond ((null? arr) max)\n          ((> (car arr) max) (helper (cdr arr) (car arr)))\n          (else (helper (cdr arr) max))))\n  (helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (apply max (map number->string arr)))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (car arr) (car acc))])\n          (if (= max (car arr))\n              (helper (cdr arr) (cons max acc))\n              (helper (cdr arr) (cons (car arr) (cdr acc)))))))\n  (apply string->number (reverse (helper arr '()))))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (find_Max_Num_helper arr)\n    (cond\n      [(empty? arr) empty]\n      [(= (length arr) 1) (list (first arr))]\n      [else (cons (first arr) (find_Max_Num_helper (rest arr)))]))\n  (define (find_Max_Num_helper2 arr)\n    (cond\n      [(empty? arr) empty]\n      [(= (length arr) 1) (list (first arr))]\n      [else (append (find_Max_Num_helper2 (rest arr)) (list (first arr)))]))\n  (define (find_Max_Num_helper3 arr)\n    (cond\n      [(empty? arr) empty]\n      [(= (length arr) 1) (list (first arr))]\n      [else (append (list (first arr)) (find_Max_Num_helper3 (rest arr)))]))\n  (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (list (first arr))]\n    [else (max (find_Max_Num_helper arr) (max (find_Max_Num_helper2 arr) (find_Max_Num_helper3 arr)))]))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (cond\n      [(null? arr) acc]\n      [(> (car arr) acc) (find_Max_Num_helper (cdr arr) (car arr))]\n      [else (find_Max_Num_helper (cdr arr) acc)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (> (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (apply max (list->string (map number->string arr))))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond [(empty? arr) max]\n          [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n          [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (list->string (map number->string arr))))\n",
    "  (cond [(empty? arr) 0]\n        [else (max (find_Max_Num (rest arr))\n                   (number->string (list->number arr)))]))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let* ([max (max (car arr) acc)]\n               [new-arr (remove (car arr) arr)])\n          (find_Max_Num_helper new-arr max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (cond [(empty? arr) acc]\n          [(> (first arr) (first acc)) (find_Max_Num_Helper (rest arr) (cons (first arr) (rest acc)))]\n          [else (find_Max_Num_Helper (rest arr) acc)]))\n  (find_Max_Num_Helper arr (list (first arr))))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (if (null? arr)\n        acc\n        (find_Max_Num_Helper (cdr arr) (if (> (car arr) acc) (car arr) acc))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (cond\n      [(empty? arr) empty]\n      [(< (first arr) (second arr)) (cons (second arr) (helper (rest arr)))]\n      [else (cons (first arr) (helper (rest arr)))]))\n  (apply string->number (list->string (helper arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (> (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (cadr arr)) (helper (cdr arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (let ([curr (car arr)])\n          (if (&gt; curr max)\n              (find_Max_Num_helper (cdr arr) curr)\n              (find_Max_Num_helper (cdr arr) max)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (list->string (apply string-append (map number->string arr)))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (helper arr)\n    (cond [(null? arr) '()]\n          [else (cons (max (car arr) (car (helper (cdr arr))))\n                      (helper (cdr arr)))]))\n  (apply string->number (list->string (helper arr))))\n",
    "  (apply max (map number->string arr)))\n",
    "  (apply max (map number->string arr)))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (empty? arr)\n        max\n        (let ([curr (car arr)])\n          (if (&gt; curr max)\n              (find_Max_Num_Helper (cdr arr) curr)\n              (find_Max_Num_Helper (cdr arr) max)))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond [(empty? arr) max]\n          [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n          [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max-num (string->number (string-append (number->string (car arr)) (number->string acc)))]\n              [max-num2 (string->number (string-append (number->string acc) (number->string (car arr))))])\n          (if (> max-num max-num2)\n              (find_Max_Num_helper (cdr arr) max-num)\n              (find_Max_Num_helper (cdr arr) max-num2)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr i max)\n    (cond [(= i (length arr)) max]\n          [else (if (> (list-ref arr i) max)\n                   (find_Max_Num_helper arr (+ i 1) (list-ref arr i))\n                   (find_Max_Num_helper arr (+ i 1) max))]))\n  (find_Max_Num_helper arr 0 0))\n",
    "  (sort arr &gt;))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (apply max (map (lambda (x) (string->number x)) (permutations arr)))\n              (helper (cdr arr)))))\n  (apply max (helper arr)))\n",
    "  (let ([arr (sort arr <)])\n    (apply string->number (apply string-append (reverse arr)))))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (number->string (car arr)) acc)])\n          (find_Max_Num_Helper (cdr arr) max))))\n  (string->number (find_Max_Num_Helper arr \"0\")))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (apply max (map number->string arr)))\n",
    "  (apply max (map (lambda (x) (string->number x)) (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond [(empty? arr) max]\n          [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n          [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr (first arr)))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr result)\n    (if (null? arr)\n        result\n        (let* ([max (apply max arr)]\n               [index (list-index max arr)])\n          (find_Max_Num_helper (remove-at index arr) (string-append result (number->string max))))))\n  (find_Max_Num_helper arr \"\"))\n",
    "  (apply max (map number->string arr)))\n",
    "  (apply max (map number->string (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (let ([curr (car arr)])\n          (if (&gt; curr max)\n              (find_Max_Num_helper (cdr arr) curr)\n              (find_Max_Num_helper (cdr arr) max)))))\n  (find_Max_Num_helper arr 0))\n",
    "  (apply max (list->string (map number->string arr))))\n",
    "  (apply max (map (lambda (x) (string->number (list->string x))) (permutations arr))))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (apply max (list->string arr)))\n",
    "  (define (helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([max (max (car arr) (car acc))])\n          (helper (cdr arr) (cons max (cdr acc))))))\n  (apply string->number (list->string (reverse (helper arr '())))))\n",
    "  (define (find_Max_Num_helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([new-acc (string->number (string-append acc (number->string (car arr))))])\n          (if (> new-acc acc)\n              (find_Max_Num_helper (cdr arr) new-acc)\n              (find_Max_Num_helper (cdr arr) acc)))))\n  (find_Max_Num_helper arr \"0\"))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_Iter arr max)\n    (cond ((null? arr) max)\n          ((> (car arr) max) (find_Max_Num_Iter (cdr arr) (car arr)))\n          (else (find_Max_Num_Iter (cdr arr) max))))\n  (find_Max_Num_Iter arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr)))\n              (helper (cdr arr)))))\n  (apply string (helper arr)))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (helper (cdr arr))) '())))\n  (apply string (helper arr)))\n",
    "  (apply max (map string->number (permutations arr))))\n",
    "  (define (find_Max_Num_helper arr result)\n    (cond\n      [(empty? arr) result]\n      [(> (first arr) (first result)) (find_Max_Num_helper (rest arr) (cons (first arr) result))]\n      [else (find_Max_Num_helper (rest arr) result)]))\n  (find_Max_Num_helper arr (list (first arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_helper (cdr arr) (car arr))\n            (find_Max_Num_helper (cdr arr) max))))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (define (find_Max_Num_Helper arr acc)\n    (if (null? arr)\n        acc\n        (let ([new-acc (string->number (string-append acc (number->string (car arr))))])\n          (if (> new-acc acc)\n              (find_Max_Num_Helper (cdr arr) new-acc)\n              (find_Max_Num_Helper (cdr arr) acc)))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (define (helper arr)\n    (if (null? arr)\n        '()\n        (cons (max (car arr) (car (helper (cdr arr))))\n              (helper (cdr arr)))))\n  (apply string->number (list->string (helper arr))))\n",
    "  (define (find_Max_Num_helper arr max)\n    (cond\n      [(empty? arr) max]\n      [(> (first arr) max) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (find_Max_Num_helper arr max_num)\n    (cond\n      [(empty? arr) max_num]\n      [(> (first arr) max_num) (find_Max_Num_helper (rest arr) (first arr))]\n      [else (find_Max_Num_helper (rest arr) max_num)]))\n  (find_Max_Num_helper arr 0))\n",
    "  (define (helper arr)\n    (cond [(empty? arr) empty]\n          [else (cons (apply max (map (lambda (x) (string->number x)) (permutations arr)))\n                      (helper (remove (apply max (map (lambda (x) (string->number x)) (permutations arr))) arr)))]))\n  (list->string (apply string-append (reverse (helper arr)))))\n",
    "  (define (find_Max_Num_Helper arr)\n    (if (null? arr)\n        '()\n        (append (find_Max_Num_Helper (cdr arr))\n                (list (car arr)))))\n  (apply string->number (list->string (find_Max_Num_Helper arr))))\n",
    "  (cond [(empty? arr) 0]\n        [else (max (find_Max_Num (rest arr)) (apply max (map (lambda (x) (string->number (list->string x))) (permutations arr))))]))\n",
    "  (define (find_Max_Num_Helper arr max)\n    (if (null? arr)\n        max\n        (if (&gt; (car arr) max)\n            (find_Max_Num_Helper (cdr arr) (car arr))\n            (find_Max_Num_Helper (cdr arr) max))))\n  (find_Max_Num_Helper arr 0))\n",
    "  (apply max (map string->number (permutations arr))))\n"
  ]
}