{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that checks if a strings contains 'z', except at the start and end of the word.\n(define (text_match_wordz_middle text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_wordz_middle))\n    (check-equal? (candidate \"pythonzabc.\") #t)\n    (check-equal? (candidate \"zxyabc.\") #f)\n    (check-equal? (candidate \"  lang  .\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (first text) \"z\") #f]\n    [(string=? (last text) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"(^z|z$|z)\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match? #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) #\\z) false]\n    [(equal? (last text) #\\z) false]\n    [(member (first text) '(#\\z #\\Z)) true]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") #f]\n    [(string=? (substring text -1) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (define (text_match_wordz_middle_iter text)\n    (cond\n      [(empty? text) #f]\n      [(and (char=? (first text) #\\z)\n            (not (or (empty? (rest text))\n                     (char=? (first (rest text)) #\\z)))) #t]\n      [else (text_match_wordz_middle_iter (rest text))]))\n  (text_match_wordz_middle_iter text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (define (text_match_wordz_middle_iter text)\n    (cond ((null? text) #f)\n          ((and (equal? (car text) #\\z) (not (equal? (cadr text) #\\z))) #t)\n          (else (text_match_wordz_middle_iter (cdr text)))))\n  (text_match_wordz_middle_iter text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(and (char=? (first text) #\\z) (not (empty? (rest text)))) #t]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) #\\z) false]\n    [(equal? (last text) #\\z) false]\n    [else (or (equal? (first text) #\\z) (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(char=? (first text) #\\z) #f]\n    [(char=? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) (text_match_wordz_middle (rest text))]\n    [(equal? (last text) #\\z) (text_match_wordz_middle (butlast text))]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'z') (text_match_wordz_middle (rest text))]\n    [(equal? (last text) 'z') (text_match_wordz_middle (butlast text))]\n    [else (or (string-contains text \"z\") #f)]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) #\\z) false]\n    [(equal? (last text) #\\z) false]\n    [else (or (equal? (first text) #\\z) (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (define (match-wordz-middle text)\n    (if (empty? text)\n        #f\n        (if (equal? (first text) 'z')\n            (if (equal? (second text) 'z')\n                (match-wordz-middle (rest (rest text)))\n                (if (empty? (rest text))\n                    #f\n                    (match-wordz-middle (rest text))))\n            (match-wordz-middle (rest text)))))\n  (match-wordz-middle (string->list text)))\n",
    "  (cond\n    [(empty? text) false]\n    [(string=? (substring text 0 1) \"z\") false]\n    [(string=? (substring text -1) \"z\") false]\n    [(string=? (substring text 0 1) \"z\") true]\n    [else (text_match_wordz_middle (substring text 1))]))\n",
    "  (regexp-match? #rx\"(?&lt;!^)z(?!$)\" text))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"\\bz\\b\" text))\n",
    "  (regexp-match? (regexp \"^[^z]*z[^z]*$\") text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match? #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) #\\z) false]\n    [(equal? (last text) #\\z) false]\n    [(regexp-match #rx\"z\" text) true]\n    [else false]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (if (string-contains text #\\z)\n      (if (string-contains text #\\z)\n          (if (string-contains text #\\z)\n              (if (string-contains text #\\z)\n                  (if (string-contains text #\\z)\n                      (if (string-contains text #\\z)\n                          (if (string-contains text #\\z)\n                              (if (string-contains text #\\z)\n                                  (if (string-contains text #\\z)\n                                      (if (string-contains text #\\z)\n                                          (if (string-contains text #\\z)\n                                              (if (string-contains text #\\z)\n                                                  (if (string-contains text #\\z)\n                                                      (if (string-contains text #\\z)\n                                                          (if (string-contains text #\\z)\n                                                              (if (string-contains text #\\z)\n                                                                  (if (string-contains text #\\z)\n                                                                      (if (string-contains text #\\z)\n                                                                          (if (string-contains text #\\z)\n                                                                              (if (string-contains text #\\z)\n                                                                                  (if (string-contains text #\\z)\n                                                                                      (if (string-contains text #\\z)\n                                                                                          (if (string-contains text #\\z)\n                                                                                              (if (string-contains text #\\z)\n                                                                                                  (if (string-contains text #\\z)\n                                                                                                      (if (string-contains text #\\z)\n                                                                                                          (if (string-contains text #\\z)\n                                                                                                              (if (string-contains text #\\z)\n                                                                                                                  (if (string-contains text #\\z)\n                                                                                                                      (if (string-contains text #\\z)\n                                                                                                                ",
    "  (regexp-match? #rx\"(^[^z]*z[^z]*$)\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(char=? (first text) #\\z) #f]\n    [(char=? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") #f]\n    [(string=? (substring text -1) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (string-match \"\\\\(^[^z]*\\\\)z\\\\([^z]*$\\\\)\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match? #rx\"^[^z]*z[^z]*$\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"(^[^z]*z[^z]*$)\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? \"z\" (first text)) #t]\n    [(string=? \"z\" (last text)) #t]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (string-contains text #\\z))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'z') #f]\n    [(equal? (last text) 'z') #f]\n    [(regexp-match? #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z) (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) #\\z) false]\n    [(equal? (last text) #\\z) false]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (first text) \"z\") #f]\n    [(string=? (last text) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z) (text_match_wordz_middle (rest text)))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (match text\n    [(list) #f]\n    [(list (? #\\z) rest ...) #f]\n    [(list first (? #\\z) rest ...) #f]\n    [(list first rest ... (? #\\z)) #f]\n    [(list first rest ...)\n     (or (text_match_wordz_middle rest)\n         (text_match_wordz_middle (list first)))]))\n",
    "  (string-contains text #\\z))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (define (match-wordz-middle text)\n    (if (empty? text)\n        #f\n        (if (and (equal? (first text) #\\z)\n                 (not (equal? (first (rest text)) #\\z))\n                 (not (equal? (first (rest (rest text))) #\\z)))\n            #t\n            (match-wordz-middle (rest text)))))\n  (match-wordz-middle text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (let ([len (string-length text)])\n    (and (not (string=? \"z\" (substring text 0 1)))\n         (not (string=? \"z\" (substring text (- len 1) len)))\n         (regexp-match? #rx\"z\" text))))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(char=? (first text) #\\z) (text_match_wordz_middle (rest text))]\n    [(char=? (last text) #\\z) (text_match_wordz_middle (butlast text))]\n    [else (or (string-contains text #\\z) #f)]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") #f]\n    [(string=? (substring text -1) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (define (match-wordz-middle text)\n    (cond\n      [(empty? text) #f]\n      [(char=? (first text) #\\z) #t]\n      [else (match-wordz-middle (rest text))]))\n  (match-wordz-middle (rest (butlast text))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z) (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\bz\\b\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") #f]\n    [(string=? (substring text -1) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"\\bz\\b\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (and (string-contains text #\\z)\n       (not (string-contains (substring text 1 (- (string-length text) 1)) #\\z))))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"(^[^z]*z[^z]*$)\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (and (regexp-match #rx\"z\" text)\n       (not (regexp-match #rx\"^z\" text))\n       (not (regexp-match #rx\"z$\" text))))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match? #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 1 (sub1 (string-length text))) \"z\") #t]\n    [else (text_match_wordz_middle (substring text 1 (string-length text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (define (match-wordz-middle text)\n    (cond\n      [(empty? text) #f]\n      [(string=? (first text) \"z\") #t]\n      [else (match-wordz-middle (rest text))]))\n  (and (not (string=? (first text) \"z\"))\n       (not (string=? (last text) \"z\"))\n       (match-wordz-middle text)))\n",
    "  (cond\n    [(empty? text) false]\n    [(string=? (first text) \"z\") false]\n    [(string=? (last text) \"z\") false]\n    [(string-contains text \"z\") true]\n    [else false]))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) false]\n    [(string=? (substring text 0 1) \"z\") false]\n    [(string=? (substring text -1) \"z\") false]\n    [(string-contains text \"z\") true]\n    [else false]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (define (match-wordz-middle text)\n    (cond\n      [(empty? text) #f]\n      [(char=? (first text) #\\z) #t]\n      [else (match-wordz-middle (rest text))]))\n  (match-wordz-middle (rest (butlast text))))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(char=? (first text) #\\z) #f]\n    [(char=? (last text) #\\z) #f]\n    [else (or (char=? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (define (helper text start)\n    (if (string=? text \"\")\n        #f\n        (if (string=? (substring text start (+ start 1)) \"z\")\n            (if (string=? (substring text start (+ start 2)) \"z\")\n                #f\n                (if (string=? (substring text start (+ start 3)) \"z\")\n                    #f\n                    #t))\n            (helper (substring text (+ start 1)) (+ start 1)))))\n  (helper text 0))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (let ([len (string-length text)])\n    (and (not (string=? (substring text 0 1) \"z\"))\n         (not (string=? (substring text (- len 1) len) \"z\"))\n         (regexp-match? #rx\"z\" text))))\n",
    "  (regexp-match? #rx\"^[^z].*z.*[^z]$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"\\w*z\\w*\" text))\n",
    "  (define (match-wordz-middle text)\n    (cond\n      [(empty? text) #f]\n      [(equal? (first text) #\\z) #t]\n      [else (match-wordz-middle (rest text))]))\n  (and (not (empty? text))\n       (not (equal? (first text) #\\z))\n       (not (equal? (last text) #\\z))\n       (match-wordz-middle text)))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (cond\n    [(string-contains text #\\z)\n     (cond\n       [(string-contains text #\\z)\n        (cond\n          [(string-contains text #\\z)\n           (cond\n             [(string-contains text #\\z)\n              (cond\n                [(string-contains text #\\z)\n                 (cond\n                   [(string-contains text #\\z)\n                    (cond\n                      [(string-contains text #\\z)\n                       (cond\n                         [(string-contains text #\\z)\n                          (cond\n                            [(string-contains text #\\z)\n                             (cond\n                               [(string-contains text #\\z)\n                                (cond\n                                  [(string-contains text #\\z)\n                                   (cond\n                                     [(string-contains text #\\z)\n                                      (cond\n                                        [(string-contains text #\\z)\n                                         (cond\n                                           [(string-contains text #\\z)\n                                            (cond\n                                              [(string-contains text #\\z)\n                                               (cond\n                                                 [(string-contains text #\\z)\n                                                  (cond\n                                                    [(string-contains text #\\z)\n                                                     (cond\n                                                       [(string-contains text #\\z)\n                                                        (cond\n                                                          [(string-contains text #\\z)\n                                                           (cond\n                                                             [(string-contains text #\\z)\n                                                              (cond\n                                                                [(string-contains text #\\z)\n                                                                 (cond\n                                                                   [(string-contains text #\\z)\n                                                                    (cond\n                                                                      [(string-contains text #\\z)\n                                                                       (cond\n                                                                         [(string-contains text #\\z)\n                                                                          (cond\n                                                                            [(string-contains text #\\z)\n                                                                             (cond\n                                                                               [(string-contains text #\\z)\n                                                                                (cond\n                                                                                  [(string",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) #\\z) false]\n    [(equal? (last text) #\\z) false]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (and (regexp-match #rx\"z\" text)\n       (not (regexp-match #rx\"^z\" text))\n       (not (regexp-match #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'z') (text_match_wordz_middle (rest text))]\n    [(equal? (last text) 'z') (text_match_wordz_middle (butlast text))]\n    [else (or (equal? (first text) 'z') (equal? (last text) 'z'))]))\n",
    "  (define (text_match_wordz_middle_iter text)\n    (cond\n      [(empty? text) #f]\n      [(char=? (first text) #\\z) #t]\n      [else (text_match_wordz_middle_iter (rest text))]))\n  (and (not (empty? text))\n       (not (char=? (first text) #\\z))\n       (not (char=? (last text) #\\z))\n       (text_match_wordz_middle_iter text)))\n"
  ]
}