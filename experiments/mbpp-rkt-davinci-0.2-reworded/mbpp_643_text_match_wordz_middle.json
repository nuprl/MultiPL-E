{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that checks if a strings contains 'z', except at the start and end of the word.\n(define (text_match_wordz_middle text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_wordz_middle))\n    (check-equal? (candidate \"pythonzabc.\") #t)\n    (check-equal? (candidate \"zxyabc.\") #f)\n    (check-equal? (candidate \"  lang  .\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-match? #rx\"z\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [else (or (equal? (first text) #\\z)\n              (text_match_wordz_middle (rest text)))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (first text) \"z\") #f]\n    [(string=? (last text) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (regexp-match? #rx\"(^z|z$|z)\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") (text_match_wordz_middle (substring text 1))]\n    [(string=? (substring text -1) \"z\") (text_match_wordz_middle (substring text 0 -1))]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) #\\z) #f]\n    [(equal? (last text) #\\z) #f]\n    [(regexp-match? #rx\"z\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) #\\z) false]\n    [(equal? (last text) #\\z) false]\n    [(member (first text) '(#\\z #\\Z)) true]\n    [else (text_match_wordz_middle (rest text))]))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? (substring text 0 1) \"z\") #f]\n    [(string=? (substring text -1) \"z\") #f]\n    [(string-contains text \"z\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"\\Bz\\B\" text))\n",
    "  (regexp-match? #rx\"z\" text))\n",
    "  (define (text_match_wordz_middle_iter text)\n    (cond\n      [(empty? text) #f]\n      [(and (char=? (first text) #\\z)\n            (not (or (empty? (rest text))\n                     (char=? (first (rest text)) #\\z)))) #t]\n      [else (text_match_wordz_middle_iter (rest text))]))\n  (text_match_wordz_middle_iter text))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (and (regexp-match? #rx\"z\" text)\n       (not (regexp-match? #rx\"^z\" text))\n       (not (regexp-match? #rx\"z$\" text))))\n",
    "  (regexp-match? #rx\"^[^z]*z[^z]*$\" text))\n"
  ]
}