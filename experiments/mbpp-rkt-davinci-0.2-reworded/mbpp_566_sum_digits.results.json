{
  "name": "mbpp_566_sum_digits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10)\n             (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (modulo n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (&lt; n 10)\n      n\n      (+ (modulo n 10) (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510612,
      "stdout": "",
      "stderr": "/tmp/tmpvjdmk2lz.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond ((= n 0) 0)\n        (else (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond ((= n 0) 0)\n        (else (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (= n 0)\n      0\n      (+ (modulo n 10) (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond ((= n 0) 0)\n        (else (+ (remainder n 10)\n                 (sum_digits (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond ((= n 0) 0)\n        (else (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (modulo n 10) (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond ((= n 0) 0)\n        (else (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (= n 0)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond ((= n 0) 0)\n        (else (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10) (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (= n 0)\n      0\n      (+ (remainder n 10) (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (= n 0)\n      0\n      (+ (modulo n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10)\n             (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond ((= n 0) 0)\n        (else (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (modulo n 10) (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10) (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond ((= n 0) 0)\n        (else (+ (modulo n 10) (sum_digits (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1665510614,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (zero? n)\n      0\n      (+ (remainder n 10)\n         (sum_digits (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (cond [(zero? n) 0]\n        [else (+ (remainder n 10)\n                 (sum_digits (quotient n 10)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
      "timestamp": 1666123823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}