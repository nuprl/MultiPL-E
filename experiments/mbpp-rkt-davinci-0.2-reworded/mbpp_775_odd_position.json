{
  "name": "mbpp_775_odd_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether every odd index contains odd numbers of a given list.\n(define (odd_position nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_position))\n    (check-equal? (candidate (list 2 1 4 3 6 7 6 3)) #t)\n    (check-equal? (candidate (list 4 1 2)) #t)\n    (check-equal? (candidate (list 1 2 3)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums))\n     (odd_position (rest nums))]\n    [else false]))\n",
    "  (if (null? nums)\n      #t\n      (if (odd? (car nums))\n          (if (odd? (cadr nums))\n              (odd_position (cdr (cdr nums)))\n              #f)\n          (odd_position (cdr (cdr nums))))))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(odd? (first nums)) (odd_position (rest nums))]\n    [else false]))\n"
  ]
}