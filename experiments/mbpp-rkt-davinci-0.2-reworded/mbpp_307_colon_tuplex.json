{
  "name": "mbpp_307_colon_tuplex",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to get a colon of a list.\n(define (colon_tuplex tuplex m n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_307_colon_tuplex.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate colon_tuplex))\n    (check-equal? (candidate (list \"HELLO\" 5 (list ) #t) 2 50) (list \"HELLO\" 5 (list 50) #t))\n    (check-equal? (candidate (list \"HELLO\" 5 (list ) #t) 2 100) (list \"HELLO\" 5 (list 100) #t))\n    (check-equal? (candidate (list \"HELLO\" 5 (list ) #t) 2 500) (list \"HELLO\" 5 (list 500) #t))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond ((= m n) (list (list_ref tuplex m)))\n        (else (cons (list_ref tuplex m) (colon_tuplex tuplex (+ m 1) n)))))\n",
    "  (if (or (&lt; m 0) (&lt; n 0) (&gt; m (length tuplex)) (&gt; n (length tuplex)))\n      '()\n      (if (&lt; m n)\n          (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))\n          (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n)))))\n",
    "  (if (= m n)\n      (list (list-ref tuplex m))\n      (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))))\n",
    "  (cond\n    [(= m n) (list (list-ref tuplex m))]\n    [else (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))]))\n",
    "  (if (or (&lt; m 0) (&lt; n 0))\n      '()\n      (list (list-ref tuplex m) (list-ref tuplex n))))\n",
    "  (if (= m n)\n      (list (list-ref tuplex m))\n      (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))))\n",
    "  (if (or (= m 0) (= n 0))\n      '()\n      (cons (list-ref tuplex m)\n            (colon_tuplex tuplex (+ m 1) (- n 1)))))\n",
    "  (cond\n    [(empty? tuplex) empty]\n    [(= m n) (cons (first tuplex) empty)]\n    [else (cons (first tuplex) (colon_tuplex (rest tuplex) (+ m 1) n))]))\n",
    "  (if (= m n)\n      (list (list-ref tuplex m))\n      (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n))))\n",
    "  (if (or (= m 0) (= n 0))\n      '()\n      (cons (list-ref tuplex m)\n            (colon_tuplex tuplex (- m 1) (- n 1)))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (>= m 0) (>= n 0))\n          (if (and (< m (length tuplex)) (< n (length tuplex)))\n              (if (<= m n)\n                  (list-ref tuplex m)\n                  (list-ref tuplex n))\n              (error \"Index out of range\"))\n          (error \"Index must be non-negative\"))\n      (error \"Index must be an integer\")))\n",
    "  (if (or (< m 0) (< n 0))\n      (error \"Negative index\")\n      (if (= m 0)\n          (list (list-ref tuplex n))\n          (cons (list-ref tuplex n) (colon_tuplex tuplex (- m 1) (- n 1))))))\n",
    "  (cond\n    [(empty? tuplex) empty]\n    [(= m n) (cons (first tuplex) empty)]\n    [else (cons (first tuplex) (colon_tuplex (rest tuplex) (+ m 1) n))]))\n",
    "  (if (or (= m 0) (= n 0))\n      '()\n      (cons (list-ref tuplex m) (colon_tuplex tuplex (- m 1) (- n 1)))))\n",
    "  (if (or (= m 0) (= n 0))\n      '()\n      (cons (list-ref tuplex m) (colon_tuplex tuplex (- m 1) (- n 1)))))\n",
    "  (if (or (&lt; m 0) (&lt; n 0))\n      '()\n      (if (= m n)\n          (list (list-ref tuplex m))\n          (cons (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n)))))\n",
    "  (if (or (&lt; m 0) (&lt; n 0))\n      '()\n      (if (&gt; m n)\n          '()\n          (list (list-ref tuplex m) (colon_tuplex tuplex (+ m 1) n)))))\n",
    "  (if (or (= m 0) (= n 0))\n      '()\n      (cons (list-ref tuplex m)\n            (colon_tuplex tuplex (- m 1) (- n 1)))))\n",
    "  (if (or (= m 0) (= n 0))\n      '()\n      (cons (list-ref tuplex m)\n            (colon_tuplex tuplex (- m 1) (- n 1)))))\n",
    "  (cond\n    [(empty? tuplex) empty]\n    [(= m 0) (cons (first tuplex) (colon_tuplex (rest tuplex) m (- n 1)))]\n    [else (colon_tuplex (rest tuplex) (- m 1) (- n 1))]))\n"
  ]
}