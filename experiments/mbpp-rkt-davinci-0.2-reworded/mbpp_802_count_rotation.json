{
  "name": "mbpp_802_count_rotation",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\n(define (count_rotation arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_rotation))\n    (check-equal? (candidate (list 3 2 1)) 1)\n    (check-equal? (candidate (list 4 5 1 2 3)) 2)\n    (check-equal? (candidate (list 7 8 9 1 2 3)) 3)\n    (check-equal? (candidate (list 1 2 3)) 0)\n    (check-equal? (candidate (list 1 3 2)) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ((low 0) (high (sub1 (vector-length arr))) (mid (quotient (add1 (vector-length arr)) 2)))\n    (cond\n      [(= low high) mid]\n      [(> (vector-ref arr mid) (vector-ref arr high)) (loop mid high (quotient (add mid high) 2))]\n      [(< (vector-ref arr mid) (vector-ref arr high)) (loop low mid (quotient (add low mid) 2))])))\n",
    "  (define (count_rotation_helper arr low high)\n    (cond\n      [(> low high) 0]\n      [(< (vector-ref arr low) (vector-ref arr high)) (count_rotation_helper arr (+ low 1) high)]\n      [(> (vector-ref arr low) (vector-ref arr high)) (count_rotation_helper arr low (- high 1))]\n      [else (count_rotation_helper arr (+ low 1) (- high 1))]))\n  (count_rotation_helper arr 0 (- (vector-length arr) 1)))\n",
    "  (define (count_rotation_helper arr low high)\n    (cond\n      [(= low high) low]\n      [(= (add1 low) high) (if (&lt; (vector-ref arr low) (vector-ref arr high)) low high)]\n      [else\n       (let* ([mid (quotient (+ low high) 2)]\n              [next (add1 mid)]\n              [prev (sub1 mid)])\n         (cond\n           [(and (&lt; (vector-ref arr mid) (vector-ref arr next)) (&lt; (vector-ref arr mid) (vector-ref arr prev))) mid]\n           [(and (&lt; (vector-ref arr low) (vector-ref arr mid)) (&lt; (vector-ref arr mid) (vector-ref arr high))) (count_rotation_helper arr mid high)]\n           [(and (&lt; (vector-ref arr high) (vector-ref arr mid)) (&lt; (vector-ref arr mid) (vector-ref arr low))) (count_rotation_helper arr low mid)]\n           [else (count_rotation_helper arr low high)]))]))\n  (count_rotation_helper arr 0 (sub1 (vector-length arr))))\n",
    "  (define (count_rotation_helper arr low high)\n    (if (or (= low high) (= (add1 low) high))\n        0\n        (let ([mid (quotient (+ low high) 2)])\n          (if (and (&lt; (vector-ref arr mid) (vector-ref arr high))\n                   (&lt; (vector-ref arr mid) (vector-ref arr low)))\n              (count_rotation_helper arr low mid)\n              (count_rotation_helper arr mid high)))))\n  (count_rotation_helper arr 0 (sub1 (vector-length arr))))\n",
    "  (define (rotation_count arr low high)\n    (if (equal? low high)\n        low\n        (let ([mid (quotient (+ low high) 2)])\n          (if (and (< (vector-ref arr mid) (vector-ref arr (+ mid 1)))\n                   (< (vector-ref arr mid) (vector-ref arr high)))\n              (rotation_count arr (+ mid 1) high)\n              (rotation_count arr low mid)))))\n  (rotation_count arr 0 (- (vector-length arr) 1)))\n",
    "  (define (count_rotation_helper arr start end)\n    (cond\n      [(= start end) start]\n      [(< (vector-ref arr start) (vector-ref arr (+ start 1))) (count_rotation_helper arr (+ start 1) end)]\n      [else start]))\n  (count_rotation_helper arr 0 (vector-length arr)))\n",
    "  (define (count_rotation_helper arr low high)\n    (if (or (= low high) (= (add1 low) high))\n        low\n        (let ([mid (quotient (+ low high) 2)])\n          (if (< (vector-ref arr mid) (vector-ref arr high))\n              (count_rotation_helper arr low mid)\n              (count_rotation_helper arr (add1 mid) high)))))\n  (count_rotation_helper arr 0 (sub1 (vector-length arr))))\n",
    "  (define (count_rotation_helper arr i)\n    (cond\n      [(empty? arr) i]\n      [(< (first arr) (second arr)) i]\n      [else (count_rotation_helper (rest arr) (+ i 1))]))\n  (count_rotation_helper arr 0))\n",
    "  (define (count_rotation_helper arr i)\n    (cond\n      [(= i (length arr)) 0]\n      [(< (vector-ref arr i) (vector-ref arr (+ i 1))) (count_rotation_helper arr (+ i 1))]\n      [else i]))\n  (count_rotation_helper arr 0))\n",
    "  (define (count_rotation_helper arr low high)\n    (cond [(= low high) low]\n          [(< (vector-ref arr low) (vector-ref arr high)) (+ low (count_rotation_helper arr (+ low 1) high))]\n          [(> (vector-ref arr low) (vector-ref arr high)) (+ (count_rotation_helper arr low (- high 1)) 1)]))\n  (count_rotation_helper arr 0 (- (vector-length arr) 1)))\n",
    "  (define (count_rotation_helper arr lo hi)\n    (cond [(= lo hi) lo]\n          [(= (vector-ref arr lo) (vector-ref arr hi)) lo]\n          [(> (vector-ref arr lo) (vector-ref arr hi)) (count_rotation_helper arr lo (- hi 1))]\n          [else (count_rotation_helper arr (+ lo 1) hi)]))\n  (count_rotation_helper arr 0 (- (vector-length arr) 1)))\n",
    "  (define (count_rotation_helper arr start end)\n    (cond\n      [(= start end) start]\n      [(< (vector-ref arr start) (vector-ref arr (+ start 1))) (count_rotation_helper arr (+ start 1) end)]\n      [else start]))\n  (count_rotation_helper arr 0 (- (vector-length arr) 1)))\n",
    "  (define (count_rotation_helper arr start end)\n    (cond\n      [(= start end) start]\n      [(> (vector-ref arr start) (vector-ref arr (+ start 1))) start]\n      [else (count_rotation_helper arr (+ start 1) end)]))\n  (count_rotation_helper arr 0 (- (vector-length arr) 1)))\n",
    "  (define (count_rotation_helper arr low high)\n    (cond\n      [(= low high) low]\n      [(= (add1 low) high) (if (&lt; (vector-ref arr low) (vector-ref arr high)) low high)]\n      [else\n       (let* ([mid (quotient (+ low high) 2)]\n              [next (add1 mid)]\n              [prev (sub1 mid)])\n         (cond\n           [(and (&lt; (vector-ref arr mid) (vector-ref arr next)) (&lt; (vector-ref arr mid) (vector-ref arr prev))) mid]\n           [(and (&lt; (vector-ref arr low) (vector-ref arr mid)) (&lt; (vector-ref arr mid) (vector-ref arr high))) high]\n           [else (count_rotation_helper arr low mid)]))]))\n  (count_rotation_helper arr 0 (sub1 (vector-length arr))))\n</code>\n",
    "  (define (count_rotation_helper arr i)\n    (if (and (not (null? (cdr arr)))\n             (not (null? (cddr arr))))\n        (if (&lt; (car arr) (cadr arr))\n            (count_rotation_helper (cdr arr) (+ i 1))\n            (if (&lt; (cadr arr) (caddr arr))\n                (+ i 1)\n                i))\n        i))\n  (count_rotation_helper arr 0))\n</code>\nI have a feeling that this is not the most elegant solution. I'm looking for a more elegant solution.\n\n\nA:\n\nI think this is a bit more elegant:\n<code>(define (count-rotations lst)\n  (let loop ([lst lst] [i 0])\n    (if (null? lst)\n        i\n        (if (&lt; (car lst) (cadr lst))\n            (loop (cdr lst) (+ i 1))\n            i))))\n</code>\n",
    "  (define (count_rotation_helper arr low high)\n    (if (or (= low high) (= (add1 low) high))\n        0\n        (let ([mid (quotient (+ low high) 2)])\n          (if (< (vector-ref arr mid) (vector-ref arr high))\n              (count_rotation_helper arr low mid)\n              (count_rotation_helper arr (add1 mid) high)))))\n  (count_rotation_helper arr 0 (sub1 (vector-length arr))))\n",
    "  (define (count_rotation_helper arr i)\n    (cond [(= i (length arr)) 0]\n          [(< (list-ref arr i) (list-ref arr (+ i 1))) (count_rotation_helper arr (+ i 1))]\n          [else i]))\n  (count_rotation_helper arr 0))\n",
    "  (define (count_rotation_helper arr low high)\n    (cond\n      [(= low high) low]\n      [(= (add1 low) high)\n       (if (&lt; (vector-ref arr low) (vector-ref arr high))\n           low\n           high)]\n      [else\n       (define mid (quotient (+ low high) 2))\n       (cond\n         [(&lt; (vector-ref arr mid) (vector-ref arr high))\n          (count_rotation_helper arr low mid)]\n         [else\n          (count_rotation_helper arr (add1 mid) high)])]))\n  (count_rotation_helper arr 0 (sub1 (vector-length arr))))\n",
    "  (define (count-rotation-helper arr low high)\n    (if (> low high)\n        (error \"Array is not rotated\")\n        (if (= low high)\n            low\n            (let* ([mid (quotient (+ low high) 2)]\n                   [next (modulo (+ mid 1) (length arr))]\n                   [prev (modulo (- mid 1) (length arr))])\n              (if (and (< (vector-ref arr mid) (vector-ref arr next))\n                       (< (vector-ref arr mid) (vector-ref arr prev)))\n                  mid\n                  (if (< (vector-ref arr mid) (vector-ref arr high))\n                      (count-rotation-helper arr low mid)\n                      (count-rotation-helper arr (modulo (+ mid 1) (length arr)) high)))))))\n  (count-rotation-helper arr 0 (- (length arr) 1)))\n",
    "  (define (rotation-count arr low high)\n    (if (or (= low high) (= (vector-ref arr low) (vector-ref arr high)))\n        low\n        (let* ([mid (quotient (+ low high) 2)]\n               [next (add1 mid)]\n               [prev (sub1 mid)])\n          (if (and (< (vector-ref arr mid) (vector-ref arr next))\n                   (< (vector-ref arr mid) (vector-ref arr prev)))\n              mid\n              (if (< (vector-ref arr mid) (vector-ref arr high))\n                  (rotation-count arr low mid)\n                  (rotation-count arr mid high))))))\n  (rotation-count arr 0 (sub1 (vector-length arr))))\n"
  ]
}