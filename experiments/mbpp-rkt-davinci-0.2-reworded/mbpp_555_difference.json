{
  "name": "mbpp_555_difference",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n(define (difference n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate difference))\n    (check-equal? (candidate 3) 30)\n    (check-equal? (candidate 5) 210)\n    (check-equal? (candidate 2) 6)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-cubes n) (sum-of-n n))))\n",
    "  (sum-of-cubes n) - (sum n))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2)) (* (+ n 1) (/ n 2) n)))\n",
    "  (letrec ([sum-cubes (lambda (n)\n                        (if (= n 0)\n                            0\n                            (+ (expt n 3) (sum-cubes (- n 1)))))])\n    (- (sum-cubes n) (* n n))))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ n 2) n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2)) (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (- (sum-of-cubes n) (* n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2)) (* (+ n 1) (/ n 2) n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (sum n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ((sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1))))))\n           (sum-of-n (lambda (n)\n                       (if (= n 1)\n                           1\n                           (+ n (sum-of-n (- n 1)))))))\n    (- (sum-of-cubes n) (sum-of-n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-cubes (lambda (n)\n                        (if (= n 0)\n                            0\n                            (+ (expt n 3) (sum-cubes (- n 1)))))])\n    (- (sum-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3)\n                                  (sum-of-cubes (- n 1)))))])\n    (- (expt n 2)\n       (sum-of-cubes n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-n n) sum-of-cubes)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (abs (- (sum-of-cubes n) (sum-of-n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (expt n (+ n 1) (* n 2)) (sum-of-cubes n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range n)])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ n 2) n)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (= i n)\n        (- (* i i i) sum)\n        (loop (+ i 1) (+ sum (* i i i))))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (expt n (+ n 1) (* n 2)) (sum-of-cubes n))))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes (* sum-of-numbers sum-of-numbers))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n (+ n 1) (/ n 2)))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range n)])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (expt n (+ n 1) (/ (+ n 1) 2)) (sum-of-cubes n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum n) sum-of-cubes)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes (* sum-of-numbers sum-of-numbers))))\n",
    "  (let loop ((n n) (sum 0))\n    (if (= n 0)\n        sum\n        (loop (- n 1) (+ sum (* n n n))))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (expt n (+ n 1) (* n 2)) (sum-of-cubes n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (let* ([sum-of-cubes (sum-of-cubes n)]\n         [sum-of-nums (sum-of-nums n)])\n    (- sum-of-cubes sum-of-nums)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (expt n (+ n 1) (/ (+ n 1) 2)) (sum-of-cubes n))))\n",
    "  (let loop ([i 1] [sum1 0] [sum2 0])\n    (if (= i n)\n        (- (* sum1 sum1 sum1) (* sum2 sum2))\n        (loop (+ i 1) (+ sum1 i) (+ sum2 (* i i i))))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range n)])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n (+ n 1) (/ n 2)))))\n",
    "  (define (sum-of-cubes n)\n    (cond ((= n 1) 1)\n          (else (+ (* n n n) (sum-of-cubes (- n 1))))))\n  (define (sum-of-n n)\n    (cond ((= n 1) 1)\n          (else (+ n (sum-of-n (- n 1))))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let* ([sum-of-cubes (sum-of-cubes n)]\n         [sum-of-numbers (sum-of-numbers n)])\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-n (sum-of-n n)])\n    (- sum-of-cubes sum-of-n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range n)])\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n (+ n 1) (/ n 2)))))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let* ((sum-of-cubes (sum-of-cubes n))\n         (sum-of-numbers (sum-of-numbers n)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (- (sum-of-cubes n) (sum n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (sum-of-cubes n) - (sum-of-n n))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range n)])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum n) sum-of-cubes)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (expt n (+ n 1) (/ (+ n 1) 2)) (sum-of-cubes n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (abs (- (sum-of-cubes n) (sum-of-n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n (+ n 1) (/ n 2)))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-squares 0)\n        (sum-of-cubes 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-squares (+ sum-of-squares (* i i)))\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i))))\n    (- sum-of-squares sum-of-cubes)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum n) sum-of-cubes)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3)\n                                  (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n)\n       (* n (+ n 1) (/ n 2)))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (expt n (+ n 1) (* n 2)) (sum-of-cubes n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (expt n (+ n 1) (/ (+ n 1) 2)) (sum-of-cubes n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3)\n                                  (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n)\n       (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (expt n (+ n 1) (/ (* n (+ n 1)) 2)) (sum-of-cubes n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n"
  ]
}