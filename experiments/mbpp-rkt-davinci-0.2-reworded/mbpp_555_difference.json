{
  "name": "mbpp_555_difference",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n(define (difference n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate difference))\n    (check-equal? (candidate 3) 30)\n    (check-equal? (candidate 5) 210)\n    (check-equal? (candidate 2) 6)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-cubes n) (sum-of-n n))))\n",
    "  (sum-of-cubes n) - (sum n))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2)) (* (+ n 1) (/ n 2) n)))\n",
    "  (letrec ([sum-cubes (lambda (n)\n                        (if (= n 0)\n                            0\n                            (+ (expt n 3) (sum-cubes (- n 1)))))])\n    (- (sum-cubes n) (* n n))))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ n 2) n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2)) (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (- (sum-of-cubes n) (* n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2)) (* (+ n 1) (/ n 2) n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n"
  ]
}