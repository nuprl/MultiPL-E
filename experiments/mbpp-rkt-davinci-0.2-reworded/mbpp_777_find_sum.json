{
  "name": "mbpp_777_find_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-equal? (candidate (list 1 2 3 1 1 4 5 6)) 21)\n    (check-equal? (candidate (list 1 10 9 4 2 10 10 45 4)) 71)\n    (check-equal? (candidate (list 12 10 9 45 2 10 10 45 10)) 78)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (define (find_sum_helper arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(member (first arr) (rest arr)) (find_sum_helper (rest arr) acc)]\n      [else (find_sum_helper (rest arr) (+ acc (first arr)))]))\n  (find_sum_helper arr 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(null? arr) 0]\n    [(member (car arr) (cdr arr)) (find_sum (cdr arr))]\n    [else (+ (car arr) (find_sum (cdr arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (cond\n       [(member (first arr) (rest arr)) (find_sum (rest arr))]\n       [else (+ (first arr) (find_sum (rest arr)))]\n       )\n     ]\n    )\n  )\n",
    "  (cond [(empty? arr) 0]\n        [(member (first arr) (rest arr)) (find_sum (rest arr))]\n        [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(member (first arr) (rest arr)) (find_sum (rest arr))]\n    [else (+ (first arr) (find_sum (rest arr)))]))\n"
  ]
}